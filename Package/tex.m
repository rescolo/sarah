(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)




Options[MakeTeX]={FeynmanDiagrams \[Rule]True, 
      effectiveOperators\[Rule]False, SixParticleInteractions\[Rule]False, 
      ShortForm\[Rule]False, WriteSARAH\[Rule]False, 
      IncludeVertices\[Rule]True};

MakeTeX[opt___ ]:=
    MakeTeXOutput[effectiveOperators/.{opt}/.Options[MakeTeX],
      SixParticleInteractions/.{opt}/.Options[MakeTeX],
      FeynmanDiagrams/.{opt}/.Options[MakeTeX],
      ShortForm/.{opt}/.Options[MakeTeX],WriteSARAH/.{opt}/.Options[MakeTeX], 
      IncludeVertices/.{opt}/.Options[MakeTeX]];


MakeTeXOutput[effectiveOperators_,SixParticleInteractions_,FeynmanDiagrams_,
      Short_,WriteSARAH_, IncludeVert_]:=Block[{},
      
      If[FreeQ[NameOfStates,InitalizedVertexCalculaton]\[Equal]True && 
            IncludeVert\[Equal]True,
          Print["No Output initialized"];
          Print["Run First ModelOutput[Eigenstates]"];
          Print["No Output created!"];,
          
          MAXTEXLENGTH=120;
          
          WithDiagramm = FeynmanDiagrams;
          CreateTeXForm;
          
          If[FileExistsQ[$sarahCurrentTeXDir]=!=True,
            CreateDirectory[$sarahCurrentTeXDir];
            ];
          If[FileExistsQ[$sarahDiagrams]=!=True,
            CreateDirectory[$sarahDiagrams];
            ];
          
          FirstLevel=True;
          
          WriteTeXBasis[WriteSARAH,effectiveOperators,
            SixParticleInteractions];
          WriteSF;
          WriteParticleList;
          maxNumberSymbols=14;
          
          WriteVEVDecomp;
          WriteFlavorDecomp;
          
          WriteMatrices;
          
          WriteTadpoleEquations;
          
          maxNumberSymbols=16;
          If[RGEsCalculated===True,
            WriteRGEs;,
            Message[TeXOutput::NoRGEs];
            ];
          
          
          If[FreeQ[NameOfStates,CalculatedLoopCorrections]\[Equal]True,
            Message[TeXOutput::NoLoops];,
            MAXTEXLENGTH=125;
            WriteSelfEnergy;
            ];
          
          MAXTEXLENGTH=110;
          
          If[IncludeVert\[Equal]True,
            
            WriteVerticesTeX[effectiveOperators,SixParticleInteractions,
                Short];
            ];
          
          If[WriteSARAH \[Equal]True,
            TeXforSARAH;
            ];
          
          Print[""];
          Print["Done. Output is in ", $sarahCurrentTeXDir];
          
          Print["Use Script MakePDF.sh (Linux) or MakePDF.bat (Windows) to generate pdf file."]\
;
          ];
      
      ];



(* TeXOutput[x_]:=If[Head[x]===Times,
        Return[
            StringReplace[
              ToString[TeXTimes[x /. conj[y_] y_ \[Rule] abs[y] ]],
              StringReplaceFinal]];,
        Return[
            StringReplace[ToString[TeXForm[x /. conj[y_] y_ \[Rule] abs[y] ]],
              StringReplaceFinal]];
        ]; *)

TeXOutput[x_]:=
    StringReplace[ToString[TeXForm[x /. conj[y_] y_ \[Rule] abs[y] ]],
      StringReplaceFinal];

TeXOutput2[x_]:=ToString[TeXForm[x /. conj[y_] y_ \[Rule] abs[y]]];
TeXOutputRGEs[x_]:=TeXOutput[x];

WriteRGEs :=Block[{},
      RGEsFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"rges.tex"]];
      
      Print["Writing RGEs to TeX-File"]; 
      
      If[Length[Gij3I]>2,
        GijW=Gij3I;
        TraceAbbrW = TraceAbbr3I;
        BetaYijkW = BetaYijk3I;
        BetaMuijW = BetaMuij3I;
        BetaLiW = BetaLi3I;
        BetaTijkW = BetaTijk3I;
        BetaBijW = BetaBij3I;
        BetaLSiW = BetaLSi3I;
        Betam2ijW = Betam2ij3I;
        BetaMiW = BetaMi3I;
        BetaGaugeW=BetaGauge3I;
        BetaVEVW = BetaVEV3I;,
        GijW=Gij;
        TraceAbbrW = TraceAbbr;
        BetaYijkW = BetaYijk;
        BetaMuijW = BetaMuij;
        BetaLiW = BetaLi;
        BetaTijkW = BetaTijk;
        BetaBijW = BetaBij;
        BetaLSiW = BetaLSi;
        Betam2ijW = Betam2ij;
        BetaMiW = BetaMi;
        BetaGaugeW=BetaGauge;
        BetaVEVW = BetaVEV;
        ];
      
      
      If[Length[Gij]>0,
        WriteString[RGEsFile,"\\subsection{Anomalous Dimensions}\n"];
        WriteTeXGammaFunction[GijW];
        ];
      
      If[Length[BetaGauge]>0,
        WriteString[RGEsFile,"\\subsection{Gauge Couplings}\n"];
        WriteTeXBetaFunction[BetaGaugeW];
        ];
      
      If[Length[BetaMi]>0,
        WriteString[RGEsFile,"\\subsection{Gaugino Mass Parameters}\n"];
        WriteTeXBetaFunction[BetaMiW];
        ];
      
      If[Length[BetaYijk]>0,
        WriteString[RGEsFile,
          "\\subsection{Trilinear Superpotential Parameters}\n"];
        WriteTeXBetaFunction[BetaYijkW];
        ];
      
      If[Length[BetaMuij]>0,
        WriteString[RGEsFile,
          "\\subsection{Bilinear Superpotential Parameters}\n"];
        WriteTeXBetaFunction[BetaMuijW];
        ];
      
      If[Length[BetaLi]>0,
        WriteString[RGEsFile,
          "\\subsection{Linear Superpotential Parameters}\n"];
        WriteTeXBetaFunction[BetaLiW];
        ];
      
      If[Length[BetaTijk]>0,
        WriteString[RGEsFile,
          "\\subsection{Trilinear Soft-Breaking Parameters}\n"];
        WriteTeXBetaFunction[BetaTijkW];
        ];
      
      If[Length[BetaBij]>0,
        WriteString[RGEsFile,
          "\\subsection{Bilinear Soft-Breaking Parameters}\n"];
        WriteTeXBetaFunction[BetaBijW];
        ];
      
      If[Length[BetaLSi]>0,
        WriteString[RGEsFile,
          "\\subsection{Linear Soft-Breaking Parameters}\n"];
        WriteTeXBetaFunction[BetaLSiW];
        ];
      
      If[Length[Betam2ij]>0,
        WriteString[RGEsFile,"\\subsection{Soft-Breaking Scalar Masses}\n"];
        
        tempSpuren = Flatten[TraceAbbrW,1];
        maxNumberSymbols=13;
        WriteString[RGEsFile,"\\begin{align} \n"];
        For[i=1,i\[LessEqual]Length[tempSpuren],
          
          WriteString[RGEsFile,
            TeXOutputRGEs[tempSpuren[[i,1]]]<>" & = "<> 
              TeXOutputRGEs[tempSpuren[[i,2]]] ];
          
          If[i< Length[tempSpuren],WriteString[RGEsFile,"\\\\ \n"];,
            WriteString[RGEsFile,"\n"]];
          i++;];
        WriteString[RGEsFile,"\\end{align} \n"];
        maxNumberSymbols=16;
        WriteTeXBetaFunction[Betam2ijW];
        ];
      
      
      Close[RGEsFile];
      ];

WriteTeXBetaFunction[list_]:=Block[{i,tempList},
      tempList = list;
      
      WriteString[RGEsFile,"{\\allowdisplaybreaks  \\begin{align} \n"];
      For[i=1,i\[LessEqual]Length[tempList],
        WriteString[RGEsFile,
          "\\beta_{"<>TeXOutputRGEs[tempList[[i,1]]/. a_[i1,i2]\[Rule]a]<>
            "}^{(1)} & =  \n"];
        (* WriteString[RGEsFile,
              TeXOutputRGEs[
                Expand[tempList[[i,2]]]/. Kronecker[i1,i2]\[Rule]UnitM /. 
                  a_[i1,i2]\[Rule]a]]; *)
        
        WriteString[RGEsFile,
          TeXOutputRGEs[
            tempList[[i,2]]/. Kronecker[i1,i2]\[Rule]UnitM /. 
              a_[i1,i2]\[Rule]a]];
        WriteString[RGEsFile,"\\\\ \n"];
        WriteString[RGEsFile,
          "\\beta_{"<>TeXOutputRGEs[
              tempList[[i,1]]/. Kronecker[i1,i2]\[Rule]UnitM /. 
                a_[i1,i2]\[Rule]a]<>"}^{(2)} & =  \n"];
        If[i<Length[tempList],
          (* 
            WriteString[RGEsFile,
                TeXOutputRGEs[
                    Expand[tempList[[i,3]]]/. Kronecker[i1,i2]\[Rule]UnitM /. 
                      a_[i1,i2]\[Rule]a] <>"\\\\ \n"];,
            
            WriteString[RGEsFile,
                TeXOutputRGEs[
                    Expand[tempList[[i,3]]]/. Kronecker[i1,i2]\[Rule]UnitM /. 
                      a_[i1,i2]\[Rule]a] <>"\n"]; *)
          
          WriteString[RGEsFile,
              TeXOutputRGEs[
                  tempList[[i,3]]/. Kronecker[i1,i2]\[Rule]UnitM /. 
                    a_[i1,i2]\[Rule]a] <>"\\\\ \n"];,
          
          WriteString[RGEsFile,
              TeXOutputRGEs[
                  tempList[[i,3]]/. Kronecker[i1,i2]\[Rule]UnitM /. 
                    a_[i1,i2]\[Rule]a] <>"\n"];
          
          ];
        i++;];
      WriteString[RGEsFile,"\\end{align}} \n"];
      ];

WriteTeXGammaFunction[list_]:=Block[{i,tempList},
      
      tempList = list;
      
      WriteString[RGEsFile,"{\\allowdisplaybreaks \\begin{align} \n"];
      For[i=1,i\[LessEqual]Length[tempList],
        If[getBlankSF[tempList[[i,1,1]]]===getBlankSF[tempList[[i,1,2]]],
          
          WriteString[RGEsFile,
              "\\gamma_{"<>TeXOutputRGEs[
                  SF[getSF[getBlankSF[tempList[[i,1,1]]]]]]<>
                "}^{(1)} & =  \n"];,
          
          WriteString[RGEsFile,
              "\\gamma_{"<>TeXOutputRGEs[
                  SF[getSF[getBlankSF[tempList[[i,1,1]]]]]]<>","<>
                TeXOutputRGEs[SF[getSF[getBlankSF[tempList[[i,1,2]]]]]]<>
                "}^{(1)} & =  \n"];
          ];
        WriteString[RGEsFile,
          TeXOutputRGEs[
            tempList[[i,2]] /. Kronecker[i1,i2]\[Rule]UnitM /. 
              a_[i1,i2]\[Rule]a]];
        WriteString[RGEsFile,"\\\\ \n"];
        If[getBlankSF[tempList[[i,1,1]]]===getBlankSF[tempList[[i,1,2]]],
          
          WriteString[RGEsFile,
              "\\gamma_{"<>TeXOutputRGEs[
                  SF[getSF[getBlankSF[tempList[[i,1,1]]]]]]<>
                "}^{(2)} & =  \n"];,
          
          WriteString[RGEsFile,
              "\\gamma_{"<>TeXOutputRGEs[
                  SF[getSF[getBlankSF[tempList[[i,1,1]]]]]]<>","<>
                TeXOutputRGEs[SF[getSF[getBlankSF[tempList[[i,1,2]]]]]]<>
                "}^{(2)} & =  \n"];
          ];
        If[i<Length[tempList],
          
          WriteString[RGEsFile,
              TeXOutputRGEs[
                  tempList[[i,3]] /. Kronecker[i1,i2]\[Rule]UnitM /. 
                    a_[i1,i2]\[Rule]a] <>"\\\\ \n"];,
          
          WriteString[RGEsFile,
              TeXOutputRGEs[
                  tempList[[i,3]] /. Kronecker[i1,i2]\[Rule]UnitM /. 
                    a_[i1,i2]\[Rule]a] <>"\n"];
          
          ];
        i++;];
       WriteString[RGEsFile,"\\end{align} } \n"];
      ];

WriteVerticesTeX[effectiveOperators_,SixParticleInteractions_,Short_] :=
    Block[{i},
      Print["Writing Vertices to TeX-File"];
      
      diaNr=0;
      ShortFormVertex=Short;
      
      VertexSSS = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSS.tex"]];
      VertexSSV = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSV.tex"]];
      VertexSVV = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSVV.tex"]];
      VertexFFV = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFV.tex"]];
      VertexFFS = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFS.tex"]];
      VertexSSSS = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSSS.tex"]];
      VertexSSVV = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSVV.tex"]];
      VertexVVV = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesVVV.tex"]];
      VertexVVVV = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesVVVV.tex"]];
      VertexGGV = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesGGV.tex"]];
      VertexGGS = 
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesGGS.tex"]];
      
      If[ShortFormVertex===True,
        WriteString[VertexSSS,"\\begin{align} \n"];
        WriteString[VertexSSV,"\\begin{align} \n"];
        WriteString[VertexSVV,"\\begin{align} \n"];
        WriteString[VertexFFV,"\\begin{align} \n"];
        WriteString[VertexFFS,"\\begin{align} \n"];
        WriteString[VertexSSSS,"\\begin{align} \n"];
        WriteString[VertexSSVV,"\\begin{align} \n"];
        WriteString[VertexVVV,"\\begin{align} \n"];
        WriteString[VertexVVVV,"\\begin{align} \n"];
        WriteString[VertexGGV,"\\begin{align} \n"];
        WriteString[VertexGGS,"\\begin{align} \n"];
        ];
      
      If[effectiveOperators\[Equal]True,
        VertexFFFF = 
          OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFFF.tex"]];
        VertexFFSS = 
          OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFSS.tex"]];
        VertexFFVV = 
          OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFVV.tex"]];
        
        If[ShortFormVertex===True,
          WriteString[VertexFFFF,"\\begin{align} \n"];
          WriteString[VertexFFSS,"\\begin{align} \n"];
          WriteString[VertexFFVV,"\\begin{align} \n"];
          ];
        
        If[SixParticleInteractions\[Equal]True,
          
          VertexSSSSSS = 
            OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSSSSS.tex"]];
          VertexSSSSVV = 
            OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSSSVV.tex"]];
          
          VertexSSVVVV= 
            OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSVVVV.tex"]];
          If[ShortFormVertex===True,
            WriteString[VertexSSSSSS,"\\begin{align} \n"];
            WriteString[VertexSSSSVV,"\\begin{align} \n"];
            WriteString[VertexSSVVVV,"\\begin{align} \n"];
            ];
          ];
        ];
      
      
      
      For[i=1,i\[LessEqual]Length[VertexListNonCC],
        WriteVertex[VertexListNonCC[[i,1]],VertexListNonCC[[i,2]]];
        i++;];
      
      
      If[effectiveOperators\[Equal]True,
        If[ShortFormVertex===True,
          WriteString[VertexFFFF,"\\end{align} \n"];
          WriteString[VertexFFSS,"\\end{align} \n"];
          WriteString[VertexFFVV,"\\end{align} \n"];
          ];
        Close[VertexFFFF]; Close[VertexFFSS];Close[VertexFFVV]; 
        If[SixParticleInteractions\[Equal]True,
          If[ShortFormVertex===True,
            WriteString[VertexSSSSSS,"\\end{align} \n"];
            WriteString[VertexSSSSVV,"\\end{align} \n"];
            WriteString[VertexSSVVVV,"\\end{align} \n"];
            ];
          Close[VertexSSSSSS]; Close[VertexSSSSVV]; Close[VertexSSVVVV];
          ];
        ];
      
      
      If[ShortFormVertex===True,
        WriteString[VertexSSS,"\\end{align} \n"];
        WriteString[VertexSSV,"\\end{align} \n"];
        WriteString[VertexSVV,"\\end{align} \n"];
        WriteString[VertexFFV,"\\end{align} \n"];
        WriteString[VertexFFS,"\\end{align} \n"];
        WriteString[VertexSSSS,"\\end{align} \n"];
        WriteString[VertexSSVV,"\\end{align} \n"];
        WriteString[VertexVVV,"\\end{align} \n"];
        WriteString[VertexVVVV,"\\end{align} \n"];
        WriteString[VertexGGV,"\\end{align} \n"];
        WriteString[VertexGGS,"\\end{align} \n"];
        ];
      
      
      Close[VertexSSS]; Close[VertexSSV]; Close[VertexSVV];Close[VertexFFS]; 
      Close[VertexFFV]; Close[VertexSSSS]; Close[VertexSSVV]; 
      Close[VertexVVV]; Close[VertexVVVV]; Close[VertexGGV]; 
      Close[VertexGGS];
      
      ];


WriteVertex[res_,Type_] :=Block[{i},
      Switch[Type,
        SSS, outputfile = VertexSSS;
        		TeXLineBreak=8;,
        SSV, outputfile = VertexSSV;
        		TeXLineBreak=3;,
        GGS, outputfile = VertexGGS;
        		TeXLineBreak=2;
        		maxNumberSymbols=16;,
        GGV, outputfile = VertexGGV;
        		TeXLineBreak=3;
        		maxNumberSymbols=16;,
        SVV, outputfile = VertexSVV;
        		TeXLineBreak=2;
        		maxNumberSymbols=16;,
        VVV, outputfile = VertexVVV;
        		TeXLineBreak=3;,
        FFV, 
        		maxNumberSymbols=16;
        		outputfile = VertexFFV;
        		TeXLineBreak=3;,
        FFS, 
        		maxNumberSymbols=16;
        		outputfile = VertexFFS;
        		TeXLineBreak=2;,
        SSSS, 
        		outputfile = VertexSSSS;
        		If[res[[1]]===conj[res[[1]]],maxNumberSymbols=16;];
        		TeXLineBreak=3;,
        SSVV, outputfile = VertexSSVV;
        		TeXLineBreak=2;
        		
        If[res[[1]]===conj[res[[1]]],maxNumberSymbols=15;,
          maxNumberSymbols=18;];,
        VVVV, outputfile = VertexVVVV;
        		TeXLineBreak=2;
                          maxNumberSymbols=16;,
        FFFF, outputfile = VertexFFFF;
        		TeXLineBreak=2;,
        FFSS, outputfile = VertexFFSS;
        		TeXLineBreak=2;,
        FFVV, outputfile = VertexFFVV;
        		TeXLineBreak=2;,
        SSSSSS, outputfile = VertexSSSSSS;
        		TeXLineBreak=2;,
        SSSSVV, outputfile = VertexSSSSVV;
        		TeXLineBreak=2;,
        SSVVVV, outputfile = VertexSSVVVV;
        		TeXLineBreak=2;
        ];
      
      If[WithDiagramm \[Equal]True && ShortFormVertex\[Equal]False,
        temp = res;
        numPart=Length[res[[1]]];
        
        line=Table[0,{numPart}];
        For[i=1,i\[LessEqual]numPart,
          Switch[getType[temp[[1,i]]],
            S,
            If[conj[temp[[1,i]]]===temp[[1,i]],line[[i]]="dashes";,
                line[[i]]="scalar";];,
            F,
            If[MemberQ[MajoranaPart,getBlank[temp[[1,i]]]]\[Equal]True,
                line[[i]]="plain";,line[[i]]="fermion";];, 
            V,
            If[conj[temp[[1,i]]]===temp[[1,i]],line[[i]]="wiggly";,
                line[[i]]="boson";];,
            G,
            If[conj[temp[[1,i]]]===temp[[1,i]],line[[i]]="dots";,
                line[[i]]="ghost";];
            ];
          i++;]; 
        
        WriteString[outputfile, "\\begin{center} \n"];
        WriteString[outputfile,
          "\\begin{fmffile}{Diagrams/FeynDia"<>ToString[diaNr] <>"} \n"];
        WriteString[outputfile,"\\fmfframe(20,20)(20,20){ \n"];
        WriteString[outputfile,"\\begin{fmfgraph*}(75,75) \n"];
        		
        		Switch[numPart,
          		3,
          			WriteString[outputfile,"\\fmfleft{l1}\n"];
          			WriteString[outputfile,"\\fmfright{r1,r2}\n"];,
          		4,
          			WriteString[outputfile,"\\fmfleft{l1,l2}\n"];
          			WriteString[outputfile,"\\fmfright{r1,r2}\n"];,
          		6,
          			WriteString[outputfile,"\\fmfleft{l1,l2,l3}\n"];
          			WriteString[outputfile,"\\fmfright{r1,r2,r3}\n"];
          		];
        
        If[Head[res[[1,1]]]===conj || Head[res[[1,1]]]===bar,
          WriteString[outputfile,"\\fmf{"<>line[[1]]<>"}{v1,l1}\n"];,
          WriteString[outputfile,"\\fmf{"<>line[[1]]<>"}{l1,v1}\n"];
          ];
        
        If[Head[res[[1,2]]]===conj || Head[res[[1,2]]]===bar,
          WriteString[outputfile,"\\fmf{"<>line[[2]]<>"}{v1,r1}\n"];,
          WriteString[outputfile,"\\fmf{"<>line[[2]]<>"}{r1,v1}\n"];
          ];
        
        If[Head[res[[1,3]]]===conj || Head[res[[1,3]]]===bar,
          WriteString[outputfile,"\\fmf{"<>line[[3]]<>"}{v1,r2}\n"];,
          WriteString[outputfile,"\\fmf{"<>line[[3]]<>"}{r2,v1}\n"];
          ];
        		
        If[numPart>3,
          If[Head[res[[1,4]]]===conj || Head[res[[1,4]]]===bar,
              WriteString[outputfile,"\\fmf{"<>line[[4]]<>"}{v1,l2}\n"];,
              WriteString[outputfile,"\\fmf{"<>line[[4]]<>"}{l2,v1}\n"];
              ];
          ];
        If[numPart>4,
          	If[Head[res[[1,5]]]===conj || Head[res[[1,5]]]===bar,
            			WriteString[outputfile,"\\fmf{"<>line[[5]]<>"}{v1,r3}\n"];,
            			WriteString[outputfile,"\\fmf{"<>line[[5]]<>"}{r3,v1}\n"];
            	];
          
          	If[Head[res[[1,6]]]===conj || Head[res[[1,6]]]===bar,
            			WriteString[outputfile,"\\fmf{"<>line[[6]]<>"}{v1,l3}\n"];,
            			WriteString[outputfile,"\\fmf{"<>line[[6]]<>"}{l3,v1}\n"];
            	];
          ];
        
        WriteString[outputfile,
          "\\fmflabel{$"<>TeXOutput[temp[[1,1]]]  <>"$}{l1}\n"];
        WriteString[outputfile,
          "\\fmflabel{$"<>TeXOutput[temp[[1,2]]]  <>"$}{r1}\n"];
        WriteString[outputfile,
          "\\fmflabel{$"<>TeXOutput[temp[[1,3]]]  <>"$}{r2}\n"];
        
        If[numPart>3,
          WriteString[outputfile,
              "\\fmflabel{$"<>TeXOutput[temp[[1,4]]]  <>"$}{l2}\n"];];
        If[numPart>4,
          		
          WriteString[outputfile,
            "\\fmflabel{$"<>TeXOutput[temp[[1,5]]]  <>"$}{r3}\n"];
          		
          WriteString[outputfile,
            "\\fmflabel{$"<>TeXOutput[temp[[1,6]]] <>"$}{l3}\n"];
          	];
        
        WriteString[outputfile,"\\end{fmfgraph*}} \n"];
        WriteString[outputfile,"\\end{fmffile} \n"];
        
        WriteString[outputfile, "\\end{center}  \n"];
        
        diaNr++;,
        particleString = "";
        For[i=1,i\[LessEqual]Length[res[[1]]],
          particleString = particleString <>TeXOutput[res[[1,i]]];
          i++;];
        If[ShortFormVertex\[Equal]True,
          If[StreamPosition[outputfile]>15,
            WriteString[outputfile,"\\\\ \n"];
            ];
          Switch[Type,
            FFS,
            
            WriteString[outputfile, 
                "\\Gamma^L_{"<>particleString<>"}  =  & \\,\n"];,
            FFV,
            
            WriteString[outputfile, 
                "\\Gamma^L_{"<>particleString<>"}  =  & \\,\n"];,
            VVVV,
            
            WriteString[outputfile, 
                "\\Gamma^1_{"<>particleString<>"}  =  & \\,\n"];,
            _,
            
            WriteString[outputfile, 
                "\\Gamma_{"<>particleString<>"}  = & \\, \n"];
            ];,
          
          WriteString[outputfile, 
              "\\paragraph*{Vertex for $"<>particleString<>"$} \n"];
          ];
        ];
      
      If[ShortFormVertex\[Equal]False,
        WriteString[outputfile,"\\begin{align} \n &"];
        ];
      For[i=2,i\[LessEqual]Length[res],
        If[res[[i,1]]=!=0  || ShortFormVertex\[Equal]True,
          If[ShortFormVertex\[Equal]True,
            Switch[Type,
                FFS,
                      
                If[i\[NotEqual] 2, 
                    WriteString[outputfile,
                        "\\\\ \n \\Gamma^R_{"<>particleString<>
                          "}  =  & \\,"];];,
                FFV,
                       
                If[i\[NotEqual] 2, 
                    WriteString[outputfile,
                        "\\\\ \n \\Gamma^R_{"<>particleString<>
                          "}  =  & \\,"];];,
                VVVV,
                      
                If[i\[NotEqual] 2, 
                    WriteString[outputfile,
                        "\\\\ \n \\Gamma^"<>ToString[i-1]<>"_{"<>
                          particleString<>"}  =  & \\,"];];
                ];,
            If[i\[NotEqual] 2, WriteString[outputfile,"\\\\ \n  & + \\,"];];
            ];
          
          If[res[[i,2]]=!=1 && Head[res[[i,1]]]===Plus && 
              ShortFormVertex\[NotEqual] True,
            
            WriteString[outputfile,
                "\\Big("<>TeXOutput[res[[i,1]]]<>"\\Big)"];,
            WriteString[outputfile,TeXOutput[res[[i,1]]]];
            ];
          
          If[res[[i,2]]=!=1 && ShortFormVertex\[NotEqual] True,
            WriteString[outputfile,
                "\\Big("<>TeXOutput[res[[i,2]]]<>"\\Big)"];
            ];
          ];
        i++;
        ];
      
      If[ShortFormVertex\[Equal]False,
        WriteString[outputfile,"\\end{align} \n"];,
        WriteString[outputfile," \n"];
        ];
      
      If[WithDiagramm \[Equal]True && ShortFormVertex\[NotEqual]True,
        WriteString[outputfile,"\\hrule \n"];
        ];
      
      maxNumberSymbols=22;
      
      
      ]; 





WriteTeXBasis[WriteSARAH_,effectiveOperators_,SixParticleInteractions_]:=
    Block[{},
      
      TeXFile=
        OpenWrite[
          ToFileName[$sarahCurrentTeXDir,
            Modelname<>"-"<>ToString[modelName]<>".tex"]];
      
      
      WriteString[TeXFile,"\\documentclass[A4]{article} \n"];
      WriteString[TeXFile,"\\usepackage{amsmath}\n"];
      WriteString[TeXFile,"\\usepackage[T1]{fontenc}\n"];
      WriteString[TeXFile,"\\usepackage{amssymb}\n"];
      WriteString[TeXFile,"\\usepackage{feynmp}\n"];
      WriteString[TeXFile,"\\usepackage{hyperref}\n"];
      WriteString[TeXFile,"\\usepackage{longtable}\n"];
      WriteString[TeXFile,"\\DeclareGraphicsRule{*}{mps}{*}{}\n"];
      WriteString[TeXFile,"\\graphicspath{{./Diagrams/}}\n"];
      WriteString[TeXFile,"\\newcommand{\\Tr}{\\mbox{Tr}}\n"];
      
      WriteString[TeXFile,"\\textwidth 18cm\n"];
      WriteString[TeXFile,"\\oddsidemargin -1.0cm\n"];
      WriteString[TeXFile,"\\evensidemargin -1.0cm\n"];
      
      WriteString[TeXFile,"\\renewcommand{\\arraystretch}{1.3} \n"];
      WriteString[TeXFile,"\\setlength{\\parindent}{0em} \n"];
      
      
      
      WriteString[TeXFile,"\\begin{document}\n"];
      
      WriteString[TeXFile, 
        "\\title{"<>ModelNameLaTeX <> "\\\\ Superpotential, Rotations and Interactions for eigenstates {\\tt'"<> 
          modelName<> "'} \\\\ "];
      
      
      If[RGEsCalculated\[Equal]True,
        WriteString[TeXFile, 
            "including Renormalization Group Equations \\\\ \n"];
        ];
      
      If[FreeQ[NameOfStates,CalculatedLoopCorrections]\[Equal]False,
        WriteString[TeXFile, "including one-loop Self-Energies \\\\ \n"];
        ];
      
      WriteString[TeXFile, "} \n"];
      
      
      WriteString[TeXFile, "\\author{SARAH} \n"];
      
      WriteString[TeXFile," \\maketitle \n"];
      
      WriteString[TeXFile," \\vspace{10cm} \n"];
      
      WriteString[TeXFile, 
        "This file was automatically generated by SARAH.  \\\\ \n"];
      WriteString[TeXFile, 
        "Please cite {\\bf Comput.Phys.Commun.181:1077-1086,2010 (0909.2863) } or {\\bf arXiv:0806.0538 } \\\\ \n"]\
;
      WriteString[TeXFile, 
        "Package Homepage: www.theorie.physik.uni-wuerzburg.de/$\\sim$fnstaub/sarah.html \\\\ \n"]\
;
      WriteString[TeXFile, 
        "by {\\bf Florian Staub, florian.staub@physik.uni-wuerzburg.de} \n"];
      
      WriteString[TeXFile," \\pagebreak \n"];
      
      WriteString[TeXFile," \\tableofcontents \n"];
      
      WriteString[TeXFile," \\pagebreak \n"];
      
      WriteString[TeXFile," \\allowdisplaybreaks \n"];
      
      
      WriteString[TeXFile,"\\input{SF}\n"];
      
      If[RGEsCalculated===True,
        WriteString[TeXFile,"\\section{Renormalization Group Equations}\n"];
        WriteString[TeXFile,"\\input{rges} \n"];
        ];
      
      WriteString[TeXFile,"\\section{Field Rotations}\n"];
      
      For[m=2,m\[LessEqual]Length[NameOfStates],
        WriteString[TeXFile,
          "\\input{RotationsGauge"<>ToString[NameOfStates[[m]]] <>"} \n"];
        WriteString[TeXFile,
          "\\input{matricesScalars"<>ToString[NameOfStates[[m]]] <>"} \n"];
        WriteString[TeXFile,
          "\\input{matricesFermions"<>ToString[NameOfStates[[m]]] <>"} \n"];
        m++;];
      
      WriteString[TeXFile,"\\section{Vacuum Expectation Values}\n"];
      For[m=2,m\[LessEqual]Length[NameOfStates],
        WriteString[TeXFile,
          "\\input{VEVs"<>ToString[NameOfStates[[m]]] <>"} \n"];
        m++;];
      
      If[FlavorTeXFilesNeeded\[Equal]True,
        WriteString[TeXFile,"\\section{Flavor decomposition}\n"];
        For[m=1,m\[LessEqual]Length[NameOfStates],
          If[Head[DEFINITION[NameOfStates[[m]]][Flavors]]===List,
            
            WriteString[TeXFile,
                "\\input{Flavor"<>ToString[NameOfStates[[m]]] <>"} \n"];
            ];
          m++;];
        ];
      
      
      WriteString[TeXFile,"\\section{Tadpole Equations}\n"];
      WriteString[TeXFile,"\\input{TadpoleEquations} \n"];
      
      WriteString[TeXFile,
        "\\section{Particle content for eigenstates {\\tt '"<>ToString[
            modelName]<>"'}}\n"];
      WriteString[TeXFile,"\\input{particles} \n"];
      
      
      If[FreeQ[NameOfStates,CalculatedLoopCorrections]\[Equal]False,
        WriteString[TeXFile,
          "\\section{One Loop Self-Energy and One Loop Tadpoles for eigenstates {\\tt '"<>
            ToString[modelName]<>"'}}\n"];
        WriteString[TeXFile,"\\subsection{One Loop Self-Energy}\n"];
        WriteString[TeXFile,"\\input{SelfEnergy1Loop} \n"];
        WriteString[TeXFile,"\\subsection{Tadpoles}\n"];
        WriteString[TeXFile,"\\input{Tadpoles1Loop} \n"];
        ];
      
      WriteString[TeXFile,
        "\\section{Interactions for eigenstates {\\tt '"<>ToString[modelName]<>
          "'}}\n"];
      WriteString[TeXFile,"\\subsection{Three Scalar-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesSSS}\n"];
      WriteString[TeXFile,
        "\\subsection{Two Scalar-One Vector Boson-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesSSV}\n"];
      WriteString[TeXFile,
        "\\subsection{One Scalar-Two Vector Boson-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesSVV}\n"];
      WriteString[TeXFile,
        "\\subsection{Two Fermion-One Vector Boson-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesFFV}\n"];
      WriteString[TeXFile,
        "\\subsection{Two Fermion-One Scalar Boson-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesFFS}\n"];
      WriteString[TeXFile,"\\subsection{Three Vector Boson-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesVVV}\n"];
      WriteString[TeXFile,"\\subsection{Four Scalar-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesSSSS}\n"];
      WriteString[TeXFile,
        "\\subsection{Two Scalar-Two Vector Boson-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesSSVV}\n"];
      WriteString[TeXFile,"\\subsection{Four Vector Boson-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesVVVV}\n"];
      
      WriteString[TeXFile,
        "\\subsection{Two Ghosts-One Vector Boson-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesGGV}\n"];
      WriteString[TeXFile,
        "\\subsection{Two Ghosts-One Scalar-Interaction}\n"];
      WriteString[TeXFile,"\\input{VerticesGGS}\n"];
      
      If[effectiveOperators\[Equal]True,
        WriteString[TeXFile,"\\subsection{Four Fermion-Interaction}\n"];
        WriteString[TeXFile,"\\input{VerticesFFFF}\n"];
        WriteString[TeXFile,
          "\\subsection{Two Fermion - Two Scalar -Interaction}\n"];
        WriteString[TeXFile,"\\input{VerticesFFSS}\n"];
        WriteString[TeXFile,
          "\\subsection{Two Fermion - Two Vector Boson -Interaction}\n"];
        WriteString[TeXFile,"\\input{VerticesFFVV}\n"];
        If[SixParticleInteractions\[Equal]True,
          WriteString[TeXFile,"\\subsection{Six Scalar -Interaction}\n"];
          WriteString[TeXFile,"\\input{VerticesSSSSSS}\n"];
          
          WriteString[TeXFile,
            "\\subsection{Four Scalar - Two Vector Boson -Interaction}\n"];
          WriteString[TeXFile,"\\input{VerticesSSSSVV}\n"];
          
          WriteString[TeXFile,
            "\\subsection{Two Scalar - Four Vector Boson -Interaction}\n"];
          WriteString[TeXFile,"\\input{VerticesSSVVVV}\n"];
          ];
        ];
      
      If[WriteSARAH\[Equal]True,
        WriteString[TeXFile,"\\input{SARAH}\n"];
        ];
      
      
      WriteString[TeXFile,"\\end{document}\n"];
      
      Close[TeXFile];
      
      
      WriteMakeFile;
      
      ];


WriteMakeFile:=Block[{},
      makeFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"MakePDF.sh"]];
      WriteString[makeFile,"#!/bin/bash \n"];
      WriteString[makeFile,
        "pdflatex "<>Modelname <>"-"<>ToString[modelName]<>".tex \n"];
      WriteString[makeFile,"cd Diagrams \n"];
      WriteString[makeFile,"find . -name \"*.mp\" -exec mpost {} \\; \n"]; 
      WriteString[makeFile,"cd .. \n"];
      WriteString[makeFile,
        "pdflatex "<>Modelname <>"-"<>ToString[modelName]<>".tex \n"];
      WriteString[makeFile,"echo \"\" \n"];
      WriteString[makeFile,"echo \"PDF for Model finished\" \n"];
      WriteString[makeFile,"echo \"Thanks for using SARAH\" \n"];
      WriteString[makeFile,"echo \"\" \n"];
      Close[makeFile];
      
      
      makeFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"MakePDF.bat"]];
      WriteString[makeFile,
        "pdflatex "<>Modelname <>"-"<>ToString[modelName]<>".tex \n"];
      WriteString[makeFile,"cd Diagrams \n"];
      WriteString[makeFile,"FOR %%I IN (*.mp) DO MPOST \"%%I\" \n"]; 
      WriteString[makeFile,"cd .. \n"];
      WriteString[makeFile,
        "pdflatex "<>Modelname <>"-"<>ToString[modelName]<>".tex \n"];
      Close[makeFile];
      
      
      ];

WriteParticleList:=Block[{},
      
      Print["Writing Particle Content to TeX-File"];
      ParticleFile=
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"particles.tex"]];
      
      WriteString[ParticleFile,"\\begin{center}\n"];
      WriteString[ParticleFile,"\\begin{longtable}{lcccc}\n"];
      WriteString[ParticleFile,"\\hline \\hline \n"];
      WriteString[ParticleFile,
        "Name & Type & complex/real & Generations & Indices \\\\ \n"];
      WriteString[ParticleFile,"\\hline \\hline \n"];
      
      For[i=1,i\[LessEqual]Length[PART[S]],
        WriteString[ParticleFile,
          "\\(" <> TeXName[PART[S][[i,1]]] <> "\\) & Scalar &"];
          
        If[PART[S][[i,4]]\[Equal]True, WriteString[ParticleFile,"real"];, 
          WriteString[ParticleFile,"complex"];];
        WriteString[ParticleFile,
          "&" <> TeXOutput[PART[S][[i,2]]] <> "&" <> 
            TeXOutput[PART[S][[i,3]]] <> "\\\\ \n "];
        i++; 
        ];
      WriteString[ParticleFile,"\\hline \n"];
      
      For[i=1,i\[LessEqual]Length[PART[F]],
        WriteString[ParticleFile,
          "\\(" <>TeXName[PART[F][[i,1]]]<> "\\) & Fermion &"];
        	  
        If[PART[F][[i,4]]\[Equal]True, WriteString[ParticleFile,"Majorana"];, 
          WriteString[ParticleFile,"Dirac"];];
        	WriteString[ParticleFile,
          "&" <>TeXOutput[PART[F][[i,2]]] <> "&" <> 
            TeXOutput[PART[F][[i,3]]] <> "\\\\ \n "];
        	i++; 
        ];
      WriteString[ParticleFile,"\\hline \n"];
      
      For[i=1,i\[LessEqual]Length[PART[V]],
        WriteString[ParticleFile,
          "\\(" <>TeXName[PART[V][[i,1]]] <> "\\) & Vector &"];
        	  
        If[PART[V][[i,4]]\[Equal]True, WriteString[ParticleFile,"real"];, 
          WriteString[ParticleFile,"complex"];];
        	WriteString[ParticleFile,
          "&" <> TeXOutput[PART[V][[i,2]]] <> "&" <> 
            TeXOutput[PART[V][[i,3]]] <> "\\\\ \n "];
        	i++; 
        ];
      
      For[i=1,i\[LessEqual]Length[PART[G]],
        WriteString[ParticleFile,
          "\\(" <>TeXName[PART[G][[i,1]]] <> "\\) & Ghost &"];
        	  
        If[PART[G][[i,4]]\[Equal]True, WriteString[ParticleFile,"real"];, 
          WriteString[ParticleFile,"complex"];];
        	WriteString[ParticleFile,
          "&" <>TeXOutput[PART[G][[i,2]]] <> "&" <> 
            TeXOutput[PART[G][[i,3]]] <> "\\\\ \n "];
        	i++; 
        ];
      
      WriteString[ParticleFile,"\\hline \\hline \n"];
      WriteString[ParticleFile,"\\end{longtable}\n "];
      WriteString[ParticleFile,"\\end{center}\n \n"];
      
      Close[ParticleFile];
      ];


WriteSF:=Block[{i,j,k,sign,gf,temp},
      Print["Writing Superfields and Superpotential to TeX-File"];
      SFFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"SF.tex"]];
      
      WriteString[SFFile,"\\section{Superfields} \n"];
      WriteString[SFFile,"\\subsection{Vector Superfields} \n"];
      
      WriteString[SFFile,"\\begin{center} \n"];
      WriteString[SFFile,"\\begin{tabular}{|c|c|c|c|c|c|} \n"];
      WriteString[SFFile,"\\hline \\hline \n"];
      WriteString[SFFile,
        "SF & Spin \\(\\frac{1}{2}\\) & Spin 1 & \\(SU(N)\\) & Coupling & Name \\\\ \n "]\
;
      WriteString[SFFile ,"\\hline \n"];
      
      For[i=1,i\[LessEqual]Length[Gauge],
        WriteString[SFFile, 
          "\\("<>TeXOutput[SF[Gauge[[i,1]]]] <>"\\) & \\(" <> 
            TeXOutput[ToExpression["f"<>ToString[Gauge[[i,1]]]]] <> 
            "\\) & \\("  <> 
            TeXOutput[ToExpression["V"<>ToString[Gauge[[i,1]]]]] <> 
            "\\) & \\("  <> TeXOutput2[Gauge[[i,2]]] <> "\\) & \\(" <> 
            TeXOutput[Gauge[[i,4]]] <> "\\) &" <> TeXOutput[Gauge[[i,3]]] <> 
            "\\\\ \n"];
        i++;];
      WriteString[SFFile,"\\hline \\hline\n"];
      WriteString[SFFile,"\\end{tabular} \n"];
      WriteString[SFFile,"\\end{center} \n"];
      
      WriteString[SFFile,"\\subsection{Chiral Superfields} \n"];
      
      
      WriteString[SFFile,"\\begin{center} \n"];
      WriteString[SFFile,"\\begin{tabular}{|c|c|c|c|c|c|} \n"];
      WriteString[SFFile,"\\hline \\hline \n"];
      WriteString[SFFile,
        "SF & Spin 0 & Spin \\(\\frac{1}{2}\\) & Generations & \\(("];
      For[i=1,i\[LessEqual]Length[Gauge],
        If[i=!=Length[Gauge],
          WriteString[SFFile,TeXOutput2[Gauge[[i,2]]]<>"\\otimes\, "];,
          WriteString[SFFile,TeXOutput2[Gauge[[i,2]]]<>")\\) \\\\ \n"];
          ];
        i++;];
      WriteString[SFFile ,"\\hline \n"];
      
      For[i=1,i\[LessEqual]Length[Fields],
        WriteString[SFFile, 
          "\\("<>TeXOutput[SF[Fields[[i,3]]]] <>"\\) & \\(" <> 
            TeXOutput[
              SFields[[i]] /. a_[{b__}]\[Rule]a /. a_[{b__}]\[Rule]a] <> 
            "\\) & \\("  <> 
            TeXOutput[
              FFields[[i]] /. a_[{b__}]\[Rule]a /. a_[{b__}]\[Rule]a] <> 
            "\\) & "  <> TeXOutput[Fields[[i,2]]] <> " & \\(("];
        
        For[j=1,j\[LessEqual]Length[Gauge],
          If[Gauge[[j,2]]=!=U[1],
            If[Fields[[i,j+3]]<0,
                
                WriteString[SFFile,
                    "{\\bf \\overline{"<>ToString[Abs[Fields[[i,j+3]]]]<>
                      "}}"];,
                WriteString[SFFile,"{\\bf "<>ToString[Fields[[i,j+3]]]<>"}"];
                ];,
            If[Fields[[i,j+3]]===-1,
                WriteString[SFFile,"-1"];,
                WriteString[SFFile,TeXForm[Fields[[i,j+3]]]];
                ];
            ];
          If[j<Length[Gauge],
            WriteString[SFFile,","];,
            WriteString[SFFile,") \\) \\\\ \n"];
            ];
          j++;];
        i++;];
      WriteString[SFFile,"\\hline \\hline\n"];
      WriteString[SFFile,"\\end{tabular} \n"];
      WriteString[SFFile,"\\end{center} \n"];
      
      
      WriteString[SFFile,"\\section{Superpotential and Lagrangian} \n"];
      WriteString[SFFile,"\\subsection{Superpotential} \n"];
      
      WriteString[SFFile,"\\begin{align} \n"];
      If[Length[SuperPotential]>7, WriteString[SFFile,"\\nonumber "];];
      WriteString[SFFile,"W = & \,  " ];
      For[i=1,i\[LessEqual]Length[SuperPotential],
        If[StringTake[TeXOutput[SuperPotential[[i,1,1]]],1]=!="-" && i=!=1,
          sign="+";,sign="";];
        WriteString[SFFile,
          sign<>TeXOutput[SuperPotential[[i,1,1]]*SuperPotential[[i,1,2]]] <>
            "\,"];
        For[j=1,j\[LessEqual]Length[SuperPotential[[i,2]]],
          WriteString[SFFile,TeXOutput[SF[SuperPotential[[i,2,j]]]]<>"\,"];
          j++;];
        If[Length[SuperPotential]>7 && Mod[i,7] \[Equal]0,
          WriteString[SFFile,"\\\\ \n & "];
          ];
        i++;];
      WriteString[SFFile,"\\end{align} \n"];
      
      
      WriteString[SFFile,"\\subsection{Softbreaking terms} \n"];
      
      WriteString[SFFile,"\\begin{align} \n"];
      WriteString[SFFile,
        "L_{SB,W} = \, & "<>TeXOutput[
            SoftW /. sum[a__]->1 /. subIndFinal[1,1] /. subIndFinal[2,2] /. 
              subIndFinal[3,3]] <>"+ \\mbox{h.c.} \\\\ \n"];
      WriteString[SFFile,
        "L_{SB,\\phi} = \, & "<>TeXOutput[- SoftScalarMass /. sum[a__]->1 /. 
                  subIndFinal[1,1] /. subIndFinal[2,2] /. subIndFinal[3,3]] <>
          "\\\\ \n"];
      WriteString[SFFile,
        "L_{SB,\\lambda} = \, & \\frac{1}{2}\\left("<>TeXOutput[- 
                              SoftGauginoMass /. gen2\[Rule]gen1 /. 
                          sum[a__]->1 /. conj[x_]\[Rule]0/.a_[1]\[Rule]a /. 
                    a_[2] \[Rule]a /. subIndFinal[1,1] /. subIndFinal[2,2] /. 
              subIndFinal[3,3]] <>"+ \\mbox{h.c.} \\right) \n"];
      WriteString[SFFile,"\\end{align} \n"];
      
      
      WriteString[SFFile,"\\subsection{Gauge fixing terms} \n"];
      
      For[i=1,i\[LessEqual]Length[NameOfStates],
        If[Head[DEFINITION[NameOfStates[[i]]][GaugeFixing]]===List,
          
          WriteString[SFFile,
            "\\subsubsection{Gauge fixing terms for eigenstates {\\tt '"<>
              ToString[NameOfStates[[i]]] <>"'} } \n"];
          gf = DEFINITION[NameOfStates[[i]]][GaugeFixing];
          WriteString[SFFile,"\\begin{align} \n"];
          WriteString[SFFile,"L_{GF} = \, &"];
          temp = Sum[gf[[j,2]] abs[gf[[j,1]]],{j,1,Length[gf]}];
          WriteString[SFFile,TeXOutput[temp] <>"\n"];
          WriteString[SFFile,"\\end{align} \n"];
          ];
        i++;];
      
      WriteString[SFFile,"\\subsection{Fields integrated out} \n"];
      
      If[Length[RemovedFields ]===0,
        WriteString[SFFile, "None \n"];,
        WriteString[SFFile, "\\begin{enumerate} \n"];
        For[i=1,i\[LessEqual]Length[RemovedFields],
          If[FreeQ[Fields,RemovedFields[[i]]],
            
            WriteString[SFFile, 
                "\\item \\("<>TeXOutput[RemovedFields[[i]]] <>"\\) \n"];,
            
            WriteString[SFFile, 
                "\\item \\("<>TeXOutput[SF[RemovedFields[[i]]]] <>"\\) \n"];
            ];
          i++;];
        WriteString[SFFile, "\\end{enumerate} \n"];
        
        ];
      Close[SFFile];
      ];


WriteVEVDecomp:=Block[{i,j,k,m,list,temp},
      Print["Write VEVs to TeX-File"];
      
      For[m=2,m\[LessEqual]Length[NameOfStates],
        
        
        vevFile=
          OpenWrite[
            ToFileName[$sarahCurrentTeXDir,
              "VEVs"<>ToString[NameOfStates[[m]]] <>".tex"]];
        
        
        If[Head[DEFINITION[NameOfStates[[m]]][VEVs]]===List,
          list = DEFINITION[NameOfStates[[m]]][VEVs];
          If[Length[NameOfStates]>2,
            
            WriteString[vevFile,
                "\\subsection{VEVs for eigenstates {\\tt '"<>ToString[
                    NameOfStates[[m]]]<>"' }} \n"];
            ];
          WriteString[vevFile,"\\begin{align} \n"];
          For[i=1,i\[LessEqual]Length[list],
            
            WriteString[vevFile, 
              TeXOutput[list[[i,1]]] <> " = & \, " <> 
                TeXOutput[Sum[list[[i,j,1]]*list[[i,j,2]],{j,2,4}]]];
            
            If[i\[Equal]Length[list], WriteString[vevFile,"\n"];,
              WriteString[vevFile,"\\\\ \n"];];
            i++;];
          WriteString[vevFile,"\\end{align} \n"];
          ];
        Close[vevFile];
        m++;];
      
      ];

WriteFlavorDecomp:=Block[{i,j,k,m,list,temp},
      Print["Write Flavor Decomposition to TeX-File"];
      
      For[m=1,m\[LessEqual]Length[NameOfStates],
        
        
        vevFile=
          OpenWrite[
            ToFileName[$sarahCurrentTeXDir,
              "Flavor"<>ToString[NameOfStates[[m]]] <>".tex"]];
        
        
        If[Head[DEFINITION[NameOfStates[[m]]][Flavors]]===List,
          list = DEFINITION[NameOfStates[[m]]][Flavors];
          If[Length[NameOfStates]>2,
            
            WriteString[vevFile,
                "\\subsection{Flavor decomposition for eigenstates {\\tt '"<>
                  ToString[NameOfStates[[m]]]<>"' }} \n"];
            ];
          WriteString[vevFile,"\\begin{align} \n"];
          FlavorTeXFilesNeeded=True;
          For[i=1,i\[LessEqual]Length[list],
            
            WriteString[vevFile, 
              TeXOutput[list[[i,1]]] <> " \\rightarrow & \, " <> 
                TeXOutput[Table[list[[i,2,j]],{j,1,Length[list[[i,2]]]}]]];
            
            If[i\[Equal]Length[list], WriteString[vevFile,"\n"];,
              WriteString[vevFile,"\\\\ \n"];];
            i++;];
          WriteString[vevFile,"\\end{align} \n"];
          ];
        Close[vevFile];
        m++;];
      
      ];


WriteMatrices:=Block[{i,j,k,m,MMatrizes,mixings,mixedNames,rotG,sign,mixES},
      
      Print["Writing Mass Matrices to TeX-File"];
      
      
      
      For[m=2,m\[LessEqual]Length[NameOfStates],
        GaugeRot=
          OpenWrite[
            ToFileName[$sarahCurrentTeXDir,
              "RotationsGauge"<>ToString[NameOfStates[[m]]] <>".tex"]];
        MatricesFermions=
          OpenWrite[
            ToFileName[$sarahCurrentTeXDir,
              "matricesFermions"<>ToString[NameOfStates[[m]]] <>".tex"]];
        MatricesScalars=
          OpenWrite[
            ToFileName[$sarahCurrentTeXDir,
              "matricesScalars"<>ToString[NameOfStates[[m]]] <>".tex"]];
        
        
        If[Head[DEFINITION[NameOfStates[[m]]][GaugeSector]]===List,
          
          WriteString[GaugeRot,
            "\\subsection{Rotations in gauge sector for eigenstates {\\tt '"<>
              ToString[NameOfStates[[m]]] <>"'} } \n"];
          rotG=DEFINITION[NameOfStates[[m]]][GaugeSector];
          WriteString[GaugeRot,"\\begin{align} \n"];
          For[i=1,i\[LessEqual]Length[rotG],
            For[j=2,j\[LessEqual]Length[rotG[[i]]],
              
              WriteString[GaugeRot, 
                TeXOutput[
                    getFullOld[rotG[[i,1]]] /. subGC[1] /. 
                        gen1 \[Rule] rotG[[i,j,1]]  /. subIndFinal[1,1]] <>
                  " = & \," ];
              
              WriteString[GaugeRot,
                TeXOutput[
                  Sum[rotG[[i,j,k,
                          2]] (getFullOld[rotG[[i,j,k,1]]] /. subGC[1] /. 
                          subIndFinal[1,1]),{k,2,Length[rotG[[i,j]]]}]]];
              If[j<Length[rotG[[i]]] || i < Length[rotG],
                WriteString[GaugeRot,"\\\\ \n"];,
                WriteString[GaugeRot,"\n"];
                ];
              j++;];
            i++;];
          WriteString[GaugeRot,"\\end{align} \n"];
          ];
        
        
        WriteString[MatricesScalars,
          "\\subsection{Rotations in Mass sector for eigenstates {\\tt '"<>
            ToString[NameOfStates[[m]]] <>"'} } \n"];
        WriteString[MatricesScalars,
          "\\subsubsection{Mass Matrices for Scalars}\n"];
        WriteString[MatricesFermions,
          "\\subsubsection{Mass Matrices for Fermions}\n"];
        
        MMatrizen=
          MassMatrices[NameOfStates[[m]]] /. 
            a_ conj[x_] + a_ x_ \[Rule]2 a Re[x];
        mixings=MixBasis[NameOfStates[[m]]];
        mixedNames=MixMatrix[NameOfStates[[m]]];
        mixES = MixES[NameOfStates[[m]]];
        
        
        
        If[Head[MMatrizen]===List,
          
          WriteString[MatricesScalars,"\\begin{itemize} \n"];
          WriteString[MatricesFermions,"\\begin{itemize} \n"];
          
          NoScalar=True;
          NoFermion=True;
          posMixES=1;
          
          For[i=1,i\[LessEqual]Length[MMatrizen],
            
            If[getTypeOld[mixings[[i,1,1]]]===S || 
                getTypeOld[mixings[[i,1,1]]]===F,
              If[TrueQ[getTypeOld[mixings[[i,1,1]]]===S],
                outputfile = MatricesScalars;
                NoScalar=False;,
                outputfile=MatricesFermions;
                NoFermion=False;]; 
              
              If[Length[mixedNames[[i,1]]]\[Equal]0,
                
                WriteString[outputfile,
                    "\\item {\\bf Mass matrix for " <>
                      getDescriptionField[
                        getParticleNameDirac[mixedNames[[i,1]]]] <>
                      "}, Basis: \\( \\left(" ];,
                
                WriteString[outputfile,
                    "\\item {\\bf Mass matrix for " <>
                      getDescriptionField[
                        getParticleNameDirac[mixedNames[[i,1,1]]]] <>
                      "}, Basis: \\( \\left(" ];
                ];
              For[j=1,j\[LessEqual]Length[mixings[[i,1]]],
                
                WriteString[outputfile,
                  TeXOutput[
                    getFullOld[mixings[[i,1,j]]] /. subGC[j]/. 
                      subIndFinalX[j,j,"m"] ]];
                
                If[j\[NotEqual] Length[mixings[[i,1]]],
                  WriteString[outputfile,", "];];
                j++;];
              
              WriteString[outputfile,"\\right), \\left(" ];
              For[j=1,j\[LessEqual]Length[mixings[[i,2]]],
                
                WriteString[outputfile,
                  TeXOutput[
                    getFullOld[mixings[[i,2,j]]] /. subGC[j]/. 
                      subIndFinalX[j,j,"n"]  ]];
                If[j\[NotEqual] Length[mixings[[i,1]]],
                  WriteString[outputfile,", "];];
                j++;];
              WriteString[outputfile,"\\right) \\) \n \n"];
              
              
              WriteString[outputfile,"\\begin{equation} \n"];
              If[getTypeOld[mixings[[i,1,1]]]===F,
                If[Length[mixedNames[[i,1]]]\[Equal]0,
                    
                    WriteString[outputfile,
                        "m_{"<>TeXOutput[
                            getParticleNameDirac[mixedNames[[i,1]]]]<> 
                          "} = \\left( \n"];,
                    
                    WriteString[outputfile,
                        "m_{"<>TeXOutput[
                            getParticleNameDirac[mixedNames[[i,1,1]]]]<> 
                          "} = \\left( \n"];
                    ];,
                
                WriteString[outputfile,
                    "m^2_{"<>TeXOutput[
                        getParticleNameDirac[mixedNames[[i,1]]]]<> 
                      "} = \\left( \n"];
                ];
              WriteString[outputfile,"\\begin{array}{"];
              
              For[j=1,j\[LessEqual]Length[mixings[[i,1]]],
                WriteString[outputfile,"c"];
                j++;];
              WriteString[outputfile,"}\n"];
              
              
              listAbbrEntries = {};
              
              For[j=1,j\[LessEqual] Length[mixings[[i,1]]],
                For[k=1,k\[LessEqual] Length[mixings[[i,1]]],
                  
                  value = 
                    Simplify[MMatrizen[[i,j,k]] /. ThetaStep[a___]\[Rule]1];
                   If[getLaTeXlength[value]*Length[mixings[[i,1]]] < 100, 
                    WriteString[outputfile,TeXOutput[value]];,
                    If[Length[mixedNames[[i,1]]]\[Equal]0 && j<k,
                        If[getTypeOld[mixings[[i,1,1]]]===S,
                            
                            WriteString[outputfile,
                                "m^*_{"<>ToString[k] <> ToString[j] <> "}"];,
                            
                            WriteString[outputfile,
                                "m_{"<>ToString[k] <> ToString[j] <> "}"];
                            ];,
                        
                        WriteString[outputfile,
                          "m_{"<>ToString[j] <> ToString[k] <> "}"];
                        listAbbrEntries = 
                          Join[listAbbrEntries,{{"m_{"<>ToString[j] <> 
                                  ToString[k] <> "}",Simplify[value]}}];
                        ];
                    ];
                  If[k\[Equal]Length[mixings[[i,1]]],
                    If[j\[NotEqual] Length[mixings[[i,1]]],
                        WriteString[outputfile,"\\\\ \n"];
                        ];,
                    WriteString[outputfile," &"];
                    ];
                  k++;];
                j++;];
              WriteString[outputfile,"\\end{array} \n"];
              WriteString[outputfile,"\\right) \n"];
              WriteString[outputfile,"\\end{equation} \n"];
              
              
              
               If[Length[listAbbrEntries]>0,
                WriteString[outputfile,"\\begin{align} \n"];
                For[j=1,j\[LessEqual]Length[listAbbrEntries],
                  If[j<Length[listAbbrEntries],
                    
                    WriteString[outputfile, 
                        listAbbrEntries[[j,1]]<>" &= " <> 
                          TeXOutput[listAbbrEntries[[j,2]]] <> "\\\\ \n"];,
                    
                    WriteString[outputfile, 
                        listAbbrEntries[[j,1]]<>" &= " <> 
                          TeXOutput[listAbbrEntries[[j,2]]] <> "\n"];
                    ];
                  j++;];
                WriteString[outputfile,"\\end{align} \n"];
                ];
              
              If[Length[mixedNames[[i,1]]]\[Equal]0,
                
                WriteString[outputfile,
                  "This matrix is diagonalized by \\("<>TeXOutput[
                      mixedNames[[i,2]]] <>"\\): \n"];
                WriteString[outputfile,"\\begin{equation} \n"];
                If[getType[mixedNames[[i,1]]]===F,
                  
                  WriteString[outputfile,
                      TeXOutput[mixedNames[[i,2]]]<>" m_{"<>
                        TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<>"} "<>
                        TeXOutput[Adj[mixedNames[[i,2]]]]<>" = m^{dia}_{"<>
                        TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<>
                        "} \n"];,
                  WriteString[outputfile,
                      TeXOutput[mixedNames[[i,2]]]<>" m^2_{"<>
                        TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<>"} "<>
                        TeXOutput[Adj[mixedNames[[i,2]]]]<>" = m^{dia}_{2,"<>
                        TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<>
                        "} \n"];
                  ];
                WriteString[outputfile,"\\end{equation} \n"];
                WriteString[outputfile,"with \n"];
                
                WriteString[outputfile,"\\begin{align} \n"];
                start =1;
                For[j=1,j\[LessEqual]Length[mixES[[posMixES,1]]],
                  ende = start-1+getGenALL[mixES[[posMixES,1,j]]];
                  If[ende === start, subS={gt1\[Rule]ende};, subS={}; ];
                  sumS = "\\sum_{j}";
                  If[Head[mixES[[posMixES,1,j]]]===conj,
                    
                    WriteString[outputfile, 
                        TeXOutput[
                            getFullOld[conj[mixES[[posMixES,1,j]]]]/.subGC[
                                  1] /. subIndFinal[1,1]]<> " = "<> sumS <>
                          TeXOutput[mixES[[posMixES,2,2]][gt2,gt1] /. subS]  <>
                          TeXOutput[
                            conj[getFullOld[mixES[[posMixES,2,1]]]/.subGC[2] /. 
                                      DeleteCases[subREfinal[2,1],
                                        gen2\[Rule]x_]/.subIndFinal[2,
                                      2]  /.subIndFinal[1,1] /. subS]]];,
                    
                    
                    WriteString[outputfile,
                        TeXOutput[
                            getFullOld[mixES[[posMixES,1,j]]]/. subGC[1] /. 
                              subIndFinal[1,1]]<> " = "<> sumS<>
                          TeXOutput[
                            conj[mixES[[posMixES,2,2]][gt2,gt1]] /. subS] <>
                          TeXOutput[
                            getFullOld[mixES[[posMixES,2,1]]] /.subGC[2] /. 
                                    DeleteCases[subREfinal[2,1],
                                      gen2\[Rule]x_] /.subIndFinal[2,
                                    2] /.subIndFinal[1,1]  /. subS]];
                    ];
                  If[j<Length[mixES[[posMixES,1]]],
                    If[Mod[j,3]===0,
                        WriteString[outputfile,"\\\\ \n"];,
                        WriteString[outputfile,"\\,, \\hspace{1cm} \n"];
                        ];,
                    WriteString[outputfile,"\n"];];
                  start = ende+1;
                  j++;];
                WriteString[outputfile,"\\end{align} \n"];
                
                
                
                If[FreeQ[Table[subAlways[[mm,1]],{mm,1,Length[subAlways]}],
                      mixES[[posMixES,2,2]]]\[Equal]False,
                  
                  WriteString[outputfile,
                    "The mixing matrix can be parametrized by \n"];
                  
                  WriteString[outputfile,"\\begin{equation} \n"];
                  
                  WriteString[outputfile,
                    TeXOutput[mixES[[posMixES,2,2]]]<> "= \, "];
                  WriteString[outputfile,"\\left( \n"];
                  
                  WriteString[outputfile,
                    "\\begin{array}{"<>Nest[StringJoin[#1,"c"]&,"",
                        getDim[mixES[[posMixES,2,2]]]]<>"} \n"];
                  For[n1=1,n1\[LessEqual]getDim[mixES[[posMixES,2,2]]],
                    For[n2=1,n2\[LessEqual]getDim[mixES[[posMixES,2,2]]],
                      
                      WriteString[outputfile,
                        TeXOutput[
                          mixES[[posMixES,2,2]][n1,n2] /. subAlways]];
                      
                      If[n2<getDim[mixES[[posMixES,2,2]]],
                        WriteString[outputfile," & "];,
                        
                        If[n1<getDim[mixES[[posMixES,2,2]]],
                            WriteString[outputfile," \\\\ \n "];];
                        ];
                      n2++;];
                    n1++;];
                  WriteString[outputfile,"\\end{array} \n"];
                  WriteString[outputfile,"\\right) \n"];
                  WriteString[outputfile,"\\end{equation} \n"];
                  ];
                
                
                posMixES++;,
                
                WriteString[outputfile,
                  "This matrix is diagonalized by \\("<>TeXOutput[
                      mixedNames[[i,1,2]]] <>"\\) and \\("<>
                    TeXOutput[mixedNames[[i,2,2]]] <>"\\) \n"];
                WriteString[outputfile,"\\begin{equation} \n"];
                
                WriteString[outputfile,
                  TeXOutput[conj[mixedNames[[i,1,2]]]]<>" m_{"<>
                    TeXOutput[getParticleNameDirac[mixedNames[[i,1,1]]]]<>"} "<>
                    TeXOutput[Adj[mixedNames[[i,2,2]]]]<>" = m^{dia}_{"<>
                    TeXOutput[getParticleNameDirac[mixedNames[[i,1,1]]]]<>
                    "} \n"];
                WriteString[outputfile,"\\end{equation} \n"];
                
                
                WriteString[outputfile,"with \n"];
                
                WriteString[outputfile,"\\begin{align} \n"];
                start =1;
                For[j=1,j\[LessEqual]Length[mixES[[posMixES,1]]],
                  ende = start-1+getGenALL[mixES[[posMixES,1,j]]];
                  If[ende === start, subS={gt1\[Rule]ende};, subS={}; ];
                  sumS = "\\sum_{t_2}";
                  If[Head[mixES[[posMixES,1,j]]]===conj,
                    
                    WriteString[outputfile,
                        TeXOutput[
                            getFullOld[conj[mixES[[posMixES,1,j]]]]/.subGC[
                                  1] /. subIndFinal[1,1]]<> " = "<> sumS<>
                          TeXOutput[mixES[[posMixES,2,2]][gt2,gt1] /. subS]  <>
                          TeXOutput[
                            conj[getFullOld[mixES[[posMixES,2,1]]]/.subGC[
                                        2] /.DeleteCases[subREfinal[2,1],
                                        gen2\[Rule]x_] /.subIndFinal[2,
                                      2]/.subIndFinal[1,1]  /.subS]]];,
                    
                    WriteString[outputfile,
                        TeXOutput[
                            getFullOld[mixES[[posMixES,1,j]]]/. subGC[1] /. 
                              subIndFinal[1,1]]<> " = "<> sumS <>
                          TeXOutput[
                            conj[mixES[[posMixES,2,2]][gt2,gt1]] /. subS]  <>
                          TeXOutput[
                            getFullOld[mixES[[posMixES,2,1]]] /.subGC[2] /. 
                                    DeleteCases[subREfinal[2,1],
                                      gen2\[Rule]x_] /.subIndFinal[2,
                                    2]/.subIndFinal[1,1]  /.subS]];
                    ];
                  If[Mod[j,3]===0 || j===Length[mixES[[posMixES,1]]],
                    WriteString[outputfile,"\\\\ \n"];,
                    WriteString[outputfile,"\\,, \\hspace{1cm} \n"];
                    ];
                  start = ende+1;
                  j++;];
                posMixES++;
                start =1;
                For[j=1,j\[LessEqual]Length[mixES[[posMixES,1]]],
                  ende = start-1+getGenALL[mixES[[posMixES,1,j]]];
                  If[ende === start, subS={gt1\[Rule]ende};, subS={}; ];
                  sumS = "\\sum_{t_2}";
                  If[Head[mixES[[posMixES,1,j]]]===conj,
                    
                    WriteString[outputfile,
                        TeXOutput[
                            getFullOld[conj[mixES[[posMixES,1,j]]]]/.subGC[
                                  1] /. subIndFinal[1,1]]<> " = "<> sumS <>
                          TeXOutput[mixES[[posMixES,2,2]][gt1,gt2] /. subS] <>
                          TeXOutput[
                            conj[getFullOld[mixES[[posMixES,2,1]]]/.subGC[2] /. 
                                      DeleteCases[subREfinal[2,1],
                                        gen2\[Rule]x_] /.subIndFinal[2,
                                      2] /.subIndFinal[1,1]  /. subS]]];,
                    
                    
                    WriteString[outputfile,
                        TeXOutput[
                            getFullOld[mixES[[posMixES,1,j]]]/. subGC[1] /. 
                              subIndFinal[1,1]]<> " = "<> sumS<>
                          TeXOutput[
                            conj[mixES[[posMixES,2,2]][gt1,gt2] /. subS]] <>
                          TeXOutput[
                            getFullOld[mixES[[posMixES,2,1]]] /.subGC[2] /. 
                                    DeleteCases[subREfinal[2,1],
                                      gen2\[Rule]x_]/.subIndFinal[2,
                                    2]/.subIndFinal[1,1]  /. subS]];
                    ];
                  If[j<Length[mixES[[posMixES,1]]],
                    If[Mod[j,3]===0 || j===Length[mixES[[posMixES,1]]],
                        WriteString[outputfile,"\\\\ \n"];,
                        WriteString[outputfile,"\\,, \\hspace{1cm} \n"];
                        ];,
                    WriteString[outputfile,"\n"];];
                  start = ende+1;
                  j++;];
                
                WriteString[outputfile,"\\end{align} \n"];
                posMixES++;
                
                ];,
              posMixES++;
              ];
            i++;];
          
          If[NoScalar\[Equal]True,
            WriteString[MatricesScalars,"\\item No Scalar Mixings \n"];
            ];
          
          If[NoFermion\[Equal]True,
            WriteString[MatricesFermions,"\\item No Fermion Mixings \n"];
            ];
          
          WriteString[MatricesScalars,"\\end{itemize} \n"];
          WriteString[MatricesFermions,"\\end{itemize} \n"];
          
          ];
        
        Close[MatricesFermions];
        Close[MatricesScalars];
        Close[GaugeRot];
        
        m++;];
      
      
      
      
      ];

WriteSelfEnergy:=Block[{i,j,k},
    Print["Writing One Loop Tadpoles to TeX-File"];
    
    SelfE=OpenWrite[ToFileName[$sarahCurrentTeXDir,"SelfEnergy1Loop.tex"]];
    Tad1L=OpenWrite[ToFileName[$sarahCurrentTeXDir,"Tadpoles1Loop.tex"]];
    
    
    For[i=1,i\[LessEqual]Length[TadpolesLoop],
      WriteString[Tad1L,"\\begin{align} \n"];
      WriteString[Tad1L, 
        "\\delta t^{(1)}_{"<>TeXOutput[TadpolesLoop[[i,1]]] <>"} = & \, "<>
          TeXOutput[TadpolesLoop[[i,2]]] <> " \n"];
      WriteString[Tad1L,"\\end{align} \n"];
      i++;];
    
    Close[Tad1L]; 
    
    Print["Writing One Loop Self Energy to TeX-File"];
    
    
    WriteString[SelfE,"\\begin{itemize} \n"];
    
    
    For[i=1,i\[LessEqual]Length[SelfEnergy],
      If[Length[mixedNames[[i,1]]]\[Equal]0,
        WriteString[SelfE,
            "\\item {\\bf Self-Energy for "<>getDescriptionField[
                getParticleNameDirac[mixedNames[[i,1]]]]  <>"} \\thickspace (\\("<> 
              TeXOutput[mixedNames[[i,1]] /. diracSubBack1 /. diracSubBack2] <>
              "\\)) \n\n"];,
        WriteString[SelfE,
            "\\item {\\bf Self-Energy for "<>getDescriptionField[
                getParticleNameDirac[mixedNames[[i,1,1]]]]  <>"} \\thickspace (\\("<> 
              TeXOutput[
                mixedNames[[i,1,1]] /. diracSubBack1  /. diracSubBack2] <>
              "\\)) \n\n"];
        ];
      
      
      WriteString[SelfE,"\\begin{align} \n"];
      If[getTypeOld[mixings[[i,1,1]]]===S,
        WriteString[SelfE, 
            "\\Pi_{i,j}(p^2) &= "<>TeXOutput[SelfEnergy[[i]]] <> " \n"];,
        WriteString[SelfE, 
          "\\Sigma^S_{i,j}(p^2) &= "<>TeXOutput[SelfEnergy[[i,1]]] <> 
            "\\\\ \n"];
        WriteString[SelfE, 
          "\\Sigma^R_{i,j}(p^2) &= "<>TeXOutput[SelfEnergy[[i,1]]] <> 
            "\\\\ \n"];
        WriteString[SelfE, 
          "\\Sigma^L_{i,j}(p^2) &= "<>TeXOutput[SelfEnergy[[i,1]]] <> " \n"];
        ];
      WriteString[SelfE,"\\end{align} \n"];
      i++;];
    
    
    For[i=1,i\[LessEqual]Length[UnmixedFields],
      If[FreeQ[massless,UnmixedFields[[i,1]]]\[Equal]True,
        WriteString[SelfE,
          "\\item {\\bf Self-Energy for "<>getDescriptionField[
              getParticleNameDirac[UnmixedFields[[i,1]]]]  <>"} \\thickspace (\\("<> 
            TeXOutput[UnmixedFields[[i,1]]] <>"\\)) \n\n"];
        WriteString[SelfE,"\\begin{align} \n"];
        If[getGenOne[UnmixedFields[[i,1]]]>1,
          
          If[getTypeOld[UnmixedFields[[i,1]]]===S || 
                getTypeOld[UnmixedFields[[i,1]]]===V,
              
              WriteString[SelfE, 
                  "\\Pi_{i,j}(p^2) &= "<>TeXOutput[SelfEunmixed[[i]]] <> 
                    "\\\\ \n"];,
              
              WriteString[SelfE, 
                "\\Sigma^S_{i,j}(p^2) &= "<>TeXOutput[SelfEunmixed[[i,1]]] <> 
                  "\\\\ \n"];
              
              WriteString[SelfE, 
                "\\Sigma^R_{i,j}(p^2) &= "<>TeXOutput[SelfEunmixed[[i,1]]] <> 
                  "\\\\ \n"];
              
              WriteString[SelfE, 
                "\\Sigma^L_{i,j}(p^2) &= "<>TeXOutput[SelfEunmixed[[i,1]]] <> 
                  " \n"];
              ];,
          
          If[getTypeOld[UnmixedFields[[i,1]]]===S || 
                getTypeOld[UnmixedFields[[i,1]]]===V,
              
              WriteString[SelfE, 
                  "\\Pi(p^2) &= "<>TeXOutput[SelfEunmixed[[i]]] <> " \n"];,
              
              WriteString[SelfE, 
                "\\Sigma^S(p^2) &= "<>TeXOutput[SelfEunmixed[[i,1]]] <> 
                  "\\\\ \n"];
              
              WriteString[SelfE, 
                "\\Sigma^R(p^2) &= "<>TeXOutput[SelfEunmixed[[i,1]]] <> 
                  "\\\\ \n"];
              
              WriteString[SelfE, 
                "\\Sigma^L(p^2) &= "<>TeXOutput[SelfEunmixed[[i,1]]] <> 
                  "\n"];
              ];
          ];
        WriteString[SelfE,"\\end{align} \n"];
        ];
      i++;];
    
    
    WriteString[SelfE,"\\end{itemize} \n"];
    Close[SelfE];
    
    TeXLineBreak=3;
    
    ];

WriteTadpoleEquations:=Block[{TadEqu,m,i,j},
      
      Print["Writing Tadpole Equations to TeX-File"];
      
      
      TFile=
        OpenWrite[ToFileName[$sarahCurrentTeXDir,"TadpoleEquations.tex"]];
      
      For[j=2,j\[LessEqual]Length[NameOfStates],
        If[Head[TadpoleEquations[NameOfStates[[j]]]]===List,
          
          TadEqu = 
            TadpoleEquations[NameOfStates[[j]]]  /. 
              a_ conj[x_] + a_ x_ \[Rule]2 a Re[x];
          
          If[Length[NameOfStates]>2,
            
            WriteString[TFile,
                "\\subsection{Tadpole Equations for eigenstates {\\tt '"<>
                  ToString[NameOfStates[[j]]]<>"'}}\n"];
            ];
          
          WriteString[TFile,"\\begin{align} \n"];
          vev=DEFINITION[NameOfStates[[j]]][VEVs];
          For[i=1,i\[LessEqual]Length[TadEqu],
            If[getDimParameters[vev[[i,2,1]]]==={},
              
              WriteString[TFile,
                  "\\frac{\\partial V}{\\partial "<>TeXOutput[vev[[i,2,1]]] <>
                    "} &= "];,
              If[getDimParameters[vev[[i,2,1]]][[1]]>1,
                  
                  WriteString[TFile,
                      "\\frac{\\partial V}{\\partial {"<>TeXOutput[
                          vev[[i,2,1]]] <>"}_i} &= "];,
                  
                  WriteString[TFile,
                      "\\frac{\\partial V}{\\partial "<>TeXOutput[
                          vev[[i,2,1]]] <>"} &= "];
                  ];
              ];
            WriteString[TFile,TeXOutput[Simplify[TadEqu[[i]]]]];
            If[i<Length[TadEqu],
              WriteString[TFile,"\\\\ \n"];,
              WriteString[TFile,"\n"];
              ];
            i++;];
          
          WriteString[TFile,"\\end{align} \n"];
          ];
        j++;];
      
      
      Close[TFile];
      
      ];


TeXforSARAH:=Block[{i,j,PARTF,PARTS,PARTV,PARTG},
      Print["Write Implementation in SARAH to TeX file"];
      
      sarah=OpenWrite[ToFileName[$sarahCurrentTeXDir,"SARAH.tex"]];
      
      WriteString[sarah,"\\section{Implementation in {\\tt SARAH} }\n"];
      WriteString[sarah,
        "Model directory: {\\tt "<> StringReplace[modDir,{"_"->"\\_"}] <>
          "} \n"];
      
      For[i=1,i\[LessEqual]Length[NameOfStates],
        WriteString[sarah,
          "\\subsection{Particles for eigenstates {\\tt '"<> ToString[
              NameOfStates[[i]]]<>"'}} \n"];
        PARTF = 
          Intersection[
            Transpose[
                    Take[#,{1,4}]&/@
                      Select[Particles[NameOfStates[[i]]],
                        TrueQ[#1[[4]]===F]&]][[1]] /. diracSubBack1 /. 
              diracSubBack2];
        PARTS = 
          Transpose[
              Take[#,{1,4}]&/@
                Select[Particles[NameOfStates[[i]]],
                  TrueQ[#1[[4]]===S]&]][[1]];
        PARTV = 
          Transpose[
              Take[#,{1,4}]&/@
                Select[Particles[NameOfStates[[i]]],
                  TrueQ[#1[[4]]===V]&]][[1]];
        PARTG = 
          Transpose[
              Take[#,{1,4}]&/@
                Select[Particles[NameOfStates[[i]]],
                  TrueQ[#1[[4]]===G]&]][[1]];
        
        WriteString[sarah,"\\begin{itemize} \n"];
        WriteString[sarah,"\\item Fermions \\\\ \n"];
        
        WriteString[sarah,"\\begin{center} \n"];
        WriteString[sarah,"\\begin{longtable}{|cc|} \n"];
        WriteString[sarah,"\\hline \n"];
        For[j=1,j\[LessEqual]Length[PARTF],
          
          WriteString[sarah,
            "\\("<>TeXOutput[
                getFullOld[PARTF[[j]]]/. subGC[1] /. subIndFinal[1,1]] <>
              " = \\left( \\begin{array}{c} "];
          
          WriteString[sarah, 
            TeXOutput[
                getFullOld[(PARTF[[j]] /. diracSub)[[1]]] /. subGC[1] /. 
                  subIndFinal[1,1]] <>"\\\\"<> 
              TeXOutput[
                getFullOld[(PARTF[[j]] /. diracSub)[[2]] ]/. subGC[1] /. 
                  subIndFinal[1,1]]];
          WriteString[sarah,"\\end{array} \\right) \\) & "];
          
          
          WriteString[sarah,
            "\\( \\verb\""<>ToString[getFullOld[PARTF[[j]]]] <>
              "\" = \\left( \\begin{array}{c} "];
          
          WriteString[sarah, 
            "\\verb\""<>ToString[getFullOld[(PARTF[[j]] /. diracSub)[[1]]] ] <>
              "\" \\\\ \\verb\""<>  
              ToString[getFullOld[(PARTF[[j]] /. diracSub)[[2]]]] <>"\""];
          WriteString[sarah,"\\end{array} \\right) \\)  \\\\ \n "];
          j++;];
        
        WriteString[sarah,"\\hline \n"];
        WriteString[sarah,"\\end{longtable} \n"];
        WriteString[sarah,"\\end{center} \n"];
        
        WriteString[sarah,"\\item Scalars \\\\ \n"];
        WriteParticleListSARAH[PARTS];
        
        WriteString[sarah,"\\item Vector Bosons \\\\ \n"];
        WriteParticleListSARAH[PARTV];
        
        WriteString[sarah,"\\item Ghosts \\\\ \n"];
        WriteParticleListSARAH[PARTG];
        
        WriteString[sarah,"\\end{itemize} \n"];
        i++;];
      
      
      WriteString[sarah,"\\subsection{Parameters} \n"];
      
      WriteString[sarah,"\\begin{center} \n"];
      WriteString[sarah,"\\begin{longtable}{|cc|cc|cc|} \n"];
      WriteString[sarah,"\\hline \n"];
      For[i=1,i\[LessEqual]Length[parameters],
        
        WriteString[sarah,"\\("<>TeXOutput[parameters[[i,1]]] <>"\\) & "];
        WriteString[sarah,"\\verb\""<>ToString[parameters[[i,1]]] <>"\" "];
        If[Mod[i,3]\[Equal]0 ,
          WriteString[sarah,"\\\\ \n"];,
          If[i\[Equal]Length[parameters],
              
              WriteString[sarah,
                  Nest[StringJoin[#1,"& &"]&,"",3-Mod[i,3]] <> " \\\\ \n "];,
              WriteString[sarah," & "];
              ];
          ];
        i++;];
      WriteString[sarah,"\\hline \n"];
      WriteString[sarah,"\\end{longtable} \n"];
      WriteString[sarah,"\\end{center} \n"];
      Close[sarah];
      ];

WriteParticleListSARAH[list_]:=Block[{j},
      
      WriteString[sarah,"\\begin{center} \n"];
      WriteString[sarah,"\\begin{longtable}{|cc|cc|} \n"];
      WriteString[sarah,"\\hline \n"];
      
      For[j=1,j\[LessEqual]Length[list],
        
        WriteString[sarah,
          "\\("<>TeXOutput[
              getFullOld[list[[j]]]/. subGC[1] /. subIndFinal[1,1]] <>
            "\\) & "];
        WriteString[sarah,
          "\\verb\""<>ToString[getFullOld[list[[j]]]] <>"\" "];
        If[Mod[j,2]\[Equal]0 ,
          WriteString[sarah,"\\\\ \n"];,
          If[j\[Equal]Length[list],
              
              WriteString[sarah,
                  Nest[StringJoin[#1,"& &"]& ,"",2-Mod[j,2]] <> 
                    " \\\\ \n "];,
              WriteString[sarah," & "];
              ];
          ];
        j++;];
      
      WriteString[sarah,"\\hline \n"];
      WriteString[sarah,"\\end{longtable} \n"];
      WriteString[sarah,"\\end{center} \n"];
      ];

TeXName[part_]:=Block[{},
      If[FreeQ[TeXParticles,part]\[Equal]False,
          pos = Position[TeXParticles,part,2,1][[1,1]];
          Return[Extract[TeXParticles,pos][[2]]];,
          Return[ToString[part]];
          ];
      ];

TeXNameP[part_]:=Block[{pos},
      If[FreeQ[TeXParameters,part]\[Equal]False,
          pos = Position[TeXParameters,part,2,1][[1,1]];
          Return[Extract[TeXParameters,pos][[2]]];,
          Return[ToString[part]];
          ];
      ];

