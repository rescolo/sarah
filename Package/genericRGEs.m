(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)


Options[CalcRGEs]={TwoLoop\[Rule]True,ReadLists\[Rule]False, 
      VariableGenerations\[Rule]{}, NoMatrixMultiplication\[Rule]False, 
      SimplifyExpressions\[Rule]True, ForceMatMul\[Rule]False};

CalcRGEs[opt___ ]:=
    CalculateRGEs[TwoLoop/.{opt}/.Options[CalcRGEs],
      ReadLists/.{opt}/.Options[CalcRGEs],
      VariableGenerations/.{opt}/.Options[CalcRGEs],
      NoMatrixMultiplication/.{opt}/.Options[CalcRGEs],
      SimplifyExpressions/.{opt}/.Options[CalcRGEs], 
      ForceMatMul/.{opt}/.Options[CalcRGEs]];

CalculateRGEs[TwoL_, ReadLists_,VarGens_, NoMatMul_,Simp_, Force_]:=Block[{},
      
      Off[CreateDirectory::ioerr];
      
      Print["-----------------------"];
      Print["Calculate RGEs   "];
      Print["-----------------------"];
      
      If[nonDiagonalU1\[Equal]True,
        Message[CalcRGEs::NonOrthogonalU1];
        ];
      
      $sarahCurrentRGEDir=ToFileName[{$sarahCurrentOutputMainDir,"RGEs"}];
      If[FileExistsQ[$sarahCurrentOutputMainDir]=!=True,
        CreateDirectory[$sarahCurrentOutputMainDir];
        ];
      If[FileExistsQ[$sarahCurrentRGEDir]=!=True,
        CreateDirectory[$sarahCurrentRGEDir];
        ];
      
      
      GenerateCouplingList[NoMatMul, Force];
      MakeParticleLists;
      InitBetaFunctions;
      CalcGroupFactors[VarGens];
      
      
      If[ReadLists\[Equal]False,
        CalcGammaij[TwoL,Simp];
        CalcBetaTriSuperpotential[TwoL,Simp];
        CalcBetaBiSuperpotential[TwoL,Simp];
        CalcBetaOneSuperpotential[TwoL,Simp];
        CalcBetaTriSoftBreaking[TwoL,Simp];
        CalcBetaBiSoftBreaking[TwoL,Simp];
        CalcBetaOneSoftBreaking[TwoL,Simp]; 
        CalcRGEtraces[TwoL,Simp];
        CalcBetaScalarMass[TwoL,Simp];
        CalcBetaGaugino[TwoL,Simp];
        CalcBetaGauge[TwoL,Simp];
        CalcBetaQuadSuperpotential[TwoL,Simp];
        CalcBetaVEVs[TwoL,Simp];
        
        If[FileExistsQ[$sarahCurrentOutputMainDir]=!=True,
          CreateDirectory[$sarahCurrentOutputMainDir];
          ];
        
        If[ThreeIndexParametersInvolved===True,
          Put[BetaMi3I,ToFileName[$sarahCurrentRGEDir,"BetaMi3I.m"]];
          Put[BetaGauge3I,ToFileName[$sarahCurrentRGEDir,"BetaGauge3I.m"]];
          Put[BetaWijkl3I,ToFileName[$sarahCurrentRGEDir,"BetaWijkl3I.m"]];
          Put[BetaVEV3I,ToFileName[$sarahCurrentRGEDir,"BetaVEV3I.m"]];
          ];,
        ReadBetaFunctions;
        ];
      
      RGEsCalculated = True;
      ];

ReadBetaFunctions:=Block[{},
      Print["Read Beta Functions"];
      BetaYijk=Get[ToFileName[$sarahCurrentRGEDir,"BetaYijk.m"]];
      BetaTijk=Get[ToFileName[$sarahCurrentRGEDir,"BetaTijk.m"]];
      BetaBij=Get[ToFileName[$sarahCurrentRGEDir,"BetaBij.m"]];
      BetaMuij=Get[ToFileName[$sarahCurrentRGEDir,"BetaMuij.m"]];
      BetaLi=Get[ToFileName[$sarahCurrentRGEDir,"BetaLi.m"]];
      BetaLSi=Get[ToFileName[$sarahCurrentRGEDir,"BetaLSi.m"]]; 
      Betam2ij=Get[ToFileName[$sarahCurrentRGEDir,"Betam2ij.m"]]; 
      BetaMi=Get[ToFileName[$sarahCurrentRGEDir,"BetaMi.m"]];
      BetaGauge=Get[ToFileName[$sarahCurrentRGEDir,"BetaGauge.m"]];
      BetaWijkl=Get[ToFileName[$sarahCurrentRGEDir,"BetaWijkl.m"]];
      BetaVEV=Get[ToFileName[$sarahCurrentRGEDir,"BetaVEV.m"]];
      TraceAbbr=Get[ToFileName[$sarahCurrentRGEDir,"RGEtraces.m"]];
      Gij=Get[ToFileName[$sarahCurrentRGEDir,"Gij.m"]];
      
      If[ThreeIndexParametersInvolved===True,
        BetaYijk3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaYijk3I.m"]];
        BetaTijk3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaTijk3I.m"]];
        BetaBij3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaBij3I.m"]];
        BetaMuij3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaMuij3I.m"]];
        BetaLi3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaLi3I.m"]];
         BetaLSi3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaLSi3I.m"]]; 
        Betam2ij3I=Get[ToFileName[$sarahCurrentRGEDir,"Betam2ij3I.m"]]; 
        BetaMi3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaMi3I.m"]];
        BetaGauge3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaGauge3I.m"]];
        BetaWijkl3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaWijkl3I.m"]];
        BetaVEV3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaVEV3I.m"]];
        Gij3I=Get[ToFileName[$sarahCurrentRGEDir,"Gij3I.m"]];
        TraceAbbr3I=Get[ToFileName[$sarahCurrentRGEDir,"RGEtraces3I.m"]];
        ];
      
      ];

GenerateCouplingList[NoMatMul_,Force_]:=Block[{i},
      If[NoMatMul,MakeMatrixMul=False;,MakeMatrixMul=True;];
      
      threeIndexParameter={};
      subForce = {};
      
      UseMatMul2=True;
      
      For[i=1,i\[LessEqual]Length[listWtriOne],
        If[FreeQ[listWtriOne[[i]],a_[gen1,gen2,gen3]]\[Equal]False,
          threeIndexParameter=
              Join[threeIndexParameter,{Head[
                    listWtriOne[[i,2,2]]/.Delta[a__]\[Rule]1 /. 
                        epsTensor[a__]\[Rule]1 /. RM[a__][b__]\[Rule]1],
                  T[Head[listWtriOne[[i,2,2]]/.Delta[a__]\[Rule]1 /. 
                          epsTensor[a__]\[Rule]1 /. RM[a__][b__]\[Rule]1]]}];
          ]; 
        i++;];
      
      subThreeIndices  = {};
      
      If[threeIndexParameter=!={},
        MakeMatrixMul=False;
        ThreeIndexParametersInvolved=True;
        For[i=1,i\[LessEqual]Length[threeIndexParameter],
          
          subThreeIndices  =
            Join[subThreeIndices ,{threeIndexParameter[[i]][b_,c_,s1_]\[Rule] 
                  Sum[threeIndexParameter[[i]][j][b,c] DeltaKronecker[j,
                        s1],{j,1,
                      getDimParameter[threeIndexParameter[[i]]][[3]]}]}];
          
          For[j=1,j\[LessEqual] 
              getDimParameter[threeIndexParameter[[i]]][[3]],
            
            parameters = 
              Join[parameters,{{threeIndexParameter[[i]][j],{generation,
                      generation},{getDimParameter[
                          threeIndexParameter[[i]]][[1]],
                      getDimParameter[threeIndexParameter[[i]]][[2]]}}}];
            j++;];
          i++;];
        
        If[Force\[Equal]True,MakeMatrixMul=True;subForce = subThreeIndices;
          ThreeIndexParametersInvolved=False;];
        If[NoMatMul\[Equal]True,ThreeIndexParametersInvolved=False;
          subForce = {};];
        
        ];
      
      For[i=1,i\[LessEqual]Length[listWtri],
        Yijk[listWtri[[i,1,1]]/.subGCRule[1],listWtri[[i,1,2]]/.subGCRule[2],
            listWtri[[i,1,3]]/.subGCRule[3]]=
          listWtri[[i,2,1]]*listWtri[[i,2,2]] /.Select[subAlways,
                  FreeQ[#1,sum]&] /. conj[x_]\[Rule]Conj[x] /. subForce ;
        Aijk[listAtri[[i,1,1]]/.subGCRule[1],listAtri[[i,1,2]]/.subGCRule[2],
            listAtri[[i,1,3]]/.subGCRule[3]]=
          listAtri[[i,2,1]]*listAtri[[i,2,2]]/. 
                Select[subAlways,FreeQ[#1,sum]&] /. conj[x_]\[Rule]Conj[x] /. 
            subForce;
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[listWbi],
        Muij[listWbi[[i,1,1]]/.subGCRule[1],listWbi[[i,1,2]]/.subGCRule[2]]=
          listWbi[[i,2,1]]*listWbi[[i,2,2]] /.Select[subAlways,
                FreeQ[#1,sum]&] /. conj[x_]\[Rule]Conj[x];
        Bij[listAbi[[i,1,1]]/.subGCRule[1],listAbi[[i,1,2]]/.subGCRule[2]]=
          listAbi[[i,2,1]]*listAbi[[i,2,2]] /.Select[subAlways,
                FreeQ[#1,sum]&] /. conj[x_]\[Rule]Conj[x];
        i++;
        ];
      
      For[i=1,i\[LessEqual]Length[listWone],
        Li[listWone[[i,1,1]]/.subGCRule[1]]=
          listWone[[i,2,1]]*listWone[[i,2,2]] /.Select[subAlways,
                FreeQ[#1,sum]&] /. conj[x_]\[Rule]Conj[x];
        LSi[listAone[[i,1,1]]/.subGCRule[1]]=
          listAone[[i,2,1]]*listAone[[i,2,2]] /.Select[subAlways,
                FreeQ[#1,sum]&]/. conj[x_]\[Rule]Conj[x];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listSM],
        m2ij[listSM[[i,1,1]] /.subGCRule[1],listSM[[i,1,2]]/.subGCRule[2]]=
          listSM[[i,2]] /.Select[subAlways,FreeQ[#1,sum]&] /. 
            conj[x_]\[Rule]Conj[x];
        i++;];
      
      For[i=1,i\[LessEqual]Length[Gauge],
        Mi[i]=
          listGMall[[i,2]] /.Select[subAlways,FreeQ[#1,sum]&]/. 
            conj[x_]\[Rule]Conj[x];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listW4],
        Wijkl[listW4[[i,1,1]]/.subGCRule[1],listW4[[i,1,2]]/.subGCRule[2],
            listW4[[i,1,3]]/.subGCRule[3],listW4[[i,1,4]]/.subGCRule[4]]=
          listW4[[i,2,1]]*listW4[[i,2,2]]/.Select[subAlways,FreeQ[#1,sum]&]/. 
            conj[x_]\[Rule]Conj[x];
        i++;];
      
      
      listSMOne = listSM;
      
      NeededAnaDimsForVEVs={};
      listVEVi={};
      SA`ListVEVi={};
      
      If[Head[DEFINITION[Last[NameOfStates]][VEVs]]===List,
        For[i=1,i\[LessEqual]Length[DEFINITION[Last[NameOfStates]][VEVs]],
            If[FreeQ[listVEVi,DEFINITION[Last[NameOfStates]][VEVs][[i,2,1]]],
              
              pos=Position[SFieldsMultiplets,
                  DEFINITION[Last[NameOfStates]][VEVs][[i,1]]];
              
              NeededAnaDimsForVEVs=
                Join[NeededAnaDimsForVEVs,{{getBlankSF[
                        Extract[SFields,pos[[1,1]]]],
                      DEFINITION[Last[NameOfStates]][VEVs][[i,2,1]]}}];
              sf=RE[getFullSF[Extract[SFields,pos[[1,1]]]]];
              
              listVEVi = 
                Join[listVEVi,{{sf  makeDelta[pos[[1,1]],1,2,{generation}],
                      DEFINITION[Last[NameOfStates]][VEVs][[i,2,1]]}}];
              
              SA`ListVEVi = 
                Join[SA`ListVEVi,{{sf, {-1,
                        makeDelta[pos[[1,1]],1,
                            2,{generation}] DEFINITION[Last[NameOfStates]][
                              VEVs][[i,2,1]]}}}];
              
              VEVi[sf /. Delta[a__]\[Rule]1 /. RM[a__][b__]\[Rule]1 /. 
                    subGCRule[1]]=
                getFull[DEFINITION[Last[NameOfStates]][VEVs][[i,2,1]]] /. 
                  subGC[1];
              ];
            i++;];
        ];
      
      ];


MakeParticleLists :=Block[{i,j},
      
      Print["Making Lists of Particles and Couplings"];
      
      LPName = 
        SFields /. A_[{a__}]\[Rule]A /. A_[{a__}]\[Rule]A /. 
          conj[x_]\[Rule] x;
      LP = SFields /. conj[x_]\[Rule] x;
      
      
      listQuad = Table[{},{Length[LP]}];
      listTri = Table[{},{Length[LP]}];
      listTri2 ={};
      listBi = Table[{},{Length[LP]}];
      
      
      
      For[i=1,i\[LessEqual]Length[listW4],
        For[j=1,j\[LessEqual]4,
          pos=Position[LP,listW4[[i,1,j]]];
          
          listQuad[[pos[[1,1]]]]=
            Join[listQuad[[pos[[1,1]]]],Delete[listW4[[i,1]],j]];
          j++;];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listWtri],
        pos=Position[LP,listWtri[[i,1,1]]];
        listTri[[pos[[1,1]]]]=
          Join[listTri[[pos[[1,1]]]],{listWtri[[i,1,2]],listWtri[[i,1,3]]}];
        pos=Position[LP,listWtri[[i,1,2]]];
        listTri[[pos[[1,1]]]]=
          Join[listTri[[pos[[1,1]]]],{listWtri[[i,1,1]],listWtri[[i,1,3]]}];
        pos=Position[LP,listWtri[[i,1,3]]];
        listTri[[pos[[1,1]]]]=
          Join[listTri[[pos[[1,1]]]],{listWtri[[i,1,2]],listWtri[[i,1,1]]}];
        
        For[j=1,j\[LessEqual]3,
          
          If[FreeQ[listTri2,
              C[getBlankSF[listWtri[[i,1,j]]],
                getBlankSF[listWtri[[i,1,Mod[j+1,3,1]]]]]],
            
            listTri2 = 
                Join[listTri2,{{C[getBlankSF[listWtri[[i,1,j]]],
                        getBlankSF[listWtri[[i,1,Mod[j+1,3,1]]]]],{getBlankSF[
                          listWtri[[i,1,Mod[j+2,3,1]]]]}}}];,
            
            pos=Position[listTri2,
                  C[getBlankSF[listWtri[[i,1,j]]],
                    getBlankSF[listWtri[[i,1,Mod[j+1,3,1]]]]]][[1,1]];
            
            listTri2[[pos,2]]=
              Intersection[
                Join[listTri2[[pos,2]],{getBlankSF[
                      listWtri[[i,1,Mod[j+2,3,1]]]]}]];
            ];
          j++;];
        
        i++;];
      
      listTri2=Map[getBlankSF,listTri2];
      
      For[i=1,i\[LessEqual]Length[listWbi],
        pos=Position[LP,listWbi[[i,1,1]]];
        listBi[[pos[[1,1]]]]=Join[listBi[[pos[[1,1]]]],{listWbi[[i,1,2]]}];
        
        pos=Position[LP,listWbi[[i,1,2]]];
        listBi[[pos[[1,1]]]]=Join[listBi[[pos[[1,1]]]],{listWbi[[i,1,1]]}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[LP],
        listBi[[i]]=Join[listBi[[i]],{LP[[i]]}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[LP],
        listBi[[i]]=Union[listBi[[i]]];
        listTri[[i]]=Union[listTri[[i]]];
        listQuad[[i]]=Union[listQuad[[i]]];
        i++;];
      
      ];


CalcGroupFactors[VarGens_]:=Block[{i,j,k,l},
      For[i=1,i\[LessEqual]AnzahlGauge,
        For[j=1,j\[LessEqual]AnzahlChiral,
          If[Gauge[[i,2]]===U[1], fin=1;,fin=Gauge[[i,2,1]]^2-1;];
          
          TA[i,RE[SFields[[j]]] /. subGCRule[1],
              RE[SFields[[j]]] /. subGCRule[2]] =
            
            Sum[getGenerator[i, FieldDim[j,i],10,1,2],{gen10,1,fin}] /. 
              Delta[a__]\[Rule]Delta[a,rge];
          states = 1;
          For[k=1,k\[LessEqual]AnzahlGauge,
            
            If[(k=!=i) && (Gauge[[k,2]]=!=U[1]), 
              states *= Abs[FieldDim[j,k]];];
            k++;];
          MulFactor[getBlankSF[Fields[[j,3]]],i]=states;
          If[FreeQ[VarGens,Fields[[j,3]]],
            MulFactor[getBlankSF[SFields[[j]]],i]=states*Fields[[j,2]];,
            
            MulFactor[getBlankSF[SFields[[j]]],i]=
                states*NumberGenerations[Fields[[j,3]]];
            ];
          j++];
        
        SA`Dynkin[i] = Gauge[[i,2,1]];
        If[Gauge[[i,2]]=!=U[1],
          If[Head[Gauge[[i,2]]]===SU,
              SA`Casimir[i] = Gauge[[i,2,1]];
              dimAdj[i] = Gauge[[i,2,1]]^2-1;,
              
              SA`Casimir[i] =
                Casimir[SusynoForm[Gauge[[i,2]]],
                  Adjoint[SusynoForm[Gauge[[i,2]]]]];
              
              dimAdj[i] = 
                DimR[SusynoForm[Gauge[[i,2]]],
                  Adjoint[SusynoForm[Gauge[[i,2]]]]];
              ];,
          SA`Casimir[i]=0;
          dimAdj[i]=1;
          ];
        gc[i] = Gauge[[i,4]];
        i++;];
      
      For[i=1,i\[LessEqual]AnzahlGauge,
        SA`Dynkin[rep,i]=
          
          Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Dynkin[getBlankSF[LP[[n1]]],
                i],{n1,1,Length[LP]}];
        SA`Casimir[rep,i]=
          
          Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Casimir[
                getBlankSF[LP[[n1]]],i],{n1,1,Length[LP]}];
        For[j=1,j\[LessEqual]AnzahlGauge,
          SA`CasimirDynkin[rep,i,j]=
            
            Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Dynkin[
                  getBlankSF[LP[[n1]]],i] SA`Casimir[getBlankSF[LP[[n1]]],
                  j],{n1,1,Length[LP]}];
          j++;];
        i++;];
      ];



CalcGammaij[TwoLoop_,Simp_]:=Block[{i,j,subChargeInd},
      
      Gij={};
      subRGE = subRGEDelta;
      
      Print["Calculating anomalous Dimensions"];
      
      For[i=1,i\[LessEqual]Length[LP],
        For[j=1,j\[LessEqual]Length[LP],
           If[i\[Equal]j, 
            
            gaugePart = -2 Sum[
                  gc[n1]^2 *SA`Casimir[getBlankSF[LP[[i]]],n1],{n1,1,
                    AnzahlGauge}] makeDelta[i,1,2,{}];
            If[TwoLoop\[Equal]True,
              
              gaugePart2L = 
                  makeDelta[i,1,
                      2,{}](2 Sum[
                            gc[n1]^4 *(SA`Dynkin[rep,n1]*
                                    SA`Casimir[getBlankSF[LP[[i]]],n1]- 
                                  3 SA`Casimir[getBlankSF[LP[[i]]],
                                      n1] SA`Casimir[n1]),{n1,1,
                              AnzahlGauge}]+
                        
                        2 Sum[Sum[
                              gc[n2]^2 gc[n1]^2 *2 SA`Casimir[
                                  getBlankSF[LP[[i]]],n1] SA`Casimir[
                                  getBlankSF[LP[[i]]],n2],{n2,1,
                                AnzahlGauge}],{n1,1,AnzahlGauge}]);,
              gaugePart2L=0;
              ];,
            gaugePart2L=0;
            gaugePart=0;
            ];
          
          
          gammaij[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 
            1/2 ExpandTerm[
                  TraceValue[pP] TraceValue[pQ] Conj[
                      Yijk[LP[[i]]/.subGC[1],pP,pQ]] Yijk[LP[[j]]/.subGC[2],
                      pP,pQ]]+ gaugePart;
          
          If[TwoLoop==True,
            
            gammaij2L[LP[[i]]/. subGCRule[1],
                  LP[[j]]/. 
                    subGCRule[2]]=-1/2 ExpandTerm[
                      TraceValue[pY] TraceValue[pZ]  TraceValue[
                          pW] TraceValue[pX] Conj[
                          Yijk[LP[[i]]/.subGC[1],pW,pX]] Yijk[pX,pY,pZ] Conj[
                          Yijk[pY,pZ,pR]] Yijk[pW,pR,LP[[j]]/.subGC[2]]] + 
                  Sum[ExpandTerm[
                      TraceValue[pY] TraceValue[pZ]   gc[gnr]^2 Conj[
                          Yijk[LP[[i]]/.subGC[1],pY,pZ]] Yijk[
                          LP[[j]]/.subGC[2],pY,
                          pZ](2 SA`Casimir[pY,gnr]-
                            SA`Casimir[LP[[i]]/.subGC[1],gnr])],{gnr,1,
                      AnzahlGauge}] + gaugePart2L;,
            gammaij2L[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
            ];
          
          (* CHANGED FOR RGE TEST *)
          
          
          If[DeleteCases[
                Intersection[Flatten[{ListFields[[i,2]],ListFields[[i,3]]}]],
                generation]=!={},
            subChargeInd = 
                Flatten[
                  makeDelta[i,1,2,{generation}] /.Times\[Rule]List /. 
                    Delta[a_,b_] \[Rule] {a\[Rule]1,b\[Rule]1}];,
            subChargeInd={};
            ];
          
          res1Loop = 
            CalcRGEValue[
              gammaij[LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]] /. subChargeInd /. 
                  Delta[gen1,gen2]\[Rule]Kronecker[i1,i2] /. {gen1\[Rule]i1,
                  gen2\[Rule]i2}  ];
          
          res2Loop = 
            CalcRGEValue[
              gammaij2L[LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]] /. 
                    subChargeInd/. 
                  Delta[gen1,gen2]\[Rule]Kronecker[i1,i2] /. {gen1\[Rule]i1,
                  gen2\[Rule]i2} ];
          
          If[Fields[[i,2]]\[Equal]1,
            res1Loop = res1Loop /. Kronecker[a__]\[Rule]1;
            res2Loop = res2Loop /. Kronecker[a__]\[Rule]1;
            ];
          
          If[res1Loop=!=0 || res2Loop =!=0,
            If[Simp===True && ThreeIndexParametersInvolved=!=True,
               
              Gij = Join[
                    Gij,{{{LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]},
                        Simplify[res1Loop],Simplify[res2Loop] }}];,
               
              Gij = Join[
                    Gij,{{{LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]},res1Loop,
                        res2Loop }}];
              ];
            If[j=!=i,
              listBi[[i]]=Join[listBi[[i]],{LP[[j]]}];
              listBi[[j]]=Join[listBi[[j]],{LP[[i]]}];
              ];
            ];
          
           j++];
        i++];
      
      If[ThreeIndexParametersInvolved===True,
        Gij3I={};
        MakeMatrixMul=True;
        For[i=1,i\[LessEqual]Length[Gij],
          
          Gij3I=Join[
              Gij3I,{{Gij[[i,1]],Simplify[Split3IndexParameter[Gij[[i,2]]]],
                  Simplify[Split3IndexParameter[Gij[[i,3]]]]}}];
          i++;];
        MakeMatrixMul=False;
        Put[Gij3I,ToFileName[$sarahCurrentRGEDir,"Gij3I.m"]];
        ];
      
      
      Put[Gij,ToFileName[$sarahCurrentRGEDir,"Gij.m"]];
      
      
      ];



InitBetaFunctions:=Block[{},
      betaFuncWijkl[p1_,p2_,p3_,p4_] := 
        ExpandTerm[Wijkl[p1,p2,p3,pZ] gammaij[pZ,p4]];
      betaFuncWijkl2L[p1_,p2_,p3_,p4_] := 
        ExpandTerm[Wijkl[p1,p2,p3,pP] gammaij2L[pP,p4]];
      
      betaFuncYijk[p1_,p2_,p3_] := ExpandTerm[Yijk[p1,p2,pN] gammaij[pN,p3]];
      betaFuncYijk2L[p1_,p2_,p3_] := 
        ExpandTerm[Yijk[p1,p2,pP] gammaij2L[pP,p3]];
      
      betaFuncMuij[p1_,p2_] :=  ExpandTerm[ Muij[p1,pN] gammaij[pN,p2]];
      betaFuncMuij2L[p1_,p2_] :=  ExpandTerm[ Muij[p1,pN] gammaij2L[pN,p2]];
      
      betaFuncLi[p1_] :=  Li[p1] gammaij[p1,p1];
      betaFuncLi2L[p1_] :=  Li[p1] gammaij2L[p1,p1];
      
      betaFuncAijk[p1_,p2_,p3_]:= 
        1/2TraceValue[pL] TraceValue[pM ]TraceValue[pN]  Aijk[p1,p2,pL] Conj[
              Yijk[pL,pM,pN]] Yijk[pM,pN,p3] + 
          TraceValue[pL] TraceValue[pM ]TraceValue[pN] Yijk[p1,p2,pL] Conj[
              Yijk[pL,pM,pN]] Aijk[pM,pN,p3]- 
          2Sum[(Aijk[p1,p2,p3]- 2 Mi[n1] Yijk[p1,p2,p3]) gc[n1]^2SA`Casimir[
                  getBlankSF[p3],n1],{n1,1,AnzahlGauge}];
      betaFuncAijk2L[p1_,p2_,
          p3_]:=-1/2 TraceValue[pL] TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ]TraceValue[pR]Aijk[p1,p2,pL] Conj[
              Yijk[pL,pM,pN]] Yijk[pN,pP,pQ] Conj[Yijk[pP,pQ,pR]] Yijk[pM,pR,
              p3]- TraceValue[pL] TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ]TraceValue[pR]Yijk[p1,p2,pL] Conj[
              Yijk[pL,pM,pN]] Yijk[pN, pP,pQ] Conj[Yijk[pP,pQ,pR]] Aijk[pM,pR,
              p3] - TraceValue[pL] TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ]TraceValue[pR]Yijk[p1,p2,pL] Conj[
              Yijk[pL,pM,pN]] Aijk[pN,pP,pQ] Conj[Yijk[pP,pQ,pR]] Yijk[pM,pR,
              p3]+Sum[TraceValue[pL]  TraceValue[pP] TraceValue[
                pQ](Aijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p3] + 
                  2 Yijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Aijk[pP,pQ,p3] - 
                  2 Mi[gnr] Yijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,
                      p3])gc[gnr]^2 ( 
                2 SA`Casimir[getBlankSF[pP],gnr] - 
                  SA`Casimir[getBlankSF[p3],gnr]),{gnr,1,AnzahlGauge}] + 
          Sum[(2 Aijk[p1,p2,p3] - 8 Mi[gnr] Yijk[p1,p2,p3]) gc[
                  gnr]^4 (SA`Casimir[getBlankSF[p3],gnr] SA`Dynkin[rep,
                      gnr]  - 
                  3 SA`Casimir[gnr] SA`Casimir[getBlankSF[p3],gnr]),{gnr,1,
              AnzahlGauge}] +  
          Sum[Sum[2 gc[gnr]^2 gc[gnr2]^2 (2 Aijk[p1,p2,p3] - 
                    8 Mi[gnr] Yijk[p1,p2,p3]) SA`Casimir[getBlankSF[p3],
                  gnr]  SA`Casimir[getBlankSF[p3],gnr2],{gnr2,1,
                AnzahlGauge}],{gnr,1,AnzahlGauge}];
      
      betaFuncBij[p1_,p2_]:=
        1/2 TraceValue[pM ]TraceValue[pN]Bij[p1,pL] Conj[Yijk[pL,pM,pN]] Yijk[
              pM,pN,p2]+
          
          1/2 TraceValue[pM]TraceValue[pL] Yijk[p1,p2,pL] Conj[
              Yijk[pL,pM,pN]] Bij[pM,pN]+
           
          TraceValue[pM]TraceValue[pN]Muij[p1,pL] Conj[Yijk[pL,pM,pN]] Aijk[
              pM,pN,p2]-
          
          2 Sum[(Bij[p1,p2] - 2 Mi[n1] Muij[p1,p2]) gc[n1]^2SA`Casimir[
                  getBlankSF[p1],n1],{n1,1,AnzahlGauge}];
      betaFuncBij2L[p1_,
          p2_]:=
        -1/2 TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ]TraceValue[pR] Bij[p1,pL] Conj[
              Yijk[pL,pM,pN]] Yijk[pP,pQ,pN] Conj[Yijk[pP,pQ,pR]] Yijk[pM,pR,
              p2] - 1/2 TraceValue[pL]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ]TraceValue[pR]Yijk[p1,p2,pL] Conj[
              Yijk[pL,pM,pN]] Bij[pM,pR] Conj[Yijk[pP,pQ,pR]] Yijk[pP,pQ,pN]- 
          1/2 TraceValue[pL] TraceValue[pN] TraceValue[pP] TraceValue[
              pQ]TraceValue[pR]Yijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Muij[pM,
              pR] Conj[Yijk[pP,pQ,pR]] Aijk[pP,pQ,pN] - 
          TraceValue[pM ]TraceValue[pN] TraceValue[pP] TraceValue[
              pQ]TraceValue[pR]Muij[p1,pL] Conj[Yijk[pL,pM,pN]] Aijk[pN,pP,
              pQ] Conj[Yijk[pP,pQ,pR]] Yijk[pM,pR,p2]- 
          TraceValue[pM ]TraceValue[pN] TraceValue[pP] TraceValue[
              pQ]TraceValue[pR]Muij[p1,pL] Conj[Yijk[pL,pM,pN]] Yijk[pN,pP,
              pQ] Conj[Yijk[pP,pQ,pR]] Aijk[pM,pR,p2] + 
          2 Sum[Sum[
                TraceValue[pL] TraceValue[pP] Yijk[p1,p2,pL] Conj[
                    Yijk[pL,pP,pQ]] (Bij[pP,pQ] - Muij[pP,pQ] Mi[gnr]) gc[
                      gnr]^2 SA`Casimir[getBlankSF[pP],gnr],{gn,1,
                  AnzahlGauge}],{gnr,1,AnzahlGauge}] + 
          Sum[TraceValue[pQ] TraceValue[
                pP] (Bij[p1,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p2] + 
                  2  Muij[p1,pL] Conj[Yijk[pL,pP,pQ]] Aijk[pP,pQ,p2] - 
                  2 Muij[p1,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p2] Mi[
                      gnr])gc[gnr]^2 (2 SA`Casimir[getBlankSF[pP],gnr] - 
                  SA`Casimir[p1,gnr]),{gnr,1,AnzahlGauge}] + 
          Sum[(2 Bij[p1,p2] - 8 Muij[p1,p2] Mi[gnr]) gc[
                  gnr]^4 (SA`Casimir[getBlankSF[p1],gnr] SA`Dynkin[rep,
                      gnr]  - 
                  3 SA`Casimir[gnr] SA`Casimir[getBlankSF[p1],gnr]),{gnr,1,
              AnzahlGauge}] + 
          Sum[Sum[(2 Bij[p1,p2] - 8 Muij[p1,p2] Mi[gnr]) gc[gnr]^2 gc[
                    gn]^2 2 SA`Casimir[getBlankSF[p1],gnr] SA`Casimir[
                  getBlankSF[p1],gn],{gn,1,AnzahlGauge}],{gnr,1,
              AnzahlGauge}];
      
      
      betaFuncLSi[p1_]:=
        1/2 LSi[pL] Conj[Yijk[pL,pM,pN]] Yijk[p1,pM,pN]+
          Li[pL] Conj[Yijk[pL,pM,pN]] Aijk[p1,pM,pN]+
          Muij[p1,pL] Conj[Yijk[pL,pM,pN]] Bij[pM,pN]+
          2Yijk[p1,pL,pM] m2ij[pM,pN] Conj[Muij[pN,pL]]+
          Aijk[p1,pL,pM] Conj[Bij[pL,pM]];
      betaFuncLSi2L[p1_]:=
        2 Sum[gc[gnr]^2 SA`Casimir[pL,gnr]Yijk[p1,pO,pL]Conj[
                  Yijk[pW,pO,pL]]LSi[pW],{gnr,1,AnzahlGauge}]-1/2 Yijk[p1,pO,
              pQ] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[
              Yijk[pW,pO,pL]] LSi[pW]-4 Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr] Yijk[p1,pO,pL] Mi[gnr] Conj[
                  Yijk[pW,pO,pL]] Li[pW],{gnr,1,AnzahlGauge}]+ 
          4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Aijk[p1,pO,pL] Conj[
                  Yijk[pW,pO,pL]] Li[pW],{gnr,1,AnzahlGauge}]-
          
          Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Aijk[pL,pX,pY] Conj[
              Aijk[pW,pO,pL]] Li[pW] - 
          Aijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[
              Yijk[pW,pO,pL]] Li[pW]-4 Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr] Conj[Yijk[pZ,pN,pL]] Muij[pN,
                  pL] Mi[gnr] Muij[p1,pZ],{gnr,1,AnzahlGauge}]-4 Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr] Conj[Yijk[pZ,pN,pL]] Bij[pN,
                  pL] Muij[p1,pZ],{gnr,1,AnzahlGauge}] -
             
          Conj[Yijk[pZ,pN,pQ]] Aijk[pQ,pX,pY] Conj[Yijk[pL,pX,pY]] Muij[pN,
              pL] Muij[p1,pZ]- 
          Conj[Yijk[pZ,pN,pQ]] Yijk[pQ,pX,pY] Conj[Yijk[pL,pX,pY]] Bij[pN,
              pL] Muij[p1,pZ]+4Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr] 2 Yijk[p1,pO,pL] Conj[
                  Muij[pO,pL]] Mi[gnr] Conj[Mi[gnr]],{gnr,1,
                AnzahlGauge}]-4 Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr]  Yijk[p1,pO,pL] Conj[
                  Bij[pO,pL]] Mi[gnr],{gnr,1,AnzahlGauge}]-4 Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr] Aijk[p1,pO,pL] Conj[
                  Muij[pO,pL]] Mi[gnr],{gnr,1,AnzahlGauge}]+4 Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr] Aijk[p1,pO,pL] Conj[
                  Bij[pO,pL]],{gnr,1,AnzahlGauge}]+4 Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr] Yijk[p1,pO,pL] m2ij[pO,pR] Conj[
                  Muij[pR,pL]],{gnr,1,AnzahlGauge}]+4 Sum[
              gc[gnr]^2 SA`Casimir[pL,gnr] Yijk[p1,pO,pR] m2ij[pR,pL] Conj[
                  Muij[pO,pL]],{gnr,1,AnzahlGauge}]-  
          Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Aijk[pL,pX,pY] Conj[
              Bij[pO,pL]]- 
          Aijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[
              Bij[pO,pL]]- 
          Yijk[p1,pO,pQ] Conj[Aijk[pQ,pX,pY]] Aijk[pL,pX,pY] Conj[
              Muij[pO,pL]]- 
          Aijk[p1,pO,pQ] Conj[Aijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[
              Muij[pO,pL]]- 
          Yijk[p1,pR,pQ] m2ij[pR,pO] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[
              Muij[pO,pL]] - 
          Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Yijk[pR,pX,pY] m2ij[pL,pR] Conj[
              Muij[pO,pL]]-
          Yijk[p1,pO,pR] m2ij[pQ,pR] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[
              Muij[pO,pL]]-2 Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pR]] m2ij[pY,
              pR] Yijk[pL,pX,pY] Conj[Muij[pO,pL]];
      
      
      betaFuncm2ij[p1_,p2_]:=
        
        1/2 TraceValue[pP]TraceValue[pQ]  Conj[Yijk[p1,pP,pQ]] Yijk[pP,pQ,
              pN] m2ij[pN,p2]+1/2 TraceValue[pP]TraceValue[pQ]  m2ij[p1,
              pN] Conj[Yijk[pP,pQ,pN]] Yijk[p2,pP,pQ] +
          
          2 TraceValue[pP]TraceValue[pQ]  Conj[Yijk[p1,pP,pQ]] Yijk[p2,pP,
              pR]m2ij[pR,pQ]+ 
          TraceValue[pP]TraceValue[pQ] Conj[Aijk[p1,pP,pQ]] Aijk[p2,pP,pQ]-
          
          8Sum[listSMadd[[i,1]] EMatrix[
                  listSMadd[[i,2]]] (makeDelta[i,1,
                      2,{}] /.Delta[a_,b_]\[Rule]Delta[a,b,rge])  Mi[n1] Conj[
                  Mi[n1]] gc[n1]^2 SA`Casimir[getBlankSF[p1],n1],{n1,1,
                AnzahlGauge}] +
          listSMadd[[i,1]] EMatrix[listSMadd[[i,2]]] Sum[
              2 gc[n1]^2 TA[n1,p1,p2] Tr1[n1],{n1,1,AnzahlGauge}];
       betaFuncm2ij2L[p1_,
          p2_]:=
        -1/2 TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ]TraceValue[pR] m2ij[p1,pL] Conj[
              Yijk[pL,pM,pN]] Yijk[pM,pR,p2] Conj[Yijk[pP,pQ,pR]] Yijk[pP,pQ,
              pN] - 
          
          1/2  TraceValue[pM ]TraceValue[pN] TraceValue[pP] TraceValue[
              pQ]TraceValue[pR] m2ij[p2,pL] Yijk[pL,pM,pN] Conj[
              Yijk[pM,pR,p1]] Yijk[pP,pQ,pR] Conj[Yijk[pP,pQ,pN]]- 
          
          TraceValue[pM ]TraceValue[pN] TraceValue[pP] TraceValue[
              pQ]TraceValue[pR] Conj[Yijk[p1,pL,pM]] Yijk[p2,pN,pM] m2ij[pR,
              pL] Conj[Yijk[pN,pP,pQ]] Yijk[pR,pP,pQ] - 
          TraceValue[pM ]TraceValue[pN] TraceValue[pP] TraceValue[
              pQ]TraceValue[pL] Conj[Yijk[p1,pL,pM]] Yijk[p2,pN,pM] m2ij[pN,
              pR] Conj[Yijk[pR,pP,pQ]] Yijk[pL,pP,pQ]- 
          TraceValue[pM ]TraceValue[pN] TraceValue[pP] TraceValue[
              pQ]TraceValue[pR] Conj[Yijk[p1,pL,pM]] Yijk[p2,pN,pR] m2ij[pL,
              pN] Conj[Yijk[pP,pQ,pR]] Yijk[pP,pQ,pM]-
          TraceValue[pM ]TraceValue[pN] TraceValue[pP] TraceValue[
              pQ]TraceValue[pL] 2 Conj[Yijk[p1,pL,pM]] Yijk[p2,pL,pN] Conj[
              Yijk[pN,pP,pQ]] Yijk[pM,pP,pR] m2ij[pR,pQ]- 
          TraceValue[pL] TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ]Conj[Yijk[p1,pL,pM]] Yijk[p2,pL,pN] Conj[
              Aijk[pN,pP,pQ]] Aijk[pM,pP,pQ]- 
          TraceValue[pL] TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ] Conj[Aijk[p1,pL,pM]] Aijk[p2,pL,pN] Conj[
              Yijk[pN,pP,pQ]] Yijk[pM,pP,pQ] - 
          TraceValue[pL] TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ] Conj[Aijk[p1,pL,pM]] Yijk[p2,pL,pN] Conj[
              Yijk[pN,pP,pQ]] Aijk[pM,pP,pQ]- 
          TraceValue[pL] TraceValue[pM ]TraceValue[pN] TraceValue[
              pP] TraceValue[pQ] Conj[Yijk[p1,pL,pM]] Aijk[p2,pL,pN] Conj[
              Aijk[pN,pP,pQ]] Yijk[pM,pP,pQ]+ 
          Sum[TraceValue[pP] TraceValue[
                  pQ] gc[gnr]^2 (SA`Casimir[getBlankSF[pP],gnr] + 
                    SA`Casimir[getBlankSF[pQ],gnr] - 
                    SA`Casimir[getBlankSF[p1],gnr]) m2ij[p1,pL] Conj[
                  Yijk[pL,pP,pQ]] Yijk[p2,pP,pQ] +
              TraceValue[pP] TraceValue[
                  pQ] gc[gnr]^2 (SA`Casimir[getBlankSF[pP],gnr] + 
                    SA`Casimir[getBlankSF[pQ],gnr] - 
                    SA`Casimir[getBlankSF[p1],gnr])Conj[Yijk[p1,pP,pQ]] Yijk[
                  pL,pP,pQ] m2ij[pL,p2]+ 
              4 TraceValue[pP] TraceValue[
                  pQ] gc[gnr]^2 (SA`Casimir[getBlankSF[pP],gnr] + 
                    SA`Casimir[getBlankSF[pQ],gnr] - 
                    SA`Casimir[getBlankSF[p1],gnr])Conj[Yijk[p1,pP,pQ]] Yijk[
                  p2,pP,pL] m2ij[pL,pQ]+ 
              2 TraceValue[pP] TraceValue[
                  pQ] gc[gnr]^2 (SA`Casimir[getBlankSF[pP],gnr] + 
                    SA`Casimir[getBlankSF[pQ],gnr] - 
                    SA`Casimir[getBlankSF[p1],gnr])Conj[Aijk[p1,pP,pQ]] Aijk[
                  p2,pP,pQ]- 
              2 TraceValue[pP] TraceValue[
                  pQ] gc[gnr]^2 (SA`Casimir[getBlankSF[pP],gnr] + 
                    SA`Casimir[getBlankSF[pQ],gnr] - 
                    SA`Casimir[getBlankSF[p1],gnr])Conj[Aijk[p1,pP,pQ]] Yijk[
                  p2,pP,pQ] Mi[gnr]- 
              2 TraceValue[pP] TraceValue[
                  pQ] gc[gnr]^2 (SA`Casimir[getBlankSF[pP],gnr] + 
                    SA`Casimir[getBlankSF[pQ],gnr] - 
                    SA`Casimir[getBlankSF[p1],gnr])Conj[Yijk[p1,pP,pQ]] Aijk[
                  p2,pP,pQ] Conj[Mi[gnr]] + 
              4 TraceValue[pP] TraceValue[
                  pQ] gc[gnr]^2 (SA`Casimir[getBlankSF[pP],gnr] + 
                    SA`Casimir[getBlankSF[pQ],gnr] - 
                    SA`Casimir[getBlankSF[p1],gnr])Conj[Yijk[p1,pP,pQ]] Yijk[
                  p2,pP,pQ] Mi[gnr] Conj[Mi[gnr]],{gnr,1,AnzahlGauge}]; 
      betaFuncm2ij2Lb[p1_,p2_]:= 
        Sum[8  listSMadd[[i,1]] EMatrix[listSMadd[[i,2]]]  gc[gnr]^2 TA[gnr,
                      p1,p2] Tr3[gnr] + 
                  listSMadd[[i,1]] EMatrix[listSMadd[[i,2]]] makeDelta[i,1,
                      2,{}] (gc[gnr]^4 Mi[gnr] Conj[
                            Mi[gnr]](24 SA`Casimir[getBlankSF[p1],
                                  gnr] SA`Dynkin[rep,gnr] - 
                              72 SA`Casimir[gnr] SA`Casimir[getBlankSF[p1],
                                  gnr]) + 
                        8  listSMadd[[i,1]] EMatrix[
                            listSMadd[[i,2]]] gc[gnr]^4 SA`Casimir[
                            getBlankSF[p1],
                            gnr] (Tr2[gnr] - 
                              SA`Casimir[gnr] Mi[gnr] Conj[Mi[gnr]])) ,{gnr,1,
                  AnzahlGauge}] + 
              
              Sum[Sum[8 Sqrt[
                      SA`Casimir[getBlankSF[p1],gnr] SA`Casimir[
                          getBlankSF[p1],gnr2]] gc[gnr]^2 gc[
                        gnr2]^2   listSMadd[[i,1]] EMatrix[
                      listSMadd[[i,2]]]  Tr4[gnr,gnr2],{gnr,1,
                    AnzahlGauge}],{gnr2,1,AnzahlGauge}] +
               +listSMadd[[i,1]] EMatrix[listSMadd[[i,2]]]Sum[
                  Sum[makeDelta[i,1,
                        2,{}]  gc[gnr]^2 gc[
                          gn]^2 (32 Mi[gnr] Conj[Mi[gnr]]+8 Mi[gnr] Conj[
                              Mi[gn]]+8 Mi[gn] Conj[Mi[gnr]]) SA`Casimir[
                        getBlankSF[p1],gnr] SA`Casimir[getBlankSF[p1],
                        gn],{gnr,1,AnzahlGauge}],{gn,1,
                    AnzahlGauge}] /.subValue[1,1] /. subValue[2,1];
      
      
      betaFuncMi[gnr_]:=  
        gc[gnr]^2( 2 SA`Dynkin[rep,gnr] - 6 SA`Casimir[gnr]) Mi[gnr];
      betaFuncMi2L[gnr_] := 
        gc[gnr]^4 Mi[
              gnr] ( - 24 SA`Casimir[gnr]^2 + 
                8 SA`Casimir[gnr] SA`Dynkin[rep,gnr]) + 
          gc[gnr]^2 Sum[
              gc[gn]^2  8(SA`CasimirDynkin[rep,gnr,gn]) (Mi[gnr]+Mi[gn]),{gn,
                1,AnzahlGauge}] + 
          2 gc[gnr]^2 (Aijk[pL,pM,pN] - Mi[gnr] Yijk[pL,pM,pN]) Conj[
              Yijk[pN,pM,pL]] SA`Casimir[pN,gnr]/(dimAdj[gnr]);
      
      betaFuncGauge[gnr_] := 
        gc[gnr]^3(  SA`Dynkin[rep,gnr] - 3 SA`Casimir[gnr]);
      betaFuncGauge2L[gnr_]:= 
        gc[gnr]^5 ( - 6 SA`Casimir[gnr]^2 + 
                2 SA`Casimir[gnr] SA`Dynkin[rep,gnr]) + 
          gc[gnr]^3 Sum[
              gc[gn]^2( 4 SA`CasimirDynkin[rep,gnr,gn] ),{gn,1,
                AnzahlGauge}] - 
          gc[gnr]^3 Yijk[pL,pM,pN] Conj[
              Yijk[pN,pM,pL]] SA`Casimir[pN,gnr]/(dimAdj[gnr]);
      
      betaFuncVEV[p1_] := VEVi[pZ] gammaij[pZ,p1];
      betaFuncVEV2L[p1_] := VEVi[pP] gammaij2L[pP,p1];
      
      ];



BetaFunctionVEV1L[term_]:=betaFuncVEV[term /. subGC[1]];
BetaFunctionVEV2L[term_]:=betaFuncVEV2L[term/. subGC[1]];


BetaFunctionGaugino1L[term_]:=betaFuncMi[term];
BetaFunctionGaugino2L[term_]:=betaFuncMi2L[term];

BetaFunctionGauge1L[term_]:=betaFuncGauge[term];
BetaFunctionGauge2L[term_]:=betaFuncGauge2L[term];

BetaFunctionWijkl1L[term_]:=Block[{beta},
      beta = 
        betaFuncWijkl[term[[1]]/.subGC[1],term[[2]]/.subGC[2],
          term[[3]]/.subGC[3],term[[4]]/.subGC[4]];
      beta += 
        betaFuncWijkl[term[[4]]/.subGC[4],term[[2]]/.subGC[2],
          term[[3]]/.subGC[3],term[[1]]/.subGC[1]];
      beta += 
        betaFuncWijkl[term[[1]]/.subGC[1],term[[4]]/.subGC[4],
          term[[3]]/.subGC[3],term[[2]]/.subGC[2]]; 
      beta += 
        betaFuncWijkl[term[[1]]/.subGC[1],term[[2]]/.subGC[2],
          term[[4]]/.subGC[4],term[[3]]/.subGC[3]]; 
      Return[beta];
      ];

BetaFunctionWijkl2L[term_]:=Block[{beta},
      beta = 
        betaFuncWijkl2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],
          term[[3]]/.subGC[3],term[[4]]/.subGC[4]];
      beta += 
        betaFuncWijkl2L[term[[4]]/.subGC[4],term[[2]]/.subGC[2],
          term[[3]]/.subGC[3],term[[1]]/.subGC[1]];
      beta += 
        betaFuncWijkl2L[term[[1]]/.subGC[1],term[[4]]/.subGC[4],
          term[[3]]/.subGC[3],term[[2]]/.subGC[2]]; 
      beta += 
        betaFuncWijkl2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],
          term[[4]]/.subGC[4],term[[3]]/.subGC[3]]; 
      Return[beta];
      ];

BetaFunctionYijk1L[term_]:=Block[{beta},
      beta =  
        betaFuncYijk[term[[1]]/.subGC[1],term[[2]]/.subGC[2],
          term[[3]]/.subGC[3]];
      beta += 
        betaFuncYijk[term[[3]]/.subGC[3],term[[2]]/.subGC[2],
          term[[1]]/.subGC[1]];
      beta += 
        betaFuncYijk[term[[1]]/.subGC[1],term[[3]]/.subGC[3],
          term[[2]]/.subGC[2]]; 
      Return[beta];
      ];

BetaFunctionYijk2L[term_]:=Block[{beta},
      beta = 
        betaFuncYijk2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],
          term[[3]]/.subGC[3]];
      beta += 
        betaFuncYijk2L[term[[3]]/.subGC[3],term[[2]]/.subGC[2],
          term[[1]]/.subGC[1]];
      beta += 
        betaFuncYijk2L[term[[1]]/.subGC[1],term[[3]]/.subGC[3],
          term[[2]]/.subGC[2]];
      Return[beta];
      ];

BetaFunctionMuij1L[term_]:=Block[{beta},
      beta =betaFuncMuij[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
      beta +=betaFuncMuij[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
      Return[beta];
      ];

BetaFunctionMuij2L[term_]:=Block[{beta},
      beta =betaFuncMuij2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
      beta +=betaFuncMuij2L[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
      Return[beta];
      ];

BetaFunctionLi1L[term_]:=Block[{beta},
      Return[betaFuncLi[term[[1]]/.subGC[1]]];
      ];

BetaFunctionLi2L[term_]:=Block[{beta},
      Return[betaFuncLi2L[term[[1]]/.subGC[1]]];
      ];

BetaFunctionTijk1L[term_]:=Block[{beta},
      beta = 
        betaFuncAijk[term[[1]]/.subGC[1],term[[2]]/.subGC[2],
          term[[3]]/.subGC[3] ];
      beta +=
        betaFuncAijk[term[[3]]/.subGC[3],term[[2]]/.subGC[2],
          term[[1]]/.subGC[1]];
      beta += 
        betaFuncAijk[term[[1]]/.subGC[1],term[[3]]/.subGC[3],
          term[[2]]/.subGC[2]];
      Return[beta];
      ];

BetaFunctionTijk2L[term_]:=Block[{beta},
      beta = 
        betaFuncAijk2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],
          term[[3]]/.subGC[3] ];
      beta +=
        betaFuncAijk2L[term[[3]]/.subGC[3],term[[2]]/.subGC[2],
          term[[1]]/.subGC[1]];
      beta += 
        betaFuncAijk2L[term[[1]]/.subGC[1],term[[3]]/.subGC[3],
          term[[2]]/.subGC[2]];
      Return[beta];
      ];

BetaFunctionBij1L[term_]:=Block[{beta},
      beta = betaFuncBij[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
      beta += betaFuncBij[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
      Return[beta];
      ];

BetaFunctionBij2L[term_]:=Block[{beta},
      beta = betaFuncBij2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
      beta += betaFuncBij2L[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
      Return[beta];
      ];

BetaFunctionSi1L[term_]:=betaFuncLSi[term[[1]] /. subGC[1]];
BetaFunctionSi2L[term_]:=betaFuncLSi2L[term[[1]] /. subGC[1]];

BetaFunctionm2ij1L[term_]:=
    betaFuncm2ij[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
BetaFunctionm2ij2L[term_]:=
    betaFuncm2ij2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2]]+
      betaFuncm2ij2Lb[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];


CalcBetaFunctions[type_,fields_,filename_,filename3I_,twoloop_,Simp_]:=
    Block[{i,factor,res,subNonZero,coup,SaveArray={},SaveArray3I={}},
      
      Switch[type,
        WIJKL, 
        Print["Calculate Beta Functions for 4-point Superpotential parameters"]\
;,
        YIJK, 
        Print["Calculate Beta Functions for trilinear Superpotential parameters"]\
;,
        MUIJ,
        Print["Calculate Beta Functions for bilinear Superpotential parameters"]\
;,
        LI,
        Print["Calculate Beta Functions for linear Superpotential parameters"]\
;,
        TIJK,
        Print["Calculate Beta Functions for trilinear soft breaking parameters"]\
;,
        BIJ,
        Print["Calculate Beta Functions for bilinear soft breaking parameters"]\
;,
        LSI,
        Print["Calculate Beta Functions for linear soft breaking parameters"];\
,
        M2IJ,
        Print["Calculate Beta Functions for scalar soft breaking masses"];,
        GAUGE,Print["Calculate Beta Functions for Gauge Couplings"];,
        MI,Print["Calculate Beta Functions for Gaugino masses"];,
        VEV,Print["Calculate Beta Functions for VEVs"];
        ];
      
      For[i=1,i\[LessEqual]Length[fields],
        UseSymmASymm=True;
        Switch[type,
          WIJKL,
          	
          coup=Wijkl[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2],
              fields[[i,1,3]]/.subGC[3],fields[[i,1,4]]/.subGC[4]];
          	betaFunction=BetaFunctionWijkl1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionWijkl2L[fields[[i,1]]];,
            betaFunction2L=0];,
          YIJK,
          	
          coup=Yijk[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2],
              fields[[i,1,3]]/.subGC[3]];
          	betaFunction=BetaFunctionYijk1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionYijk2L[fields[[i,1]]];,
            betaFunction2L=0];,
          MUIJ,
          	coup=Muij[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2]];
          	betaFunction=BetaFunctionMuij1L[fields[[i,1]]];
          	If[twoloop,betaFunction2L=BetaFunctionMuij2L[fields[[i,1]]];,
            betaFunction2L=0];,
          LI,
          	coup=Li[fields[[i,1,1]]/.subGC[1]];
          	betaFunction=BetaFunctionLi1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionLi2L[fields[[i,1]]];,
            betaFunction2L=0];,
          TIJK,
          	
          coup=Aijk[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2],
              fields[[i,1,3]]/.subGC[3]];
          	betaFunction=BetaFunctionTijk1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionTijk2L[fields[[i,1]]];,
            betaFunction2L=0];,
          BIJ,
          	coup=Bij[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2]];
          	betaFunction=BetaFunctionBij1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionBij2L[fields[[i,1]]];,
            betaFunction2L=0];,
          LSI,
          	coup=LSi[fields[[i,1,1]]/.subGC[1]];
          	betaFunction=BetaFunctionSi1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionSi2L[fields[[i,1]]];,
            betaFunction2L=0];,
          M2IJ,
          	coup=m2ij[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2]];
          	betaFunction=BetaFunctionm2ij1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionm2ij2L[fields[[i,1]]];,
            betaFunction2L=0];,
          GAUGE,
          	coup=1;
          	betaFunction=BetaFunctionGauge1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionGauge2L[fields[[i,1]]];,
            betaFunction2L=0];,
          MI,
          	coup=1;
          	betaFunction=BetaFunctionGaugino1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionGaugino2L[fields[[i,1]]];,
            betaFunction2L=0];,
          VEV,
          	coup=fields[[i,2,2]];
          	betaFunction=BetaFunctionVEV1L[fields[[i,1]]];
          	
          If[twoloop,betaFunction2L=BetaFunctionVEV2L[fields[[i,1]]];,
            betaFunction2L=0];
           ];
        UseSymmASymm=False;
        
        res=GetNonZeroEntries[fields[[i,2,2]]];
        subNonZero=res[[1]]; 
        
        
        factor=
          DeleteCases[
              DeleteCases[
                  fakeFac coup /. subNonZero,_?(MemberQ[{gen1,gen2,gen3},#]&),
                  10] /. A_[]\[Rule]1,_?(MemberQ[
                      Transpose[parameters][[1]],#]&),10] /. 
            fakeFac \[Rule]1;
        
        betaFunction =
          Expand[1/factor* 
              CalcRGEValue[ExpandTerm[betaFunction] /. subNonZero,False]];
        betaFunction2L = 
          Expand[1/factor* 
              CalcRGEValue[ExpandTerm[betaFunction2L] /. subNonZero,False]];
        
        If[type===M2IJ,
          
          If[listSMadd[[i,3]],
              betaFunction=betaFunction /. {gen2\[Rule]gen1,gen1\[Rule]gen2};
              betaFunction2L=
                betaFunction2L /. {gen2\[Rule]gen1,gen1\[Rule]gen2};];
           ];
        
        If[type===VEV,
          betaFunction=-betaFunction /. gen1\[Rule]i1; 
          betaFunction2L=-betaFunction2L /. gen1\[Rule]i1;
          ];
        
        subGenInd={}; nrInd=1;
        
        For[j=1,j\[LessEqual]3,
          If[FreeQ[fields[[i,2,2]],genf[j]]\[Equal]False,
            
            subGenInd=
              Join[subGenInd,{genf[j]\[Rule]ToExpression[
                      "i"<>ToString[nrInd]]}];
            nrInd++;
            ];
          j++;]; 
        
        (* subGenInd={gen1\[Rule]i1,gen2\[Rule]i2,gen3\[Rule]i3,
                gen4\[Rule]i4}; *)
        
        If[Simp===True && ThreeIndexParametersInvolved=!=True,
          
          SaveArray = 
              Join[SaveArray,{{CalcRGEValue[
                        fields[[i,2,2]]  /. 
                              Delta[a__]\[Rule]1 /.epsTensor[a__]\[Rule]1 /. 
                          RM[a___][b___]\[Rule]1] /. subGenInd,
                    Simplify[betaFunction/. subGenInd//.Conj\[Rule]conj],
                    Simplify[ 
                      betaFunction2L/. subGenInd//.Conj\[Rule]conj]}}];,
          
          SaveArray = 
              Join[SaveArray,{{CalcRGEValue[
                        fields[[i,2,2]] /. 
                              Delta[a__]\[Rule]1 /.epsTensor[a__]\[Rule]1  /. 
                          RM[a___][b___]\[Rule]1] /. subGenInd,
                    betaFunction/. subGenInd//.Conj\[Rule]conj, 
                    betaFunction2L/. subGenInd//.Conj\[Rule]conj}}];
          ];
        i++;];
      
      Put[SaveArray,ToFileName[$sarahCurrentRGEDir,filename<>".m"]];
      
      
      If[ThreeIndexParametersInvolved===True,
        MakeMatrixMul=True;
        For[i=1,i\[LessEqual]Length[SaveArray],
          
          SaveArray3I=
            Join[SaveArray3I,{{SaveArray[[i,1]],
                  Simplify[
                      Split3IndexParameter[SaveArray[[i,2]]]]//.Conj\[Rule]
                      conj,Simplify[
                      Split3IndexParameter[SaveArray[[i,3]]]]//.Conj\[Rule]
                      conj}}];
          i++;];
        MakeMatrixMul=False;
        Put[SaveArray3I,ToFileName[$sarahCurrentRGEDir,filename3I<>".m"]];
        ];
      
      Switch[type,
        WIJKL, BetaWijkl=SaveArray; BetaWijkl3I=SaveArray3I;,
        YIJK, BetaYijk=SaveArray; BetaYijk3I=SaveArray3I;,
        MUIJ,BetaMuij=SaveArray; BetaMuij3I=SaveArray3I;,
        LI,BetaLi=SaveArray; BetaLi3I=SaveArray3I;,
        TIJK,BetaTijk=SaveArray; BetaTijk3I=SaveArray3I;,
        BIJ,BetaBij=SaveArray; BetaBij3I=SaveArray3I;,
        LSI,BetaLSi=SaveArray; BetaLSi3I=SaveArray3I;,
        M2IJ,Betam2ij=SaveArray; Betam2ij3I=SaveArray3I;,
        GAUGE,BetaGauge=SaveArray; BetaGauge3I=SaveArray3I;,
        MI,BetaMi=SaveArray; BetaMi3I=SaveArray3I;,
        VEV,BetaVEV=SaveArray; BetaVEV3I=SaveArray3I;
        ];
      
      ];

CalcRGEtraces[TwoLoop_,Simp_]:=Block[{i,j,Spur,Spur2},
      TraceAbbr={{},{}};
      
      For[i=1,i\[LessEqual]AnzahlGauge,
        Spur=
          CalcRGEValue[ExpandTerm[TraceValue2[pQ] m2ij[pQ,pQ] TA[i,pQ,pQ]]] //. 
            a_[x_,x_]\[Rule]trace[a];
        If[Simplify[Spur]===0,Tr1[i]=0;,
          TraceAbbr[[1]]=Join[TraceAbbr[[1]],{{Tr1[i],Spur GUTren[i]^2}}];];
        i++;];
      
      
      If[TwoLoop\[Equal]True,
        For[i=1,i\[LessEqual]AnzahlGauge,
            
            (* 1. Trace *)
            
            Spur=CalcRGEValue[
                  ExpandTerm[
                    TraceValue2[pL] SA`Dynkin[getBlankSF[pL],i] m2ij[pL,
                        pL]]] //. a_[x_,x_]\[Rule]trace[a];
            
            If[Spur===0,Tr2[i]=0;,
              TraceAbbr[[2]]=
                  Join[TraceAbbr[[2]],{{Tr2[i],Spur/Gauge[[i,2,1]]}}];];
            
            (* 2. Trace *)
            Spur=0;
            subRGE = subRGEDelta;
             For[j=1,j\[LessEqual]AnzahlGauge,
              
              Spur+=gc[j]^2 CalcRGEValue[
                        ExpandTerm[
                          TraceValue2[pN]  TA[i,pN,pN] SA`Casimir[
                              getBlankSF[pN],j] m2ij[pN,pN]]]  /.subValue[1,
                      1] /. subValue[2,1];
              j++]; 
            
            Spur2=-1/4ExpandTerm[
                  TraceValue[pM] TraceValue[pP] TraceValue[pQ]TraceValue[
                      pL] TA[i,pL,pM] Delta[gi6,gi8]  m2ij[pM,pR] Yijk[pL,pP,
                      pQ] Conj[Yijk[pR,pP,pQ]]];
            
            Spur=Spur+CalcRGEValue[Spur2] //. a_[x_,x_]\[Rule]trace[a] //. 
                    a_[gi6,gi8]\[Rule]trace[a] //. 
                  a_[gi8,gi6]\[Rule]trace[a] /.trace[MatMul[a__]]\[Rule]
                  trace[a];
            
            Spur = Spur /. conj[x_] \[Rule]Conj[x]/. 
                    A_[b_] MatMul[d__][b_]\[Rule]MatMul[A,d] /. 
                  Conj[x_] \[Rule]conj[x] /. 
                A_[b_] B_[b_]\[Rule] MatMul[A,B];
            
            
            If[Spur===0,Tr3[i]=0;,
              TraceAbbr[[2]]=
                  Join[TraceAbbr[[2]],{{Tr3[i],GUTren[i]^2 Spur}}];];
            
            
            (* 3. Trace *)
            Spur=0;
            SetAttributes[Tr4,Orderless];
            Tr4[i,i]=0;
            For[j=i+1,j\[LessEqual]AnzahlGauge,
              If[Gauge[[i,2]]===U[1] && Gauge[[j,2]]===U[1],
                
                Spur=CalcRGEValue[
                      ExpandTerm[
                        TraceValue2[pL] Sqrt[
                            SA`Dynkin[getBlankSF[pL],i] SA`Dynkin[
                                getBlankSF[pL],j]] m2ij[pL,pL]]] //. 
                    a_[x_,x_]\[Rule]trace[a];
                
                If[Spur===0,Tr4[j,i]=0;,
                  TraceAbbr[[2]]=Join[TraceAbbr[[2]],{{Tr4[i,j], Spur}}];];,
                Tr4[j,i]=0;
                ];
              j++;];
            i++;];
        ];
      
      subRGE = subRGENoDelta;
      subRGE = subRGEDelta;
      TraceAbbr = TraceAbbr /. GUTren[a_]\[Rule]1;
      
      If[Simp===True,TraceAbbr=Simplify[TraceAbbr];];
      
      Put[TraceAbbr,ToFileName[$sarahCurrentRGEDir,"RGEtraces.m"]];
      
      If[ThreeIndexParametersInvolved===True,
        MakeMatrixMul=True;
        TraceAbbr3I={{},{}};
        TraceAbbr3I[[1]]=Simplify/@Split3IndexParameter/@TraceAbbr[[1]];
        For[i=1,i\[LessEqual]Length[TraceAbbr[[2]]],
          
          TraceAbbr3I[[2]]=
            Join[TraceAbbr3I[[2]],{Simplify/@
                  Split3IndexParameter/@TraceAbbr[[2,i]]}];
          i++;];
        Put[TraceAbbr3I,ToFileName[$sarahCurrentRGEDir,"RGEtraces3I.m"]];
        MakeMatrixMul=False;
        ];
      
      ];


CalcBetaQuadSuperpotential[TwoL_,Simp_]:=
    CalcBetaFunctions[WIJKL,listW4One,"BetaWijkl","BetaWijkl3I",TwoL,Simp];
CalcBetaTriSuperpotential[TwoL_,Simp_]:=
    CalcBetaFunctions[YIJK,listWtriOne,"BetaYijk","BetaYijk3I",TwoL,Simp];
CalcBetaBiSuperpotential[TwoL_,Simp_]:=
    CalcBetaFunctions[MUIJ,listWbiOne,"BetaMuij","BetaMuij3I",TwoL,Simp];
CalcBetaOneSuperpotential[TwoL_,Simp_]:=
    CalcBetaFunctions[LI,listWone,"BetaLi","BetaLi3I",TwoL,Simp];
CalcBetaTriSoftBreaking[TwoL_,Simp_]:=
    CalcBetaFunctions[TIJK,listAtriOne,"BetaTijk","BetaTijk3I",TwoL,Simp];
CalcBetaBiSoftBreaking[TwoL_,Simp_]:=
    CalcBetaFunctions[BIJ,listAbiOne,"BetaBij","BetaBij3I",TwoL,Simp];
CalcBetaOneSoftBreaking[TwoL_,Simp_]:=
    CalcBetaFunctions[LSI,listAone,"BetaLSi","BetaLSi3I",TwoL,Simp];
CalcBetaScalarMass[TwoL_,Simp_]:=
    CalcBetaFunctions[M2IJ,SA`ListM2ij,"Betam2ij","Betam2ij3I",TwoL,Simp];
CalcBetaGauge[TwoL_,Simp_]:=
    CalcBetaFunctions[GAUGE,SA`ListGauge,"BetaGauge","BetaGauge3I",TwoL,
      Simp];
CalcBetaGaugino[TwoL_,Simp_]:=
    CalcBetaFunctions[MI,SA`ListGaugino,"BetaMi","BetaMi3I",TwoL,Simp];
CalcBetaVEVs[TwoL_,Simp_]:=
    CalcBetaFunctions[VEV,SA`ListVEVi,"BetaVEV","BetaVEV3I",TwoL,Simp];


