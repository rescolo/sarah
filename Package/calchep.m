(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

(* ----------------------------------- *)
(* 
  Write CalcHep Model File *)
(* ----------------------------------- *)


Options[MakeCHep]={FeynmanGauge\[Rule]True, CPViolation \[Rule] False, 
      ModelNr\[Rule]1, CompHep\[Rule]False,NoSplittingWith\[Rule]{},
      NoSplittingOnly\[Rule]{}, UseRunningCoupling\[Rule]True, 
      SLHAinput\[Rule]False, WriteMOfile\[Rule]False};

MakeCHep[opt___ ]:=
    MakeCalcHepOutput[FeynmanGauge/.{opt}/.Options[MakeCHep],
      CPViolation/.{opt}/.Options[MakeCHep],ModelNr/.{opt}/.Options[MakeCHep],
      CompHep/.{opt}/.Options[MakeCHep],
      NoSplittingWith/.{opt}/.Options[MakeCHep],
      NoSplittingOnly/.{opt}/.Options[MakeCHep],
      UseRunningCoupling/.{opt}/.Options[MakeCHep], 
      SLHAinput/.{opt}/.Options[MakeCHep], 
      WriteMOfile/.{opt}/.Options[MakeCHep]];


MakeCalcHepOutput[FeynmanGauge_,CPViolation_,ModelNr_, CompHep_,NoSplitWith_,
      NoSplitOnly_, RunningCoup_, SLHA_, WriteMO_]:=Block[{},
      If[FreeQ[NameOfStates,InitalizedVertexCalculaton]\[Equal]True,
          Message[ModelFile::NoVertices];,
          
          Print["--------------------------------------"];
          Print[" Creating CalcHep/CompHep Model File  "];
          Print["--------------------------------------"];
          
          saveWriteErrorNum=WriteErrorNum;
          WriteErrorNum=False;
          SetNaNtoZero=True;
          realVarSave = realVar;
          
          If[FileExistsQ[$sarahCurrentCalcHepDir]=!=True,
            CreateDirectory[$sarahCurrentCalcHepDir];
            ];
          
          CalcHepParticlesM0 = {};
          MassParameterCHep ={};
          
          
          
          parDep=Select[
              Table[subNumDependences[[i,1]],{i,1,
                  Length[subNumDependences]}],(FreeQ[#,Integer])&];
          
          parNum=Select[
              Table[DefinedNumericalValues[[i,1]],{i,1,
                  Length[DefinedNumericalValues]}],(FreeQ[#,Integer])&];
          
          
          For[i=1,i\[LessEqual]Length[subAlways],
            
            If[FreeQ[subAlways[[i,1]],Pattern] && 
                FreeQ[parDep,subAlways[[i,1]]] && 
                FreeQ[parNum,subAlways[[i,1]]],
              parDep=Join[parDep,{subAlways[[i,1]]}];];
            i++;];
          
          parDep=Select[parDep,(FreeQ[parNum,#])&];
          
          subNumLeft=Select[subNumDependences,(FreeQ[#,Integer])&];
          
          subNumLeft = 
            Select[Table[
                subNumLeft[[i,2]],{i,1,
                  Length[subNumLeft]}],(FreeQ[#,Integer])&];
          
          
          parDep=Select[
              parDep,(FreeQ[VertexListNonCC,#]\[Equal]False || 
                    FreeQ[subNumLeft,#]\[Equal]False)&];
          
          If[RunningCoup\[Equal]True, 
            parNum=DeleteCases[parNum,strongCoupling]; 
            parDep=DeleteCases[parDep,strongCoupling]; 
            ];
          
          
          
          angles=Select[
              Intersection[
                DeleteCases[
                  Flatten[{Cases[VertexListNonCC,x_Sin,99],
                                  Cases[VertexListNonCC,x_Cos,99],
                                  Cases[VertexListNonCC,x_Tan,99],
                                  Cases[VertexListNonCC,x_Sec,99],
                                  Cases[VertexListNonCC,x_Sec,99],
                                  Cases[VertexListNonCC,x_Cot,99],
                                  Cases[subNumDependences,x_Cot,99],
                                  Cases[subNumDependences,x_Cos,99],
                                  Cases[subNumDependences,x_Csc,99],
                                  Cases[subNumDependences,x_Sec,99],
                                  Cases[subNumDependences,x_Sin,99],
                                  Cases[subNumDependences,x_Tan,99],
                                  Cases[subAlways,x_Cot,99],
                                  Cases[subAlways,x_Cos,99],
                                  Cases[subAlways,x_Csc,99],
                                  Cases[subAlways,x_Sec,99],
                                  Cases[subAlways,x_Sin,99],
                                  Cases[subAlways,x_Tan,99]}] /. 
                              Sec[x_]\[Rule]x /. Cos[x_]\[Rule] x /. 
                          Tan[x_]\[Rule]x /. Cot[x_]\[Rule]x /. 
                      Sin[x_]\[Rule] x /. Csc[x_]\[Rule]x,_Integer,
                  5]],(Head[#]\[Equal]Symbol)&];
          
          SortDependendParameters[RunningCoup];
          
          
          Particles[Current]=Particles[EigenstateName];
          
          InitSMParameters[EigenstateName];
          
          CalcHepParticles[CPViolation,ModelNr, CompHep,RunningCoup,SLHA];
          
          CalcHepVertices[FeynmanGauge,CPViolation,ModelNr, CompHep,
            NoSplitWith,NoSplitOnly,RunningCoup,SLHA];
          
          
          If[WriteMO,
            WriteCalcOmegaMO;
            ];
          
          
          Print[""];
          Print["Done. Output is in ", $sarahCurrentCalcHepDir];
          
          WriteErrorNum=saveWriteErrorNum;
          SetNaNtoZero=False;
          realVar = realVarSave;
          ];
      ];



CalcHepParticles[CPViolation_,ModelNr_, CompHep_,RunningCoup_,SLHA_]:=
    Block[{i,name,nameC},
      StringReCH[CPViolation];
      CreateCForm[CPViolation];
      CalcHepSubs;
      CreateParticleList[CompHep];
      AddGoldstone[CompHep];
      
      
      massList = Masses[EigenstateName];
      massless=Massless[EigenstateName];
      widthList = Width[EigenstateName];
      
      replaceMass={};
      
      
      Print["Writing Particle List"];
      
      particlesFile = 
        OpenWrite[
          ToFileName[$sarahCurrentCalcHepDir,
            "prtcls"<>ToString[ModelNr]<>".mdl"]];
      varsFile = 
        OpenWrite[
          ToFileName[$sarahCurrentCalcHepDir,
            "vars"<>ToString[ModelNr]<>".mdl"]];
      
      
      columnWidthsParticles = {10, 5,5,8,6,6,6,5,3,20,20};
      columnWidthsVars =  {10,20,20};
      
      lN=10; lP=5; lNr=8; lS=6;lM=6; lW=6; lC=5; lA=3; lL=20;
      lVN=20; lVV=20; lVC=20; 
      
      (* WriteString[particlesFile, 
            StringDrop[Modelname,-2]<>": "<> modelName <> "\n"];  *)
      
      WriteString[particlesFile, ModelName <> "\n"];
      WriteString[particlesFile, "Particles  \n"];
      
      WriteString[particlesFile, "Full name |A    |A+   |"];
      If[CompHep\[Equal]False,
        WriteString[particlesFile,  " number "];
        WriteString[particlesFile,  "|"];
        ];
      WriteString[particlesFile,  
        "2*spin| mass |width |color|aux|>LaTex(A)             <|>LaTex(A+)               <<| \n"]\
;
      
      (* WriteString[varsFile, 
            StringDrop[Modelname,-2]<>": "<> modelName <> "\n"]; *)
      
      WriteString[varsFile,ModelName <> "\n"];
      If[CompHep\[Equal]False,
        WriteString[varsFile, "Parameters  \n"];,
        WriteString[varsFile, "Variables  \n"];
        ];
      
      WriteString[varsFile, InsString[" Name",lVN]<>"|"];
      WriteString[varsFile, InsString[" Value ",lVV]<>"|"];
      WriteString[varsFile, InsString["> Comment ",lVC-1]<>"<|\n"];
      
      Print["   Scalars"];
      WriteCHepParticles[PART[S], CompHep,True,SLHA];
      
      Print["   Vector Bosons"];
      WriteCHepParticles[PART[V],CompHep,True,SLHA];
      
      Print["   Fermions"];
      WriteCHepParticles[PART[F],CompHep,True,SLHA];
      
      Print["   Auxiliary Fields"];
      WriteCHepParticles[PART[A],CompHep,True,SLHA];
      
      Print["   Ghost Fields"];
      WriteCHepParticles[PART[G],CompHep,False,SLHA];
      
      For[i=1,i\[LessEqual]Length[partGA],
        If[FreeQ[partGA[[i,4]],color]\[Equal]False,
          For[j=1,j\[LessEqual]partGA[[i,2]],
              For[k=1,k\[LessEqual]partGA[[i,3]],
                name=CalcHepName[partGA[[i,1]],j,k];
                nameC=CalcHepName[conj[partGA[[i,1]]],j,k];
                
                WriteString[particlesFile,
                  InsString[CalcHepFullName[partGA[[i,1]],j,k],lN]<>"|"];
                WriteString[particlesFile,InsString[name,lP] <> "|"];
                WriteString[particlesFile,InsString[nameC,lP] <> "|"];
                CHepName[partGA[[i,1]],j,k]=name;
                CHepName[conj[partGA[[i,1]]],j,k]=nameC;
                
                If[CompHep\[Equal]False,
                  WriteString[particlesFile," 0      |"];];
                WriteString[particlesFile," 2    |"];
                WriteString[particlesFile," Maux |"];
                WriteString[particlesFile," 0    |"];
                WriteString[particlesFile," 3   |"];
                WriteString[particlesFile," * |"];
                
                WriteString[particlesFile,
                  "                       |               \n"];
                k++;];
              j++;];
          ];
        i++;];
      
      
      CalcHepVars[CPViolation,RunningCoup,SLHA];
      
      
      Close[varsFile];
      Close[particlesFile];
      
      
      ];


CalcHepVars[CPViolation_,RunningCoup_,SLHA_]:=Block[{i,j,k,l},
      
      Print["Writing Variables"];
      
      WriteString[varsFile, InsString["Maux",lVN]];
      WriteString[varsFile, "|"];
      WriteString[varsFile, InsString["1",lVV]];
      WriteString[varsFile, "|  \n"];
      
      WriteString[varsFile, InsString["sqrt2",lVN]];
      WriteString[varsFile, "|"];
      WriteString[varsFile, InsString[ToString[N[Sqrt[2],15]],lVV]];
      WriteString[varsFile, "|  \n"];
      
      If[RunningCoup\[Equal]True,
        WriteString[varsFile, InsString["Q",lVN]<>"|"];
        WriteString[varsFile, InsString["100",lVV]<> "|  \n"];
        
        WriteString[varsFile, InsString["alfSMZ",lVN]<>"|"];
        WriteString[varsFile, InsString["0.1172",lVV]<> "|  \n"];
        
        ];
      
      For[i=1,i\[LessEqual]Length[parameters],
        If[(FreeQ[parDepNeeded,parameters[[i,1]]]\[Equal]False || 
                FreeQ[parNum,parameters[[i,1]]]\[Equal]False  || 
                FreeQ[VertexList3,parameters[[i,1]]]\[Equal]False || 
                FreeQ[VertexList4,parameters[[i,1]]] \[Equal]False ) && 
            FreeQ[parDep,
                parameters[[i,1]]]\[Equal]True  &&(SLHA\[Equal]False || 
                LHBlockName[parameters[[i,1]]]==="NONE" || 
                LHBlockName[parameters[[i,1]]]===
                  "LESHOUCHES") && (parameters[[i,1]]=!=strongCoupling || 
                RunningCoupling\[Equal]False) && 
            FreeQ[MassParameterCHep,parameters[[i,1]]],
          Switch[Length[parameters[[i,2]]],
              0,
              
              If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                    CPViolation\[Equal]False,
                  
                  WriteString[varsFile, 
                    InsString[ToString[CForm[parameters[[i,1]]]],lVN]<>"|"];
                  
                  WriteString[varsFile, 
                    InsString[
                        ToString[CForm[NumericalValue[parameters[[i,1]]]]],
                        lVV]<> "| "<>getDescription[parameters[[i,1]]]<>
                      "  \n"];,
                  
                  WriteString[varsFile, 
                    InsString[
                        ToString[
                          CForm[ToExpression[
                              "Im"<>ToString[parameters[[i,1]]]]]],lVN]<> 
                      "|"];
                  
                  WriteString[varsFile, 
                    InsString[
                        ToString[
                          CForm[NumericalValue[
                                Im[parameters[[i,1]]]]/.NaN\[Rule]0]],lVV]<> "| Im("<>
                      getDescription[parameters[[i,1]]]<>")  \n"];
                  
                  WriteString[varsFile, 
                    InsString[
                        ToString[
                          CForm[ToExpression[
                              "Re"<>ToString[parameters[[i,1]]]]]],lVN]<> 
                      "|"];
                  
                  WriteString[varsFile, 
                    InsString[
                        ToString[
                          CForm[NumericalValue[
                                Re[parameters[[i,1]]]]/.NaN\[Rule]0]],lVV]<> "| Re("<>
                      getDescription[parameters[[i,1]]]<>") \n"];
                  		];,
              
              1,
              	temp=ToString[CForm[parameters[[i,1]][gt1]]];
              	
              tempR=ToString[
                  CForm[ToExpression["Im"<>ToString[parameters[[i,1]]]][
                      gt1]]];
              	
              tempI=ToString[
                  CForm[ToExpression["Re"<>ToString[parameters[[i,1]]]][
                      gt1]]];
              	For[j=1,j\[LessEqual]parameters[[i,3,1]],
                	
                If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                    CPViolation\[Equal]False,
                  	
                  WriteString[varsFile, 
                    InsString[StringReplace[temp,{"gt1"\[Rule]ToString[j]}],
                        lVN]<>"|"];
                  	
                  WriteString[varsFile, 
                    InsString[
                        ToString[
                          CForm[Re[
                              NumericalValue[
                                  parameters[[i,1]][j]]/.NaN\[Rule]0]]],lVV]<> 
                      "| "<>getDescription[parameters[[i,1]]]<>"  \n"];,
                  	
                  WriteString[varsFile, 
                    InsString[StringReplace[tempI,{"gt1"\[Rule]ToString[j]}],
                        lVN]<> "|"];
                  	
                  WriteString[varsFile, 
                    InsString[
                        ToString[
                          CForm[NumericalValue[
                                Im[parameters[[i,1]][j]]]/.NaN\[Rule]0]],lVV]<> 
                      "|  Im("<>getDescription[parameters[[i,1]]]<>") \n"];
                  	
                  WriteString[varsFile, 
                    InsString[StringReplace[tempR,{"gt1"\[Rule]ToString[j]}],
                        lVN]<> "|"];
                  	
                  WriteString[varsFile, 
                    InsString[
                        ToString[
                          CForm[NumericalValue[
                                Re[parameters[[i,1]][j]]]/.NaN\[Rule]0]],lVV]<> 
                      "|  Re("<>getDescription[parameters[[i,1]]]<>") \n"];
                  			];
                	j++;];,
              
              2,
              	temp=ToString[CForm[parameters[[i,1]][gt1,gt2]]];
              	
              tempR=ToString[
                  CForm[ToExpression["Im"<>ToString[parameters[[i,1]]]][gt1,
                      gt2]]];
              	
              tempI=ToString[
                  CForm[ToExpression["Re"<>ToString[parameters[[i,1]]]][gt1,
                      gt2]]];
              
              	For[j=1,j\[LessEqual]parameters[[i,3,1]],
                	For[k=1,k\[LessEqual]parameters[[i,3,2]],
                  	
                  If[(MemberQ[realVar,parameters[[i,1]]]\[Equal]
                          True) || (CPViolation\[Equal]False),
                    	
                    WriteString[varsFile, 
                      InsString[
                          StringReplace[
                            temp,{"gt1"\[Rule]ToString[j],
                              "gt2"\[Rule]ToString[k]}],lVN]<>"|"];
                    	
                    WriteString[varsFile, 
                      InsString[
                          ToString[
                            CForm[Re[
                                NumericalValue[
                                    parameters[[i,1]][j,k]]/.NaN\[Rule]0]]],
                          lVV]<> "| "<>getDescription[parameters[[i,1]]]<>
                        "  \n"];,
                    	
                    WriteString[varsFile, 
                      InsString[
                          StringReplace[
                            tempI,{"gt1"\[Rule]ToString[j],
                              "gt2"\[Rule]ToString[k]}],lVN]<> "|"];
                    	
                    WriteString[varsFile, 
                      InsString[
                          ToString[
                            CForm[NumericalValue[
                                  Im[parameters[[i,1]][j,k]]]/.NaN\[Rule]0]],
                          lVV]<> "|  Im("<>getDescription[parameters[[i,1]]]<>
                        ") \n"];
                    	
                    WriteString[varsFile, 
                      InsString[
                          StringReplace[
                            tempR,{"gt1"\[Rule]ToString[j],
                              "gt2"\[Rule]ToString[k]}],lVN]<> "|"];
                    	
                    WriteString[varsFile, 
                      InsString[
                          ToString[
                            CForm[NumericalValue[
                                  Re[parameters[[i,1]][j,k]]]/.NaN\[Rule]0]],
                          lVV]<> "| Re("<>getDescription[parameters[[i,1]]]<>
                        ") \n"];
                    	];
                  		k++;];
                	j++;];,
              
              3,
              
              	
              	temp=ToString[CForm[parameters[[i,1]][gt1,gt2,gt3]]];
              	tempR=
                ToString[
                  CForm[ToExpression["Im"<>ToString[parameters[[i,1]]]][gt1,
                      gt2,gt3]]];
              	
              tempI=ToString[
                  CForm[ToExpression["Re"<>ToString[parameters[[i,1]]]][gt1,
                      gt2,gt3]]];
              
              	For[j=1,j\[LessEqual]parameters[[i,3,1]],
                	For[k=1,k\[LessEqual]parameters[[i,3,2]],
                  	For[l=1,l\[LessEqual]parameters[[i,3,3]],
                    		
                    If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                        CPViolation\[Equal]False,
                      			
                      WriteString[varsFile, 
                        InsString[
                            StringReplace[
                              temp,{"gt1"\[Rule]ToString[j],
                                "gt2"\[Rule]ToString[k],
                                "gt3"\[Rule]ToString[l]}],lVN]<>"|"];
                      			
                      WriteString[varsFile, 
                        InsString[
                            ToString[
                              CForm[Re[
                                  NumericalValue[
                                      parameters[[i,1]][j,k,
                                        l]]/.NaN\[Rule]0]]],lVV]<> "| "<>
                          getDescription[parameters[[i,1]]]<>"  \n"];,
                      			
                      WriteString[varsFile, 
                        InsString[
                            StringReplace[
                              tempI,{"gt1"\[Rule]ToString[j],
                                "gt2"\[Rule]ToString[k],
                                "gt3"\[Rule]ToString[l]}],lVN]<> "|"];
                      			
                      WriteString[varsFile, 
                        InsString[
                            ToString[
                              CForm[NumericalValue[
                                    Im[parameters[[i,1]][j,k,
                                        l]]]/.NaN\[Rule]0]],lVV]<> "| Im("<>
                          getDescription[parameters[[i,1]]]<>")  \n"];
                      			
                      WriteString[varsFile, 
                        InsString[
                            StringReplace[
                              tempR,{"gt1"\[Rule]ToString[j],
                                "gt2"\[Rule]ToString[k],
                                "gt3"\[Rule]ToString[l]}],lVN]<> "|"];
                      			
                      WriteString[varsFile, 
                        InsString[
                            ToString[
                              CForm[NumericalValue[
                                    Re[parameters[[i,1]][j,k,
                                        l]]]/.NaN\[Rule]0]],lVV]<> "|  Re("<>
                          getDescription[parameters[[i,1]]]<>")\n"];
                      				];
                    		l++;];
                  		k++;];
                	j++;];
              ];
          ];
        i++;];
      ];



CalcHepVertices[FeynmanGauge_,CPViolation_, ModelNr_, CompHep_,NoSplitWith_,
      NoSplitOnly_,RunningCoup_,SLHA_]:=
    Block[{i,particle1,particle2,particle3,particle4,iter1,iter2,iter3,
        iter4},
      
      Print["Writing Lagrangian and Functions"];
      
      
      lagrangeFile = 
        OpenWrite[
          ToFileName[$sarahCurrentCalcHepDir,
            "lgrng"<>ToString[ModelNr]<>".mdl"]];
      funcFile = 
        OpenWrite[
          ToFileName[$sarahCurrentCalcHepDir,
            "func"<>ToString[ModelNr]<>".mdl"]];
      
      
      columnWidthsLagrange = {6, 5,5,5,10,45};
      columnWidthsFunc =  {12,100};
      
      lP=5; lF=40; lFF=15;
      
      (* WriteString[lagrangeFile, 
            StringDrop[Modelname,-2]<>": "<> modelName <> "\n"]; *)
      
      WriteString[lagrangeFile, ModelName <> "\n"];
      If[CompHep\[Equal]False,
        WriteString[lagrangeFile, "Vertices  \n"];
        WriteString[lagrangeFile, "  A1  | A2  | A3  | A4  |"];
        WriteString[lagrangeFile,InsString["> Factor ",lF-1]];
        WriteString[lagrangeFile,"<|"];
        WriteString[lagrangeFile, 
          "> Lorentz part                                                                                             <|\n"]\
;
        ,
        WriteString[lagrangeFile, "Lagrangian  \n"];
        WriteString[lagrangeFile, "  P1  | P2  | P3  | P4  |"];
        WriteString[lagrangeFile,InsString["> Factor ",lF-1]];
        WriteString[lagrangeFile,"<|"];
        WriteString[lagrangeFile, 
          "> dLagrangian/ dA(p1) dA(p2) dA(p3)                                                                       <|\n"]\
;
        
        ];
      
      (* WriteString[funcFile, 
            StringDrop[Modelname,-2]<>": "<> modelName <> "\n"]; *)
      
      WriteString[funcFile, ModelName <> "\n"];
      WriteString[funcFile, "Constraints  \n"];
      WriteString[funcFile, InsString[" Name",lFF]];
      WriteString[funcFile,
        "|> Expression                                                                                                                                                                                <|\n"]\
;
      
      WriteAdditonalFunctions[RunningCoup,CPViolation,SLHA];
      
      fNr=0;
      split=0;
      goldfak=0;
      StringReplaceExtra={};
      
      Print["  Three Scalar Interaction"];
      WriteVerticesCHep[SA`VertexList[SSS],CPViolation,FeynmanGauge, SSS,
        NoSplitWith,NoSplitOnly,False];
      
      Print["  Two Scalar - One Vector Boson - Interaction"];
      WriteVerticesCHep[SA`VertexList[SSV],CPViolation,FeynmanGauge, SSV,
        NoSplitWith,NoSplitOnly,False];
      
      Print["  One Scalar - Two Vector Boson - Interaction"];
      WriteVerticesCHep[SA`VertexList[SVV],CPViolation,FeynmanGauge, SVV,
        NoSplitWith,NoSplitOnly,False];
      
      Print["  Two Ghost - One Vector Boson - Interaction"];
      WriteVerticesCHep[SA`VertexList[GGV],CPViolation,FeynmanGauge, GGV,
        NoSplitWith,NoSplitOnly,False];
      
      Print["  Two Ghost - One Scalar - Interaction"];
      WriteVerticesCHep[SA`VertexList[GGS],CPViolation,FeynmanGauge, GGS,
        NoSplitWith,NoSplitOnly,False];
      
      Print["  Two Fermion - One Scalar - Interaction"];
      WriteVerticesCHep[SA`VertexList[FFS],CPViolation,FeynmanGauge, FFS,
        NoSplitWith,NoSplitOnly,False];
      
      Print["  Two Fermion - One Vector Boson - Interaction"];
      WriteVerticesCHep[SA`VertexList[FFV],CPViolation,FeynmanGauge, FFV,
        NoSplitWith,NoSplitOnly,False];
      
      Print["  Four Scalar - Interaction"];
      WriteVerticesCHep4[SA`VertexList[SSSS],CPViolation,FeynmanGauge, SSSS,
        NoSplitWith,NoSplitOnly,True];
      
      
      StringReplaceExtra={"Sig(1,1,2)"\[Rule]"1","Sig(1,2,1)"\[Rule]"1",
          "Sig(3,1,1)"\[Rule]"1","Sig(3,2,2)"\[Rule]"(-1)",
          "Sig(2,1,2)"\[Rule]"(-1)","Sig(2,2,1)"\[Rule]"1"};
      Print["  Two Scalar - One Auxiliary Field - Interaction"];
      WriteVerticesCHep[SA`VertexList[SSA],CPViolation,FeynmanGauge, SSA, 
        NoSplitWith,NoSplitOnly,True];
      
      StringReplaceExtra={};
      Print["  Three Vector Boson - Interaction"];
      WriteVerticesCHep[SA`VertexList[VVV],CPViolation,FeynmanGauge, VVV,
        NoSplitWith,NoSplitOnly,False];
      
      (* SSVV *)
      
      
      Print["  Two Scalar - Two Vector Boson - Interaction"];
      WriteVerticesCHep4[SA`VertexList[SSVV],CPViolation,FeynmanGauge, SSVV,
        NoSplitWith,NoSplitOnly,False];
      
      
      WriteString[lagrangeFile," "];
      WriteString[lagrangeFile,InsString[CalcHepName[VG,1,1],lP]<>"|"];
      WriteString[lagrangeFile,InsString[CalcHepName[VG,1,1],lP]<>"|"];
      WriteString[lagrangeFile,
        InsString[CalcHepName[VG,1,1]<>".t",lP]<>"|     |"];
      WriteString[lagrangeFile,InsString["g3/sqrt2",lF]];
      WriteString[lagrangeFile,"|m1.M3*m2.m3-m1.m3*m2.M3 \n"];
      
      
      
      (* V V V V*)
      
      Print["  Four Vector Boson - Interaction"];
      
      For[i=1,i\[LessEqual]Length[SA`VertexList[VVVV]],
        value=CalcHepVertex[SA`VertexList[VVVV][[i,2,1]]];
        subVertexGen={"gt1"\[Rule] Hold[ToString[iter1]],
            "gt2"\[Rule] Hold[ToString[iter2]],
            "gt3"\[Rule] Hold[ToString[iter3]]};
        If[D[D[value,g3],g3]===0,
          
          particle1=SA`VertexList[VVVV][[i,1,1]] /. A_[{a__}]\[Rule]A;
          particle2=SA`VertexList[VVVV][[i,1,2]] /. A_[{a__}]\[Rule]A;
          particle3=SA`VertexList[VVVV][[i,1,3]] /. A_[{a__}]\[Rule]A;
          particle4=SA`VertexList[VVVV][[i,1,4]] /. A_[{a__}]\[Rule]A;
          
          If[FreeQ[value,Complex]\[Equal]False, 
            valueCurrent=value/\[ImaginaryI];
            Imc="1";,
            valueCurrent=value;
            Imc="i";
            ];
          
          valueSplit=SplitValue[valueCurrent];
           facName=CalcHepFactor[i, {iter1,iter2,iter3,iter4},VVVV]; 
          (* CHForm[valueSplit, facName,iter1,iter2,iter3,iter4];*)
          
          CHForm[valueSplit, facName];
          
          WriteString[lagrangeFile," "];
          
          WriteString[lagrangeFile,
            InsString[CHepName[particle1,1,1],lP]<>"|"];
          
          WriteString[lagrangeFile,
            InsString[CHepName[particle2,1,1],lP]<>"|"];
          
          WriteString[lagrangeFile,
            InsString[CHepName[particle3,1,1],lP]<>"|"];
          
          WriteString[lagrangeFile,
            InsString[CHepName[particle4,1,1],lP]<>"|"];
          WriteString[lagrangeFile,InsString[Imc<>"*"<>facName,lF]];
          
          c2 =CHForm[
              FullSimplify[
                SA`VertexList[VVVV][[i,3,1]]/SA`VertexList[VVVV][[i,2,1]]]];
          
          c3 = CHForm[
              FullSimplify[
                SA`VertexList[VVVV][[i,4,1]]/SA`VertexList[VVVV][[i,2,1]]]];
          
          
          WriteString[lagrangeFile,
            "|m1.m2*m3.m4+("<>c2<>"*m1.m3*m2.m4)+("<>c3<>"*m1.m4*m2.m3)\n"];
          
          
          ];
        
        i++;];
      
      
      
      
      
      Print[
        "  One Scalar - One Vector Boson - One Auxiliary Field - Interaction"]\
;
      
      (* S V A *)
      
      For[i=1,i\[LessEqual]Length[PART[S]],
        If[FreeQ[getIndizes[PART[S][[i,1]]],color]\[Equal]False,
          For[iter1=1,iter1\[LessEqual]getGen[PART[S][[i,1]]],
              For[fiter1=1,fiter1\[LessEqual]getFla[PART[S][[i,1]]],
                WriteString[lagrangeFile," "];
                
                WriteString[lagrangeFile,
                  InsString[CalcHepName[PART[S][[i,1]],iter1,fiter1],lP]<>
                    "|"];
                
                WriteString[lagrangeFile,
                  InsString[CHepName[VG,1,1],lP]<>"|"];
                
                WriteString[lagrangeFile,
                  InsString[CalcHepName[conj[partGA[[i,1]]],iter1,fiter1],lP]<>
                    "|     |"];
                WriteString[lagrangeFile,InsString["i*Maux*g3",lF]];
                WriteString[lagrangeFile,"| m2.m3 \n"];
                
                WriteString[lagrangeFile," "];
                
                WriteString[lagrangeFile,
                  InsString[CalcHepName[conj[PART[S][[i,1]]],iter1,fiter1],
                      lP]<>"|"];
                WriteString[lagrangeFile,
                  InsString[CHepName[VG,1,1],lP]<>"|"];
                
                WriteString[lagrangeFile,
                  InsString[CalcHepName[partGA[[i,1]],iter1,fiter1],lP]<>
                    "|     |"];
                WriteString[lagrangeFile,InsString["i*Maux*g3",lF]];
                WriteString[lagrangeFile,"| m2.m3 \n"];
                fiter1++;];
              iter1++;];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[CalcHepParticlesM0],
        WriteString[funcFile];
        WriteString[funcFile,InsString[CalcHepParticlesM0[[i,3]],lFF]<>"|"];
        WriteString[funcFile,
          "aWidth(\""<>CalcHepParticlesM0[[i,4]]<>"\") \n"];
        i++;];
      
      
      
      For[i=1,i\[LessEqual]174,
        WriteString[lagrangeFile,"="];
        WriteString[funcFile,"="];
        i++;
        ];
      
      
      Close[lagrangeFile];
      Close[funcFile];
      
      ];

WriteAdditonalFunctions[RunningCoup_,CPViolation_,SLHA_]:=
    Block[{list,i,abbr,name, writtenLH={}},
      Print["Writing additional functions"];
      
      If[SLHA,
        WriteString[funcFile,InsString["rd",lFF]<>"|"];
        WriteString[funcFile,"slhaRead(\"Spectrum.spc\",0) \n"];
        
        For[i=1,i\[LessEqual]Length[CalcHepParticlesM0],
          
          WriteString[funcFile,
            InsString[CalcHepParticlesM0[[i,1]],lFF]<>"|"];
          
          WriteString[funcFile,
            "slhaVal(\"MASS\",Q,1,"<>ToString[
                Abs[ToExpression[CalcHepParticlesM0[[i,2]]]]]<>") \n"];
          i++;];
        
        For[i=1,i\[LessEqual]Length[parameters],
          
          If[(FreeQ[parNum,parameters[[i,1]]]\[Equal]True && 
                  FreeQ[parDep,parameters[[i,1]]]\[Equal]
                    True)  && (LHBlockName[parameters[[i,1]]]=!="NONE"&& 
                  LHBlockName[parameters[[i,1]]]=!=
                    "LESHOUCHES") && (RunningCoupling===False || 
                  parameters[[i,1]]=!=
                    strongCoupling) &&(FreeQ[VertexList3,
                      parameters[[i,1]]]\[Equal]False || 
                  FreeQ[VertexList4,parameters[[i,1]]] \[Equal]False || 
                  FreeQ[parDepNeeded,parameters[[i,1]]] \[Equal]False),
            
            writtenLH = Join[writtenLH,{parameters[[i,1]]}];
            Switch[Length[parameters[[i,2]]],
              0,
              
              
              temp=StringReplace[
                  ToString[CForm[parameters[[i,1]]]],{")"->"","("->""}];
              
              tempR=StringReplace[
                  ToString[
                    CForm[ToExpression["Im"<>ToString[parameters[[i,1]]]]]],{")"->
                      "","("->""}];
              
              tempI=StringReplace[
                  ToString[
                    CForm[ToExpression["Re"<>ToString[parameters[[i,1]]]]]],{")"->
                      "","("->""}];
              
              
              If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                  CPViolation\[Equal]False,
                WriteString[funcFile,InsString[temp,lFF]<>"|"];
                
                WriteString[funcFile,
                  "slhaVal(\""<>LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                    LHPos[parameters[[i,1]]]<>") \n"];,
                WriteString[funcFile,InsString[tempR,lFF]<>"|"];
                WriteString[funcFile,
                  "slhaVal(\""<>LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                    LHPos[parameters[[i,1]]]<>") \n"];
                WriteString[funcFile,InsString[tempL,lFF]<>"|"];
                
                WriteString[funcFile,
                  "slhaVal(\"IM"<>LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                    LHPos[parameters[[i,1]]]<>") \n"];
                ];,
              
              1,
              	temp=ToString[CForm[parameters[[i,1]][gt1]]];
              	
              tempR=ToString[
                  CForm[ToExpression["Im"<>ToString[parameters[[i,1]]]][
                      gt1]]];
              	
              tempI=ToString[
                  CForm[ToExpression["Re"<>ToString[parameters[[i,1]]]][
                      gt1]]];
              	For[j=1,j\[LessEqual]parameters[[i,3,1]],
                	
                If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                    CPViolation\[Equal]False,
                  	
                  WriteString[funcFile, 
                    InsString[StringReplace[temp,{"gt1"\[Rule]ToString[j]}],
                        lFF]<>"|"];
                  	
                  WriteString[funcFile,
                    "slhaVal(\""<>LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                      ToString[j]<>") \n"];,
                  	
                  WriteString[funcFile, 
                    InsString[StringReplace[tempI,{"gt1"\[Rule]ToString[j]}],
                        lFF]<> "|"];
                  	
                  WriteString[funcFile,
                    "slhaVal(\""<>LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                      ToString[j]<>") \n"];
                  	
                  WriteString[funcFile, 
                    InsString[StringReplace[tempR,{"gt1"\[Rule]ToString[j]}],
                        lFF]<> "|"];
                  	
                  WriteString[funcFile,
                    "slhaVal(\"IM"<>LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                      ToString[j]<>") \n"];
                  			];
                	j++;];,
              
              2,
              
              	temp=ToString[CForm[parameters[[i,1]][gt1,gt2]]];
              	
              tempR=ToString[
                  CForm[ToExpression["Im"<>ToString[parameters[[i,1]]]][gt1,
                      gt2]]];
              	
              tempI=ToString[
                  CForm[ToExpression["Re"<>ToString[parameters[[i,1]]]][gt1,
                      gt2]]];
              
              	For[j=1,j\[LessEqual]parameters[[i,3,1]],
                	For[k=1,k\[LessEqual]parameters[[i,3,2]],
                  	
                  If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                      CPViolation\[Equal]False,
                    	
                    WriteString[funcFile, 
                      InsString[
                          StringReplace[
                            temp,{"gt1"\[Rule]ToString[j],
                              "gt2"\[Rule]ToString[k]}],lFF]<>"|"];
                    	
                    WriteString[funcFile,
                      "slhaVal(\""<>LHBlockName[parameters[[i,1]]]<>"\",Q,2,"<>
                        ToString[j]<>","<>ToString[k]<>") \n"];,
                    	
                    WriteString[funcFile, 
                      InsString[
                          StringReplace[
                            tempI,{"gt1"\[Rule]ToString[j],
                              "gt2"\[Rule]ToString[k]}],lFF]<> "|"];
                    	
                    WriteString[funcFile,
                      "slhaVal(\""<>LHBlockName[parameters[[i,1]]]<>"\",Q,2,"<>
                        ToString[j]<>","<>ToString[k]<>") \n"];
                    	
                    WriteString[funcFile, 
                      InsString[
                          StringReplace[
                            tempR,{"gt1"\[Rule]ToString[j],
                              "gt2"\[Rule]ToString[k]}],lFF]<> "|"];
                    	
                    WriteString[funcFile,
                      "slhaVal(\"IM"<>LHBlockName[parameters[[i,1]]]<>"\",Q,2,"<>
                        ToString[j]<>","<>ToString[k]<>") \n"];
                    			];
                  	k++;];
                	j++;];,
              3,
              
              	
              	temp=ToString[CForm[parameters[[i,1]][gt1,gt2,gt3]]];
              	
              tempR=ToString[
                  CForm[ToExpression["Im"<>ToString[parameters[[i,1]]]][gt1,
                      gt2,gt3]]];
              	
              tempI=ToString[
                  CForm[ToExpression["Re"<>ToString[parameters[[i,1]]]][gt1,
                      gt2,gt3]]];
              	
              	For[j=1,j\[LessEqual]parameters[[i,3,1]],
                	For[k=1,k\[LessEqual]parameters[[i,3,2]],
                  	For[l=1,l\[LessEqual]parameters[[i,3,3]],
                    	
                    If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                        CPViolation\[Equal]False,
                      	
                      WriteString[funcFile, 
                        InsString[
                            StringReplace[
                              temp,{"gt1"\[Rule]ToString[j],
                                "gt2"\[Rule]ToString[k],
                                "gt3"\[Rule]ToString[l]}],lFF]<>"|"];
                      	
                      WriteString[funcFile,
                        "slhaVal(\""<>LHBlockName[parameters[[i,1]]]<>"\",Q,2,"<>
                          ToString[j]<>","<>ToString[k]<>","<>ToString[l]<>
                          ") \n"];,
                      	
                      WriteString[funcFile, 
                        InsString[
                            StringReplace[
                              tempI,{"gt1"\[Rule]ToString[j],
                                "gt2"\[Rule]ToString[k],
                                "gt3"\[Rule]ToString[l]}],lFF]<> "|"];
                      	
                      WriteString[funcFile,
                        "slhaVal(\""<>LHBlockName[parameters[[i,1]]]<>"\",Q,2,"<>
                          ToString[j]<>","<>ToString[k]<>","<>ToString[l]<>
                          ") \n"];
                      	
                      WriteString[funcFile, 
                        InsString[
                            StringReplace[
                              tempR,{"gt1"\[Rule]ToString[j],
                                "gt2"\[Rule]ToString[k],
                                "gt3"\[Rule]ToString[l]}],lFF]<> "|"];
                      	
                      WriteString[funcFile,
                        "slhaVal(\"IM"<>LHBlockName[parameters[[i,1]]]<>"\",Q,2,"<>
                          ToString[j]<>","<>ToString[k]<>","<>ToString[l]<>
                          ") \n"];
                      			];
                    		l++;];
                  		k++;];
                	j++;];
              ];
            ];
          i++;];
        ];
      
      If[RunningCoup\[Equal]True && 
          FreeQ[ParameterDefinitions,"Strong-Coupling"] \[Equal] False && 
          FreeQ[ParticleDefinitions[EigenstateName],
              "Up-Quarks"] \[Equal]False && 
          FreeQ[ParticleDefinitions[EigenstateName],
              "Down-Quarks"] \[Equal]False,
        WriteString[funcFile,InsString["QCDok",lFF]<>"|"];
        WriteString[funcFile,
          "initQCD(alfSMZ,"<>CalcHepMass[TopQuark,2]<>","<>
            CalcHepMass[BottomQuark,3]<>","<>CalcHepMass[TopQuark,3]<>
            ") \n"];
        WriteString[funcFile,InsString[ToString[strongCoupling],lFF]<>"|"];
        WriteString[funcFile,"sqrt(alphaQCD(Q)*4*3.1415927)*one(QCDok) \n"];
        ];
      
      For[i=1,i\[LessEqual]Length[angles],
        If[FreeQ[parDep,angles[[i]]],
          AbbreviateAngle[angles[[i]]];
          ];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[parDepExpandedList],
        WriteString[funcFile,
          InsString[
              ToString[
                CForm[parDepExpandedList[[i,1]]/. Mass\[Rule]CalcHepMassExp]],
              lFF]<>"|"];
        WriteString[funcFile,
          ToString[
              CForm[parDepExpandedList[[i,2]]/. Mass\[Rule]CalcHepMassExp]]<>
            " \n"];
        If[FreeQ[angles,parDepExpandedList[[i,1]]]\[Equal]False,
          AbbreviateAngle[parDepExpandedList[[i,1]]];
          ];
        i++;];
      ];

AbbreviateAngle[ang_]:=Block[{i,pos,abn},
      list={\[Alpha],\[Beta],\[Gamma],\[Delta],\[Lambda],\[Epsilon], ThetaW};
      abbr={a,b,g,d,k,e,TW};
      name={alpha,beta,gamma,delta,lambda,epsilon,ThetaW};
      
      
      pos=Position[list,ang];
      
      If[pos==={},
        If[StringLength[ToString[ang]]>2,
          abn=StringTake[ToString[ang],2];,
          abn = ToString[ang];
          ];
        WriteString[funcFile,InsString["S"<>abn,lFF]<>"|"];
        WriteString[funcFile,"sin("<>ToString[CForm[ang]]<>") \n"];
        WriteString[funcFile,InsString["C"<>abn,lFF]<>"|"];
        WriteString[funcFile,"cos("<>ToString[CForm[ang]]<>") \n"];
        WriteString[funcFile,InsString["T"<>abn,lFF]<>"|"];
        WriteString[funcFile,"tan("<>ToString[CForm[ang]]<>") \n"];
        
        Unprotect[Cos,Sin,Tan];
        Format[Cos[ang],CForm]=Format["C"<>abn,OutputForm];
        Format[Sin[ang],CForm]=Format["S"<>abn,OutputForm];
        Format[Tan[ang],CForm]=Format["T"<>abn,OutputForm];
        Protect[Cos,Sin,Tan];,
        
        pos=pos[[1,1]];
        WriteString[funcFile,InsString["S"<>ToString[abbr[[pos]]],lFF]<>"|"];
        WriteString[funcFile,"sin("<>ToString[CForm[name[[pos]]]]<>") \n"];
        WriteString[funcFile,InsString["C"<>ToString[abbr[[pos]]],lFF]<>"|"];
        WriteString[funcFile,"cos("<>ToString[CForm[name[[pos]]]]<>") \n"];
        WriteString[funcFile,InsString["T"<>ToString[abbr[[pos]]],lFF]<>"|"];
        WriteString[funcFile,"tan("<>ToString[CForm[name[[pos]]]]<>") \n"];
        
        Unprotect[Cos,Sin,Tan];
        Format[Cos[list[[pos]]],CForm]=
          Format["C"<>ToString[abbr[[pos]]],OutputForm];
        Format[Sin[list[[pos]]],CForm]=
          Format["S"<>ToString[abbr[[pos]]],OutputForm];
        Format[Tan[list[[pos]]],CForm]=
          Format["T"<>ToString[abbr[[pos]]],OutputForm];
        Protect[Cos,Sin,Tan];
        ];
      ];


CalcHepVertex[vertex_]:=Block[{i,temp},
      temp=vertex;
      While[(FreeQ[temp,sum]\[Equal]False),
        temp=
            ReleaseHold[
              ReleaseHold[
                  ReleaseHold[
                      temp /. sum[a_,b_,c_,d_]\[Rule]Hold[Sum[d,{a,b,c}]]]/. 
                    sum[a_,b_,c_,d_]\[Rule]Hold[Sum[d,{a,b,c}]]]/. 
                sum[a_,b_,c_,d_]\[Rule]Hold[Sum[d,{a,b,c}]] ];
        ];
      temp = Return[temp /. CHsub];
      
      ];

CHForm[x_String]:=
    Return[StringReplace[
        StringReplace[
          StringReplace[
            StringReplace[StringReplace[x," "->""],StringReplacementsCH],
            StringReplacementsCH],StringReplacementsCH],StringReplaceConj]];
CHForm[x_]:=
    Return[StringReplace[
        StringReplace[
          StringReplace[
            StringReplace[StringReplace[ToString[InputForm[x]]," "->""],
              StringReplacementsCH],StringReplacementsCH],
          StringReplacementsCH],StringReplaceConj]];

CHForm[x_,name_]:=Block[{i}, 
      splitComplete=0;
      If[Length[x]>1,
        For[i=1,i\[LessEqual]Length[x],
            splitNr=SplitF[split];
            splitNrM=SplitF[split-1];
            If[i===Length[x],
              WriteString[funcFile,InsString[name,lFF]<>"|"];
              split--,
              WriteString[funcFile,InsString[ToString[splitNr],lFF]<>"|"];
              ];
            If[i>1,
              
              WriteString[funcFile,
                  ToString[splitNrM]<>"+("<>
                    StringReplace[
                      StringReplace[x[[i]],ReleaseHold[subVertexGen]],
                      StringReplaceExtra]<>") \n"];,
              
              WriteString[funcFile,
                  StringReplace[
                      StringReplace[x[[i]],ReleaseHold[subVertexGen]],
                      StringReplaceExtra]<>" \n"];
              ];
            split++;
            i++;];,
        WriteString[funcFile,InsString[name,lFF]<>"|"];
        WriteString[funcFile,
          StringReplace[StringReplace[x,ReleaseHold[subVertexGen]],
              StringReplaceExtra]<>" \n"];
        ];
      ];

SplitF[Nr_]:=Which[Nr <100000,Return[ToExpression["s"<>ToString[Nr]]];,
       100000\[LessEqual]Nr<200000,
      Return[ToExpression["t"<>ToString[Nr-100000]]];,
      200000\[LessEqual]Nr<300000,
      Return[ToExpression["u"<>ToString[Nr-200000]]];,
      300000\[LessEqual]Nr<400000,
      Return[ToExpression["w"<>ToString[Nr-300000]]];
                                                  ];

 CalcHepFactor[nr_,list_,type_]:=Block[{i,string},
      string="v";
      For[i=1,i\[LessEqual](4-StringLength[ToString[fNr]]), 
        string=string<>"0";
        i++;];
      string=string<>ToString[fNr];
      fNr++;
      Return[string];
      ];

CalcHepFullName[x_,gen_,fla___] :=Block[{i,p,pTemp},
      p=ToString[x];
      If[(getGen[x]>1) && (gen=!=0),
        If[getFla[x]>1,
            p=p<>"[{"<>ToString[gen]<>ToString[fla]<>"}]";,
            p=p<>"[{"<>ToString[gen]<>"}]";
            ];
        ];
      pTemp=p;
      For[i=1,i\[LessEqual](-StringLength[p]+ columnWidthsParticles[[1]]),
        pTemp=pTemp<>" ";
        i++;];
      If[StringLength[pTemp]>10,
        pTemp = StringReplace[pTemp,{"["->"","]"->"","{"->"","}"->""}];
        If[StringLength[pTemp]>10,
          pTemp=StringTake[pTemp,10];
          ];
        ];
      Return[pTemp];
      ];


CalcHepName[x_,gen_,fla___]:=Block[{i,p,pTemp,nF,pos},
      If[FreeQ[partGA,getBlank[x]],
        nF = getFla[x];,
        pos=Position[partGA,getBlank[x]][[1,1]];
        nF = partGA[[pos]][[3]];
        ];
      
      If[getType[getBlank[x]]=!=G,
        If[FreeQ[CHParticleList,getBlank[x]]===False,
            
            If[((Head[x]=!=conj) && (Head[x]=!=bar))  || (SelfAdjQ[x]===
                      True),
                If[(getGenOne[x]\[Equal]1) || (gen\[Equal]0), 
                    pos=Position[CHParticleList ,getBlank[x]][[1,1]];
                    Return[Extract[CHParticleList ,pos][[3,1]]];,
                    If[nF>1,
                        
                        pos=Position[CHParticleList ,
                              getBlank[x][{gen,fla}]][[1,1]];
                        Return[Extract[CHParticleList ,pos][[3,1]]];,
                        
                        pos=Position[CHParticleList ,getBlank[x][{gen}]][[1,
                              1]];
                        Return[Extract[CHParticleList ,pos][[3,1]]];
                        ];
                    ];,
                If[(getGenOne[x]\[Equal]1) || (gen\[Equal]0), 
                    pos=Position[CHParticleList ,getBlank[x]][[1,1]];
                    Return[Extract[CHParticleList ,pos][[3,2]]];,
                    If[nF>1,
                        
                        pos=Position[CHParticleList ,
                              getBlank[x][{gen,fla}]][[1,1]];
                        Return[Extract[CHParticleList ,pos][[3,2]]];,
                        
                        pos=Position[CHParticleList ,getBlank[x][{gen}]][[1,
                              1]];
                        Return[Extract[CHParticleList ,pos][[3,2]]];
                        ];
                    ];
                ];,
            Message[CHep::NoName,x];
            Return[CalcHepNameAuto[x,gen]];
            ];,
        If[Head[x]===bar, 
          finalC=".C";
          SwitchPosition=True;,
          finalC=".c";
          SwitchPosition=False;
          ];
        
        
        If[StringTake[ToString[getBlank[x]],-1]==="C",
          
          VectorBoson = 
            ToExpression[
              "V"<>StringDrop[StringDrop[ToString[getBlank[x]],-1],1]];
          If[SwitchPosition\[Equal]False,
            pos2={3,2};,
            pos2={3,1};
            ];,
          If[SwitchPosition\[Equal]False,
            pos2={3,1};,
            pos2={3,2};
            ];
          
          VectorBoson= 
            ToExpression["V"<>StringDrop[ToString[getBlank[x]],1]];
          ];
        pos=Position[CHParticleList ,VectorBoson][[1,1]];
        Return[ToString[Extract[Extract[CHParticleList ,pos],pos2]]<>finalC];
        ];
      ];


CalcHepNameAuto[x_,gen_,fla___]:=Block[{i,p,pTemp},
      If[getType[getBlank[x]]=!=G,
          If[(Head[x]=!=conj) || (conj[x]===x),
              p=ToString[getBlank[x]];
              If[StringLength[p]>3,
                p=StringTake[p,3];
                ];
              If[(getGenOne[x]>1) && (gen=!=0),
                p=p<>ToString[gen];
                If[getFla[x]>1,
                  p=p<>ToString[fla];
                  ];
                ];
              pTemp=p;
              
              For[i=1,i\[LessEqual](-StringLength[p]+ 
                      columnWidthsParticles[[2]]),
                pTemp=pTemp<>" ";
                i++;];
              Return[pTemp];,
              
              p=ToString[getBlank[x]];
              If[StringLength[p]>3,
                	p=StringTake[p,3];
                ];
              
              firstLetter=StringTake[p,1];
              p=StringDrop[p,1];
              
              If[UpperCaseQ[firstLetter],
                firstLetter=ToLowerCase[firstLetter];,
                firstLetter=ToUpperCase[firstLetter];
                ];
              
              p=firstLetter<>p;
              If[(getGen[x]>1) && (gen=!=0),
                p=p<>ToString[gen];
                If[getFla[x]>1,
                  p=p<>ToString[fla];
                  ];
                ];
              pTemp=p;
              
              For[i=1,i\[LessEqual](-StringLength[p]+ 
                      columnWidthsParticles[[2]]),
                pTemp=pTemp<>" ";
                i++;];
              
              Return[pTemp];
              ];,
          
          If[Head[x]===bar,finalC=".C";,finalC=".c";];
          p=ToString[getBlank[x]];
          If[StringTake[p,-1]==="C",
            Return["v"<>StringDrop[StringDrop[p,{1}],-1]<>finalC];,
            Return["V"<>StringDrop[p,{1}]<>finalC];
            ];
          
          
          
          ];
      ]; 


CalcHepMass[x_,gen_,fla___]:=Block[{i,p,pTemp,name},
      name=StringReplace[CalcHepName[x,gen,fla],{"~"->""}];
      Return["M"<>name];
      ];

CalcHepMassExp[x_]:=CalcHepMassExp[x,1];

CalcHepMassExp[x_,gen_,fla___]:=Block[{i,p,pTemp,name},
      name=StringReplace[CalcHepName[x,gen,fla],{"~"->""}];
      Return[ToExpression["M"<>name]];
      ];


CalcHepWidth[x_,gen_,fla___]:=Block[{i,p,pTemp,name},
      name=StringReplace[CalcHepName[x,gen,fla],{"~"->""}];
      Return["W"<>name];
      ];

InsString[string_,length_]:=Block[{i},
      p=string;
      For[i=1,i\[LessEqual](length-StringLength[string]),
        p=p<>" ";
        i++;];
      Return[p];
      ];


automatizedNumber=12345;

 CalcHepNumber[x_,gen_,fla___]:=Block[{pos,i},
      If[FreeQ[CHParticleList ,x]==False,
        If[getGenOne[x]>1,
            If[getFla[x]>1,
                pos=Position[CHParticleList ,x[{gen,fla}]][[1,1]];
                p=ToString[Extract[CHParticleList ,pos][[2]]];,
                pos=Position[CHParticleList ,x[{gen}]][[1,1]];
                p=ToString[Extract[CHParticleList ,pos][[2]]];
                ];,
            pos=Position[CHParticleList ,x][[1,1]];
            p=ToString[Extract[CHParticleList ,pos][[2]]];
            ];,
        Message[CHep::NoNumber,x];
        automatizedNumber++;
        p=ToString[automatizedNumber];
        ];
      
      Return[p];
      ];



CalcHepTeXName[part_,gen_,fla___]:=Block[{i,p,pTemp,pos},
      If[FreeQ[TeXParticles,part]\[Equal]True,
        Message[CHep::NoLatex,part];
        texname=ToString[part];,
        pos = Position[TeXParticles,part,2,1][[1,1]];
        texname=Extract[TeXParticles,pos][[2]];
        ];
      If[getFla[part]<2,
        Return[AddExp[texname,"",ToString[gen]]];,
        Return[AddExp[texname,"","{"<>ToString[gen]<>ToString[fla]<>"}"]];
        ];
      ];

CalcHepSubs:=Block[{i},
      CHsub={};
      CHsub = 
        Join[CHsub,{RXi[x_]\[Rule]1, fSU3[a__]\[Rule]1,Delta[a__]\[Rule]1,
            ThetaStep[a__]->1,Lam[a__]\[Rule]2}];
      ];

AddGoldstone[CompHep_]:=Block[{i,j,k},
      GoldList = GoldstoneBosons[ToExpression[modelName]];
      Goldstones={};
      For[i=1,i\[LessEqual]Length[GoldList],
        CHParticleList =
          Join[CHParticleList ,{{GoldList[[i,2]],
                0,{CalcHepName[GoldstoneGhost[[i,1]],0]<>".f",
                  CalcHepName[conj[GoldstoneGhost[[i,1]]],0]<>".f"} }}];
        Goldstones=Join[Goldstones,{GoldList[[i,2]]}];
        i++;
        ];
      
      ANr=0;
      For[i=1,i\[LessEqual]Length[PART[A]],
        If[getGen[PART[A][[i,1]]]\[NotEqual] 8, 
          start=1;  ende=getGen[PART[A][[i,1]]];,
          start=0; ende=0;
          ];
        If[getFla[PART[A][[i,1]]]<2,
          For[j=start,j\[LessEqual]ende,
              If[conj[PART[A][[i,1]]]===PART[A][[i,1]],
                If[CompHep\[Equal]True,
                  
                  CHParticleList =
                      Join[CHParticleList , {{PART[A][[i,
                                    1]][{j}] /.a_[{0}]\[Rule]a,
                            0,{"~"<>ToString[ANr],"~"<>ToString[ANr]} }}];,
                  
                  CHParticleList =
                      Join[CHParticleList , {{PART[A][[i,
                                    1]][{j}] /.a_[{0}]\[Rule]a,
                            0,{"~0"<>ToString[ANr],"~0"<>ToString[ANr]} }}];
                  ];
                ANr++;,
                If[CompHep\[Equal]True,
                  
                  CHParticleList =
                      Join[CHParticleList ,{{PART[A][[i,1]][{j}],
                            0,{"~"<>ToString[ANr],"~"<>ToString[ANr+1]}} }];,
                  
                  CHParticleList =
                      Join[CHParticleList ,{{PART[A][[i,1]][{j}],
                            0,{"~0"<>ToString[ANr],
                              "~0"<>ToString[ANr+1]}} }];
                  ];
                ANr+=2;
                ];
              j++;];,
          For[j=start,j\[LessEqual]ende,
              For[k=1,k\[LessEqual]getFla[PART[A][[i,1]]],
                If[conj[PART[A][[i,1]]]===PART[A][[i,1]],
                  If[CompHep\[Equal]True,
                    CHParticleList =
                        Join[CHParticleList , {{PART[A][[i,1]][{j,
                                    k}] /.a_[{0}]\[Rule]a,
                              0,{"~"<>ToString[ANr],"~"<>ToString[ANr]} }}];,
                    
                    CHParticleList =
                        Join[CHParticleList , {{PART[A][[i,1]][{j,
                                    k}] /.a_[{0}]\[Rule]a,
                              0,{"~0"<>ToString[ANr],
                                "~0"<>ToString[ANr]} }}];
                    ];
                  ANr++;,
                  If[CompHep\[Equal]True,
                    
                    CHParticleList =
                        Join[CHParticleList ,{{PART[A][[i,1]][{j,k}],
                              0,{"~"<>ToString[ANr],
                                "~"<>ToString[ANr+1]}} }];,
                    
                    CHParticleList =
                        Join[CHParticleList ,{{PART[A][[i,1]][{j,k}],
                              0,{"~0"<>ToString[ANr],
                                "~0"<>ToString[ANr+1]}} }];
                    ];
                  ANr+=2;
                  ];
                k++;];
              j++;];
          ];
        i++;];
      
      
      If[CompHep\[Equal]True,
        GANr=ANr;,
        GANr=0;
        ];
      
      partGA={};
      For[i=1,i\[LessEqual]Length[PART[S]],
        partGA=
          Join[partGA,{{ToExpression["GA"<>ToString[PART[S][[i,1]]]],
                getGen[PART[S][[i,1]]],getFla[PART[S][[i,1]]],
                getIndizes[PART[S][[i,1]]]}}];
        If[getFla[PART[S][[i,1]]]<2,
          For[j=1,j\[LessEqual]getGen[PART[S][[i,1]]],
              If[CompHep\[Equal]True,
                
                CHParticleList =
                    Join[CHParticleList ,{{partGA[[i,1]][{j}],
                          0,{"~"<>ToString[GANr],"~"<>ToString[GANr+1]}} }];,
                
                CHParticleList =
                    Join[CHParticleList ,{{partGA[[i,1]][{j}],
                          0,{"~G"<>ToString[GANr],
                            "~G"<>ToString[GANr+1]}} }];
                ];
              GANr+=2;
              j++;];,
          For[j=1,j\[LessEqual]getGen[PART[S][[i,1]]],
              For[k=1,k\[LessEqual]getFla[PART[S][[i,1]]],
                If[CompHep\[Equal]True,
                  
                  CHParticleList =
                      Join[CHParticleList ,{{partGA[[i,1]][{j,k}],
                            0,{"~"<>ToString[GANr],
                              "~"<>ToString[GANr+1]}} }];,
                  
                  CHParticleList =
                      Join[CHParticleList ,{{partGA[[i,1]][{j,k}],
                            0,{"~G"<>ToString[GANr],
                              "~G"<>ToString[GANr+1]}} }];
                  ];
                GANr+=2;
                k++;];
              j++;];
          ];
        i++;];
      
      ];


CreateParticleList[CompHep_] :=Block[{i,j, name,k,l,temp={}},
      
      CHParticleList = {};
      GoldList = Transpose[GoldstoneBosons[ToExpression[modelName]]][[2]];
      pList = ParticleDefinitions[ToExpression[modelName]];
      
      For[i=1,i\[LessEqual]Length[pList],
        If[
          FreeQ[Particles[Current],getParticleName[pList[[i,1]]]]\[Equal]
            False,
          temp = Join[temp,{pList[[i]]}];
          ];
        i++;];
      pList = temp;
      
      
      For[i=1,i\[LessEqual]Length[pList],
        If[getGenOne[pList[[i,1]]]\[Equal]1,
          name = pList[[i,1]];
          If[FreeQ[GoldList,name]\[Equal]True && getType[name]=!=G,
            nameString = OutputName /. pList[[i,2]];
            
            If[Head[nameString]=!=String && Head[nameString]=!=List,
              nameString=ToString[pList[[i,1]]];
              ];
            
            AntiFieldGiven=False;
            If[Head[nameString]===List,
              AntiFieldGiven=True;
              nameStringAdj = nameString[[2]];
              nameString=nameString[[1]];
              ];
            
            If[CompHep\[Equal]True,
              LettersToAdd=0;
              If[(RParity /. pList[[i,2]])\[Equal]-1, LettersToAdd++;];
              
              If[StringLength[nameString]+LettersToAdd > 3,
                Message[CHep::ParticleNameLength,pList[[i,1]]];
                nameString=StringTake[nameString,{1,3-LettersToAdd}];
                ]; 
              ];
            
            If[AntiFieldGiven=!=True,
              
              nameAdj = 
                  If[SelfAdjQ[name]\[Equal]True,nameStringAdj=nameString;,
                    nameStringAdj =SwitchCase[nameString];];
              ];
            
            If[(RParity /. pList[[i,2]])\[Equal]-1,
              nameStringAdj=StringJoin["~",nameStringAdj]; 
              nameString=StringJoin["~",nameString];];
            pdg = PDG /. pList[[i,2]];
            If[Head[pdg]===List,pdg=pdg[[1]]];
            If[pdg===None || pdg===PDG, pdg=99;];
            
            CHParticleList = 
              Join[CHParticleList,{{name,  pdg,{nameString,nameStringAdj}}}];
            ];,
          For[j=1,j\[LessEqual]getGen[pList[[i,1]]],
              For[l=1,l\[LessEqual]getFla[pList[[i,1]]],
                If[getFla[pList[[i,1]]]>1,
                  name = pList[[i,1]][{j,l}];,
                  name = pList[[i,1]][{j}];
                  ];
                If[FreeQ[GoldList,name]\[Equal]True && getType[name]=!=G,
                  nameString = OutputName /. pList[[i,2]];
                  
                  If[Head[nameString]=!=String && Head[nameString]=!=List,
                    nameString=ToString[pList[[i,1]]];
                    ];
                  
                  AntiFieldGiven=False;
                  If[Head[nameString]===List,
                    AntiFieldGiven=True;
                    nameStringAdj = nameString[[2]];
                    nameString=nameString[[1]];
                    ];
                  
                  If[CompHep\[Equal]True,
                    LettersToAdd=1;
                    If[(RParity /. pList[[i,2]])\[Equal]-1, LettersToAdd++;];
                    If[StringLength[nameString]+LettersToAdd > 3,
                      Message[CHep::ParticleNameLength,pList[[i,1]]];
                      nameString=StringTake[nameString,{1,3-LettersToAdd}];
                      ]; 
                    ];
                  
                  If[getFla[pList[[i,1]]]>1,
                    nameString = nameString <>ToString[j]<>ToString[l];,
                    nameString = nameString <>ToString[j];
                    ];
                  If[AntiFieldGiven=!=True,
                    
                    nameAdj = 
                        If[SelfAdjQ[name]\[Equal]True,
                          nameStringAdj=nameString;,
                          nameStringAdj =SwitchCase[nameString];];,
                    If[getFla[pList[[i,1]]]>1,
                        
                        nameStringAdj = 
                            nameStringAdj <>ToString[j]<>ToString[l];,
                        nameStringAdj = nameStringAdj <>ToString[j];
                        ];
                    ];
                  
                  If[(RParity /. pList[[i,2]])\[Equal]-1,
                    nameStringAdj=StringJoin["~",nameStringAdj]; 
                    nameString=StringJoin["~",nameString];];
                  pdg = PDG /. pList[[i,2]];
                  If[pdg===None || pdg===PDG, 
                    pdg=99;,
                    If[Length[pdg]<j*getFla[pList[[i,1]]],
                        pdg=99;,
                        pdg=pdg[[1+(j-1)*getFla[pList[[i,1]]]+(l-1)]];
                        ];
                    ];
                  
                  CHParticleList = 
                    Join[CHParticleList,{{name,  
                          pdg,{nameString,nameStringAdj}}}];
                  ];
                l++;];
              j++;];
          ];
        i++;];
      
      
      subComplexParameters={};
      For[i=1,i\[LessEqual]Length[parameters],
        If[MemberQ[realVar,parameters[[i,1]]]\[Equal]False,
          
          realVar = 
            Join[realVar,{ToExpression["Re"<>ToString[parameters[[i,1]]]],
                ToExpression["Im"<>ToString[parameters[[i,1]]]]}];
          If[Length[parameters[[i,2]]]\[Equal]0,
            
            subComplexParameters=
                Join[subComplexParameters,{parameters[[i,
                          1]]\[Rule]ToExpression[
                          "Re"<>ToString[
                              parameters[[i,1]]]]+\[ImaginaryI] ToExpression[
                            "Im"<>ToString[parameters[[i,1]]]]}];,
            
            subComplexParameters=
                Join[subComplexParameters,{parameters[[i,1]][
                        x__]\[Rule]ToExpression[
                            "Re"<>ToString[parameters[[i,1]]]][
                          x]+\[ImaginaryI] ToExpression[
                              "Im"<>ToString[parameters[[i,1]]]][x]}];
            ];
          ];
        i++;];
      
      ];


SwitchCase[x_]:=Block[{},
      firstL=StringTake[x,1];
      If[LowerCaseQ[firstL]\[Equal]True,firstL=ToUpperCase[firstL];,
        firstL=ToLowerCase[firstL];];
      Return[firstL<>StringDrop[x,1]];
      ];

SelfAdjQ[x_]:=Block[{},
      If[getTypeOld[x]===F,
          
          If[MemberQ[MajoranaPart,getBlank[x]]\[Equal]True, Return[True];,
              Return[False];];,
          
          If[MemberQ[realVar,getBlank[x]]\[Equal]True, Return[True];,
              Return[False];];
          ];
      ];



WriteVerticesCHep[vlist_,CPViolation_,FeynmanGauge_,type_, NoSplitWith_,
      NoSplitOnly_,TestAux_]:=
    Block[{i,j,iter1,iter2,iter3,iter4,fiter1,fiter2,fiter3,fiter4,gf1,gf2,
        gf3,particle1,particle2,particle3, entry,WriteCompleteVertex},
      
      For[i=1,i\[LessEqual]Length[vlist],
          
          If[TestAux\[Equal]True,
            If[Length[NoSplitOnly]>0,
                WriteCompleteVertex=False;
                For[j=1,j\[LessEqual]2,
                  If[FreeQ[NoSplitOnly,getBlank[vlist[[i,1,j]]]]\[Equal]True,
                    WriteCompleteVertex=True;
                    ];
                  j++;];,
                WriteCompleteVertex=True;
                For[j=1,j\[LessEqual]Length[NoSplit],
                  If[FreeQ[vlist[[i,1]],NoSplitWith[[j]]]\[Equal]False,
                    WriteCompleteVertex=False;
                    ];
                  j++;];
                ];,
            WriteCompleteVertex=True;
            ];
          
          If[WriteCompleteVertex==True,
            
            
            subVertexGen={"gt1"\[Rule] Hold[ToString[iter1]],
                "gt2"\[Rule] Hold[ToString[iter2]],
                "gt3"\[Rule] Hold[ToString[iter3]],
                "ft1"\[Rule] Hold[ToString[fiter1]],
                "ft2"\[Rule] Hold[ToString[fiter2]],
                "ft3"\[Rule] Hold[ToString[fiter3]]};
            If[type===FFS || type===FFV,
              valueA=CalcHepVertex[vlist[[i,2,1]]];
              valueB=CalcHepVertex[vlist[[i,3,1]]];
               
              If[FreeQ[valueA,Complex]\[Equal]False || 
                  FreeQ[valueB,Complex]\[Equal]False, 
                valueA=valueA/\[ImaginaryI];
                valueB=valueB/\[ImaginaryI];
                Imc="1";,
                Imc="i";
                ];
              
              
              Clear[iter1,iter2,iter3,fiter1,fiter2,fiter3];
              PlusIndices=Cases[Expand[valueA],x:(a_Symbol+b_Integer),10];
              
              PlusIndices=
                Join[PlusIndices,
                  Cases[Expand[valueB],x:(a_Symbol+b_Integer),10]];
              PlusIndices=Intersection[PlusIndices];
              
              If[Length[PlusIndices]>0,
                For[j=1,j\[LessEqual]Length[PlusIndices],
                    var=ToExpression["gtP"<>ToString[j]];
                    valueAReplaced = valueA /. {PlusIndices[[j]]\[Rule]var};
                    valueBReplaced = valueB /. {PlusIndices[[j]]\[Rule]var};
                    
                    subVertexGen = 
                      Join[subVertexGen,{ToString[
                              var]\[Rule](Hold[ToString[Evaluate[entry]]] /. 
                                  entry ->
                                    PlusIndices[[j]] /. {gt1\[Rule]iter1,
                                  gt2\[Rule]iter2,gt3\[Rule]iter3,
                                  ft1\[Rule]fiter1,ft2\[Rule]fiter2,
                                  ft3\[Rule]fiter3})}];
                    j++;];,
                valueAReplaced = valueA;
                valueBReplaced = valueB;
                ];
              
               If[CPViolation\[Equal]True,
                
                valueCurrentA = 
                  Expand[valueAReplaced/. subComplexParameters];
                
                valueCurrentB = 
                  Expand[valueBReplaced /. subComplexParameters];
                
                valueImA = 
                  SplitValue[
                    Im[valueCurrentA] /. {Im[x_]\[Rule]0, Re[x_]\[Rule]x}];
                
                valueReA = 
                  SplitValue[
                    Re[valueCurrentA] /. {Im[x_]\[Rule]0, Re[x_]\[Rule]x}];
                
                valueImB = 
                  SplitValue[
                    Im[valueCurrentB] /. {Im[x_]\[Rule]0, Re[x_]\[Rule]x}];
                
                valueReB = 
                  SplitValue[
                    Re[valueCurrentB] /. {Im[x_]\[Rule]0, Re[x_]\[Rule]x}];,
                
                valueCurrentA = 
                  SplitValue[Expand[valueAReplaced]/. conj[x_]\[Rule]x];
                
                valueCurrentB = 
                  SplitValue[Expand[valueBReplaced]/. conj[x_]\[Rule]x];
                ]; ,
              
              value=CalcHepVertex[vlist[[i,2,1]]];
              
              
              If[FreeQ[value,Complex]\[Equal]False, 
                value=value/\[ImaginaryI];
                Imc="1";,
                Imc="i";
                ];
              
              
              Clear[iter1,iter2,iter3,fiter1,fiter2,fiter3];
              PlusIndices=
                Intersection[Cases[Expand[value],x:(a_Symbol+b_Integer),10]];
              If[Length[PlusIndices]>0,
                For[j=1,j\[LessEqual]Length[PlusIndices],
                    var=ToExpression["gtP"<>ToString[j]];
                    valueReplaced = value /. {PlusIndices[[j]]\[Rule]var};
                    
                    subVertexGen = 
                      Join[subVertexGen,{ToString[
                              var]\[Rule](Hold[ToString[Evaluate[entry]]] /. 
                                  entry ->
                                    PlusIndices[[j]] /. {gt1\[Rule]iter1,
                                  gt2\[Rule]iter2,gt3\[Rule]iter3})}];
                    j++;];,
                valueReplaced=value;
                ];
              
              If[CPViolation\[Equal]True,
                valueCurrent = Expand[valueReplaced/. subComplexParameters];
                
                valueIm = 
                  SplitValue[
                    Im[valueCurrent] /. {Im[x_]\[Rule]0, Re[x_]\[Rule]x}];
                
                valueRe =
                  SplitValue[
                    Re[valueCurrent] /. {Im[x_]\[Rule]0, Re[x_]\[Rule]x}];,
                valueCurrent = Expand[valueReplaced/. conj[x_]\[Rule]x];
                valueSplitted =SplitValue[valueCurrent];
                ]; 
              ];
            
            gf1=getGenOne[vlist[[i,1,1]]];
            gf2=getGenOne[vlist[[i,1,2]]];
            gf3=getGenOne[vlist[[i,1,3]]];
            
            ff1=getFla[vlist[[i,1,1]]];
            ff2=getFla[vlist[[i,1,2]]];
            ff3=getFla[vlist[[i,1,3]]];
            
            particle1=vlist[[i,1,1]] /. A_[{a__}]\[Rule]A;
            particle2=vlist[[i,1,2]] /. A_[{a__}]\[Rule]A;
            particle3=vlist[[i,1,3]] /. A_[{a__}]\[Rule]A;
            
            
            If[(vlist[[i,1,2]] /. {gt2\[Rule]gt1,ft2\[Rule]ft1})===
                vlist[[i,1,1]],
              start2=Hold[iter1];
              fstart2=Hold[fiter1];,
              start2=1;
              fstart2=1;
              ];
            
            
            If[(vlist[[i,1,3]] /. {gt3\[Rule]gt2,ft3\[Rule]ft2})===
                vlist[[i,1,2]],
              start3=Hold[iter2];
              fstart3=Hold[fiter2];,
              
              If[(vlist[[i,1,3]] /. {gt3\[Rule]gt1,ft3\[Rule]ft1})===
                    vlist[[i,1,1]],
                  start3=Hold[iter1];
                  fstart3=Hold[fiter1];,
                  start3=1;
                  fstart3=1;
                  ];
              ];
            
            
             
            If[FreeQ[vlist[[i]],Delta[gt1,gt2]]==False,start2=Hold[iter1];
              gf2=Hold[iter1];];
            
            If[FreeQ[vlist[[i]],Delta[gt1,gt3]]==False,start3=Hold[iter1];
              gf3=Hold[iter1];];
            
            If[FreeQ[vlist[[i]],Delta[gt2,gt3]]==False,start3=Hold[iter2];
              gf3=Hold[iter2];];
            
            
            If[FreeQ[vlist[[i]],Delta[ft1,ft2]]==False,fstart2=Hold[fiter1];
              ff2=Hold[fiter1];];
            
            If[FreeQ[vlist[[i]],Delta[ft1,ft3]]==False,fstart3=Hold[fiter1];
              ff3=Hold[fiter1];];
            
            If[FreeQ[vlist[[i]],Delta[ft2,ft3]]==False,fstart3=Hold[fiter2];
              ff3=Hold[fiter2];];
            
            
            
            
            For[iter1=1,iter1\[LessEqual]gf1,
              For[fiter1=1,fiter1\[LessEqual]ff1,
                
                For[iter2=ReleaseHold[start2],
                  iter2\[LessEqual]ReleaseHold[gf2],
                  
                  For[fiter2=ReleaseHold[fstart2],
                    fiter2\[LessEqual]ReleaseHold[ff2],
                    
                    For[iter3=ReleaseHold[start3],
                      iter3\[LessEqual]ReleaseHold[gf3],
                      
                      For[fiter3=ReleaseHold[fstart3],
                        fiter3\[LessEqual]ReleaseHold[ff3],
                        If[FeynmanGauge\[Equal]False,
                          
                          If[(FreeQ[Goldstones,
                                      RE[vlist[[i,1,1]]] /. {gt1\[Rule]iter1,
                                        ft1\[Rule]fiter1}]\[Equal]True && 
                                  FreeQ[Goldstones,
                                      RE[vlist[[i,1,2]]] /. {gt2\[Rule]iter2,
                                        ft2\[Rule]fiter2}]\[Equal]True && 
                                  FreeQ[Goldstones,
                                      RE[vlist[[i,1,3]]] /. {gt3\[Rule]iter3,
                                        ft3\[Rule]fiter3}]\[Equal]True),
                              WriteVertex=True;,
                              WriteVertex=False;
                              ];,
                          WriteVertex=True;
                          ];
                        
                         If[WriteVertex\[Equal]True,
                           If[type===FFV || type===FFS,
                              
                              If[(valueA /. {gt1\[Rule]iter1,gt2\[Rule]iter2, 
                                        gt3\[Rule]iter3,ft1\[Rule]fiter1,
                                        ft2\[Rule]fiter2, 
                                        ft3\[Rule]fiter3} /.subAlways /. 
                                        subDependences)===
                                      0 && (valueB /. {gt1\[Rule]iter1,
                                        gt2\[Rule]iter2, gt3\[Rule]iter3,
                                        ft1\[Rule]fiter1,ft2\[Rule]fiter2, 
                                        ft3\[Rule]fiter3}/.subAlways/. 
                                        subDependences)===0,
                                  WriteVertex=False;
                                  ];,
                              
                              If[(value /. {gt1\[Rule]iter1,gt2\[Rule]iter2, 
                                        gt3\[Rule]iter3,ft1\[Rule]fiter1,
                                        ft2\[Rule]fiter2, 
                                        ft3\[Rule]fiter3}/.subAlways/. 
                                        subDependences)===0,
                                  WriteVertex=False;
                                  ];
                              ]; 
                          ]; 
                        
                        If[WriteVertex,
                          
                          If[type===FFV || type===FFS,
                            
                            facNameA=
                              CalcHepFactor[
                                i, {iter1,iter2,iter3,fiter1,fiter2,fiter3},
                                FFS];
                            
                            facNameB=
                              CalcHepFactor[
                                i, {iter1,iter2,iter3,fiter1,fiter2,fiter3},
                                FFS];
                            If[CPViolation\[Equal]True,
                              CHForm[valueImA, "I"<>facNameA];
                              CHForm[valueImB, "I"<>facNameB];
                              CHForm[valueReA, "R"<>facNameA];
                              CHForm[valueReB, "R"<>facNameB];, 
                              CHForm[valueCurrentA, facNameA];
                              CHForm[valueCurrentB, facNameB];	
                              ];,
                            
                            facName=
                              CalcHepFactor[
                                i, {iter1,iter2,iter3,fiter1,fiter2,fiter3},
                                type];
                            If[CPViolation\[Equal]True,
                              CHForm[valueIm, "I"<>facName];
                              CHForm[valueRe, "R"<>facName];,
                              CHForm[valueSplitted, facName]; 
                              ];
                            ];
                          
                          WriteString[lagrangeFile," "];
                          
                          WriteString[lagrangeFile,
                            InsString[CHepName[particle1,iter1,fiter1],lP]<>
                              "|"];
                          
                          WriteString[lagrangeFile,
                            InsString[CHepName[particle2,iter2,fiter2],lP]<>
                              "|"];
                          
                          WriteString[lagrangeFile,
                            InsString[CHepName[particle3,iter3,fiter3],lP]<>
                              "|     |"];
                          
                          If[type===FFS || type===FFV,
                            If[type===FFV,fac="G(m3)*";,fac="";];
                            
                            WriteString[lagrangeFile,
                              InsString[Imc<>"/2",lF]];
                            If[CPViolation\[Equal]True,
                              
                              WriteString[lagrangeFile,
                                  "|"<>fac<>"(1-G5)*(R"<>facNameA<>"+i*I"<>
                                    facNameA<>")+"<>fac<>"(1+G5)*(R"<>
                                    facNameB<>"+i*I"<>facNameB<>") \n"];,
                              
                              WriteString[lagrangeFile,
                                  "|"<>fac<>"(1-G5)*"<>facNameA<>"+"<>fac<>"(1+G5)*"<>
                                    facNameB<>" \n"];
                              ];,
                            
                            Switch[type,
                              SSS, lorentzfactor = "1";,
                              SSV, lorentzfactor = "m3.p1-m3.p2";,
                              SVV, lorentzfactor = "m2.m3";,
                              GGV, lorentzfactor = "m3.p2";,
                              GGS, lorentzfactor = "1";,
                              SSA, lorentzfactor = "Maux";
                              		ImcT=Imc;
                              		If[particle3===aWB && iter3 \[Equal] 2,
                                			 If[Imc==="1", Imc="i";,Imc="-1";]; 
                                			(* 
                                  If[Imc==="i", Imc="-1";,
                                      Imc="-i";]; *)
                         \
       			];,
                              VVV, 
                              lorentzfactor = 
                                MakeThreeVBLF[SA`VertexList[VVV][[i,2,2]] ];
                              	  If[StringTake[lorentzfactor,{1}]=="-",
                                	(* 
                                  lorentzfactor=
                                      StringReplace[
                                        ToString[InputForm[-Expand[lor]]],
                                        " "->
                                        ""]; *)
                              \
  	lorentzfactor = MakeThreeVBLF[-SA`VertexList[VVV][[i,2,2]] ];
                                	Imc="-"<>Imc;
                                	];
                              ];
                            
                            
                            If[CPViolation\[Equal]True,
                              WriteString[lagrangeFile,InsString[Imc,lF]];
                              If[type===SSV,
                                
                                WriteString[lagrangeFile,
                                    "| m3.p1*(R"<>facName<>"+i*I"<>facName<>")-m3.p2*(R"<>
                                      facName<>"+i*I"<>facName<>") \n"];,
                                
                                WriteString[lagrangeFile,
                                    "| "<>lorentzfactor<>"*(R"<>facName<>"+i*I"<>
                                      facName<>") \n"];
                                ];,
                              
                              WriteString[lagrangeFile,
                                InsString[Imc<>"*"<>facName,lF]];
                              
                              WriteString[lagrangeFile,
                                "| "<> lorentzfactor <>" \n"];
                              ];
                            If[type===SSA, Imc=ImcT;];
                             ];
                          ];
                        fiter3++;];
                      iter3++;];
                    fiter2++;];
                  iter2++;];
                fiter1++;];
              iter1++;];
            ];
          i++;];
      ];

MakeThreeVBLF[LS_]:=Block[{p1,p2,p3,m1,m2,m3,lor},
      Clear[p1,p2,p3,m1,m2,m3];
      lor =
        LS/. {lt1\[Rule]m1,lt2\[Rule]m2,lt3\[Rule]m3} /. {g[a_,b_]\[Rule]a.b, 
                  Mom[conj[x_],y_]\[Rule]Mom[x,y]}/. 
              Mom[x_[{y_}],z_] \[Rule] Mom[y,z] /. 
            Mom[x_[{y_,w_}],z_] \[Rule] Mom[w,z] /. {Mom[m1,x_]\[Rule]
              Impuls1.x,Mom[m2,x_]\[Rule]Impuls2.x,
            Mom[m3,x_]\[Rule]Impuls3.x};
      Return[
        StringReplace[
          StringReplace[ToString[InputForm[Expand[lor]]],
            " "->""],{"Impuls"->"p"}]];
      ];

SplitValue[list_]:=Block[{rest,len,maxLen,temp,temp2},
      If[Head[list]=!=Plus,Return[{ToString[CForm[list]]}];];
      maxLen=4;
      len=Length[list];
      rest=Mod[len,maxLen];
      temp=Partition[List@@list,maxLen];
      temp=Map[ToString,Map[CForm,Map[Simplify,Apply[Plus,temp,1]]]];
      If[rest=!=0,
        temp2=Take[list,{len+1-rest,len}];
        temp2=ToString[CForm[Simplify[temp2]]];
        temp=Join[temp,{temp2}];
        ];
      temp=Map[DeleteSpace,temp];
      Return[temp];
      ];


DeleteSpace[string_]:=StringReplace[string,{" " ->""}];


WriteCHepParticles[list_, CompHep_, WriteOut_,SLHA_]:=
    Block[{i,j,k,name,nameC},
      For[i=1,i\[LessEqual]Length[list],
          For[j=1,j\[LessEqual]getGenOne[list[[i,1]]],
            For[k=1,k\[LessEqual]getFla[list[[i,1]]],
              name=CalcHepName[list[[i,1]],j,k];
              nameC=CalcHepName[AntiField[list[[i,1]]],j,k];
              CHepName[list[[i,1]],j,k]=name;
              CHepName[AntiField[list[[i,1]]],j,k]=nameC;
              
              
              
              If[FreeQ[GoldstoneGhost,list[[i,1]][{j}]]\[Equal]True && 
                  FreeQ[GoldstoneGhost,list[[i,1]][{j,k}]]\[Equal]True && 
                  WriteOut\[Equal]True,
                
                WriteString[particlesFile,
                  InsString[CalcHepFullName[list[[i,1]],j,k],lN]<>"|"];
                WriteString[particlesFile,InsString[name,lP] <> "|"];
                WriteString[particlesFile,InsString[nameC,lP] <> "|" ];
                
                
                If[CompHep\[Equal]False,
                  WriteString[particlesFile,
                      InsString[CalcHepNumber[list[[i,1]],j,k],lNr] <> 
                        "|"];];
                Switch[getType[list[[i,1]]],
                  S, WriteString[particlesFile,"0     |"];
                  If[FreeQ[massless,list[[i,1]]]==True,
                    	
                    CalcHepParticlesM0 = 
                        Join[CalcHepParticlesM0,{{CalcHepMass[list[[i,1]],j,
                                k],CalcHepNumber[list[[i,1]],j,k],
                              CalcHepWidth[list[[i,1]],j,k],name}}];
                    ];,
                  F, WriteString[particlesFile,"1     |"];
                  If[FreeQ[massless,list[[i,1]]]==True,
                    	
                    CalcHepParticlesM0 = 
                        Join[CalcHepParticlesM0,{{CalcHepMass[list[[i,1]],j,
                                k],CalcHepNumber[list[[i,1]],j,k],
                              CalcHepWidth[list[[i,1]],j,k],name}}];
                    ];,
                  V, WriteString[particlesFile,"2     |"];
                  If[FreeQ[massless,list[[i,1]]]==True,
                    	
                    CalcHepParticlesM0 = 
                        Join[CalcHepParticlesM0,{{CalcHepMass[list[[i,1]],j,
                                k],CalcHepNumber[list[[i,1]],j,k],
                              CalcHepWidth[list[[i,1]],j,k],name}}];
                    ];,
                  A, WriteString[particlesFile,"0     |"];
                  ];
                
                If[getType[list[[i,1]]]=!=A,
                  If[FreeQ[massless,list[[i,1]]]==True,
                    
                    WriteString[particlesFile,
                      InsString[CalcHepMass[list[[i,1]],j,k],lM]<>"|"];
                    
                    WriteString[particlesFile,
                      InsString[CalcHepWidth[list[[i,1]],j,k],lW] <> "|"];
                    
                    
                    MassParameterCHep=
                      Join[MassParameterCHep,{ToExpression[
                            CalcHepMass[list[[i,1]],j,k]],
                          ToExpression[CalcHepWidth[list[[i,1]],j,k]]}];
                    
                    If[SLHA\[Equal]False,
                      If[FreeQ[parDep,Mass[list[[i,1]]]],
                          SetNaNtoZero=False;
                          
                          WriteString[varsFile, 
                            InsString[CalcHepMass[list[[i,1]],j,k],lVN]];
                          WriteString[varsFile, "|"];
                          If[getFla[list[[i,1]]]>1,
                            
                            numVal = 
                              NumericalValue[MassGiven[list[[i,1]][j,k]]];
                            
                            If[NumberQ[numVal]\[Equal]False,
                              numVal =
                                NumericalValue[MassRead[list[[i,1]][j,k]]]];,
                            
                            numVal = 
                              NumericalValue[MassGiven[list[[i,1]][j]]];
                            
                            If[NumberQ[numVal]\[Equal]False,
                              numVal =
                                NumericalValue[MassRead[list[[i,1]][j]]]];
                            ];
                          
                          If[NumberQ[numVal]\[Equal]False,
                            numVal =
                              NumericalValue[
                                Mass[list[[i,1]]] /.massList /. 
                                    generation\[Rule]j /. 
                                  Delta[a__]\[Rule]1]];
                          If[NumberQ[numVal]\[Equal]False,numVal =0];
                          
                          WriteString[varsFile, 
                            InsString[ToString[CForm[Re[numVal]]],lVV]];
                          WriteString[varsFile, "|  \n"]; 
                          SetNaNtoZero=True;
                          ];
                      ];,
                    WriteString[particlesFile,InsString["0",lM]<>"|"];
                    WriteString[particlesFile,InsString["0",lW] <> "|"];
                    ];
                  
                  If[getType[list[[i,1]]]===V,
                    
                    replaceMass =
                        Join[replaceMass,{Mass[
                                list[[i,1]]]\[Rule]ToExpression[
                                CalcHepMass[list[[i,1]],0]]}];
                    ];,
                  
                  WriteString[particlesFile," Maux |"];
                  WriteString[particlesFile," 0    |"];
                  ];
                
                If[FreeQ[getIndizes[list[[i,1]]],color]\[Equal]True,
                  If[FreeQ[ColoredGaugeParticles,list[[i,1]]]\[Equal]True,
                      WriteString[particlesFile,"1    |"];,
                      WriteString[particlesFile,"8    |"]
                      ];,
                  WriteString[particlesFile,"3    |"];
                  ];
                
                Switch[getType[list[[i,1]]],
                  V,WriteString[particlesFile,"G  |"];,
                  A,WriteString[particlesFile,"*  |"];,
                  F, If[(list[[i,1]]/.diracSub)[[1]]===0,
                      	WriteString[particlesFile,"R  |"];,
                      	If[(list[[i,1]]/.diracSub)[[2]]===0,
                          	WriteString[particlesFile,"L  |"];,
                          	WriteString[particlesFile,"   |"];
                          	];
                      	];,	
                   _,WriteString[particlesFile,"   |"];
                  ];
                
                
                If[getType[list[[i,1]]]=!=A,
                  
                  WriteString[particlesFile,
                    InsString[CalcHepTeXName[list[[i,1]],j,k],lL]];
                  WriteString[particlesFile,"   |"];
                  
                  WriteString[particlesFile,
                    InsString[CalcHepTeXName[AntiField[list[[i,1]]],j,k],
                      lL]];
                  WriteString[particlesFile,"\n"];,
                  WriteString[particlesFile,InsString["",lL]];
                  WriteString[particlesFile,"   |"];
                  WriteString[particlesFile,InsString["",lL]];
                  WriteString[particlesFile,"\n"];
                  ];
                
                
                ];
              k++;];
            j++;];
          i++;];
      
      ];


WriteVerticesCHep4[vlist_,CPViolation_,FeynmanGauge_,type_, NoSplitWith_,
      NoSplitOnly_,TestAux_]:=
    Block[{i,j,iter1,iter2,iter3,iter4,gf1,gf2,gf3,gf4,fiter1,fiter2,fiter3,
        fiter4,particle1,particle2,particle3,particle4, entry,
        WriteCompleteVertex},
      
      
      For[i=1,i\[LessEqual]Length[vlist],
          If[TestAux\[Equal]True,
            If[Length[NoSplitOnly]>0,
                WriteCompleteVertex=True;
                For[j=1,j\[LessEqual]4,
                  If[FreeQ[NoSplitOnly,getBlank[vlist[[i,1,j]]]]\[Equal]True,
                    WriteCompleteVertex=False;
                    ];
                  j++;];,
                WriteCompleteVertex=False;
                For[j=1,j\[LessEqual]Length[NoSplit],
                  If[FreeQ[vlist[[i,1]],NoSplitWith[[j]]]\[Equal]False,
                    WriteCompleteVertex=True;
                    ];
                  j++;];
                ];,
            WriteCompleteVertex=True;
            ];
          
          
          
          If[WriteCompleteVertex==True,
            
            If[D[D[vlist[[i,2,1]],g3],g3]===0,
                
                subVertexGen={"gt1"\[Rule] Hold[ToString[iter1]],
                    "gt2"\[Rule] Hold[ToString[iter2]],
                    "gt3"\[Rule] Hold[ToString[iter3]],
                    "gt4"\[Rule] Hold[ToString[iter4]],
                    "ft1"\[Rule] Hold[ToString[fiter1]],
                    "ft2"\[Rule] Hold[ToString[fiter2]],
                    "ft3"\[Rule] Hold[ToString[fiter3]],
                    "ft4"\[Rule] Hold[ToString[fiter4]]};
                value=CalcHepVertex[vlist[[i,2,1]]];
                
                If[FreeQ[value,Complex]\[Equal]False, 
                  value=value/\[ImaginaryI];
                  Imc="1";,
                  Imc="i";
                  ];
                
                Clear[iter1,iter2,iter3,iter4,fiter1,fiter2,fiter3,fiter4];
                
                PlusIndices=
                  Intersection[
                    Cases[Expand[value],x:(a_Symbol+b_Integer),10]];
                
                
                If[Length[PlusIndices]>0,
                  For[j=1,j\[LessEqual]Length[PlusIndices],
                      var=ToExpression["gtP"<>ToString[j]];
                      valueReplaced = value /. {PlusIndices[[j]]\[Rule]var};
                      
                      subVertexGen = 
                        Join[subVertexGen,{ToString[
                                var]\[Rule](Hold[ToString[Evaluate[entry]]] /. 
                                    entry ->
                                      PlusIndices[[j]] /. {gt1\[Rule]iter1,
                                    gt2\[Rule]iter2,gt3\[Rule]iter3,
                                    gt4\[Rule]iter4,ft1\[Rule]fiter1,
                                    ft2\[Rule]fiter2,ft3\[Rule]fiter3,
                                    ft4\[Rule]fiter4})}];
                      j++;];,
                  valueReplaced=value;
                  ];
                
                If[CPViolation\[Equal]True,
                  
                  valueCurrent = 
                    Expand[valueReplaced/. subComplexParameters];
                  
                  valueIm = 
                    SplitValue[
                      Im[valueCurrent] /. {Im[x_]\[Rule]0, Re[x_]\[Rule]x}];
                  
                  valueRe =
                    SplitValue[ 
                      Re[valueCurrent] /. {Im[x_]\[Rule]0, Re[x_]\[Rule]x}];,
                  valueCurrent = Expand[valueReplaced/. conj[x_]\[Rule]x];
                  valueSplitted =SplitValue[valueCurrent];
                  ]; 
                
                gf1=getGenOne[vlist[[i,1,1]]];
                gf2=getGenOne[vlist[[i,1,2]]];
                gf3=getGenOne[vlist[[i,1,3]]];
                gf4=getGenOne[vlist[[i,1,4]]];
                
                
                ff1=getFla[vlist[[i,1,1]]];
                ff2=getFla[vlist[[i,1,2]]];
                ff3=getFla[vlist[[i,1,3]]];
                ff4=getFla[vlist[[i,1,4]]];
                
                particle1=vlist[[i,1,1]] /. A_[{a__}]\[Rule]A;
                particle2=vlist[[i,1,2]] /. A_[{a__}]\[Rule]A;
                particle3=vlist[[i,1,3]] /. A_[{a__}]\[Rule]A;
                particle4=vlist[[i,1,4]] /. A_[{a__}]\[Rule]A;
                
                
                
                If[(vlist[[i,1,2]] /. {gt2\[Rule]gt1,ft2\[Rule]ft1} )===
                    vlist[[i,1,1]],
                  start2=Hold[iter1];
                  fstart2=Hold[fiter1];,
                  start2=1;
                  fstart2=1;
                  ];
                
                
                If[(vlist[[i,1,3]] /. {gt3\[Rule]gt2,ft3\[Rule]ft2} )===
                    vlist[[i,1,2]],
                  start3=Hold[iter2];
                  fstart3=Hold[fiter2];,
                  
                  If[(vlist[[i,1,3]] /. {gt3\[Rule]gt1,ft3\[Rule]ft1} )===
                        vlist[[i,1,1]],
                      start3=Hold[iter1];
                      fstart3=Hold[fiter1];,
                      start3=1;
                      fstart3=1;
                      ];
                  ];
                
                
                
                If[(vlist[[i,1,4]] /. {gt4\[Rule]gt3,ft4\[Rule]ft3} )===
                    vlist[[i,1,3]],
                  start4=Hold[iter3];
                  fstart4=Hold[fiter3];,
                  
                  If[(vlist[[i,1,4]] /. {gt4\[Rule]gt2,ft4\[Rule]ft2} )===
                        vlist[[i,1,2]],
                      start4=Hold[iter2];
                      fstart4=Hold[fiter2];,
                      
                      If[(vlist[[i,1,4]] /. {gt4\[Rule]gt1,ft4\[Rule]ft1} )===
                            vlist[[i,1,1]],
                          start4=Hold[iter1];
                          fstart4=Hold[fiter1];,
                          start4=1;
                          fstart4=1;
                          ];
                      ];
                  ];
                
                
                
                
                If[FreeQ[vlist[[i]],Delta[gt1,gt2]]==False, 
                  start2=Hold[iter1]; gf2=Hold[iter1];];
                
                If[FreeQ[vlist[[i]],Delta[gt1,gt3]]==False, 
                  start3=Hold[iter1]; gf3=Hold[iter1];];
                
                If[FreeQ[vlist[[i]],Delta[gt2,gt3]]==False, 
                  start3=Hold[iter2]; gf3=Hold[iter2];];
                
                If[FreeQ[vlist[[i]],Delta[gt1,gt4]]==False, 
                  start4=Hold[iter1]; gf4=Hold[iter1];];
                
                If[FreeQ[vlist[[i]],Delta[gt3,gt4]]==False, 
                  start4=Hold[iter3]; gf4=Hold[iter3];];
                
                If[FreeQ[vlist[[i]],Delta[gt2,gt4]]==False, 
                  start4=Hold[iter2]; gf4=Hold[iter2];];
                
                
                If[FreeQ[vlist[[i]],Delta[ft1,ft2]]==False, 
                  start2=Hold[fiter1]; gf2=Hold[fiter1];];
                
                If[FreeQ[vlist[[i]],Delta[ft1,ft3]]==False, 
                  start3=Hold[fiter1]; gf3=Hold[fiter1];];
                
                If[FreeQ[vlist[[i]],Delta[ft2,ft3]]==False, 
                  start3=Hold[fiter2]; gf3=Hold[fiter2];];
                
                If[FreeQ[vlist[[i]],Delta[ft1,ft4]]==False, 
                  start4=Hold[fiter1]; gf4=Hold[fiter1];];
                
                If[FreeQ[vlist[[i]],Delta[ft3,ft4]]==False, 
                  start4=Hold[fiter3]; gf4=Hold[fiter3];];
                
                If[FreeQ[vlist[[i]],Delta[ft2,ft4]]==False, 
                  start4=Hold[fiter2]; gf4=Hold[fiter2];];
                
                
                
                
                For[iter1=1,iter1\[LessEqual]gf1,
                  For[fiter1=1,fiter1\[LessEqual]ff1,
                    
                    For[iter2=ReleaseHold[start2],
                      iter2\[LessEqual]ReleaseHold[gf2],
                      
                      For[fiter2=ReleaseHold[fstart2],
                        fiter2\[LessEqual]ReleaseHold[ff2],
                        
                        For[iter3=ReleaseHold[start3],
                          iter3\[LessEqual]ReleaseHold[gf3],
                          
                          For[fiter3=ReleaseHold[fstart3],
                            fiter3\[LessEqual]ReleaseHold[ff3],
                            
                            For[iter4=ReleaseHold[start4],
                              iter4\[LessEqual]ReleaseHold[gf4],
                              
                              For[fiter4=ReleaseHold[fstart4],
                                fiter4\[LessEqual]ReleaseHold[ff4],
                                
                                If[FeynmanGauge\[Equal]False,
                                  
                                  If[(FreeQ[Goldstones,
                                        RE[vlist[[i,1,1]]] /. {gt1\[Rule]
                                        iter1,ft1\[Rule]fiter1}]\[Equal]True && 
                                        FreeQ[Goldstones,
                                        RE[vlist[[i,1,3]]] /. {ft3\[Rule]
                                        fiter3,gt3\[Rule]iter3}]\[Equal]
                                        True),
                                      WriteVertex=True;,
                                      WriteVertex=False;
                                      ];,
                                  WriteVertex=True;
                                  ];
                                
                                If[WriteVertex\[Equal]True,
                                  
                                  If[(value /. {gt1\[Rule]iter1,
                                        gt2\[Rule]iter2, gt3\[Rule]iter3, 
                                        gt4\[Rule]iter4,ft1\[Rule]fiter1,
                                        ft2\[Rule]fiter2, ft3\[Rule]fiter3, 
                                        ft4\[Rule]fiter4}/.subAlways/. 
                                        subDependences)===0,
                                      WriteVertex=False;
                                      ];
                                  ];
                                
                                
                                If[WriteVertex,
                                  
                                  
                                  facName=
                                    CalcHepFactor[
                                      i, {iter1,iter2,iter3,iter4,fiter1,
                                        fiter2,fiter3,fiter4},type];
                                  
                                  
                                  If[CPViolation\[Equal]True,
                                    CHForm[valueIm, "I"<>facName];
                                    CHForm[valueRe, "R"<>facName];,
                                    CHForm[valueSplitted, facName];
                                    ];
                                  
                                  
                                  WriteString[lagrangeFile," "];
                                  WriteString[lagrangeFile,
                                    InsString[
                                        CHepName[particle1,iter1,fiter1],lP]<>
                                      "|"];
                                  
                                  WriteString[lagrangeFile,
                                    InsString[
                                        CHepName[particle2,iter2,fiter2],lP]<>
                                      "|"];
                                  
                                  WriteString[lagrangeFile,
                                    InsString[
                                        CHepName[particle3,iter3,fiter3],lP]<>
                                      "|"];
                                  
                                  WriteString[lagrangeFile,
                                    InsString[
                                        CHepName[particle4,iter4,fiter4],lP]<>
                                      "|"];
                                  If[CPViolation\[Equal]True,
                                    
                                    WriteString[lagrangeFile,
                                      InsString[Imc,lF]];
                                    Switch[type,
                                      SSVV,
                                      	
                                      WriteString[lagrangeFile,
                                        "|m2.m4*(R"<>facName<>"+i*I"<>facName<>
                                        ") \n"];,
                                      SSSS,
                                      	
                                      WriteString[lagrangeFile,
                                        "|R"<>facName<>"+i*I"<>facName<>
                                        " \n"];
                                      ];,
                                    
                                    WriteString[lagrangeFile,
                                      InsString[Imc<>"*"<>facName,lF]];
                                    Switch[type,
                                      SSVV,
                                      WriteString[lagrangeFile,"|m2.m4 \n"];,
                                      SSSS,
                                      WriteString[lagrangeFile,"| 1 \n"];
                                      ];
                                    ];
                                  
                                  
                                  ];
                                fiter4++;];
                              iter4++;];
                            fiter3++;];
                          iter3++;];
                        fiter2++;];
                      iter2++;];
                    fiter1++;];
                  iter1++;];
                ];
            ];
          i++;];
      
      ];



SortDependendParameters[RunningCoupling_]:=
    Block[{i,j,k,temp,temp2,add,tempNew},
      Print["Sort parameters"];
      
      temp=parDep; parDepExpanded={};
      
       While[temp=!={},
        tempNew={};
        For[i=1,i\[LessEqual]Length[temp],
          
          par=Cases[{temp[[i]]} /. subAlways/. subNumDependences/. 
                  Mass[a__]:>Random[] /. A_[b__Pattern]\[Rule]A,x_Symbol,99];
          
          remaining=
            Join[tempNew,
              Table[temp[[k]]/. Mass[a__]\[Rule]Random[],{k,i+1,
                  Length[temp]}]];
          add=True;
          For[j=1,j\[LessEqual]Length[par],
            
            If[FreeQ[DeleteCases[remaining,x_Pattern,5],par[[j]]]\[Equal]
                False,
              add=False;
              ];
            j++;];
          If[add\[Equal]False,
            tempNew=Join[tempNew,{temp[[i]]}];,
            parDepExpanded=Join[parDepExpanded,{temp[[i]]}];
            ];
          i++;];
        temp=tempNew;
         ]; 
      
      temp = parDepExpanded;
      parDepExpanded={};
      
      For[i=1,i\[LessEqual]Length[temp],
        If[FreeQ[temp[[i]],Pattern],
          parDepExpanded=Join[parDepExpanded,{temp[[i]]}];,
          parDepExpanded=Join[parDepExpanded,{Head[temp[[i]]]}];
          ];
        i++;];
      
      temp = parDepExpanded;
      parDepExpanded={};
      parDepNotExpanded = temp;
      
      For[i=1,i\[LessEqual]Length[temp],
        dim=getDimParameters[temp[[i]]];
        Switch[Length[dim],
          0,
           parDepExpanded=Join[parDepExpanded,{temp[[i]]}];,
          1,
          If[dim==={1},
              parDepExpanded=Join[parDepExpanded,{temp[[i]]}];,
              
              parDepExpanded=
                  Join[parDepExpanded,
                    Flatten[Table[temp[[i]][j1],{j1,1,dim[[1]]}]]];
              ];,
          2,
          
          parDepExpanded=
              Join[parDepExpanded,
                Flatten[
                  Table[temp[[i]][j1,j2],{j1,1,dim[[1]]},{j2,1,dim[[2]]}]]];,
          3,
          
          parDepExpanded=
              Join[parDepExpanded,
                Flatten[
                  Table[temp[[i]][j1,j2],{j1,1,dim[[1]]},{j2,1,dim[[2]]},{j3,
                      1,dim[[2]]}]]];
          ];
        i++;];
      
      parDepExpandedList=
        Table[{parDepExpanded[[i]],
            parDepExpanded[[i]]  /. subAlways/. subNumDependences},{i,1,
            Length[parDepExpanded]}];
      
      If[RunningCoupling\[Equal]True,
        parDepExpandedList= 
            parDepExpandedList/.{Mass[BottomQuark,3]\[Rule] 
                  MbEff[Q]*one[QCDok],
                Mass[TopQuark,3]\[Rule] MtEff[Q]*one[QCDok],
                Mass[TopQuark,2]\[Rule] McEff[Q]*one[QCDok]};
        ];
      
      parDepNeeded={};
      
      For[i=1,i\[LessEqual]Length[parDep],
        par=
          Cases[{parDep[[i]]}/. subAlways/. subNumDependences /. 
                Mass[a__]:>Random[] /. A_[b__Pattern]\[Rule]A,x_Symbol,5];
        If[FreeQ[{parDep[[i]]}/. subAlways/. subNumDependences ,sum],
          For[j=1,j\[LessEqual]Length[par],
              
              If[FreeQ[parDep,par[[j]]] && FreeQ[parNum,par[[j]]],
                parDepNeeded=Join[parDepNeeded,{par[[j]]}];];
              j++;];
          ];
        i++;];
      
      parDepNeeded = Intersection[parDepNeeded];
      
      ];



WriteCalcOmegaMO:=Block[{},
      Print["Write main file for MicrOmegas"];
      MO= OpenWrite[ToFileName[$sarahCurrentCalcHepDir,"CalcOmega.cpp"]];
      AppendSourceCode["CalcOmega.cpp",MO];
      Close[MO];
      ];

GenerateMicrOmegasLesHouches[Eigenstates_,CPViolation_]:=Block[{i,j,k},
      
      Print["Write LesHouches.c"];
      
      LH= OpenWrite[ToFileName[$sarahCurrentCalcHepDir,"lesHouches.c"]];
      
      WriteString[LH,"#include\"pmodel.h\"\n"];
      WriteString[LH,"#include<math.h> \n"];
      WriteString[LH,"#include\"../../sources/micromegas.h\"\n"];
      WriteString[LH,
        "#include\"../../CalcHEP_src/c_source/SLHAplus/include/SLHAplus.h\"\n"]\
;
      WriteString[LH,"#include<ctype.h>\n"];
      WriteString[LH,"#include<stdio.h> \n"];
      WriteString[LH,"#static int delFilesKey=1;\n \n"];
      
      WriteString[LH,"int getdelfilesstat_(void) {return delFilesKey;}\n"];
      WriteString[LH,"void delFiles(int x) {delFilesKey=x;}\n"];
      WriteString[LH,"void delfiles_(int*x){delFilesKey=*x;}\n \n \n"];
      
      
      WriteString[LH,"static void FillVal(int mode) \n"];
      
      WriteString[LH,"{char name[10]; \n"];
      WriteString[LH,"int i,j,k; \n"];
      
      WriteString[LH,
        "char* massName["<>ToString[Length[CalcHepParticlesM0]]<>"] = { \n"];
      For[i=1,i\[LessEqual]Length[CalcHepParticlesM0],
        WriteString[LH,"\""<>CalcHepParticlesM0[[i,1]]<>"\""];
        If[i\[Equal] Length[CalcHepParticlesM0],
          WriteString[LH,"}; \n \n"];,
          WriteString[LH,","];
          If[Mod[i,10]\[Equal]0,
            WriteString[LH,"\n"];
            ];
          ];
        i++;];
      
      WriteString[LH,
        "int massId["<>ToString[Length[CalcHepParticlesM0]]<>"] = { \n"];
      For[i=1,i\[LessEqual]Length[CalcHepParticlesM0],
        WriteString[LH,ToString[CalcHepParticlesM0[[i,2]]]];
        If[i\[Equal] Length[CalcHepParticlesM0],
          WriteString[LH,"}; \n \n"];,
          WriteString[LH,","];
          If[Mod[i,10]\[Equal]0,
            WriteString[LH,"\n"];
            ];
          ];
        i++;];
      
      
      WriteString[LH,
        "for(i=0;i<"<>ToString[Length[CalcHepParticlesM0]]<>
          ";i++) assignValW(massName[i],slhaVal(\"MASS\",0.,1,massId[i])); \n \n"]\
;
      
      WriteString[LH,"double Q; \n \n"];
      
      For[i=1,i\[LessEqual]Length[parameters],
        If[(FreeQ[UsedDependences,
                  parameters[[i,1]]]\[Equal]True)&& (LHBlockName[
                  parameters[[i,1]]]=!=
                "NONE") &&(FreeQ[VertexList3,parameters[[i,1]]]\[Equal]False || 
                FreeQ[VertexList4,parameters[[i,1]]] \[Equal]False || 
                FreeQ[subAlways,parameters[[i,1]]] \[Equal]False),
          
          
          temp=StringReplace[
              ToString[CForm[parameters[[i,1]]]],{")"->"","("->""}];
          tempR=
            StringReplace[
              ToString[
                CForm[ToExpression["Im"<>ToString[parameters[[i,1]]]]]],{")"->
                  "","("->""}];
          
          tempI=StringReplace[
              ToString[
                CForm[ToExpression["Re"<>ToString[parameters[[i,1]]]]]],{")"->
                  "","("->""}];
          
          Switch[Length[parameters[[i,2]]],
            0,
            
            If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                  CPViolation\[Equal]False,
                
                WriteString[LH,
                    "assignVal(\""<>temp<>"\",slhaVal(\""<>
                      LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                      LHPos[parameters[[i,1]]]<>")); \n"];,
                
                WriteString[LH,
                  "assignVal(\"Re"<>tempR<>"\",slhaVal(\""<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                    LHPos[parameters[[i,1]]]<>")); \n"];
                
                WriteString[LH,
                  "assignVal(\"Im"<>tempI<>"\",slhaVal(\"IM"<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,1,"<>
                    LHPos[parameters[[i,1]]]<>")); \n"];
                ];,
            
            
            1,
            
            If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                  CPViolation\[Equal]False,
                
                WriteString[LH,
                  "for(i=1;i\[LessEqual]"<>ToString[parameters[[i,3,1]]]<>
                    ";i++) \n"];
                
                WriteString[LH,
                  "{sprintf(name,\""<>temp<>"%d%d\",i,j); assignValW(name,slhaVal(\""<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,1,i)); \n"];
                WriteString[LH,"} \n"];,
                
                
                WriteString[LH,
                  "for(i=1;i\[LessEqual]"<>ToString[parameters[[i,3,1]]]<>
                    ";i++)  \n"];
                
                WriteString[LH,
                  "{sprintf(name,\""<>tempR<>"%d%d\",i,j); assignValW(name,slhaVal(\""<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,1,i)); \n"];
                
                WriteString[LH,
                  "{sprintf(name,\""<>tempI<>"%d%d\",i,j); assignValW(name,slhaVal(\"IM"<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,1,i)); \n"];
                WriteString[LH,"} \n"];
                ];,
            
            2,
            
            If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                  CPViolation\[Equal]False,
                
                WriteString[LH,
                  "for(i=1;i\[LessEqual]"<>ToString[parameters[[i,3,1]]]<>";i++) for(j=1;j\[LessEqual]"<>
                    ToString[parameters[[i,3,2]]]<>";j++) \n"];
                
                WriteString[LH,
                  "{sprintf(name,\""<>temp<>"%d%d\",i,j); assignValW(name,slhaVal(\""<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,2,i,j)); \n"];
                WriteString[LH,"} \n"];,
                
                
                WriteString[LH,
                  "for(i=1;i\[LessEqual]"<>ToString[parameters[[i,3,1]]]<>";i++) for(j=1;j\[LessEqual]"<>
                    ToString[parameters[[i,3,2]]]<>";j++) \n"];
                
                WriteString[LH,
                  "{sprintf(name,\""<>tempR<>"%d%d\",i,j); assignValW(name,slhaVal(\""<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,2,i,j)); \n"];
                
                WriteString[LH,
                  "{sprintf(name,\""<>tempI<>"%d%d\",i,j); assignValW(name,slhaVal(\"IM"<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,2,i,j)); \n"];
                WriteString[LH,"} \n"];
                ];,
            
            3,
            
            If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True || 
                  CPViolation\[Equal]False,
                
                WriteString[LH,
                  "for(i=1;i\[LessEqual]"<>ToString[parameters[[i,3,1]]]<>";i++) for(j=1;j\[LessEqual]"<>
                    ToString[parameters[[i,3,2]]]<>";j++) for(k=1;k\[LessEqual]"<>
                    ToString[parameters[[i,3,3]]]<>";k++) \n"];
                
                WriteString[LH,
                  "{sprintf(name,\""<>temp<>"%d%d\",i,j); assignValW(name,slhaVal(\""<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,3,i,j,k)); \n"];
                WriteString[LH,"} \n"];,
                
                
                WriteString[LH,
                  "for(i=1;i\[LessEqual]"<>ToString[parameters[[i,3,1]]]<>";i++) for(j=1;j\[LessEqual]"<>
                    ToString[parameters[[i,3,2]]]<>";j++) for(k=1;k\[LessEqual]"<>
                    ToString[parameters[[i,3,3]]]<>";k++) \n"];
                
                WriteString[LH,
                  "{sprintf(name,\""<>tempR<>"%d%d\",i,j); assignValW(name,slhaVal(\""<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,3,i,j,k)); \n"];
                WriteString[LH,
                  "{sprintf(name,\""<>tempI<>"%d%d\",i,j); assignValW(name,slhaVal(\"IM"<>
                    LHBlockName[parameters[[i,1]]]<>"\",Q,3,i,j,k)); \n"];
                WriteString[LH,"} \n"];
                ];
            ];
          ];
        i++;];
      
      
      
      
      WriteString[LH,"double lam_wolf=slhaVal(\"VCKMIN\",Q,1,1); \n"];
      WriteString[LH,"double A_wolf=slhaVal(\"VCKMIN\",Q,1,2);\n"];
      WriteString[LH,"double rho_wolf=slhaVal(\"VCKMIN\",Q,1,3);\n"];
      WriteString[LH,"double eta_wolf=slhaVal(\"VCKMIN\",Q,1,4);\n"];
      WriteString[LH,"double s12=lam_wolf;\n"];
      WriteString[LH,"double s23=s12*s12*A_wolf;\n"];
      WriteString[LH,
        "double s13=s23*lam_wolf*sqrt(eta_wolf*eta_wolf+rho_wolf*rho_wolf);\n"]\
;
      WriteString[LH,"double c12=sqrt(1.0-s12*s12);\n"];
      WriteString[LH,"double c23=sqrt(1.0-s23*s23);\n"];
      WriteString[LH,"double c13=sqrt(1.0-s13*s13);\n"];
      WriteString[LH,"assignValW(\"CKM11\",c12*c13);\n"];
      WriteString[LH,"assignValW(\"CKM12\",s12*c13);\n"];
      WriteString[LH,"assignValW(\"CKM13\",s13);\n"];
      WriteString[LH,"assignValW(\"CKM21\",-s12*c23-c12*s23*s13);\n"];
      WriteString[LH,"assignValW(\"CKM22\",c12*c23-s12*s23*s13);\n"];
      WriteString[LH,"assignValW(\"CKM23\",s23*c13);\n"];
      WriteString[LH,"assignValW(\"CKM31\",s12*s23-c12*c23*s13);\n"];
      WriteString[LH,"assignValW(\"CKM32\",-c12*s23-s12*c23*s13);\n"];
      WriteString[LH,"assignValW(\"CKM33\",c23*c13);\n"];
      
      WriteString[LH,"} \n \n \n"];
      
      
      WriteString[LH,"int readLesH(char*fname,int mode) \n"];
      WriteString[LH,"{int err; \n"];
      WriteString[LH,"err=slhaRead(fname,2); \n"];
      WriteString[LH,"if(err) return err; \n"];
      WriteString[LH,"FillVal(mode); \n"];
      WriteString[LH,"return 0;} \n"];
      
      
      Close[LH];
      ];