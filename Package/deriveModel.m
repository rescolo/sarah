(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

(* ------------------------------------------------- *)
(* 
  Calculates all Vertices / Generates a TeX-
    Output  *)
(* ------------------------------------------------- *)


Options[ModelOutput]={ SixParticleInteractions\[Rule]False,
      effectiveOperators\[Rule]False, ReadLists\[Rule]False, 
      WriteTeX\[Rule] False, WriteCHep\[Rule]False, 
      WriteFeynArts\[Rule]False, FeynmanDiagrams \[Rule]True, 
      IncludeLoopCorrections \[Rule]False,IncludeRGEs\[Rule]False,
      TwoLoopRGEs\[Rule]True,VerticesForLoops\[Rule]False, 
      SimplifySums\[Rule]True, IncludeVertices\[Rule]True };

Options[MakeVertexList]={ SixParticleInteractions\[Rule]False,
      effectiveOperators\[Rule]False,VerticesForLoops\[Rule]False, 
      GenericClasses\[Rule]All, SimplifySums\[Rule]True};


ModelOutput[Eigenstates_,opt___ ]:=
    DeriveModel[Eigenstates, effectiveOperators/.{opt}/.Options[ModelOutput],
      SixParticleInteractions/.{opt}/.Options[ModelOutput],
      ReadLists/.{opt}/.Options[ModelOutput], 
      WriteTeX/.{opt}/.Options[ModelOutput],
      WriteCHep/.{opt}/.Options[ModelOutput],
      WriteFeynArts/.{opt}/.Options[ModelOutput],
      FeynmanDiagrams/.{opt}/.Options[ModelOutput],
      IncludeLoopCorrections/.{opt}/.Options[ModelOutput],
      IncludeRGEs/.{opt}/.Options[ModelOutput],
      TwoLoopRGEs/.{opt}/.Options[ModelOutput],
      VerticesForLoops/.{opt}/.Options[ModelOutput],
      SimplifySums/.{opt}/.Options[ModelOutput],
      IncludeVertices/.{opt}/.Options[ModelOutput]];


DeriveModel[Eigenstates_,effOp_, SixP_,ReadL_,WriteTeX_, WriteCHep_, 
      WriteFeynArts_, FeynDia_,LoopC_, IncludeRGEs_,TwoLoopRGEs_,VLoop_ , 
      SimplifySUMs_, IncludeVert_]:=Block[{CalcVLoop},
      massless=Massless[Eigenstates];
      InitVertexCalculation[Eigenstates, WriteTeX];
      partDefinition=ParticleDefinitions[Eigenstates];
      Particles[Current] = Particles[Eigenstates];
      CurrentStates = Eigenstates;
      
      If[LoopC\[Equal]True,
        CalcVLoop=True;,
        CalcVLoop=VLoop
        ];
      
      EigenstateName=Eigenstates;
      
      If[IncludeVert \[Equal]True,
         If[ReadL\[Equal]False,
            
            MakeVertexList[Eigenstates, SixParticleInteractions\[Rule] SixP,
                effectiveOperators\[Rule] effOp,
                VerticesForLoops\[Rule]CalcVLoop, 
                SimplifySums\[Rule]SimplifySUMs];,
            ReadVertexList[Eigenstates,effOp,SixP,CalcVLoop];
            ]; 
        ];
      
      MakeDepParList[Eigenstates];
      
      If[LoopC\[Equal]True,
        CalcLoopCorrections[Eigenstates];
        ];
      
      If[IncludeRGEs\[Equal]True,
        If[TwoLoopRGEs\[Equal]True,
            CalcRGEs[TwoLoop\[Rule]True, ReadLists\[Rule]ReadL];,
            CalcRGEs[TwoLoop\[Rule]False, ReadLists\[Rule]ReadL];
            ];
        ];
      
       If[WriteTeX\[Equal]True,
        MakeTeX[effectiveOperators\[Rule] effOp,
            SixParticleInteractions\[Rule] SixP, 
            FeynmanDiagrams\[Rule] FeynDia, 
            IncludeVert \[Rule] IncludeVertices];
        ];
       
      If[WriteFeynArts \[Equal] True,
        MakeFeynArts;
        ];
      
      If[WriteCHep \[Equal] True,
        MakeCHep[];
        ];
      ];

ITypes={ {SSS,S,S,S}, {SSSS,S,S,S,S}, {SSVV,S,S,V,V}, {SSV,S,S,V}, {SVV,S,V,
        V}, {GGV,G,G,V}, {GGS,G,G,S}, {FFS,F,F,S}, {FFV,F,F,V},{VVV,V,V,
        V},{VVVV,V,V,V,V},{SSA,S,S,A}};
ITypesNonRen={ {SSSSSS,S,S,S,S,S,S}, {SSSSVV,S,S,S,S,V,V}, {SSVVVV,S,S,V,V,V,
        V}, {FFSS,F,F,S,S}, {FFVV,F,F,V,V}, {FFFF,F,F,F,F}};



InitVertexCalculation[Eigenstates_,WriteTeX_]:=Block[{},
      Print["Generate Directories"];
      
      modelName=ToString[Eigenstates];
      
      InitalizedVertexCalculaton=Eigenstates;
      
      If[FileExistsQ[$sarahOutputDir]=!=True,
        CreateDirectory[$sarahOutputDir];
        ];
      If[FileExistsQ[$sarahCurrentOutputMainDir]=!=True,
        CreateDirectory[$sarahCurrentOutputMainDir];
        ];
      
      Lag=LagrangianComplete[Eigenstates];
      Particles[Current]=Particles[Eigenstates];
      MMatrizen=MassMatrices[Eigenstates];
      SelfEnergy=SelfEnergies1Loop[Eigenstates];
      TadpolesLoop=Tadpoles1Loop[Eigenstates];
      mixings=MixBasis[Eigenstates];
      mixedNames=MixMatrix[Eigenstates];
      effectiveTheory=IntOut[Eigenstates];
      TadEqu=TadpoleEquations[Eigenstates];
      UnmixedFields=ListUnmixed[Eigenstates];
      SelfEunmixed=SelfEnergyUnmixed[Eigenstates];
      
      
      
      $sarahCurrentOutputDir=
        ToFileName[{$sarahCurrentOutputMainDir,modelName}];
      $sarahCurrentTeXDir=ToFileName[{$sarahCurrentOutputDir,"TeX"}];
      $sarahCurrentFeynArtsDir=
        ToFileName[{$sarahCurrentOutputDir,"FeynArts"}];
      $sarahCurrentVerticesDir=
        ToFileName[{$sarahCurrentOutputDir,"Vertices"}];
      $sarahCurrentCalcHepDir=ToFileName[{$sarahCurrentOutputDir,"CHep"}];
      $sarahDiagrams = ToFileName[{$sarahCurrentTeXDir,"Diagrams"}];
      
      
      If[FileExistsQ[$sarahCurrentOutputDir]=!=True,
        CreateDirectory[$sarahCurrentOutputDir];
        ];
      If[FileExistsQ[$sarahCurrentVerticesDir]=!=True,
        CreateDirectory[$sarahCurrentVerticesDir];
        ];
      
      
      Print["Building Particle List"];
      
      PART[S]={};
      PART[V]={};
      PART[F]={};
      PART[G]={};
      PART[A]={};
      
      
      diracTemp=dirac;
      
      For[i=1,i\[LessEqual]Length[Particles[Current]],
        Switch[Particles[Current][[i,4]],
          S, 
          PART[S] = 
              Join[PART[
                  S],{{Particles[Current][[i,1]],Particles[Current][[i,3]], 
                    Particles[Current][[i,5]],
                    TrueQ[Particles[Current][[i,1]]\[Equal] 
                        conj[Particles[Current][[i,1]]]]}}];,
          F, pos=Position[diracTemp,Particles[Current][[i,1]]];
          	If[Length[pos]>0,
            	
            PART[F]=Join[
                PART[F],{{Extract[diracTemp,pos[[1,1]]][[1]],
                    Particles[Current][[i,3]], Particles[Current][[i,5]], 
                    MemberQ[MajoranaPart,
                      Particles[Current][[i,1]]/.diracSubBack1 /. 
                        diracSubBack2]}}];
            	diracTemp=Delete[diracTemp,pos[[1,1]]];
            	];,
          V, 
          PART[V] = 
              Join[PART[
                  V],{{Particles[Current][[i,1]],Particles[Current][[i,3]], 
                    Particles[Current][[i,5]],
                    TrueQ[Particles[Current][[i,1]]\[Equal] 
                        conj[Particles[Current][[i,1]]]]}}];,
          G, 
          PART[G] = 
              Join[PART[
                  G],{{Particles[Current][[i,1]],Particles[Current][[i,3]], 
                    Particles[Current][[i,5]],
                    TrueQ[Particles[Current][[i,1]]\[Equal] 
                        conj[Particles[Current][[i,1]]]]}}];,
          A, 
          PART[A] = 
              Join[PART[
                  A],{{Particles[Current][[i,1]],Particles[Current][[i,3]], 
                    Particles[Current][[i,5]],False}}];
          ];
        i++;];
      
      
      CreateTeXNameList[Eigenstates];
      
      ];



ReadVertexList[ES_,effectiveOperators_,SixP_,VLoop_]:=Block[{i},
      Print["Read Vertex Lists"];
      EigenstateName=ES;
      VerticesForEigenstates=ES;
      
      For[i=1,i\[LessEqual]Length[ITypes],
        SA`VertexList[ITypes[[i,1]]]=
          Get[ToFileName[$sarahCurrentVerticesDir,
              "VertexList"<>ToString[ITypes[[i,1]]]<>".m"]];
        i++; ];
      
      If[VLoop,
        For[i=1,i\[LessEqual]Length[ITypes],
          
          SA`VertexList[sum][ITypes[[i,1]]]=
            Get[ToFileName[$sarahCurrentVerticesDir,
                "VertexList"<>ToString[ITypes[[i,1]]]<>"sum.m"]];
          i++; ];
        VertexListSUMS=
          Get[ToFileName[$sarahCurrentVerticesDir,"VertexListSUMS.m"]];
        ];
      
      VertexList3=Get[ToFileName[$sarahCurrentVerticesDir,"VertexList3.m"]];
      VertexList4=Get[ToFileName[$sarahCurrentVerticesDir,"VertexList4.m"]];
      VertexListNonCC=
        Get[ToFileName[$sarahCurrentVerticesDir,"VertexListNonCC.m"]];
      
      If[effectiveOperators\[Equal]True,
        For[i=1,i\[LessEqual]Length[ITypesNonRen],
            If[SixP\[Equal]True || Length[ITypesNonRen]<7,
              
              SA`VertexList[ITypesNonRen[[i,1]]]=
                  Get[ToFileName[$sarahCurrentVerticesDir,
                      "VertexList"<>ToString[ITypesNonRen[[i,1]]]<>".m"]];
              ];
            i++;];
        ];
      ];

MakeVertexList[ES_,opt___]:=
    MakeVertexListFun[ES, effectiveOperators/.{opt}/.Options[MakeVertexList],
      SixParticleInteractions/.{opt}/.Options[MakeVertexList], 
      VerticesForLoops /.{opt}/.Options[MakeVertexList],
      SimplifySums /.{opt}/.Options[MakeVertexList],
      GenericClasses /.{opt}/.Options[MakeVertexList]];

MakeVertexListFun[ES_,effectiveOperators_,SixParticleInteractions_, 
      VerticesForLoops_,SimplifySums_,classes_]:=
    Block[{s1,s2,s3,s4,s5,s6,fin,iteration},
      
      If[InitalizedVertexCalculaton=!=ES, InitVertexCalculation[ES,False]; ];
      EigenstateName=ES;
      
      Print["-----------------------"];
      Print["Calculate All Vertices"];
      Print["-----------------------"];
      
      If[VerticesForLoops\[Equal]True,
        sum[a_,b_,c_, conj[M_[a_,x_]] M_[a_,y_]]=.;
        sum[a_,b_,c_, conj[M_[x_,a_]] M_[y_,a_]]=.;
        UseCheckMatrixProduct=False;
        ];
      
      iteration=1;
      
      VerticesForEigenstates=ES;
      VertexList3={};
      VertexList4={};
      VertexListNonCC={};
      
      If[effectiveOperators\[Equal]True,
        VertexList4f={};
        VertexList6={};
        
        
        For[i=1,i\[LessEqual]Length[ITypesNonRen],
          If[SixP\[Equal]True || Length[ITypesNonRen]<7,
            SA`VertexList[ITypesNonRen[[i,1]]]={};
            ];
          i++;];
        
        InitAutomaticCalc[ES];
        
        GenericVertices[FFFF,ES];
        GenericVertices[FFSS,ES];
        GenericVertices[FFVV,ES];
        
        (* GetVerticesFFFF[ES];
          GetVerticesFFSS[ES];
          GetVerticesFFVV[ES]; *)
        If[SixP\[Equal]True,
          GenericVertices[SSSSSS,ES];
          GenericVertices[SSSSVV,ES];
          GenericVertices[SSVVVV,ES];
          (* GetVerticesSSSSSS[ES];
            GetVerticesSSSSVV[ES];
            GetVerticesSSVVVV[ES]; *)
          ];
        ];
      
      
      
      For[i=1,i\[LessEqual]Length[ITypes],
        SA`VertexList[temp][ITypes[[i,1]]]={};
        i++;];
      
      
      
      
      Switch[classes,
        All,
        	GetVerticesSSS[ES];
        	GetVerticesSSSS[ES];
        	GetVerticesSSV[ES];
        	GetVerticesSVV[ES];
        	GetVerticesSSVV[ES];
        	GetVerticesVVV[ES];
        		GetVerticesFFS[ES];
        	GetVerticesFFV[ES];
        	GetVerticesVVVV[ES];
        	GetVerticesGGV[ES];
        	GetVerticesGGS[ES];
        	GetVerticesSSA[ES];,
        SSS,
        	GetVerticesSSS[ES];,
        SSSS,
        	GetVerticesSSSS[ES];,
        SSV,
        	GetVerticesSSV[ES];,
        SSVV,
        	GetVerticesSSVV[ES];,
        SVV,
        	GetVerticesSVV[ES];,
        FFS,
        	GetVerticesFFS[ES];,
        FFV,
        	GetVerticesFFV[ES];,
        GGS,
        	GetVerticesGGS[ES];,
        GGV,
        	GetVerticesGGV[ES];,
        GGS,
        	GetVerticesGGS[ES];,
        SSA,
        	GetVerticesSSA[ES];,
        VVV,
        	GetVerticesVVV[ES];,
        VVVV,
        	GetVerticesVVVV[ES];
        ];
      
      subVacuum=Flatten[Map[vacHead,vacuum]];
      diaNr=0;
      
      Print[""];
      Print["Simplify Vertices"];
      
      If[effectiveOperators\[Equal]True,
        For[i=1,i\[LessEqual]Length[ITypesNonRen],
            If[SixP\[Equal]True || Length[ITypesNonRen]<7,
              
              Put[SA`VertexList[ITypesNonRen[[i,1]]],
                  ToFileName[$sarahCurrentVerticesDir,
                    "VertexList"<>ToString[ITypesNonRen[[i,1]]]<>".m"]];
              ];
            i++;];
        ];
      
      If[VerticesForLoops,
        VertexListSUMS\[Equal]VertexListNonCCtemp /. sum\[Rule]sumExp;
        
        For[i=1,i\[LessEqual]Length[ITypes],
          
          SA`VertexList[sum][ITypes[[i,1]]]=
            SA`VertexList[temp][ITypes[[i,1]]] /. sum \[Rule] sumExp;
          i++;];
        
        If[SimplifySums\[Equal]True,
          
          sum[a_,b_,c_, conj[M_[a_,x_]] M_[a_,y_]]:=
            Delta[x,y] /; getDim[M]\[Equal]c && b\[Equal]1;
          
          sum[a_,b_,c_, conj[M_[x_,a_]] M_[y_,a_]]:=
            Delta[x,y] /; getDim[M]\[Equal]c && b\[Equal]1;,
          CheckMatrixProduct2[x_]:=Return[x];
          ];
        UseCheckMatrixProduct=True;
        
        For[i=1,i\[LessEqual]Length[ITypes],
          
          SA`VertexList[ITypes[[i,1]]]=
            Simplify/@
              CheckMatrixProduct2[SA`VertexList[temp][ITypes[[i,1]]]];
          i++;];
        VertexList3=Simplify/@CheckMatrixProduct2[VertexList3];
        VertexList4=Simplify/@CheckMatrixProduct2[VertexList4];
        VertexListNonCC=Simplify/@CheckMatrixProduct2[VertexListNonCC];,
        
        For[i=1,i\[LessEqual]Length[ITypes],
            SA`VertexList[ITypes[[i,1]]]=SA`VertexList[temp][ITypes[[i,1]]];
            i++;];
        
        ];
      
      Print["Writing vertices to files"];
      
      For[i=1,i\[LessEqual]Length[ITypes],
        Put[SA`VertexList[ITypes[[i,1]]],
          ToFileName[$sarahCurrentVerticesDir,
            "VertexList"<>ToString[ITypes[[i,1]]]<>".m"]];
        i++;];
      
      Put[VertexList3,ToFileName[$sarahCurrentVerticesDir,"VertexList3.m"]];
      Put[VertexList4,ToFileName[$sarahCurrentVerticesDir,"VertexList4.m"]];
      Put[VertexListNonCC,
        ToFileName[$sarahCurrentVerticesDir,"VertexListNonCC.m"]];
      
      If[VerticesForLoops,
        For[i=1,i\[LessEqual]Length[ITypes],
            
            Put[VertexListSUMS,
              ToFileName[$sarahCurrentVerticesDir,"VertexListSUMS.m"]];
            
            Put[SA`VertexList[sum][ITypes[[i,1]]],
              ToFileName[$sarahCurrentVerticesDir,
                "VertexList"<>ToString[ITypes[[i,1]]]<>"sum.m"]];
            i++;];
        ];
      
      Print["Done... all vertices are saved in ",$sarahCurrentVerticesDir ];
      ];


GetVerticesSSS[ES_]:=Block[{},
      
      (*--------------  S S S ---------------- *)
      
      Set[
        SimLag,(LagSSSS[ES]+LagRedefinition[ES]) /.conj[x_]\[Rule]x /.sum[a_,
                  b_,c_]\[Rule]1 /.Delta[a_,b_]\[Rule]1 /.A_[x_]\[Rule]A ];
      
      
      Print["      Three Scalar Interaction"];
      
      	For[s1=1,s1\[LessEqual]Length[PART[S]],
        For[s2=1,s2\[LessEqual]Length[PART[S]],
          
          If[(s2\[GreaterEqual]s1) || (conj[PART[S][[s1,1]]]=!= 
                  PART[S][[s1,1]]) || (conj[PART[S][[s2,1]]]=!= 
                  PART[S][[s2,1]]),
            For[s3=s1,s3\[LessEqual]Length[PART[S]],
                
                If[(s3\[GreaterEqual]s2) || (conj[PART[S][[s3,1]]]=!= 
                        PART[S][[s3,1]]) || (conj[PART[S][[s2,1]]]=!= 
                        PART[S][[s2,1]]),
                  
                  If[(D[D[D[SimLag,PART[S][[s1,1]]],PART[S][[s2,1]]],
                                PART[S][[s3,1]]]/.vacuumS  /. 
                            zero[a_]\[Rule]0) =!=0,
                      
                      partList={PART[S][[s1,1]],conj[PART[S][[s2,1]]],
                          PART[S][[s3,1]]};
                      res=Vertex[partList];
                      If[(res[[2,1]] /. subDependences) =!=0,
                        If[iteration\[Equal]1, 
                          VertexListNonCC=Join[VertexListNonCC,{{res, SSS}}];
                          VertexList3=Join[VertexList3,{res}];
                          ];
                        
                        SA`VertexList[temp][SSS]=
                          Join[SA`VertexList[temp][SSS],{res}];
                        
                        If[(conj[PART[S][[s3,1]]]=!=
                                PART[S][[s3,1]]) &&  (conj[PART[S][[s1,1]]]=!=
                                PART[S][[s1,1]]),
                          
                          partList={PART[S][[s2,1]],conj[PART[S][[s1,1]]],
                              conj[PART[S][[s3,1]]]};
                          res=Vertex[partList];
                          If[(res[[2,1]]  /. subDependences) =!=0,
                            If[iteration\[Equal]1,
                              VertexList3=Join[VertexList3,{res}];
                              ];
                            
                            SA`VertexList[temp][SSS]=
                              Join[SA`VertexList[temp][SSS],{res}];
                            ];
                          ];
                        ];
                      ];
                  ];
                s3++;];
            ];
          s2++;];
        s1++;];
      
      ];

GetVerticesSSSS[ES_]:=Block[{},
      
      (*--------------  S S S S ---------------- *)
      
      Print["      Four Scalar Interaction"];
      
      For[s1=1,s1\[LessEqual]Length[PART[S]],
        For[s2=s1,s2\[LessEqual]Length[PART[S]],
          For[s3=1,s3\[LessEqual]Length[PART[S]],
            
            If[(s3 \[GreaterEqual] s1 ) || (conj[PART[S][[s1,1]]]=!= 
                    PART[S][[s1,1]]) || (conj[PART[S][[s3,1]]]=!= 
                    PART[S][[s3,1]]),
              
              If[(s3\[GreaterEqual]s2) || (conj[PART[S][[s2,1]]]=!= 
                        PART[S][[s2,1]]) || (conj[PART[S][[s3,1]]]=!= 
                        PART[S][[s3,1]]),
                  
                  If[D[D[D[SimLag,PART[S][[s1,1]]],PART[S][[s2,1]]],
                          PART[S][[s3,1]]]=!=0, 
                      For[s4=s3,s4\[LessEqual]Length[PART[S]],
                          
                          If[(s4 \[GreaterEqual] 
                                  s1 ) || (conj[PART[S][[s1,1]]]=!= 
                                  PART[S][[s1,1]]) || (conj[PART[S][[s4,1]]]=!= 
                                  PART[S][[s4,1]]),
                            
                            If[(s4\[GreaterEqual]s2) || (conj[
                                        PART[S][[s2,1]]]=!= 
                                      PART[S][[s2,1]]) || (conj[
                                        PART[S][[s4,1]]]=!= PART[S][[s4,1]]),
                                
                                If[(D[D[D[D[SimLag,PART[S][[s1,1]]],
                                        PART[S][[s2,1]]],PART[S][[s3,1]]],
                                        PART[S][[s4,1]]])=!=0,
                                    
                                    partList={PART[S][[s1,1]],PART[S][[s2,1]],
                                        conj[PART[S][[s3,1]]],
                                        conj[PART[S][[s4,1]]]};
                                    res=Vertex[partList];
                                    If[(res[[2,1]] /. subDependences) =!=0,
                                      If[iteration\[Equal]1,
                                        
                                        VertexListNonCC=
                                        Join[VertexListNonCC,{{res, SSSS}}];
                                        VertexList4=Join[VertexList4,{res}];
                                        ];
                                      SA`VertexList[temp][SSSS]=
                                        Join[
                                        SA`VertexList[temp][SSSS],{res}];
                                      ];
                                    ];
                                ];
                            ];
                          s4++;];
                      ];
                  ];
              ];
            s3++;];
          s2++;];
        s1++;];
      ];


GetVerticesSSV[ES_]:=Block[{},
      
      (*--------------  S S V ---------------- *)
      
      Print["      Two Scalar - One Vector Boson - Interaction"];
      
      Set[
        SimLag,(LagSV[ES]+LagRedefinition[ES]) /.   
                  x_?NumericQ\[Rule]1/.conj[x_]\[Rule]x /.sum[a_,b_,
                  c_]\[Rule]1 /.Delta[a_,b_]\[Rule]1 /.A_[x_]\[Rule]A ];
      
       For[s1=1,s1\[LessEqual]Length[PART[S]],
        For[s3=1,s3\[LessEqual]Length[PART[V]],
          If[D[D[SimLag,PART[S][[s1,1]]],PART[V][[s3,1]]]=!=0,
            For[s2=1,s2\[LessEqual]Length[PART[S]],
                
                If[(s2\[GreaterEqual]s1) || (conj[PART[S][[s1,1]]]=!= 
                        PART[S][[s1,1]]) || (conj[PART[S][[s2,1]]]=!= 
                        PART[S][[s2,1]]),
                   
                  If[(D[D[D[SimLag,PART[S][[s1,1]]],PART[S][[s2,1]]],
                                PART[V][[s3,1]]] /.vacuumV /. 
                            zero[a_]\[Rule]0) =!=0, 
                      
                      partList={PART[S][[s1,1]],conj[PART[S][[s2,1]]],
                          PART[V][[s3,1]]};
                      res=Vertex[partList];
                      If[Simplify[(res[[2,1]]/.  subDependences )]=!=0,
                        If[iteration\[Equal]1,
                          VertexListNonCC=Join[VertexListNonCC,{{res, SSV}}];
                          VertexList3=Join[VertexList3,{res}];
                          ];
                        
                        SA`VertexList[temp][SSV]=
                          Join[SA`VertexList[temp][SSV],{res}];
                        
                        ];
                      
                      If[conj[PART[V][[s3,1]]]=!=PART[V][[s3,1]],
                        partList={PART[S][[s2,1]],conj[PART[S][[s1,1]]],
                            conj[PART[V][[s3,1]]]};
                        res=Vertex[partList];
                        If[Simplify[(res[[2,1]]/.  subDependences )]=!=0,
                          
                          SA`VertexList[temp][SSV]=
                            Join[SA`VertexList[temp][SSV],{res}];
                          If[iteration\[Equal]1,
                            VertexList3=Join[VertexList3,{res}];
                            ];
                          ];
                        ];
                      
                      ];
                  ];
                s2++;];
            ];
          s3++;];
        s1++;]; 
      ];

GetVerticesSVV[ES_]:=Block[{},
      
      
      (*--------------  S V V ---------------- *)
      
      Print["      One Scalar - Two Vector Boson - Interaction"];
      
      
        For[s1=1,s1\[LessEqual]Length[PART[S]],
        (* If[
            D[SimLag,PART[S][[s1,1]]] /.vacuumS  /. zero[a_]\[Rule]0 =!= 0, *)

                For[s2=1,s2\[LessEqual]Length[PART[V]],
          If[D[D[SimLag,PART[S][[s1,1]]],PART[V][[s2,1]]]=!=0,
            For[s3=1,s3\[LessEqual]Length[PART[V]],
                
                If[(s3\[GreaterEqual]s2) || (conj[PART[V][[s3,1]]]=!= 
                        PART[V][[s3,1]]) || (conj[PART[V][[s2,1]]]=!= 
                        PART[V][[s2,1]]),
                  
                  If[(D[D[D[SimLag,PART[S][[s1,1]]],PART[V][[s2,1]]],
                                PART[V][[s3,1]]] /.vacuumS  /. 
                            zero[a_]\[Rule]0) =!= 0,
                      
                      partList={PART[S][[s1,1]],conj[PART[V][[s2,1]]],
                          PART[V][[s3,1]]};
                      res=Vertex[partList];
                      If[Simplify[(res[[2,1]]/.  subDependences )]=!=0, 
                        If[iteration\[Equal]1,
                          VertexListNonCC=Join[VertexListNonCC,{{res, SVV}}];
                          VertexList3=Join[VertexList3,{res}];
                          ];
                        
                        SA`VertexList[temp][SVV]=
                          Join[SA`VertexList[temp][SVV],{res}];
                        ];
                      
                      If[conj[PART[S][[s1,1]]]=!=PART[S][[s1,1]],
                        
                        partList={conj[PART[S][[s1,1]]],conj[PART[V][[s3,1]]],
                            PART[V][[s2,1]]};
                        res=Vertex[partList];
                        		          
                        If[Simplify[(res[[2,1]]/.  subDependences )]=!=0, 
                          
                          SA`VertexList[temp][SVV]=
                            Join[SA`VertexList[temp][SVV],{res}];
                          If[iteration\[Equal]1,
                            VertexList3=Join[VertexList3,{res}];
                            ];
                          ];
                        ];
                      
                      ];
                  ];
                s3++;];
            ];
          s2++;];
        s1++;];  
      ];

GetVerticesSSVV[ES_]:=Block[{},
      
      (*--------------  S S V V ---------------- *)
      
      Print["      Two Scalar - Two Vector Boson - Interaction"];
      
      
       For[s1=1,s1\[LessEqual]Length[PART[S]],
        For[s2=1,s2\[LessEqual]Length[PART[V]],
          If[D[D[SimLag,PART[S][[s1,1]]],PART[V][[s2,1]]]=!=0,
            For[s3=s1,s3\[LessEqual]Length[PART[S]],
                
                If[D[D[D[SimLag,PART[S][[s1,1]]],PART[V][[s2,1]]],
                      PART[S][[s3,1]]]=!=0,
                  For[s4=s2,s4\[LessEqual]Length[PART[V]],
                      
                      If[(D[D[D[D[SimLag,PART[S][[s1,1]]],PART[V][[s2,1]]],
                                PART[S][[s3,1]]],PART[V][[s4,1]]] )=!=0,
                        
                        partList={PART[S][[s1,1]],PART[V][[s2,1]],
                            conj[PART[S][[s3,1]]],conj[PART[V][[s4,1]]]};
                        res=Vertex[partList];
                        If[(res[[2,1]]/.  subDependences )=!=0,
                          If[iteration\[Equal]1,
                            
                            VertexListNonCC=
                              Join[VertexListNonCC,{{res, SSVV}}];
                            VertexList4=Join[VertexList4,{res}];
                            ];
                          
                          
                          SA`VertexList[temp][SSVV]=
                            Join[SA`VertexList[temp][SSVV],{res}];
                          
                          ];
                        
                        
                        If[PART[S][[s1,1]]=!=
                              PART[S][[s3,1]] && (conj[PART[S][[s1,1]]]=!=
                                  PART[S][[s1,1]] || 
                                conj[PART[S][[s3,1]]]=!=PART[S][[s3,1]]),
                          
                          partList={PART[S][[s3,1]],PART[V][[s2,1]],
                              conj[PART[S][[s1,1]]],conj[PART[V][[s4,1]]]};
                          				  res=Vertex[partList];
                          				  If[(res[[2,1]]/.  subDependences )=!=0,
                            If[iteration\[Equal]1,
                              
                              VertexListNonCC=
                                Join[VertexListNonCC,{{res, SSVV}}];
                              VertexList4=Join[VertexList4,{res}];
                              ];
                            
                            SA`VertexList[temp][SSVV]=
                              Join[SA`VertexList[temp][SSVV],{res}];
                            ];
                          ];
                        
                        
                        
                        If[PART[V][[s2,1]]=!=
                              PART[V][[s4,1]] && (conj[PART[V][[s4,1]]]=!=
                                  PART[V][[s4,1]] || 
                                conj[PART[V][[s2,1]]]=!=PART[V][[s2,1]]),
                          
                          partList={PART[S][[s1,1]],PART[V][[s4,1]],
                              conj[PART[S][[s3,1]]],conj[PART[V][[s2,1]]]};
                          				  res=Vertex[partList];
                          				  If[(res[[2,1]]/.  subDependences )=!=0,
                            If[iteration\[Equal]1,
                              
                              VertexListNonCC=
                                Join[VertexListNonCC,{{res, SSVV}}];
                              VertexList4=Join[VertexList4,{res}];
                              ];
                            
                            SA`VertexList[temp][SSVV]=
                              Join[SA`VertexList[temp][SSVV],{res}];
                            
                            ];
                          ];
                        
                        If[((PART[V][[s2,1]]=!=
                                    PART[V][[s4,1]])  && (PART[S][[s1,1]]=!=
                                    PART[S][[s3,1]])) && ((conj[
                                        PART[S][[s1,1]]]=!=PART[S][[s1,1]] || 
                                    conj[PART[S][[s3,1]]]=!=
                                      PART[S][[s3,1]]) && (conj[
                                        PART[V][[s4,1]]]=!=PART[V][[s4,1]] || 
                                    conj[PART[V][[s2,1]]]=!=
                                      PART[V][[s2,1]])),
                          
                          partList={PART[S][[s3,1]],PART[V][[s4,1]],
                              conj[PART[S][[s1,1]]],conj[PART[V][[s2,1]]]};
                          				  res=Vertex[partList];
                          				  If[(res[[2,1]]/.  subDependences )=!=0,
                            
                            SA`VertexList[temp][SSVV]=
                              Join[SA`VertexList[temp][SSVV],{res}];
                            If[iteration\[Equal]1,
                              VertexList4=Join[VertexList4,{res}];
                              ];
                            ];
                          ];
                        
                        
                        ];
                      s4++;];
                  ];
                s3++;];
            ];
          s2++;];
        s1++;]; 
      ];

GetVerticesVVV[ES_]:=Block[{},
      
      
      (*--------------  V V V ---------------- *)
      
      Print["      Three Vector Boson - Interaction"];
      
      Set[
        SimLag,(LagVVV[ES]+LagRedefinition[ES])/.conj[x_]\[Rule]x /.sum[a_,b_,
                  c_]\[Rule]1 /.Delta[a_,b_]\[Rule]1 /.A_[x_]\[Rule]A ];
      
      For[s1=1,s1\[LessEqual]Length[PART[V]],
        For[s2=1,s2\[LessEqual]Length[PART[V]],
          
          If[(s2\[GreaterEqual]s1) || (conj[PART[V][[s1,1]]]=!= 
                  PART[V][[s1,1]]) || (conj[PART[V][[s2,1]]]=!= 
                  PART[V][[s2,1]]),
            For[s3=s1,s3\[LessEqual]Length[PART[V]],
                
                partList={PART[V][[s1,1]],conj[PART[V][[s2,1]]],
                    PART[V][[s3,1]]};
                res=Vertex[partList];
                If[(res[[2,1]]/.  subDependences )=!=0,
                  If[iteration\[Equal]1,
                    VertexListNonCC=Join[VertexListNonCC,{{res, VVV}}];
                    VertexList3=Join[VertexList3,{res}];
                    ];
                  
                  SA`VertexList[temp][VVV]=
                    Join[SA`VertexList[temp][VVV],{res}];
                  ];
                
                
                If[conj[PART[V][[s3,1]]]=!=PART[V][[s3,1]] &&  
                    PART[V][[s3,1]]=!=PART[V][[s2,1]],
                  
                  partList={PART[V][[s2,1]],conj[PART[V][[s1,1]]],
                      conj[PART[V][[s3,1]]]};
                  res=Vertex[partList];
                  		If[(res[[2,1]]/.  subDependences )=!=0,
                    
                    SA`VertexList[temp][VVV]=
                      Join[SA`VertexList[temp][VVV],{res}];
                    If[iteration\[Equal]1,
                      VertexList3=Join[VertexList3,{res}];
                      ];
                    ];
                  ];
                
                s3++;];
            ];
          s2++;];
        s1++;];
      ];

GetVerticesFFS[ES_]:=Block[{},
      
      
      (*--------------  F F S ---------------- *)
      
      Print["      Two Fermion - One Scalar - Interaction"];
      
      Set[
        SimLag,(LagFFS[ES]+LagRedefinition[ES]) /.   
                          x_?NumericQ\[Rule]1 /.diracSubBack1 /.diracSubBack2 \
/.conj[x_]\[Rule]x /.bar[x_]\[Rule]x /.sum[a_,b_,c_]\[Rule]1 /.Delta[a_,
                  b_]\[Rule]1 /.A_[x_]\[Rule]A   /.A_[x_]\[Rule]A  ];
      
      
      For[s1=1,s1\[LessEqual]Length[PART[F]],
        For[s2=1,s2\[LessEqual]Length[PART[F]],
          
          If[(s2\[GreaterEqual]s1) || (MemberQ[MajoranaPart,
                    PART[F][[s1,1]]]\[Equal]
                  False) || (MemberQ[MajoranaPart,PART[F][[s2,1]]]\[Equal]
                  False),
             If[(D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]]=!=0), 
                For[s3=1,s3\[LessEqual]Length[PART[S]],
                     
                    If[((D[D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]] ,
                                PART[S][[s3,1]]]  /. zero[a_]\[Rule]0)=!=
                          0) , 
                      
                      
                      partList={bar[PART[F][[s1,1]]],PART[F][[s2,1]],
                          PART[S][[s3,1]]};
                      res=Vertex[partList];
                      
                      
                      If[(res[[2,1]]/.  subDependences )=!=
                            0 ||  (res[[3,1]]/.  subDependences )=!=0, 
                        If[iteration\[Equal]1,
                          VertexListNonCC=Join[VertexListNonCC,{{res, FFS}}];
                          VertexList3=Join[VertexList3,{res}];
                          ];
                        
                        SA`VertexList[temp][FFS]=
                          Join[SA`VertexList[temp][FFS],{res}];
                        
                        ];
                      
                      If[(conj[PART[S][[s3,1]]]=!= PART[S][[s3,1]]),
                        
                        partList={bar[PART[F][[s1,1]]],PART[F][[s2,1]],
                            conj[PART[S][[s3,1]]]};
                        res=Vertex[partList];
                        
                        If[(res[[2,1]]/.  subDependences )=!=
                              0 || (res[[3,1]]/.  subDependences )=!=0, 
                          If[iteration\[Equal]1,
                            
                            VertexListNonCC=
                              Join[VertexListNonCC,{{res, FFS}}];
                            VertexList3=Join[VertexList3,{res}];
                            ];
                          
                          SA`VertexList[temp][FFS]=
                            Join[SA`VertexList[temp][FFS],{res}];
                          ];
                         ]; 
                      
                      
                      If[MemberQ[MajoranaPart,PART[F][[s2,1]]]\[Equal]False && 
                          MemberQ[MajoranaPart,PART[F][[s1,1]]]\[Equal]False && 
                          s1 < s2,
                        
                        partList={bar[PART[F][[s1,1]]],bar[PART[F][[s2,1]]],
                            PART[S][[s3,1]]};
                        res=Vertex[partList];
                        
                        If[(res[[2,1]]/.  subDependences )=!=
                              0 || (res[[3,1]]/.  subDependences )=!=0, 
                          If[iteration\[Equal]1,
                            
                            VertexListNonCC=
                              Join[VertexListNonCC,{{res, FFS}}];
                            VertexList3=Join[VertexList3,{res}];
                            ];
                          
                          SA`VertexList[temp][FFS]=
                            Join[SA`VertexList[temp][FFS],{res}];
                          ];
                        
                        If[(conj[PART[S][[s3,1]]]=!= PART[S][[s3,1]]),
                          
                          partList={bar[PART[F][[s1,1]]],bar[PART[F][[s2,1]]],
                              conj[PART[S][[s3,1]]]};
                          res=Vertex[partList];
                          
                          If[(res[[2,1]]/.  subDependences )=!=
                                0 || (res[[3,1]]/.  subDependences )=!=0, 
                            If[iteration\[Equal]1,
                              
                              VertexListNonCC=
                                Join[VertexListNonCC,{{res, FFS}}];
                              VertexList3=Join[VertexList3,{res}];
                              ];
                            
                            SA`VertexList[temp][FFS]=
                              Join[SA`VertexList[temp][FFS],{res}];
                            ];
                          ];
                        
                        
                        
                        If[(MemberQ[MajoranaPart,PART[F][[s1,1]]]\[Equal]
                                False) && (s1 < s2),
                          
                          partList={PART[F][[s1,1]],PART[F][[s2,1]],
                              conj[PART[S][[s3,1]]]};
                          res=Vertex[partList];
                          
                          If[(res[[2,1]]/.  subDependences )=!=
                                0 || (res[[3,1]]/.  subDependences )=!=0, 
                            
                            SA`VertexList[temp][FFS]=
                              Join[SA`VertexList[temp][FFS],{res}];
                            If[iteration\[Equal]1,
                              VertexList3=Join[VertexList3,{res}];
                              ];
                            ];
                          ];
                        
                        If[(conj[PART[S][[s3,1]]]=!= PART[S][[s3,1]]),
                          
                          partList={PART[F][[s1,1]],PART[F][[s2,1]],
                              PART[S][[s3,1]]};
                          res=Vertex[partList];
                          
                          If[(res[[2,1]]/.  subDependences )=!=
                                0 || (res[[3,1]]/.  subDependences )=!=0, 
                            If[iteration\[Equal]1,
                              
                              VertexListNonCC=
                                Join[VertexListNonCC,{{res, FFS}}];
                              VertexList3=Join[VertexList3,{res}];
                              ];
                            
                            SA`VertexList[temp][FFS]=
                              Join[SA`VertexList[temp][FFS],{res}];
                            ];
                          ];
                        
                        
                        
                        
                         ]; 
                      
                      
                      
                      
                      ];
                    s3++;];
                ];
            ];
          s2++;];
        s1++;];	
      
      ];

GetVerticesFFV[ES_] :=Block[{},
      
      
      
      (*--------------  F F V ---------------- *)
      
      Print["      Two Fermion - One Vector Boson - Interaction"];
      
      Set[
        SimLag,(LagFFV[ES]+LagRedefinition[
                                ES])/.diracSubBack1 /.diracSubBack2  /. 
                      x_?NumericQ\[Rule]1/.conj[x_]\[Rule]x /.bar[
                      x_]\[Rule]x /.sum[a_,b_,c_]\[Rule]1 /.Delta[a_,
                  b_]\[Rule]1 /.A_[x_]\[Rule]A /.A_[x_]\[Rule]A ];
      
      For[s1=1,s1\[LessEqual]Length[PART[F]],
        For[s2=1,s2\[LessEqual]Length[PART[F]],
          
          If[(s2\[GreaterEqual]s1) || (MemberQ[MajoranaPart,
                    PART[F][[s1,1]]]\[Equal]False) || (MemberQ[MajoranaPart,
                    PART[F][[s2,1]]]\[Equal]False),
            For[s3=1,s3\[LessEqual]Length[PART[V]],
                 
                If[((D[D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]] ,
                          PART[V][[s3,1]]] )=!=0), 
                  
                  partList={bar[PART[F][[s1,1]]],PART[F][[s2,1]],
                      PART[V][[s3,1]]};
                  res=Vertex[partList];
                  
                  If[Simplify[(res[[2,1]]/.  subDependences )]=!=0 || 
                      Simplify[(res[[3,1]]/.  subDependences )]=!=0, 
                    If[iteration\[Equal]1,
                      VertexListNonCC=Join[VertexListNonCC,{{res, FFV}}];
                      VertexList3=Join[VertexList3,{res}];
                      ];
                    SA`VertexList[temp][FFV]=
                      Join[SA`VertexList[temp][FFV],{res}];
                    
                    ];
                  If[(conj[PART[V][[s3,1]]]=!= PART[V][[s3,1]]),
                    
                    partList={bar[PART[F][[s1,1]]],PART[F][[s2,1]],
                        conj[PART[V][[s3,1]]]};
                    res=Vertex[partList];
                    
                    If[Simplify[(res[[2,1]]/.  subDependences )]=!=0 || 
                        Simplify[(res[[3,1]]/.  subDependences )]=!=0,
                      If[iteration\[Equal]1,
                        VertexListNonCC=Join[VertexListNonCC,{{res, FFV}}];
                        VertexList3=Join[VertexList3,{res}];
                        ];
                      
                      SA`VertexList[temp][FFV]=
                        Join[SA`VertexList[temp][FFV],{res}];
                      
                      ];
                     ]; 
                  ];
                s3++;];
            ];
          s2++;];
        s1++;];
      
      ];

GetVerticesVVVV[ES_]:=Block[{},
      
      (*--------------  V V V V ---------------- *)
      
      Print["      Four Vector Boson - Interaction"];
      
      Set[
        SimLag,(LagVVVV[ES]+LagRedefinition[ES])  /.conj[x_]\[Rule]x /.sum[a_,
                  b_,c_]\[Rule]1 /.Delta[a_,b_]\[Rule]1 /.A_[x_]\[Rule]A];
      
      
      For[s1=1,s1\[LessEqual]Length[PART[V]],
        For[s2=s1,s2\[LessEqual]Length[PART[V]],
          If[D[D[SimLag,PART[V][[s1,1]]],PART[V][[s2,1]]]=!=0,
            For[s3=1,s3\[LessEqual]Length[PART[V]],
                
                If[(s3\[GreaterEqual]s1) || (conj[PART[V][[s1,1]]]=!= 
                        PART[V][[s1,1]]) || (conj[PART[V][[s3,1]]]=!= 
                        PART[V][[s3,1]]),
                  
                  If[D[D[D[SimLag,PART[V][[s1,1]]],PART[V][[s2,1]]],
                          PART[V][[s3,1]]]=!=0,
                      For[s4=s3,s4\[LessEqual]Length[PART[V]],
                          
                          If[(s4\[GreaterEqual]s2) || (conj[PART[V][[s2,1]]]=!= 
                                  PART[V][[s2,1]]) || (conj[PART[V][[s4,1]]]=!= 
                                  PART[V][[s4,1]]),
                            If[(D[D[D[D[SimLag,PART[V][[s1,1]]],
                                        PART[V][[s2,1]]],PART[V][[s3,1]]],
                                      PART[V][[s4,1]]])=!=0,
                                
                                partList={PART[V][[s1,1]],PART[V][[s2,1]],
                                    conj[PART[V][[s3,1]]],
                                    conj[PART[V][[s4,1]]]};
                                res=Vertex[partList];
                                If[(res[[2,1]] /. subDependences)=!=0,
                                  If[iteration\[Equal]1,
                                    
                                    VertexListNonCC=
                                      Join[VertexListNonCC,{{res, VVVV}}];
                                    VertexList4=Join[VertexList4,{res}];
                                    ];
                                  
                                  SA`VertexList[temp][VVVV]=
                                    Join[SA`VertexList[temp][VVVV],{res}];
                                  
                                  ];
                                ];
                            ];
                          s4++;];
                      ];
                  ];
                s3++;];
            ];
          s2++;];
        s1++;];
      ];

GetVerticesGGV[ES_]:=Block[{},
      
      (*--------------  G G V ---------------- *)
      
      Print["      Two Ghost - One Vector Boson - Interaction"];
      
      Set[
        SimLag,(LagGGV[ES]+LagRedefinition[ES]) /.conj[x_]\[Rule]x /.bar[
                    x_]\[Rule]x /.sum[a_,b_,c_]\[Rule]1 /.Delta[a_,
                b_]\[Rule]1 /.A_[x_]\[Rule]A];
      
       For[s1=1,s1\[LessEqual]Length[PART[G]],
        For[s3=1,s3\[LessEqual]Length[PART[V]],
          If[D[D[SimLag,PART[G][[s1,1]]],PART[V][[s3,1]]]=!=0,
            For[s2=1,s2\[LessEqual]Length[PART[G]],
                 
                If[(D[D[D[SimLag,PART[G][[s1,1]]],PART[G][[s2,1]]],
                        PART[V][[s3,1]]] ) =!=0, 
                  
                  partList={bar[PART[G][[s2,1]]],PART[G][[s1,1]],
                      PART[V][[s3,1]]};
                  res=Vertex[partList];
                  If[(res[[2,1]] /. subDependences)=!=0,
                    If[iteration\[Equal]1,
                      VertexListNonCC=Join[VertexListNonCC,{{res, GGV}}];
                      VertexList3=Join[VertexList3,{res}];
                      ];
                    
                    SA`VertexList[temp][GGV]=
                      Join[SA`VertexList[temp][GGV],{res}];
                    
                    ];
                  
                  If[conj[PART[V][[s3,1]]]=!= PART[V][[s3,1]],
                    
                    partList={bar[PART[G][[s2,1]]],PART[G][[s1,1]],
                        conj[PART[V][[s3,1]]]};
                    res=Vertex[partList];
                    If[(res[[2,1]] /. subDependences)=!=0,
                      If[iteration\[Equal]1,
                        VertexListNonCC=Join[VertexListNonCC,{{res, GGV}}];
                        VertexList3=Join[VertexList3,{res}];
                        ];
                      
                      SA`VertexList[temp][GGV]=
                        Join[SA`VertexList[temp][GGV],{res}];
                      
                      ];
                    ];
                  ];
                s2++;];
            ];
          s3++;];
        s1++;]; 
      ];

GetVerticesGGS[ES_]:=Block[{},
      
      (*--------------  G G S ---------------- *)
      
      Print["      Two Ghost - One Scalar - Interaction"];
      
      Set[
        SimLag,(LagGGS[ES]+LagRedefinition[ES])  /.conj[x_]\[Rule]x /.bar[
                    x_]\[Rule]x /.sum[a_,b_,c_]\[Rule]1 /.Delta[a_,
                b_]\[Rule]1 /.A_[x_]\[Rule]A];
      
       
      For[s1=1,s1\[LessEqual]Length[PART[G]],
        For[s3=1,s3\[LessEqual]Length[PART[S]],
          If[D[D[SimLag,PART[G][[s1,1]]],PART[S][[s3,1]]]=!=0,
            For[s2=1,s2\[LessEqual]Length[PART[G]],
                 
                If[(D[D[D[SimLag,PART[G][[s1,1]]],PART[G][[s2,1]]],
                          PART[S][[s3,1]]] /.subVacuum  ) =!=0, 
                  
                  partList={bar[PART[G][[s2,1]]],PART[G][[s1,1]],
                      PART[S][[s3,1]]};
                  res=Vertex[partList];
                  If[(res[[2,1]] /. subDependences)=!=0,
                    If[iteration\[Equal]1,
                      VertexListNonCC=Join[VertexListNonCC,{{res, GGS}}];
                      VertexList3=Join[VertexList3,{res}];
                      ];
                    
                    SA`VertexList[temp][GGS]=
                      Join[SA`VertexList[temp][GGS],{res}];
                    
                    ];
                  
                  
                  If[conj[PART[S][[s3,1]]]=!= PART[S][[s3,1]],
                    
                    partList={bar[PART[G][[s2,1]]],PART[G][[s1,1]],
                        conj[PART[S][[s3,1]]]};
                    res=Vertex[partList];
                    If[(res[[2,1]] /. subDependences)=!=0,
                      If[iteration\[Equal]1,
                        VertexListNonCC=Join[VertexListNonCC,{{res, GGS}}];
                        VertexList3=Join[VertexList3,{res}];
                        ];
                      
                      SA`VertexList[temp][GGS]=
                        Join[SA`VertexList[temp][GGS],{res}];
                      
                      ];
                    ];
                  
                  
                  
                  ];
                s2++;];
            ];
          s3++;];
        s1++;]; 
      ];

GetVerticesSSA[ES_]:=Block[{},
      
      (*--------------  S S A ---------------- *)
      
      If[iteration\[Equal]1,
          
          Print["      Two Scalar - One Auxiliary - Interaction"];
          
          
          Set[SimLag,(LagSSA[ES]+LagRedefinition[ES])  /.conj[
                        x_]\[Rule]x /.sum[a_,b_,c_]\[Rule]1 /.Delta[a_,
                    b_]\[Rule]1 /.A_[x_]\[Rule]A];
          
           For[s1=1,s1\[LessEqual]Length[PART[S]],
            For[s3=1,s3\[LessEqual]Length[PART[A]],
              If[D[D[SimLag,PART[S][[s1,1]]],PART[A][[s3,1]]]=!=0,
                For[s2=1,s2\[LessEqual]Length[PART[S]],
                    
                    If[(s2\[GreaterEqual]s1) || (conj[PART[S][[s1,1]]]=!=
                            PART[S][[s1,1]]) || (conj[PART[S][[s2,1]]]=!=
                            PART[S][[s2,1]]), 
                      If[(D[D[D[SimLag,PART[S][[s1,1]]],PART[S][[s2,1]]],
                                  PART[A][[s3,1]]] /.subVacuum  ) =!=0, 
                          
                          partList={conj[PART[S][[s2,1]]],PART[S][[s1,1]],
                              PART[A][[s3,1]]};
                          res=Vertex[partList];
                          If[res[[2,1]]=!=0,
                            
                            SA`VertexList[temp][SSA]=
                                Join[SA`VertexList[temp][SSA],{res}];
                            ];
                          
                          
                          If[conj[PART[S][[s2,1]]]=!=PART[S][[s2,1]] && 
                              conj[PART[S][[s1,1]]]=!=
                                PART[S][[s1,1]] && (s2\[GreaterEqual]s1),
                            
                            partList={conj[PART[S][[s2,1]]],
                                conj[PART[S][[s1,1]]],PART[A][[s3,1]]};
                            res=Vertex[partList];
                            If[res[[2,1]]=!=0,
                              
                              SA`VertexList[temp][SSA]=
                                  Join[SA`VertexList[temp][SSA],{res}];
                              ];
                            ];
                          
                          
                          If[conj[PART[A][[s3,1]]]=!=PART[A][[s3,1]],
                            
                            partList={conj[PART[S][[s1,1]]],PART[S][[s2,1]],
                                conj[PART[A][[s3,1]]]};
                            res=Vertex[partList];
                            If[res[[2,1]]=!=0,
                              
                              SA`VertexList[temp][SSA]=
                                  Join[SA`VertexList[temp][SSA],{res}];
                              ];
                            
                            
                            
                            If[conj[PART[S][[s2,1]]]=!=PART[S][[s2,1]] && 
                                conj[PART[S][[s1,1]]]=!=
                                  PART[S][[s1,1]] && (s2\[GreaterEqual]s1),
                              
                              partList={PART[S][[s1,1]],PART[S][[s2,1]],
                                  conj[PART[A][[s3,1]]]};
                              res=Vertex[partList];
                              If[res[[2,1]]=!=0,
                                
                                SA`VertexList[temp][SSA]=
                                    Join[SA`VertexList[temp][SSA],{res}];
                                ];
                              ];
                            ];
                          ];
                      
                      ];
                    s2++;];
                ];
              s3++;];
            s1++;]; 
          
          ];
      ];


InitAutomaticCalc[ES_]:=Block[{},
      
      subNonFields = {sum[a_,b_,c_]\[Rule]1,  Delta[a_,b_]\[Rule]1, 
          g[a__]\[Rule]1, Sig[a__]\[Rule]1,Lam[a__]\[Rule]1, 
          Mom[a_,b_]\[Rule]1, T[a_]\[Rule] 1, B[a_]\[Rule]1, L[a_]\[Rule]1,
          gamma[a_]\[Rule]1 ,fSU2[a__]\[Rule]1, fSU3[a__]\[Rule]1, 
          pmue[a__]\[Rule]a,RXi[a__]\[Rule]1, Mass[x_]\[Rule]1,
          Inv[a__][b__]\[Rule]1}; 
      subPar=
        Flatten[{T[a___]\[Rule]1, B[a__]\[Rule]1,L[a___]\[Rule]1,
            Table[parameters[[i,1]][a__]\[Rule]1,{i,1,Length[parameters]}],
            Table[parameters[[i,1]]\[Rule]1,{i,1,Length[parameters]}]}];
      
      
      subGeneric[FFV]={a_[b_?IntegerQ]\[Rule]a};
      subGeneric[FFS]={a_[b_?IntegerQ]\[Rule]a};
      subGeneric[SSV]={};
      subGeneric[SVV]={};
      subGeneric[SSVV]={};
      subGeneric[SSSS]={};
      subGeneric[SSSSSS]={};
      subGeneric[SSSSVV]={};
      subGeneric[SSVVVV]={};
      subGeneric[SSS]={};
      subGeneric[GGS]={};
      subGeneric[GGV]={};
      subGeneric[VVVV]={};
      subGeneric[FFSS]={a_[b_?IntegerQ]\[Rule]a};
      subGeneric[FFFF]={a_[b_?IntegerQ]\[Rule]a};
      subGeneric[FFVV]={a_[b_?IntegerQ]\[Rule]a};
      
      LAG[SSV][ES]=LagSV[ES];
      LAG[SSVV][ES]=LagSV[ES];
      LAG[SVV][ES]=LagSV[ES];
      LAG[FFV][ES]=LagFFV[ES];
      LAG[FFS][ES]=LagFFS[ES];
      LAG[SSSS][ES]=LagSSSS[ES];
      LAG[SSS][ES]=LagSSSS[ES];
      LAG[VVV][ES]=LagVVV[ES];
      LAG[VVVV][ES]=LagVVVV[ES];
      LAG[GGV][ES]=LagGGV[ES];
      LAG[GGS][ES]=LagGGS[ES];
      LAG[FFFF][ES]=LagFFFF[ES];
      LAG[FFSS][ES]=LagFFSS[ES];
      LAG[SSSSSS][ES]=LagSSSSSS[ES];
      LAG[SSSSVV][ES]=LagSSSSVV[ES];
      LAG[SSVVVV][ES]=LagSSVVVV[ES];
      LAG[FFVV][ES]=LagFFVV[ES];
      
      Cp[a___,Power[b_,x_],c___]:=Nest[Append[#1,b]&,Cp[a,c],x];
      COUP[a__ b_?NumericQ]=COUP[a];
      COUP[ b_?NumericQ]=1;
      ];

SortCoup[x_]:=
    List@@C@@Map[getTypeSort[#1][#1]&,x] /. {Fb[y_]\[Rule]y,Sc[y_]\[Rule]y,
        Vc[y_]\[Rule]y,Gb[y_]\[Rule]y,Fn[y_]\[Rule]y,Sn[y_]\[Rule]y,
        Vn[y_]\[Rule]y,Gn[y_]\[Rule]y};

getTypeSort[x_]:=Switch[getType[x],
      F,
      	If[Head[x]===bar, Return[Fb];,Return[Fn]];,
      S,
      	If[Head[x]===conj, Return[Sc];,Return[Sn]];,
      V,
      	If[Head[x]===conj, Return[Vc];,Return[Vn]];,
      G,
      	If[Head[x]===bar, Return[Gb];,Return[Gn]];
      ];

GenericVertices[Type_,Eigenstates_]:=Block[{i,list,nonCC={},res,all={}},
      Print["      ",Type];
      If[Head[VertexListNonCC]=!=List,VertexListNonCC={};];
      SA`VertexList[Type]={};
      
      
      list=
        Intersection[
          Select[Intersection[
                      COUP/@((List@@Expand[
                                        LAG[Type][
                                        Eigenstates] /.subNonFields  /. 
                                        subGeneric[Type]]/. 
                                    diracSubBack  )/.subPar /.A_[{x__}]\[Rule]
                                A ) /. COUP \[Rule] Cp ] /. 
                    Cp[x_Times]\[RuleDelayed]Cp@@x /. conj \[Rule] AntiField /. 
                Cp\[Rule]C /. C \[Rule] List ,(VType@@getType/@#1===Type)&]];
      
      
      list = SortCoup/@list;
      
      For[i=1,i\[LessEqual]Length[list],
        res=Vertex[list[[i]]];
        If[Type===FFV || Type ===SSV || Type ===SVV  || Type ===SSVV,
          
          If[Select[
                  Simplify/@(Table[res[[j,1]],{j,2,Length[res]}] /. 
                        subDependences),(#1=!=0)&]=!={},
              SA`VertexList[Type]=Join[SA`VertexList[Type],{res}];
              all=Join[all,{list[[i]]}];
              If[FreeQ[nonCC,Cp[AntiField/@list[[i]]]],
                VertexListNonCC = Join[VertexListNonCC,{{res,Type}}];
                ];
              ];,
          
          If[Select[(Table[res[[j,1]],{j,2,Length[res]}] /. 
                      subDependences),(#1=!=0)&]=!={},
              SA`VertexList[Type]=Join[SA`VertexList[Type],{res}];
              all=Join[all,{list[[i]]}];
              If[FreeQ[nonCC,Cp[AntiField/@list[[i]]]],
                VertexListNonCC = Join[VertexListNonCC,{{res,Type}}];
                ];
              ];
          ];
        i++;];
      
      ];

CheckPossible[p_,list_]:=Block[{i,t1,t2,poss=True,pos,k},
      t1=CountFields[p];
      t2=CountFields/@list;
      c1 = Complement[t1,#1]&/@t2;
      c2 = AntiField/@Complement[#1,t1]&/@t2;
      pos=Position[(c1-c2),{0}];
      
      If[FreeQ[Table[Length[c1[[pos[[k]]]]],{k,1,Length[pos]}],1],
        Return[True];,
        Return[False];
        ];
      ];

CountFields[x_]:=Block[{},
      Do[Set[n[vacuum[[i]]],0],{i,1,Length[vacuum]}];
      Return[x/. subCount];
      ];



(* GetVerticesSSSSSS[ES_]:=Block[{},
      
      (*--------------  S S S S S S ---------------- *)
      
      Print["      Six Scalar - Interaction"];
      
      
      Set[SimLag,
        LagSSSSSS[ES]/.conj[x_]\[Rule]x /.sum[a_,b_,c_]\[Rule]1 /.Delta[a_,
                b_]\[Rule]1 /.A_[x_]\[Rule]A];
      
      For[s1=1,s1\[LessEqual]Length[PART[S]],
        For[s2=s1,s2\[LessEqual]Length[PART[S]],
          For[s3=1,s3\[LessEqual]Length[PART[S]],
            
            If[(s3\[GreaterEqual]s1) || (conj[PART[S][[s1,1]]]=!= 
                    PART[S][[s1,1]]) || (conj[PART[S][[s3,1]]]=!= 
                    PART[S][[s3,1]]),
              
              If[D[D[D[SimLag,PART[S][[s1,1]]],PART[S][[s2,1]]],
                      PART[S][[s3,1]]]=!=0,
                  For[s4=s3,s4\[LessEqual]Length[PART[S]],
                      
                      If[(D[D[D[D[SimLag,PART[S][[s1,1]]],PART[S][[s2,1]]],
                                PART[S][[s3,1]]],PART[S][[s4,1]]] )=!=0,
                        For[s5=s2,s5\[LessEqual]Length[PART[S]],
                            
                            If[(D[D[D[D[D[SimLag,PART[S][[s1,1]]],
                                        PART[S][[s2,1]]],PART[S][[s3,1]]],
                                      PART[S][[s4,1]]],PART[S][[s5,1]]] )=!=
                                0,
                              For[s6=s3,s6\[LessEqual]Length[PART[S]],
                                  If[(D[D[D[D[D[D[SimLag,PART[S][[s1,1]]],
                                        PART[S][[s2,1]]],PART[S][[s3,1]]],
                                        PART[S][[s4,1]]],PART[S][[s5,1]]],
                                        PART[S][[s6,1]]] /.subVacuum  /. 
                                        zero[a_]\[Rule]nix)=!=0,
                                    
                                    partList={PART[S][[s1,1]],PART[S][[s2,1]],
                                        conj[PART[S][[s3,1]]],
                                        conj[PART[S][[s4,1]]],PART[S][[s5,1]],
                                        conj[PART[S][[s6,1]]]};
                                    res=Vertex[partList];
                                    If[res[[2,1]]=!=0,
                                      
                                      VertexListNonCC=
                                        Join[
                                        VertexListNonCC,{{res, SSSSSS}}];
                                      
                                      SA`VertexList[SSSSSS]=
                                        Join[SA`VertexList[SSSSSS],{res}];
                                      VertexList6=Join[VertexList6,{res}];
                                      ];
                                    ];
                                  s6++;];
                              ];
                            s5++;];
                        ];
                      s4++;];
                  ];
              ];
            s3++;];
          s2++;];
        s1++;];
      ];
  
  GetVerticesSSSSVV[ES_]:=Block[{},
      
      (*--------------  S S S S V V ---------------- *)
      
      Print["      Four Scalar - Two Vector Boson - Interaction"];
      
      For[s1=1,s1\[LessEqual]Length[PART[S]],
        For[s2=s1,s2\[LessEqual]Length[PART[S]],
          For[s3=1,s3\[LessEqual]Length[PART[S]],
            
            If[(s3\[GreaterEqual]s1) || (conj[PART[S][[s1,1]]]=!= 
                    PART[S][[s1,1]]) || (conj[PART[S][[s3,1]]]=!= 
                    PART[S][[s3,1]]),
              
              If[D[D[D[SimLag,PART[S][[s1,1]]],PART[S][[s2,1]]],
                      PART[S][[s3,1]]]=!=0,
                  For[s4=s3,s4\[LessEqual]Length[PART[S]],
                      
                      If[(D[D[D[D[SimLag,PART[S][[s1,1]]],PART[S][[s2,1]]],
                                PART[S][[s3,1]]],PART[S][[s4,1]]] )=!=0,
                        For[s5=1,s5\[LessEqual]Length[PART[V]],
                            If[(D[D[D[D[D[SimLag,PART[S][[s1,1]]],
                                        PART[S][[s2,1]]],PART[S][[s3,1]]],
                                      PART[S][[s4,1]]],PART[V][[s5,1]]] )=!=
                                0,
                              For[s6=1,s6\[LessEqual]Length[PART[V]],
                                  
                                  If[(s6\[GreaterEqual]s5) || (conj[
                                        PART[V][[s6,1]]]=!= 
                                        PART[V][[s6,1]]) || (conj[
                                        PART[V][[s5,1]]]=!= PART[V][[s5,1]]),
                                    
                                    If[(D[D[D[D[D[D[SimLag,PART[S][[s1,1]]],
                                        PART[S][[s2,1]]],PART[S][[s3,1]]],
                                        PART[S][[s4,1]]],PART[V][[s5,1]]],
                                        PART[V][[s6,1]]] /.subVacuum  /. 
                                        zero[a_]\[Rule]nix)=!=0,
                                        
                                        partList={PART[S][[s1,1]],
                                        PART[S][[s2,1]],conj[PART[S][[s3,1]]],
                                        conj[PART[S][[s4,1]]],PART[V][[s5,1]],
                                        conj[PART[V][[s6,1]]]};
                                        res=Vertex[partList];
                                        If[res[[2,1]]=!=0,
                                        
                                        VertexListNonCC=
                                        Join[VertexListNonCC,{{res, 
                                        SSSVVV}}];
                                        
                                        SA`VertexList[SSSSVV]=
                                        Join[SA`VertexList[SSSSVV],{res}];
                                        VertexList6=Join[VertexList6,{res}];
                                        ];
                                        ];
                                    ];
                                  s6++;];
                              ];
                            s5++;];
                        ];
                      s4++;];
                  ];
              ];
            s3++;];
          s2++;];
        s1++;];
      ];
  
  GetVerticesSSVVVV[ES_]:=Block[{},
      
      (*--------------  S S V V V V ---------------- *)
      
      Print["      Two Scalar - Four Vector Boson - Interaction"];
      
       For[s1=1,s1\[LessEqual]Length[PART[S]],
        For[s2=1,s2\[LessEqual]Length[PART[V]],
          If[D[D[SimLag,PART[S][[s1,1]]],PART[V][[s2,1]]]=!=0,
            For[s3=1,s3\[LessEqual]Length[PART[S]],
                
                If[(s3\[GreaterEqual]s1) || (conj[PART[S][[s1,1]]]=!= 
                        PART[S][[s1,1]]) || (conj[PART[S][[s3,1]]]=!= 
                        PART[S][[s3,1]]),
                  
                  If[D[D[D[SimLag,PART[S][[s1,1]]],PART[V][[s2,1]]],
                          PART[S][[s3,1]]]=!=0,
                      For[s4=1,s4\[LessEqual]Length[PART[V]],
                          
                          If[(s4\[GreaterEqual]s2) || (conj[PART[V][[s4,1]]]=!= 
                                  PART[V][[s4,1]]) || (conj[PART[V][[s2,1]]]=!= 
                                  PART[V][[s2,1]]),
                            
                            If[(D[D[D[D[SimLag,PART[S][[s1,1]]],
                                        PART[V][[s2,1]]],PART[S][[s3,1]]],
                                      PART[V][[s4,1]]])=!=0,
                                For[s5=s2,s5\[LessEqual]Length[PART[V]],
                                    For[s6=s4,s6\[LessEqual]Length[PART[V]],
                                      
                                      If[(D[D[D[D[D[D[SimLag,PART[S][[s1,1]]],
                                        PART[V][[s2,1]]],PART[S][[s3,1]]],
                                        PART[V][[s4,1]]],PART[V][[s5,1]]],
                                        PART[V][[s6,1]]] /.subVacuum  /. 
                                        zero[a_]\[Rule]nix)=!=0,
                                        
                                        partList={PART[S][[s1,1]],
                                        PART[V][[s2,1]],conj[PART[S][[s3,1]]],
                                        conj[PART[V][[s4,1]]],PART[V][[s5,1]],
                                        conj[PART[V][[s6,1]]]};
                                        res=Vertex[partList];
                                        If[res[[2,1]]=!=0,
                                        
                                        VertexListNonCC=
                                        Join[VertexListNonCC,{{res, 
                                        SSVVVV}}];
                                        
                                        VertexListS[SVVVV]=
                                        Join[SA`VertexList[SSVVVV],{res}];
                                        VertexList6=Join[VertexList6,{res}];
                                        ];
                                        ];
                                      s6++;];
                                    s5++;];
                                ];
                            ];
                          s4++;];
                      ];
                  ];
                s3++;];
            ];
          s2++;];
        s1++;]; 
      
      ];
  
  
  GetVerticesFFSS[ES_]:=Block[{},
      (*--------------  F F S S ---------------- *)
      
      Print["      Two Fermion - Two Scalar - Interaction"];
      
      Set[SimLag,
        LagFFSS[ES]  /.conj[x_]:>Random[] x /.sum[a_,b_,c_]\[Rule]1 /.Delta[
                      a_,b_]\[Rule]1   /. 
                Mass[a__]\[Rule]MASS /.A_[
                  x_]\[Rule]A/.diracSubBack1 /.diracSubBack2]; 
      
      For[s1=1,s1\[LessEqual]Length[PART[F]],
        For[s2=1,s2\[LessEqual]Length[PART[F]],
          
          If[(s2\[GreaterEqual]s1) || (MemberQ[MajoranaPart,PART[F][[s1,1]]]==
                  False) || (MemberQ[MajoranaPart,PART[F][[s2,1]]]==False),
             If[(D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]]=!=0), 
                For[s3=1,s3\[LessEqual]Length[PART[S]],
                     
                    If[((D[D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]] ,
                              PART[S][[s3,1]]])=!=0) , 
                      For[s4=1,s4\[LessEqual]Length[PART[S]],
                          
                          If[(s4\[GreaterEqual]s3) ||(conj[PART[S][[s4,1]]]=!=
                                  PART[S][[s4,1]]) || (conj[PART[S][[s3,1]]]=!=
                                  PART[S][[s3,1]]),
                            
                            If[((D[D[D[D[SimLag,PART[F][[s1,1]]],
                                        PART[F][[s2,1]]] ,PART[S][[s3,1]]],
                                        PART[S][[s4,1]]])=!=0), 
                                
                                partList={bar[PART[F][[s1,1]]],
                                    PART[F][[s2,1]],PART[S][[s3,1]],
                                    conj[PART[S][[s4,1]]]};
                                res=Vertex[partList];
                                
                                If[res[[2,1]]=!=0 ||  res[[3,1]]=!=0 || 
                                    res[[4,1]]=!=0 ||  res[[5,1]]=!=0, 
                                  
                                  VertexListNonCC=
                                    Join[VertexListNonCC,{{res, FFSS}}];
                                  
                                  SA`VertexList[FFSS]=
                                    Join[SA`VertexList[FFSS],{res}];
                                  VertexList4f=Join[VertexList4f,{res}];
                                  ];
                                
                                
                                If[(conj[PART[S][[s4,1]]]=!=
                                        PART[S][[s4,1]]) || (conj[
                                        PART[S][[s3,1]]]=!=PART[S][[s3,1]]),
                                  partList={bar[PART[F][[s1,1]]],
                                      PART[F][[s2,1]],PART[S][[s4,1]],
                                      conj[PART[S][[s3,1]]]};
                                  res=Vertex[partList];
                                  
                                  If[res[[2,1]]=!=0 ||  res[[3,1]]=!=0 || 
                                      res[[4,1]]=!=0 ||  res[[5,1]]=!=0,
                                    
                                    VertexListNonCC=
                                      Join[VertexListNonCC,{{res, FFSS}}];
                                    
                                    SA`VertexList[FFSS]=
                                      Join[SA`VertexList[FFSS],{res}];
                                    VertexList4f=Join[VertexList4f,{res}];
                                    ];
                                  ];
                                ];
                            ];
                          s4++;]; 
                      ]; 
                    s3++;];
                ];
            ];
          s2++;];
        s1++;];
      ];
  
  GetVerticesFFVV[ES_]:=Block[{},
      
      (*--------------  F F V V ---------------- *)
      
      Print["      Two Fermion - Two Vector Boson - Interaction"];
      
      (* Set[SimLag,
            LagFFVV[ES]/.conj[x_]:>Random[] x /.x_[_]\[Rule]x/.Delta[a_,
                          b_]\[Rule]1/.sum[_,_,_]\[Rule]1 /. 
                  Mass[a_]\[Rule]MASS /.diracSubBack1 /.diracSubBack2]; *)
   
         SimLag=LagFFVV[ES]/.diracSubBack1 /.diracSubBack2;
      
      
      	For[s1=1,s1\[LessEqual]Length[PART[F]],
        For[s2=1,s2\[LessEqual]Length[PART[F]],
          
          If[(s2\[GreaterEqual]s1) || (MemberQ[MajoranaPart,PART[F][[s1,1]]]==
                  False) || (MemberQ[MajoranaPart,PART[F][[s2,1]]]==False),
             If[(D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]]=!=0), 
                For[s3=1,s3\[LessEqual]Length[PART[V]],
                     
                    If[((D[D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]] ,
                              PART[V][[s3,1]]])=!=0) , 
                      For[s4=1,s4\[LessEqual]Length[PART[V]],
                          
                          If[(s4\[GreaterEqual]s3) ||(conj[PART[V][[s4,1]]]=!=
                                  PART[V][[s4,1]]) || (conj[PART[V][[s3,1]]]=!=
                                  PART[V][[s3,1]]),
                            If[((D[D[D[D[SimLag,PART[F][[s1,1]]],
                                        PART[F][[s2,1]]] ,PART[V][[s3,1]]],
                                        PART[V][[s4,1]]])=!=0), 
                                
                                partList={bar[PART[F][[s1,1]]],
                                    PART[F][[s2,1]],PART[V][[s3,1]],
                                    conj[PART[V][[s4,1]]]};
                                res=Vertex[partList];
                                
                                If[res[[2,1]]=!=0 ||  res[[3,1]]=!=0 || 
                                    res[[4,1]]=!=0 ||  res[[5,1]]=!=0,
                                  
                                  VertexListNonCC=
                                    Join[VertexListNonCC,{{res, FFVV}}];
                                  
                                  SA`VertexList[FFVV]=
                                    Join[SA`VertexList[FFVV],{res}];
                                  VertexList4f=Join[VertexList4f,{res}];
                                  ];
                                
                                
                                If[(conj[PART[V][[s4,1]]]=!=
                                        PART[V][[s4,1]]) || (conj[
                                        PART[V][[s3,1]]]=!=PART[V][[s3,1]]),
                                  
                                  partList={PART[F][[s1,1]],
                                      bar[PART[F][[s2,1]]],PART[V][[s4,1]],
                                      conj[PART[V][[s3,1]]]};
                                  res=Vertex[partList];
                                  
                                  If[res[[2,1]]=!=0 ||  res[[3,1]]=!=0 || 
                                      res[[4,1]]=!=0 ||  res[[5,1]]=!=0,
                                    
                                    VertexListNonCC=
                                      Join[VertexListNonCC,{{res, FFVV}}];
                                    
                                    SA`VertexList[FFVV]=
                                      Join[SA`VertexList[FFVV],{res}];
                                    VertexList4f=Join[VertexList4f,{res}];
                                    ];
                                  ];
                                ];
                            ];
                          s4++;]; 
                      ]; 
                    s3++;];
                ];
            ];
          s2++;];
        s1++;];	
      ];
  
  GetVerticesFFFF[ES_]:=Block[{},
      
      (*--------------  F F F F ---------------- *)
      
      Print["      Four Fermion - Interaction"];
      
      (* Set[SimLag,
            LagFFFF[ES]/.conj[x_]:>Random[] x /.x_[_]\[Rule]x/.Delta[a_,
                          b_]\[Rule]1/.sum[_,_,_]\[Rule]1 /. 
                  Mass[a_]\[Rule]MASS /.diracSubBack1 /.diracSubBack2]; *)
   
         SimLag=LagFFFF[ES]/.diracSubBack1 /.diracSubBack2;
      
      
      	For[s1=1,s1\[LessEqual]Length[PART[F]],
        For[s2=1,s2\[LessEqual]Length[PART[F]],
          
          If[(s2\[GreaterEqual]s1) || (MemberQ[MajoranaPart,PART[F][[s1,1]]]==
                  False) || (MemberQ[MajoranaPart,PART[F][[s2,1]]]==False),
             If[(D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]]=!=0), 
                For[s3=s1,s3\[LessEqual]Length[PART[F]],
                     
                    If[((D[D[D[SimLag,PART[F][[s1,1]]],PART[F][[s2,1]]] ,
                              PART[F][[s3,1]]])=!=0) , 
                      For[s4=s2,s4\[LessEqual]Length[PART[F]],
                          
                          If[((D[D[D[D[SimLag,PART[F][[s1,1]]],
                                        PART[F][[s2,1]]] ,PART[F][[s3,1]]],
                                    PART[F][[s4,1]]])=!=0), 
                            
                            partList={bar[PART[F][[s1,1]]],PART[F][[s2,1]],
                                bar[PART[F][[s3,1]]],PART[F][[s4,1]]};
                            res=Vertex[partList];
                            
                            If[res[[2,1]]=!=0 ||  res[[3,1]]=!=0 || 
                                res[[4,1]]=!=0 ||  res[[5,1]]=!=0 || 
                                res[[6,1]]=!=0 ||  res[[7,1]]=!=0 || 
                                res[[8,1]]=!=0 ||  res[[9,1]]=!=0,
                              
                              VertexListNonCC=
                                Join[VertexListNonCC,{{res, FFFF}}];
                              
                              SA`VertexList[FFFF]=
                                Join[SA`VertexList[FFFF],{res}];
                              VertexList6=Join[VertexList6,{res}];
                              ];
                            
                            
                            partList={bar[PART[F][[s1,1]]],PART[F][[s2,1]],
                                bar[PART[F][[s4,1]]],PART[F][[s3,1]]};
                            res=Vertex[partList];
                            
                            If[res[[2,1]]=!=0 ||  res[[3,1]]=!=0 || 
                                res[[4,1]]=!=0 ||  res[[5,1]]=!=0 || 
                                res[[6,1]]=!=0 ||  res[[7,1]]=!=0 || 
                                res[[8,1]]=!=0 ||  res[[9,1]]=!=0,
                              VertexListNonCC=
                                Join[VertexListNonCC,{{res, FFFF}}];
                              
                              SA`VertexList[FFFF]=
                                Join[SA`VertexList[FFFF],{res}];
                              VertexList4f=Join[VertexList4f,{res}];
                              ];
                            ];
                          s4++;]; 
                      ]; 
                    s3++;];
                ];
            ];
          s2++;];
        s1++;];		
      ]; *)




MakeDepParList[ES_]:=
    Block[{i,j,k,temp,parNum,parDep,tempOld,tempNew,remaining, add, par,
        parNames},
      SA`Angles = 
        Select[Intersection[
            DeleteCases[
              Flatten[{Cases[VertexListNonCC,x_Sin,99],
                              Cases[VertexListNonCC,x_Cos,99],
                              Cases[VertexListNonCC,x_Tan,99],
                              Cases[VertexListNonCC,x_Sec,99],
                              Cases[VertexListNonCC,x_Sec,99],
                              Cases[VertexListNonCC,x_Cot,99],
                              Cases[subNumDependences,x_Cot,99],
                              Cases[subNumDependences,x_Cos,99],
                              Cases[subNumDependences,x_Csc,99],
                              Cases[subNumDependences,x_Sec,99],
                              Cases[subNumDependences,x_Sin,99],
                              Cases[subNumDependences,x_Tan,99],
                              Cases[subAlways,x_Cot,99],
                              Cases[subAlways,x_Cos,99],
                              Cases[subAlways,x_Csc,99],
                              Cases[subAlways,x_Sec,99],
                              Cases[subAlways,x_Sin,99],
                              Cases[subAlways,x_Tan,99],
                              Cases[subDependences,x_Cot,99],
                              Cases[subDependences,x_Cos,99],
                              Cases[subDependences,x_Csc,99],
                              Cases[subDependences,x_Sec,99],
                              Cases[subDependences,x_Sin,99],
                              Cases[subDependences,x_Tan,99]}] /. 
                          Sec[x_]\[Rule]x /. Cos[x_]\[Rule] x /. 
                      Tan[x_]\[Rule]x /. Cot[x_]\[Rule]x /. Sin[x_]\[Rule] x /. 
                Csc[x_]\[Rule]x,_Integer,5]],(Head[#]\[Equal]Symbol)&];
      
      parDep=
        Select[Table[
            subNumDependences[[i,1]],{i,1,
              Length[subNumDependences]}],(FreeQ[#,Integer])&];
      parNum=
        Select[Table[
            DefinedNumericalValues[[i,1]],{i,1,
              Length[DefinedNumericalValues]}],(FreeQ[#,Integer])&];
      
      temp =
        Flatten[{subAlways,subNumDependences,subDependences}] /.Part \[Rule] 
              PartM /. PartM[a_,b__]\[Rule]a;
      allDependences={};
      For[i=1,i\[LessEqual]Length[temp],
        If[Head[Head[temp[[i,2]]]]===List,
          
          allDependences=
              Join[allDependences,{Head[temp[[i,1]]]\[Rule]
                    Head[temp[[i,2]]] }];,
          If[Head[temp[[i,2]]]===Part,
              
              allDependences=
                  Join[allDependences,{temp[[i,1,0]]\[Rule]temp[[i,2,1]] }];,
              allDependences=Join[allDependences,{temp[[i]]}];
              ];
          ];
        i++;];
      
      dependendParameter=
        Table[allDependences[[i,1]],{i,1,Length[allDependences]}];
      
      For[i=1,i\[LessEqual]Length[subAlways],
        If[FreeQ[parDep,subAlways[[i,1]]] && FreeQ[parNum,subAlways[[i,1]]],
          parDep=Join[parDep,{subAlways[[i,1]]}];];
        i++;];
      
      For[i=1,i\[LessEqual]Length[subDependences],
        If[
          FreeQ[parDep,subDependences[[i,1]]] && 
            FreeQ[parNum,subDependences[[i,1]]],
          parDep=Join[parDep,{subDependences[[i,1]]}];];
        i++;];
      
      parDep=Select[parDep,(FreeQ[parNum,#])&];
      parNames = Transpose[parameters][[1]];
      
      temp = Select[parNames,(FreeQ[VertexListNonCC[ES],#]\[Equal]False)&];
      SA`ParNum = Select[temp,(FreeQ[parNum,#]\[Equal]False)&];
      SA`ParDep=Select[temp,(FreeQ[parDep,#]\[Equal]False)&];
      
      SA`ParNeed = Select[temp,(FreeQ[SA`ParNum ,#]&& FreeQ[SA`ParDep,#])&];
      
      tempNew=SA`ParNeed;
      tempOld= {};
      
      While[tempOld=!=tempNew,
        tempOld=tempNew;
        For[i=1,i\[LessEqual]Length[SA`ParDep],
          pos = Position[dependendParameter,SA`ParDep[[i]]];
          
          par=Intersection[
              Select[Cases[{allDependences[[pos[[1,1]],2]]}/. 
                      Mass[a__]:>Random[] /. A_[b__Pattern]\[Rule]A,x_Symbol,
                  99],(FreeQ[parNames,#]\[Equal]False)&]];
          For[j=1,j\[LessEqual]Length[par],
            
            If[FreeQ[parNum,par[[j]]]\[Equal]False && 
                FreeQ[SA`ParNum,par[[j]]],
              SA`ParNum = Join[SA`ParNum,{par[[j]]}];,
              
              If[FreeQ[parDep,par[[j]]]\[Equal]False && 
                    FreeQ[SA`ParDep,par[[j]]],
                  SA`ParDep = Join[SA`ParDep,{par[[j]]}];,
                  
                  If[FreeQ[tempNew,par[[j]]] && FreeQ[parDep,par[[j]]] && 
                        FreeQ[parNum,par[[j]]],
                      tempNew = Join[tempNew,{par[[j]]}];
                      ];
                  ];
              ];
            j++;];
          i++;];
        ];
      
      SA`ParNeed = tempNew;
      
      temp = SA`ParDep;
      SA`ParDep = {};
      
       While[temp=!={},
        tempNew={};
        For[i=1,i\[LessEqual]Length[temp],
          
          par=Cases[{temp[[i]]} /. subAlways/. subNumDependences /. 
                    subDependences/. Mass[a__]:>Random[] /. 
                A_[b__Pattern]\[Rule]A,x_Symbol,99];
          
          remaining=
            Join[tempNew,
              Table[temp[[k]]/. Mass[a__]\[Rule]Random[],{k,i+1,
                  Length[temp]}]];
          add=True;
          For[j=1,j\[LessEqual]Length[par],
            
            If[FreeQ[DeleteCases[remaining,x_Pattern,5],
                  par[[j]]]\[Equal]False,
              add=False;
              ];
            j++;];
          If[add\[Equal]False,
            tempNew=Join[tempNew,{temp[[i]]}];,
            SA`ParDep = Join[SA`ParDep,{temp[[i]]}];
            ];
          i++;];
        temp=tempNew;
         ]; 
      
      
      
      ];



