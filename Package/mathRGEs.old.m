(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)


DeltaQ[x_]:=If[x===Delta,Return[False];,Return[True];];

 subRGE={
      sumRGE[s_,x_,y_]A_?DeltaQ[s_,a___]B_?DeltaQ[s_,b___]-> 
        MatMul[Tp[A],B][a,b],
      sumRGE[s_,x_,y_]A_?DeltaQ[a___,s_]B_?DeltaQ[b___,s_]-> 
        MatMul[A,Tp[B]][a,b],
      sumRGE[s_,x_,y_]A_?DeltaQ[s_,a___]B_?DeltaQ[b___,s_]-> 
        MatMul[B,A][b,a],
      sumRGE[s_,x_,y_]A_?DeltaQ[s_,a___]^2-> MatMul[Tp[A],A][a,a],
      sumRGE[s_,x_,y_]MatMul[a___][s_,s_]-> TRace[a]
      }; 





MakeMatMul[x_]:=Block[{jjj,temp},
      temp=Expand[x];
      If[Head[temp]===Plus,
        Return[MakeMatMul /@ temp];
        ];
      jjj=0;
      While[FreeQ[temp,sumRGE]\[Equal]False && jjj<6,
        temp = ReleaseHold[temp /. subRGE];
        jjj++;];
      Return[temp];
      ];



(* Traces *)



TRace[Adj[a_],b__]:=TRace[b,Adj[a]];
TRace[b__]:=
    TRace[Tp[b]] /; (FreeQ[{b},Conj,2]\[Equal]False && 
          FreeQ[{b},Adj,2]\[Equal]True);
TRace[a_,d___,b__,c___]:=
  TRace[b,c,a,
      d] /; ( (FreeQ[{a},A]\[Equal]False || 
            FreeQ[{a},Adj]\[Equal]False) && (FreeQ[{b},A] && FreeQ[{b},Adj] && 
            FreeQ[{b},Conj]))
TRace[d__,MatMul[a__],c___] := TRace[d,a,c];
TRace[MatMul[a__],b__]:=
    If[Length[getDimParameters[Last[{a}]]]\[Equal]1,Return[TRace[Tp[a],b]];,
      Return[TRace[a,b]];];
TRace[a___,Tp[b_,c__],d___]:=
    Apply[TRace,Flatten[{a,Map[Tp,Reverse[{c}]],Tp[b],d}]];


MatMul[d__,MatMul[a__],c___] := MatMul[d,a,c];
Tp[-a___]:=-Tp[a];
Adj[-a___]:=-Adj[a];
(* Conj[-a___][i__]:=-Conj[a][i]; *)
TRace[d___,-a_,c___]:=-TRace[d,a,c];
MatMul[d___,-a_,c___][x_,y_]:=-MatMul[d,a,c][x,y]; 
MatMul[MatMul[a__],b__]:=
    If[Length[getDimParameters[Last[{a}]]]\[Equal]1,Return[MatMul[Tp[a],b]];,
      Return[MatMul[a,b]];];

Adj[MatMul[a__,b_]] := Apply[MatMul,Map[Adj,Reverse[{a,b}]]];

MatMul[a__][gen3,gen1]:= Apply[MatMul,Map[Tp,Reverse[{a}]]][gen1,gen3];
MatMul[a__][gen2,gen1]:= Apply[MatMul,Map[Tp,Reverse[{a}]]][gen1,gen2];
MatMul[a__][gen3,gen2]:= Apply[MatMul,Map[Tp,Reverse[{a}]]][gen2,gen3];

MatMul[a__][i3,i1]:= Apply[MatMul,Map[Tp,Reverse[{a}]]][i1,i3];
MatMul[a__][i2,i1]:= Apply[MatMul,Map[Tp,Reverse[{a}]]][i1,i2];
MatMul[a__][i3,i2]:= Apply[MatMul,Map[Tp,Reverse[{a}]]][i2,i3];

MatMul[a___,Tp[b_,c__],d___]:= 
    Apply[MatMul,Flatten[{a,Map[Tp,Reverse[{c}]],Tp[b],d}]];

Tp[x_Adj]:=Conj[First[x]];
Adj[x_Tp]:=Conj[First[x]];
Adj[x_Conj]:=Tp[First[x]];
Tp[Conj[x_]]:=Adj[x];
Tp[conj[x_]]:=Adj[x];
Tp[Adj[x_]]:=Conj[x];
Conj[Tp[x_]]:=Adj[x];
Conj[Adj[x_]]:=Tp[x];
Tp[x_Tp]:=First[x];
Tp[Kronecker]:=Kronecker;
Tp[Delta]:=Delta;

Tp[MatMul[x__]]:=Apply[MatMul,Map[Tp,Reverse[{x}]]];


Conj[B_[b__]]:=
    Conj[B][b] /;(B=!=A && B=!=Yijk && B=!=Aijk && B=!=Bij && B=!=m2ij && 
          B=!=Muij && B=!=Times && B=!=Delta && B=!=Pattern && B=!=Plus && 
          B=!=Power && B=!=Rational && B=!=Conj&& B=!=Tp && B=!=Adj );

Adj[x_Adj]:=First[x];


EMatrix[1]=1;
EMatrix[x_]=Kronecker[i1,i2];


IndexQ[x_]:=
    If[FreeQ[{gi1,gi2,gi3,gi4,gi5,gi6,gi7,gi8,gi9,gi10,gi11},x],
      Return[False];,Return[True];];
CanonicalOrder[term_Plus]:=CanonicalOrder/@term;
ginf[x_]:=ToExpression["gi"<>ToString[x]];

CanonicalOrder[term_]:=Block[{i,list,temp},
      list=DeleteDup[Cases[term/.sumRGE[a___]\[Rule]1,x_?IndexQ,3]];
      temp=term;
      For[i=1,i\[LessEqual]Length[list],
        temp=temp/.list[[i]]\[Rule]kf[i];
        i++;];
      temp=temp/.{kf[a_]\[Rule]Hold[ginf[a]]};
      Return[ReleaseHold[temp]];
      ];

DeleteDup[list_]:=Block[{i,temp},
      temp={};
      For[i=1,i\[LessEqual]Length[list],
        If[FreeQ[temp,list[[i]]],temp=Join[temp,{list[[i]]}];];
        i++;];
      Return[temp];
      ];



CalcRGEValue[x_]:=CalcRGEValue[x,False];

CalcRGEValue[x_,Finish_]:=Block[{temp,i,j},
      temp  = 
        Expand[x] /. {Yijk[a__]\[Rule]0, Aijk[a__]\[Rule]0,Bij[a__]\[Rule]0,
            Muij[a__]\[Rule]0,m2ij[a__]\[Rule]0, TA[a__]\[Rule]0} ;
      
      If[Head[temp]===Plus,
        Return[CalcRGEValue /@temp];
        ];
      
      If[ MakeMatrixMul\[Equal]True,
        (* temp=MakeMatMul[temp]; *)
        temp = temp //.subRGE;
        
        If[FreeQ[temp,sumRGE]\[Equal]False,
          sRGE=Cases[temp,y_sumRGE,2];
          For[i=1,i\[LessEqual]Length[sRGE],
            del=Cases[temp,y:(Delta[sRGE[[i,1]],b_]),3];
            For[j=1,j\[LessEqual]Length[del],
              temp = temp /. del[[j,2]]\[Rule]del[[j,1]];
              j++;];
            i++;];
          temp = temp /. sumRGE[a__]\[Rule]1;
          ];
        
        While[FreeQ[temp,Hold]\[Equal]False,
          temp = ReleaseHold[temp];
          ];
        
        
        
        temp =CalcDeltaRGE[temp];
        temp = makeSumAllRGE[temp];
        
        While[FreeQ[temp,sum]\[Equal]False,
          
          temp = ReleaseHold[
                temp  /. sum[a_,b_,c_,d_]\[Rule] Hold[Sum[d,{a,b,c}]]];
          ];,
        
        temp = CalcEpsRGE[temp];
        
        temp = makeSumAllRGE[CalcDelta[temp]];
        While[FreeQ[temp,sum]\[Equal]False,
          
          temp = ReleaseHold[
                temp  /. sum[a_,b_,c_,d_]\[Rule] Hold[Sum[d,{a,b,c}]]];
          ];
        
        temp = CanonicalOrder[temp]; 
        temp = temp /. sumRGE \[Rule]sum;
        temp=makeSumAllRGE[temp] /. ThetaStep[a__]\[Rule]1;
        
        ];
      
      
      
      
      temp  = 
        temp /. Delta[a__]\[Rule]1 /. MatMul[a__][b_,b_]\[Rule]TRace[a];
      
      If[Finish\[Equal]True,
         temp = 
            DeleteCases[DeleteCases[DeleteCases[temp,gen1,5],gen2,5],gen3,5] /. 
              A_[] \[Rule]A;,
        temp = 
            temp /. {A_[gen3,gen1]\[Rule]A[gen1,gen3],
                A_[gen3,gen2]\[Rule]A[gen2,gen3],
                A_[gen2,gen1]\[Rule]A[gen1,gen2],
                A_[gen3,gen2,gen1]\[Rule]A[gen1,gen2,gen3],
                A_[gen2,gen3,gen1]\[Rule]A[gen1,gen2,gen3],
                A_[gen1,gen3,gen2]\[Rule]A[gen1,gen2,gen3],
                A_[gen2,gen1,gen3]\[Rule]A[gen1,gen2,gen3],
                A_[gen3,gen1,gen2]\[Rule]A[gen1,gen2,gen3]};  
        ];
      
      temp = temp /. A_[]\[Rule]A /. Conj\[Rule]conj;
      
      If[FreeQ[temp,TRace]\[Equal]False,
        If[Head[temp]===TRace,
            temp = OrderTraces[temp];,
            temp=OrderTraces /@ temp;
            ];
        ];
      
      If[FreeQ[temp,TRace]\[Equal]False,Interrupt[];SAVE2=temp;];
      
      Return[temp];
      ];

OrderTraces[x_]:=Block[{i,tr,coeff, first, pos, second,list},
      If[FreeQ[x,TRace], Return[x]];
      If[Head[x]===TRace,
        tr=x;
        coeff=1;,
        tr=Cases[x,y_TRace][[1]];
        coeff=x/tr;
        ];
      list = tr /. TRace\[Rule]List;
      first=Sort[list][[1]];
      second=Sort[list][[2]];
      
      pos = Cases[Position[list,first],{z_}][[1,1]];
      If[pos>1,
        ordered = Join[Take[list,{pos,Length[list]}],Take[list,{1,pos-1}]];
        Return[(ordered /. List\[Rule]trace)*coeff];,
        Return[(x /. TRace\[Rule]trace)];
        ];
      ];

FreeThreeQ[x_]:=Block[{i,temp},
      If[threeIndexParameter\[Equal]{}, Return[True];];
      temp=True;
      For[i=1,i\[LessEqual]Length[threeIndexParameter],
        If[FreeQ[x,threeIndexParameter[[i]]]\[Equal]False,
          temp=False;
          ];
        i++;];
      Return[temp];
      ];

Conj[x_Plus] := Conj/@ x;
Conj[x_Power] := Conj/@ x;
Conj[x_Times] := Conj/@ x;
Conj[x_List] := Conj/@ x;
Conj[x_Delta] := x;
Conj[x_epsTensor] := x;
Conj[epsTensor] := epsTensor;
Conj[x_?NumberQ] := x;

Delta[a_,a_,rge]=1;


Casimir[a_,b_]:=Casimir[getBlankSF[a],b] /; FreeQ[a,List]\[Equal]False
Dynkin[a_,b_]:=Dynkin[getBlankSF[a],b] /; FreeQ[a,List]\[Equal]False

sumRGE[a_,1,1]:=1;

partRGE[particle_,nr_]:=Block[{res,sub,i,temp,ind,sumStates},
        temp=getBlankSF[RE[particle]];
        sumStates=1;
        pos=Position[SFields,temp][[1,1]];
        
        ind=Join[ListFields[[pos,2,1]],ListFields[[pos,3,1]]];
        
        For[i=1,i\[LessEqual]Length[ind],
          If[ind[[i]]=!=generation&&ind[[i]]=!=lorentz,
            
            sumStates=
                sumStates*
                  sum[ind[[i]] /. subGC[nr],1,NumberStates[ind[[i]]]];
            ];
          i++;];
        res=
          sumStates*sumRGE[genf[nr],1,Fields[[pos,2]]] /. 
              subIndFinalX[nr,nr,"i"] /. Delta[1,x_]\[Rule]1;
         (*Return[res /. sum[a__]\[Rule]sumRGE[a]]; *)
         Return[res]; 
        ] /; MemberQ[LPName,getBlankSF[particle]];

TraceValue[particle_]:=Block[{pos,pos2,temp,traceFac},
        temp=getBlankSF[RE[particle]];
        pos=Position[SFields,temp][[1,1]];
        If[FreeQ[Traceless,pos]\[Equal]False,
          pos2=Position[Traceless,pos][[1,1]];
          traceFac=Extract[Traceless,pos2][[2]];,
          traceFac=1;
          ];
        
        Return[traceFac];
        
        ]/; MemberQ[LPName,getBlankSF[particle]];


TraceValue2[particle_]:=Block[{pos,pos2,temp,traceFac,i,fac,fac2},
        temp=getBlankSF[RE[particle]];
        pos=Position[SFields,temp][[1,1]];
        ind=Join[ListFields[[pos,2,1]],ListFields[[pos,3,1]]];
        fac=1; fac2=1;
        
        For[i=1,i\[LessEqual]Length[ind],
          If[ind[[i]]=!=generation&&ind[[i]]=!=lorentz,
            fac=fac*NumberStates[ind[[i]]];
            ];
          i++;];
        For[i=1,i\[LessEqual]Length[Gauge],
          If[Gauge[[i,2]]=!=U[1],
            fac2=fac2*Abs[Fields[[pos,3+i]]];
            ];
          i++];
        traceFac=fac2/fac;
        Return[traceFac];
        ]/; MemberQ[LPName,getBlankSF[particle]];



InsertPQ[x_]:=Block[{},
      If[FreeQ[x,pL]\[Equal]True && FreeQ[x,pM]\[Equal]True && 
            FreeQ[x,pN]\[Equal]True && FreeQ[x,pO]\[Equal]True && 
            FreeQ[x,pP]\[Equal]True && FreeQ[x,pQ]\[Equal]True && 
            FreeQ[x,pW]\[Equal]True && FreeQ[x,pX]\[Equal]True && 
            FreeQ[x,pY]\[Equal]True && FreeQ[x,pZ]\[Equal]True && 
            FreeQ[x,n1]\[Equal]True && FreeQ[x,n2]\[Equal]True && 
            FreeQ[x,n3]\[Equal]True && FreeQ[x,n4]\[Equal]True && 
            FreeQ[x,n5]\[Equal]True && FreeQ[x,n6]\[Equal]True && 
            FreeQ[x,n7]\[Equal]True && FreeQ[x,n8]\[Equal]True&& 
            FreeQ[x,n9]\[Equal]True&& FreeQ[x,n10]\[Equal]True&& 
            FreeQ[x,n11]\[Equal]True ,
          Return[True];,
          Return[False];
          ];
      ];



getLength[x_List]:=Length[x];


makeListInvolved[listFunc_,l1_,l2_,clearN_]:=Block[{i,li1,li2,list1,list2},
      
      ReleaseHold[clearN];
      
      li1=Map[getFullSF,Map[getBlankSF,l1]] /. conj[x_]\[Rule]x;
      li2=Map[getFullSF,Map[getBlankSF,l2]] /. conj[x_]\[Rule]x;
      
      If[li1\[Equal]{},
        list1=LP;,
        list1=listTri[[Position[LP,li1[[1]]][[1,1]]]];
        ];
      
      If[li2\[Equal]{},
        list2=LP;,
        list2=listBi[[Position[LP,li2[[1]]][[1,1]]   ]];
        ];
      
      listTemp=Intersection[list1,list2];
      
      For[i=2,i\[LessEqual]Length[li1],
        pos=Position[LP,li1[[i]]];
        listTemp=Intersection[listTemp,listTri[[pos[[1,1]]]]];
        i++;];
      
      For[i=2,i\[LessEqual]Length[li2],
        pos=Position[LP,li2[[i]]];
        listTemp=Intersection[listTemp,listBi[[pos[[1,1]]]]];
        i++;];
      
      ReleaseHold[listFunc];
      Return[listTemp];
      ] /; InsertPQ[l1] && InsertPQ[l2]

makeListInvolved2[l1_,l2_,l3_]:=Block[{i,li1,li2,li3,list1,list2},
      
      li1=Map[getFullSF,Map[getBlankSF,l1]] /. conj[x_]\[Rule]x;
      li2=Map[getFullSF,Map[getBlankSF,l2]] /. conj[x_]\[Rule]x;
      li3=Map[getFullSF,Map[getBlankSF,l3],{2}] /. conj[x_]\[Rule]x;
      
      
      If[Flatten[li3]\[Equal]{},
        list3=LP;,
        list3=listTri[[Position[LP,li3[[1,1]]][[1,1]]]];
        ];
      
      If[li2\[Equal]{},
        list2=LP;,
        list2=listBi[[Position[LP,li2[[1]]][[1,1]]   ]];
        ];
      
      
      If[li1\[Equal]{},
        list1=LP;,
        list1=listOne[[Position[LP,li1[[1]]][[1,1]]   ]];
        ];
      
      list1=LP;
      
      
      listTemp=Intersection[list1,list2,list3];
      
      For[i=2,i\[LessEqual]Length[li1],
        pos=Position[LP,li1[[i]]];
        listTemp=Intersection[listTemp,listOne[[pos[[1,1]]]]];
        i++;];
      
      
      For[i=2,i\[LessEqual]Length[li2],
        pos=Position[LP,li2[[i]]];
        listTemp=Intersection[listTemp,listBi[[pos[[1,1]]]]];
        i++;];
      
      listTemp = Map[getBlank,listTemp];
      
      For[i=1,i\[LessEqual]Length[l3],
        If[Length[l3[[i]]]\[Equal]1,
          pos=Position[LP,li3[[i,1]]];
          
          listTemp=
            Intersection[listTemp,Map[getBlankSF,listTri[[pos[[1,1]]]]]];,
          pos=Position[listTri2,C[l3[[i,1]],l3[[i,2]]]];
          If[pos=!={},
            listTemp=Intersection[listTemp,listTri2[[pos[[1,1]],2]]];,
            listTemp={};
            ];
          ];
        i++;];
      
      listTemp = Map[getFullSF,listTemp] /. conj[x_]\[Rule]x;
      
      Return[listTemp];
      ];



sbasis[x_,l1_,l2_,listName_,particleName_,nrName_,NR_,pName_,clear_] :=
    Block[{},
      resultRGE=
          ReleaseHold[
            Hold[Sum[
                  partRGE[particleName[nrName,NR],NR] x,{nrName,1,
                    getLength[
                      makeListInvolved[listName,l1,l2,
                        clear]]}]] /. {pName \[Rule]particleName[nrName,
                    NR]}];
      ];



ClearL:=Clear[LiL];
ClearM:=Clear[LiM];
ClearN:=Clear[LiN];
ClearO:=Clear[LiO];
ClearP:=Clear[LiP];
ClearQ:=Clear[LiQ];
ClearR:=Clear[LiR];
ClearW:=Clear[LiW];
ClearX:=Clear[LiX];
ClearXX:=Clear[LiXX];
ClearY:=Clear[LiY];
ClearZ:=Clear[LiZ];

LiLF := Set[LiL,listTemp];
LiMF := Set[LiM,listTemp];
LiNF := Set[LiN,listTemp];
LiOF := Set[LiO,listTemp];
LiPF := Set[LiP,listTemp];
LiQF := Set[LiQ,listTemp];
LiRF := Set[LiR,listTemp];
LiWF := Set[LiW,listTemp];
LiXF := Set[LiX,listTemp];
LiXXF := Set[LiXX,listTemp];
LiYF := Set[LiY,listTemp];
LiZF := Set[LiZ,listTemp];

LiLN[n_Integer,nr_]:=LiL[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiMN[n_Integer,nr_]:=LiM[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiNN[n_Integer,nr_]:=LiN[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiON[n_Integer,nr_]:=LiO[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiPN[n_Integer,nr_]:=LiP[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiQN[n_Integer,nr_]:=LiQ[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiRN[n_Integer,nr_]:=LiR[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiWN[n_Integer,nr_]:=LiW[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiXN[n_Integer,nr_]:=LiX[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiXXN[n_Integer,nr_]:=LiXX[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiYN[n_Integer,nr_]:=LiY[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];
LiZN[n_Integer,nr_]:=LiZ[[n]] /. subGC[nr] /.  subIndFinalX[nr,nr,"i"];

SL[x_,l1_,l2_]:= Block[{},
      Clear[LiL];
      sbasis[x,l1,l2,Hold[LiLF],LiLN,n1,1,pL, Hold[ClearL]];
      Return[resultRGE];
      ];

SM[x_,l1_,l2_]:= Block[{},
       Clear[LiM];
      sbasis[x,l1,l2,Hold[LiMF],LiMN,n2,2,pM, Hold[ClearM]];
      Return[resultRGE];
      ];

SN[x_,l1_,l2_]:= Block[{},
      Clear[LiN];
      sbasis[x,l1,l2,Hold[LiNF],LiNN,n3,3,pN, Hold[ClearN]];
      Return[resultRGE];
      ];

SO[x_,l1_,l2_]:= Block[{},
      Clear[LiO];
      sbasis[x,l1,l2,Hold[LiOF],LiON,n4,4,pO, Hold[ClearO]];
      Return[resultRGE];
      ];

SP[x_,l1_,l2_]:= Block[{},
      Clear[LiP];
      sbasis[x,l1,l2,Hold[LiPF],LiPN,n5,5,pP, Hold[ClearP]];
      Return[resultRGE];
      ];



SQ[x_,l1_,l2_]:= Block[{},
       Clear[LiQ];
      sbasis[x,l1,l2,Hold[LiQF],LiQN,n6,6,pQ, Hold[ClearQ]];
      Return[resultRGE];
      ];


SR[x_,l1_,l2_]:= Block[{},
       Clear[LiR];
      sbasis[x,l1,l2,Hold[LiRF],LiRN,n7,7,pR, Hold[ClearR]];
      Return[resultRGE];
      ];


SW[x_,l1_,l2_]:= Block[{},
       Clear[LiW];
      sbasis[x,l1,l2,Hold[LiWF],LiWN,n8,8,pW, Hold[ClearW]];
      Return[resultRGE];
      ];

SX[x_,l1_,l2_]:= Block[{},
       Clear[LiX];
      sbasis[x,l1,l2,Hold[LiXF],LiXN,n9,9,pX, Hold[ClearX]];
      Return[resultRGE];
      ];


SXX[x_,l1_,l2_]:= Block[{},
      Clear[LiXX];
      sbasis[x,l1,l2,Hold[LiXXF],LiXXN,n99,99,pXX, Hold[ClearXX]];
      Return[resultRGE];
      ];

SY[x_,l1_,l2_]:= Block[{},
      Clear[LiY];
      sbasis[x,l1,l2,Hold[LiYF],LiYN,n10,10,pY, Hold[ClearY]];
      Return[resultRGE];
      ];

SZ[x_,l1_,l2_]:= Block[{},
      Clear[LiZ];
      sbasis[x,l1,l2,Hold[LiZF],LiZN,n11,11,pZ, Hold[ClearZ]];
      Return[resultRGE];
      ];

 CalcDeltaRGE[expr_]:=Block[{i,j},
      If[Head[expr]\[Equal]List,erg=List@@expr;erg=CalcDeltaRGE/@erg;
        Return[List@@erg];];
      If[Head[expr]\[Equal]Plus, erg=List@@expr;erg=CalcDeltaRGE/@erg;
        Return[Plus@@erg];];
      expand=Expand[expr];
      If[Head[expand]==Plus,
        erg=List@@expand;
        erg=CalcDeltaRGE/@erg;
        Return[Plus@@erg];
        ];
      
      If[FreeQ[expand,epsTensor]\[Equal]False,
        expand = CalcEpsRGE[expand];
        ];
      
      If[FreeQ[expand,Delta]\[Equal]False,
        deltas=Cases[Cases[expand,x:(Delta[a_,b_]),3],x_?IntF];
         If[Length[deltas]>0,
          
          expand =expand /. 
                Flatten[
                  Table[{deltas[[j,2]]\[Rule]deltas[[j,1]]},{j,1,
                      Length[deltas]}]];
          ]; 
        ];
      
       If[FreeQ[expand,Delta]\[Equal]False,
        deltas=Cases[expand,x:(Delta[a_,b_]),3];
         For[i=1,i\[LessEqual]Length[deltas],
          If[Head[deltas[[i]]]===Delta,
            If[FreeQ[expand,sum[deltas[[i,1]],aaa_,bbb_]]\[Equal]False,
              
              expand =expand /. {deltas[[i,1]]\[Rule]deltas[[i,2]],
                    sum[deltas[[i,1]],aaa_,bbb_]\[Rule]1};
              deltas = deltas /. {deltas[[i,1]]\[Rule]deltas[[i,2]]};,
                If[FreeQ[expand,sum[deltas[[i,2]],aaa_,bbb_]]\[Equal]False,
                  
                  expand =
                    expand /. {deltas[[i,2]]\[Rule]deltas[[i,1]],
                        sum[deltas[[i,2]],aaa_,bbb_]\[Rule]1};
                  deltas = deltas /. {deltas[[i,2]]\[Rule]deltas[[i,1]]};
                   ]; 
              ];
            If[Head[deltas[[i]]]===Delta,
              
              If[FreeQ[expand, deltas[[i,1]]] && 
                    FreeQ[expand, deltas[[i,2]]],
                  expand = expand /. deltas[[i]]\[Rule]1;
                  ];
              ];
            ];
          i++;];
        ]; 
      
      Return[expand];
      ];

CalcEpsRGE[x_]:=Block[{temp,i,j},
      temp = 
        Expand[x] //. 
              sum[b_,x1_,x2_]  epsTensor[a1___,b_,c1___] epsTensor[a2___,b_,
                    c2___]\[RuleDelayed] 
                Det[Table[ 
                    Delta[{c1,a1}[[i]],{c2,a2}[[j]]],{i,1,
                      Length[ {a1,c1} ]},{j,1,Length[{a2,c2}]}]] //.  
            sum[b_,x1_,x2_]  epsTensor[a1___,b_,c1___]^2 \[RuleDelayed] 
              Det[Table[ 
                  Delta[{c1,a1}[[i]],{c2,a2}[[j]]],{i,1,Length[{a1,c1} ]},{j,
                    1,Length[{a1,c1}]}]] 
          //. 
            sum[b_,x1_,x2_]  Delta[a1___,b_] epsTensor[a2___,b_,
                  c2___]\[RuleDelayed] 
              Det[Table[
                  Delta[{a1,c2,a2}[[i]],j],{i,1,Length[ {a2,c2,b}]},{j,1,
                    Length[ {a2,c2,b}]}]]
          //. 
            sum[b_,x1_,x2_]  Delta[b_,a1___] epsTensor[a2___,b_,
                  c2___]\[RuleDelayed] 
              Det[Table[
                  Delta[{a1,c2,a2}[[i]],j],{i,1,Length[ {a2,c2,b}]},{j,1,
                    Length[ {a2,c2,b}]}]] //. 
          epsTensor[a__]\[RuleDelayed]Det[
              Table[ Delta[{a}[[i]],j],{i,1,Length[ {a} ]},{j,1,
                  Length[{a}]}]] ;
      
      Return[temp];
      
      ];



makeSumAllRGE[expr_]:=Block[{i,erg,expand,summand},
      expand=Expand[expr];
      If[Head[expand]===Plus,
        erg=List@@expand;
        erg=makeSumAllRGE/@erg;
        Return[Plus@@erg];
        ];
      
      
      sums=Cases[expr, x_?sumQRGE,3];
      summand = DeleteCases[expr, x_?sumQRGE,3];
      
      For[i=1,i\[LessEqual]Length[sums],
        (* subIndices=Join[subIndices,{sums[[i,1]] \[Rule] jnf[i]}]; *)
      
          summand=Append[sums[[i]],summand] /. {sums[[i,1]] \[Rule] jnf[i]} ;
        i++;];
      Return[summand];
      
      ];

sumQRGE[x_]:=If[Head[x]===sum,Return[True];,Return[False];];


Split3IndexParameter[x_]:= Block[{i,j,temp},
      temp=x;
      While[FreeQ[temp,sum]\[Equal]False,
        temp = temp /. sum[a_,b_,c_,d_]\[Rule]sumRGE[a,b,c] d ;
        ];
      
      temp = temp /. subThreeIndices /. conj\[Rule]Conj; 
      
      temp = CalcRGEValue[temp] /. StillCalcSum\[Rule]1; 
      Return[temp];
      
      ];

DeltaKronecker[a_,b_]:=If[FreeQ[{i1,i2,i3},b],
        Return[Delta[a,b]];,
        Return[Kronecker[a,b]];
        ] /;FreeQ[{s1,s2,s3},b];


flist[x_]:=Apply[List,x];

ExpandTerm[x_]:=
    Block[{i,j,k,temp,inv,temp2, newInsertion,temp3,temp21,temp22,temp23,
        nrName,NR},
      If[Head[Expand[x]]===Plus,
        Return[ExpandTerm/@Expand[x]];
        ];
      partAbbr={pL,pN,pM,pO,pP,pQ,pR,pW,pX,pY,pZ};
      UsedHeaders={Yijk,Aijk,Bij,Muij,m2ij, Conj};
      temp=x;
      inv=Intersection[Cases[temp,y_/;MemberQ[partAbbr,y],99]];
      
      If[inv=!={},
        i=Position[partAbbr,inv[[1]]][[1,1]];
        
        temp2=
          Cases[temp,
              y_/; (FreeQ[y,inv[[1]],3]\[Equal]False && 
                    FreeQ[UsedHeaders,Head[y]]\[Equal]False),4] /. 
            Conj[y_]\[Rule]y;
        temp21=
          Intersection[
            DeleteCases[
              getBlankSF/@
                Flatten[Map[flist,Cases[temp2,y_/;Length[y]\[Equal]1]]],
              y_/;MemberQ[partAbbr,y,2]]];
        temp22=
          Intersection[
            DeleteCases[
              getBlankSF/@
                Flatten[Map[flist,Cases[temp2,y_/;Length[y]\[Equal]2]]],
              y_/;MemberQ[partAbbr,y,2]]];
        
        temp23 = 
          DeleteCases[
            Intersection[
              DeleteCases[
                getBlankSF/@Map[flist,Cases[temp2,y_/;Length[y]\[Equal]3]],
                y_/;MemberQ[partAbbr,y,2],4]],{},3];
        newInsertion=makeListInvolved2[temp21,temp22,temp23];
        If[newInsertion==={}, Return[0];];
        nrName = ToExpression["n"<>ToString[5+i]];
        NR = 5+i;
        temp3=
          Hold[Sum[
                  partRGE[getBlank[newInsertion[[nrName]]],
                      NR] (temp /. 
                        inv[[1]]\[Rule] (newInsertion[[nrName]] /.  
                                subGC[NR] /.  
                              subIndFinalX[NR,NR,"i"])),{nrName,1,
                    Length[newInsertion]}] ] /. nr \[Rule]i  /. NR\[Rule]5+i;
        temp=ReleaseHold[temp3];
        If[Length[inv]>1,
          temp = Expand[temp];
          If[Head[temp]===Plus,
            Return[ExpandTerm/@temp];,
            Return[ExpandTerm[temp]];
            ];,
          
          Return[temp /. {Yijk[a__]\[Rule]0,Aijk[a__]\[Rule]0,
                  m2ij[a__]\[Rule]0, Muij[a__]\[Rule]0, Bij[a__]\[Rule]0, 
                  LSi\[Rule]0 /. Li\[Rule]0}];
          ];,
        Return[
            temp /. {Yijk[a__]\[Rule]0,Aijk[a__]\[Rule]0,m2ij[a__]\[Rule]0, 
                Muij[a__]\[Rule]0, Bij[a__]\[Rule]0, 
                LSi\[Rule]0 /. Li\[Rule]0}];
        ];
      ];
