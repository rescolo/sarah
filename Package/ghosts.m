(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

CalcGaugeTransformations:=Block[{i},
      
      Print["Calc Gauge Transformations"];
      
      GaugeTransformation={};
      
      For[i=1,i\[LessEqual]Length[Gauge],
        GaugeTransformation=
          Join[GaugeTransformation,{{(SGauge[[i]]/.subGC[1]),
                Gauge[[i,4]] getStructureConstant[i,gen1,gen2,gen3] part[
                    gGauge[[i]],2] part[SGauge[[i]],3]}}];
        i++;];
      
      For[i=1,i\[LessEqual]AnzahlChiral,
        temp= - (\[ImaginaryI] KovariantGhost[i,1,2,3])*part[SFields[[i]],2];
        If[temp=!=0,
          
          gaugeT=Flatten[
                SumOverIndizesGhost[
                  SumOverExpandedIndizes[
                    temp,{None,Fields[[i,3]]}],{Fields[[i,3]]}]];,
          gaugeT=0;
          ];
        If[Dimensions[SFieldsMultiplets[[i]]]=!={1},
          
          withoutNum=
            Flatten[DeleteCases[SFieldsMultiplets[[i]],x_?NumberQ,4]];
          withNum=Flatten[SFieldsMultiplets[[i]]];
          NumFac=withNum/withoutNum;
          invF=Map[getFull,withoutNum] /. subGC[1];
          For[j=1,j\[LessEqual]Length[invF],
            
            GaugeTransformation=
              Join[GaugeTransformation, {{invF[[j]],
                    NumFac[[j]]gaugeT[[j]]}}];
            j++;];,
          
          GaugeTransformation=
              Join[GaugeTransformation, {{SFieldsMultiplets[[i]],gaugeT}}];
          ];
        i++;];
      
      GaugeTransformation=
        DeleteCases[GaugeTransformation,{_,_,0}] /.{GetGen \[Rule] getGen,
            GetGenStart\[Rule]getGenStart};
      ];

UpdateGaugeTransformations[sub_,subInv_]:=Block[{i,temp},
      NewGaugeTransformation={};
      For[i=1,i\[LessEqual]Length[Particles[Current]],
        If[Particles[Current][[i,4]]===S || Particles[Current][[i,4]]===V,
          
          temp = DeltaGT[
              ReplaceAll[
                replaceGen[
                  ReleaseHold[
                    getFull[Particles[Current][[i,1]]] /.subGC[1] /. subInv /. 
                      gen1\[Rule]pre1],rgNr], gen1\[Rule]tem1]];
          rgNr++;
          
          NewGaugeTransformation=
            Join[NewGaugeTransformation,{{Particles[Current][[i,
                      1]],(replaceGen[ReleaseHold[temp/. sub],
                          rgNr] /.pre1\[Rule]gen1 /.tem1\[Rule]int10  )}}];
          ];
        i++;];
      
      
      GaugeTransformation=
        DeleteCases[NewGaugeTransformation,{_,_,0}] /.{GetGen \[Rule] getGen,
            GetGenStart\[Rule]getGenStart};
      
      ];

KovariantGhost[fieldNr_,p1_,p2_, LorNr_]:=Block[{i,temp, gauge, gaugeNr},
      temp=0;
      For[gNr=1,gNr\[LessEqual]AnzahlGauge,
        If[FieldDim[fieldNr,gNr]=!=0,
          
          temp += part[gGauge[[gNr]],LorNr] getGenerator[gNr,
                  FieldDim[fieldNr,gNr],LorNr,p1,p2]*
                Gauge[[gNr,4]] makeDelta[fieldNr,p1,p2,{Gauge[[gNr,3]]}];
          ];
        gNr++;];
      Return[temp];
      ];



SumOverIndizesGhost[term_,partList_]:=Block[{j,i,temp, temp1,pos},
      IndexNames={};
      For[i=1,i\[LessEqual]Length[partList],
        If[partList[[i]]=!=None,
          pos=Position[ListFields,partList[[i]]][[1,1]];
          For[j=1,j\[LessEqual]Length[ListFields[[pos,2,1]]],
            
            IndexNames = 
              Join[IndexNames,{{ListFields[[pos,2,1,j]] /. subGC[i], 
                    NumberStates[ListFields[[pos,2,1,j]],partList[[i]]]}}];
            j++;];
          ];
        i++;];
      
      temp=term;
      For[i=1, i\[LessEqual]Length[IndexNames],
        temp1=
          Hold[Table[temp,iter]]/.{iter\[Rule] 
                IndexNames[[Length[IndexNames]-i+1]]};
        temp=ReleaseHold[temp1];
        i++;];
      
      Return[temp];
      
      ];





DeltaGT[x_]:=Block[{},
      If[Head[x]\[Equal]List,erg=List@@x;erg=DeltaGT/@erg;
        Return[List@@erg];];
      If[Head[x]\[Equal]Times,erg=List@@x;erg=DeltaGT/@erg;
        Return[Times@@erg];];
      If[Head[x]\[Equal]Plus,erg=List@@x;erg=DeltaGT/@erg;
        Return[Plus@@erg];];
      If[Head[x]\[Equal]Power,erg=List@@x;erg=DeltaGT/@erg;
        Return[Power@@erg];];
      If[Head[x]\[Equal]conj,erg=List@@x;erg=DeltaGT/@erg;
        Return[conj@@erg];];
      If[Head[x]\[Equal]Mom,Return[x];];
      If[Head[x]\[Equal]Der,Return[Der[DeltaGT[x[[1]]],lor3]];];
      
      
      If[MemberQ[vacuum,x] || MemberQ[vacuum,Head[x]],
        If[Length[x]\[Equal]0,
            pos=Position[Transpose[GaugeTransformation][[1]],x][[1,1]];
            Return[Extract[GaugeTransformation,pos][[2]]];,
            pos=Position[Transpose[GaugeTransformation][[1]],Head[x]][[1,1]];
            
            Return[Extract[GaugeTransformation,
                    pos][[2]]/.gen1\[Rule]x[[1,1]]];
            ];,
        Return[x];
        ];
      ];



CalcGhostLagrangian[GaugeFixing_]:=Block[{i,GaugeFixingTemp},
      
      GaugeFixingTemp = GaugeFixing /. Der[a_]\[Rule]Der[a,lor2];
      
      subGhostC={};
      For[i=1,i\[LessEqual]Length[Particles[Current]],
        If[(getType[Particles[Current][[i,1]]]\[Equal]
                G) && (MemberQ[realVar,Particles[Current][[i,1]]]\[Equal]
                False),
          If[StringTake[ToString[Particles[Current][[i,1]]],-1]==="C",
              
              subGhostC=
                  Join[subGhostC,{conj[Particles[Current][[i,1]][{x_}]]\[Rule]
                        ToExpression[
                            StringDrop[
                              ToString[
                                Particles[Current][[i,1]]],-1]][{x}]}];,
              
              subGhostC=
                  Join[subGhostC,{conj[Particles[Current][[i,1]][{x_}]]\[Rule]
                        ToExpression[
                            ToString[Particles[Current][[i,1]]]<>"C"][{x}]}];
              ];
          ];
        
        i++;]; 
      
      Print["Calc Ghost Interactions"];
      
      (*
        LGhost=0;
        For[i=1,i\[LessEqual]Length[GaugeFixing],
          
          LGhost +=GaugeFixing[[i,
                  2]](bar[
                      partBlank[makeGhost[conj[GaugeFixingTemp[[i,2]]]],
                        1]]*(DeltaGT[
                          conj[GaugeFixingTemp[[i,1]]]] /.subGhostC)+
                  bar[partBlank[makeGhost[GaugeFixingTemp[[i,2]]],
                        1]]*(DeltaGT[GaugeFixingTemp[[i,1]]] /.subGhostC));
          i++;];
        *)
      
      LGhost=0;
      For[i=1,i\[LessEqual]Length[GaugeFixing],
        
        GaugeFixingFactor[makeGhost[conj[GaugeFixingTemp[[i,1]]]]]=
          Cases[GaugeFixing[[i,2]],RXi[a__],2][[1,1]];
        GaugeFixingFactor[makeGhost[GaugeFixingTemp[[i,1]]]]=
          Cases[GaugeFixing[[i,2]],RXi[a__],2][[1,1]];
        GaugeFixingFactor[ExtractGaugeField[GaugeFixingTemp[[i,1]]]]=
          Cases[GaugeFixing[[i,2]],RXi[a__],2][[1,1]];
        
        LGhost +=(GaugeFixing[[i,2]] /. 
                RXi[a__]\[Rule]1)(bar[
                    partBlank[makeGhost[conj[GaugeFixingTemp[[i,1]]]],
                      1]]*(DeltaGT[conj[GaugeFixingTemp[[i,1]]]] /.subGhostC)+
                bar[partBlank[makeGhost[GaugeFixingTemp[[i,1]]],
                      1]]*(DeltaGT[GaugeFixingTemp[[i,1]]] /.subGhostC));
        i++;];
      
      LGhost = - LGhost;
      
      
      GoldstoneGhost={};
      
      For[i=1,i\[LessEqual]Length[GaugeFixing],
        parts=Cases[GaugeFixing[[i,1]] /. conj[y_]\[Rule]y,x_?ParticleQ,2];
        For[j=1,j\[LessEqual]Length[parts],
          If[getType[parts[[j]]]===S,
            (* 
              GoldstoneGhost = 
                  Join[GoldstoneGhost,{{Cases[GaugeFixing[[i,2]],RXi[y_],
                            2][[1,1]] ,parts[[j]]}}]; *)
            
            GoldstoneGhost = 
                Join[GoldstoneGhost,{{ExtractGaugeField[GaugeFixing[[i,1]]] ,
                      parts[[j]]}}];
            ];
          j++;];
        i++;
        ];
      
      
      
      ];

(*
  makeGhost[x_]:=Block[{},
        ghostp=Cases[x,RXi[y_],2][[1,1]];
        Return[getGhost[ghostp]];
        ];
  *)

makeGhost[x_]:=Block[{temp,ghostp},
      If[Head[x]===Plus,
        temp=List@@x;,
        temp={x};
        ];
      ghostp=Select[temp,(Head[#]\[Equal]Der)&,2][[1,1]];
      Return[getGhost[ghostp]];
      ];

ExtractGaugeField[x_]:=Block[{temp,ghostp},
      If[Head[x]===Plus,
        temp=List@@x;,
        temp={x};
        ];
      ghostp=Select[temp,(Head[#]\[Equal]Der)&,2][[1,1]];
      Return[ghostp];
      ];

