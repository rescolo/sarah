(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

Options[MakeWHIZARD]={Eigenstates\[Rule]EWSB,WOGauge\[Rule]WO`WOUnitarity,
      AutoGauge\[Rule]True,Exclude\[Rule]{SSSS},WriteOmega\[Rule]True, 
      WriteWHIZARD\[Rule]True, ReadLists\[Rule]False,Version->"2.0.3", 
      WOModelName\[Rule]Automatic, MaximalCouplingsPerFile\[Rule]500};

MakeWHIZARD[opt___ ]:=
    MakeWHIZARDFunc[Eigenstates/.{opt}/.Options[MakeWHIZARD],
      WOGauge/.{opt}/.Options[MakeWHIZARD],
      AutoGauge/.{opt}/.Options[MakeWHIZARD],
      Exclude/.{opt}/.Options[MakeWHIZARD],
      WriteOmega/.{opt}/.Options[MakeWHIZARD],
      WriteWHIZARD/.{opt}/.Options[MakeWHIZARD],
      ReadLists/.{opt}/.Options[MakeWHIZARD],
      Version/.{opt}/.Options[MakeWHIZARD],
      WOModelName/.{opt}/.Options[MakeWHIZARD],
      MaximalCouplingsPerFile/.{opt}/.Options[MakeWHIZARD]];

MakeWHIZARDFunc[Eigenstates_,ChosenGauge_,AGauge_,Exclude_, WriteOmega_, 
      WriteWHIZARD_,ReadLists_,WOVersion_,ModelNameInput_,maxNumber_]:=
    Block[{i,j,k,temp,res,pos,names,j1,j2,j3,
        j4,(* $Path={$sarahPackageDir}}, *) $Path={$sarahNonPublicDir}},
      Print["-------------------------------------"];
      Print[" Creating WHIZARD/Omega Model Files  "];
      Print["-------------------------------------"];
      
      If[FreeQ[NameOfStates,InitalizedVertexCalculaton]\[Equal]True,
        Message[ModelFile::NoVertices];,
        
        $sarahCurrentWODir=
          ToFileName[{$sarahCurrentOutputDir,"WHIZARD_Omega"}];
        $sarahCurrentOmegaDir=ToFileName[{$sarahCurrentWODir,"omega"}];
        $sarahCurrentWhizardDir=ToFileName[{$sarahCurrentWODir,"whizard"}];
        
        If[FileExistsQ[$sarahCurrentWODir]=!=True,
          CreateDirectory[$sarahCurrentWODir];
          ];
        If[FileExistsQ[$sarahCurrentOmegaDir]=!=True,
          CreateDirectory[$sarahCurrentOmegaDir];
          ];
        If[FileExistsQ[$sarahCurrentWhizardDir]=!=True,
          CreateDirectory[$sarahCurrentWhizardDir];
          ];
        Get[
          ToFileName[ToFileName[{$sarahPackageDir,"WhizardOmega"}],
            "WOMathematicaInterface.m"]];
        WO`InterfacePath=ToFileName[{$sarahPackageDir,"WhizardOmega"}];
        
        SetAttributes[ME,{Orderless}];
        
        
        
        CreateWOForm;
        StringReCH;
        CreateCForm[True];
        
        CreatePartListWO;
        CreateParamListWO;
        
        Generation8 = Gluon;
        
        subGenInd={};
        For[i=1,i\[LessEqual]Length[PART[S]],
          
          subGenInd = 
            Join[subGenInd,{ToExpression[
                    "indexGen"<>ToString[PART[S][[i,1]]]]\[Rule] 
                  ToExpression["Generation"<>ToString[PART[S][[i,2]]]]}];
           i++;];
        For[i=1,i\[LessEqual]Length[PART[F]],
          If[FreeQ[Gauginos,PART[F]],
            subGenInd = 
                Join[subGenInd,{ToExpression[
                        "indexGen"<>ToString[PART[F][[i,1]]]]\[Rule] 
                      ToExpression["Generation"<>ToString[PART[F][[i,2]]]]}];
            ];
           i++;];
        For[i=1,i\[LessEqual]Length[PART[V]],
          If[FreeQ[SGauge,PART[V][[i,1]]],
            
            subGenInd = 
                Join[subGenInd,{ToExpression[
                        "indexGen"<>ToString[PART[V][[i,1]]]]\[Rule] 
                      ToExpression["Generation"<>ToString[PART[V][[i,2]]]]}];
            ];
           i++;];
        
        
        subFR = {fSU3[a__]\[Rule]f[a],
            fSU2[a__]\[Rule]Eps[a],
            Mom[a_[{gt1,c___}],b_]\[Rule]FV[1,b],
            Mom[a_[{gt2,c___}],b_]\[Rule]FV[2,b],
            Mom[a_[{gt3,c___}],b_]\[Rule]FV[3,b],
            Mom[a_[{gt4,c___}],b_]\[Rule]FV[4,b],
            
            Mom[conj[a_[{gt1,c___}]],b_]\[Rule]FV[1,b],
            Mom[conj[a_[{gt2,c___}]],b_]\[Rule]FV[2,b],
            Mom[conj[a_[{gt3,c___}]],b_]\[Rule]FV[3,b],
            Mom[conj[a_[{gt4,c___}]],b_]\[Rule]FV[4,b],
            
            
            Mom[a_[{lt1,c___}],b_]\[Rule]FV[1,b],
            Mom[a_[{lt2,c___}],b_]\[Rule]FV[2,b],
            Mom[a_[{lt3,c___}],b_]\[Rule]FV[3,b],
            Mom[a_[{lt4,c___}],b_]\[Rule]FV[4,b],
            
            Mom[conj[a_[{lt1,c___}]],b_]\[Rule]FV[1,b],
            Mom[conj[a_[{lt2,c___}]],b_]\[Rule]FV[2,b],
            Mom[conj[a_[{lt3,c___}]],b_]\[Rule]FV[3,b],
            Mom[conj[a_[{lt4,c___}]],b_]\[Rule]FV[4,b],
            
            ThetaStep[a__]\[Rule]1,
            
            g[a__]\[Rule]ME[a],
            gamma[a_]\[Rule] Ga[a,Index[Spin,Ext[1]],Index[Spin,Ext[2]]],
            Lam[a__]\[Rule]2 T[a],
            LorentzProduct[a__]\[Rule] TensDot[Dot@@a],
            PR\[Rule]ProjM[Index[Spin,Ext[1]],Index[Spin,Ext[2]]],
            PL\[Rule]ProjP[Index[Spin,Ext[1]],Index[Spin,Ext[2]]]
            };
        
        subIndizes = {
            
            ct1\[Rule] Index[Colour,Ext[1]],
            ct2\[Rule] Index[Colour,Ext[2]],
            ct3\[Rule] Index[Colour,Ext[3]],
            ct4\[Rule] Index[Colour,Ext[4]],
            
            lt1\[Rule] Index[Lorentz,Ext[1]],
            lt2\[Rule] Index[Lorentz,Ext[2]],
            lt3\[Rule] Index[Lorentz,Ext[3]],
            lt4\[Rule] Index[Lorentz,Ext[4]],
            
            generation \[Rule] Index[Generation],
            color \[Rule] Index[Colour],
            lorentz\[Rule] Index[Lorentz]
            };
        
        
        res={};
        
        If[ReadLists===False,
          For[i=1,i\[LessEqual]Length[ITypes],
            If[FreeQ[Exclude,ITypes[[i,1]]],
              temp = SA`VertexList[ITypes[[i,1]]]//. subFR //. subIndizes;
              For[j=1,j\[LessEqual]Length[temp],
                names = temp[[j,1]];
                switchPol=False;
                If[ITypes[[i,1]]===FFS ||ITypes[[i,1]]===FFV,
                  If[Head[temp[[j,1,1]]]===bar && Head[temp[[j,1,2]]]===bar,
                      names[[2]]=CC[bar[names[[2]]]];,
                      
                      If[Head[temp[[j,1,1]]]=!=bar && 
                            Head[temp[[j,1,2]]]=!=bar && 
                            AntiField[temp[[j,1,1]]]=!=temp[[j,1,1]],
                          names[[1]]=CC[bar[names[[1]]]]; 
                          ];
                      ];
                  ];
                
                
                subIndizesGen = 
                  Table[(genf[k] /. 
                          subIndFinal[k,k])\[Rule]Index[(ToExpression[
                            "indexGen"<>ToString[getBlank[temp[[j,1,k]]]]]),
                        k],{k,1,Length[temp[[j,1]]]}];
                subIndizesGen = subIndizesGen //. subGenInd;
                subIndizesGen ={};
                Switch[ITypes[[i,1]],
                  FFS,
                  	
                  res =  Join[
                            res,{{names, (temp[[j,2,1]]*temp[[j,2,2]]+
                                      temp[[j,3,1]]*temp[[j,3,2]])//. 
                                  subIndizesGen}}]//.{ProjM\[Rule]ProjPS,
                            ProjP\[Rule]ProjMS} //.{ProjMS\[Rule]ProjP,
                          ProjPS\[Rule]ProjM};,
                  FFV,
                  	
                  res =  Join[res,{{names, -(temp[[j,2,1]]*temp[[j,2,2]]+
                                        temp[[j,3,1]]*temp[[j,3,2]])//. 
                                    subIndizesGen}}] //. 
                            TensDot[Ga[a_,b_,c_],A_[b_,c_]]\[Rule]
                              TensDot[Ga[a],A][b,c] //.{ProjM\[Rule]ProjPS,
                            ProjP\[Rule]ProjMS} //.{ProjMS\[Rule]ProjP,
                          ProjPS\[Rule]ProjM}; ,
                  SSV,
                  	
                  res =  Join[
                        res,{{names, -(temp[[j,2,1]]*temp[[j,2,2]]) //. subFR//. 
                                  subIndizesGen //. 
                                Mom[names[[1]],a__]\[Rule]FV[1,a]//. 
                              Mom[names[[2]],a__]\[Rule]FV[2,a]}}];,
                  SSSS,
                  	
                  res =  Join[
                        res,{{names, temp[[j,2,1]]//. subIndizesGen}}];,
                  SVV,
                  	
                  res =  Join[
                        res,{{names, 
                            temp[[j,2,1]]*temp[[j,2,2]]//. subIndizesGen}}];,
                  SSVV,
                  	
                  res =  Join[
                        res,{{names, 
                            temp[[j,2,1]]*temp[[j,2,2]]//. subIndizesGen //. 
                                  sum[a_,b_,c_,
                                      d_ T[y1___,a_,
                                        y2___]]\[RuleDelayed](d T[y1,a,
                                        y2]/. (a \[Rule] 
                                        Index[Colour,x,
                                        ToExpression[
                                        StringTake[ToString[a],{2}]]])) /. 
                                Delta[a_,j1]\[Rule]1 /. 
                              Delta[a_,j2]\[Rule]1}}];,
                  SSS,
                  	
                  res =  Join[
                        res,{{names, temp[[j,2,1]]//. subIndizesGen}}];,
                  (* GGS,
                    	
                    res =  Join[
                          res,{{names, temp[[j,2,1]]//. subIndizesGen}}];,
                    GGV,
                    	
                    res =  Join[
                          res,{{names, (temp[[j,2,1]]*temp[[j,2,2]])//. 
                                subIndizesGen}}];, *)
                  VVV,
                  	
                  res =  Join[
                        res,{{names, - temp[[j,2,1]]*temp[[j,2,2]]//. 
                              subIndizesGen}}];,
                  VVVV,
                  	
                  res =  Join[
                        res,{{names,  (temp[[j,2,1]]*temp[[j,2,2]]+
                                    temp[[j,3,1]]*temp[[j,3,2]]+
                                    temp[[j,4,1]]*temp[[j,4,2]])//. 
                                subIndizesGen //. 
                              sum[a_,b_,c_,
                                  d_]\[RuleDelayed](d /. (a \[Rule] 
                                        Index[
                                        ToExpression[
                                        "Generation"<>ToString[c]],x,
                                        ToExpression[
                                        StringTake[ToString[a],{2}]]]))}}];
                  ];
                j++;];
              ];
            i++;];
          
          
          res=res //. sum[a_,b_,c_,d_]\[RuleDelayed]Sum[d,{a,b,c}] //. 
              Dot[0,a__]\[Rule]0;
          VertexListWHIZARDnonExp[Eigenstates]=res ;
          VertexListWHIZARD[Eigenstates]=res ;
          
          tempVert= {};
          
          Print["Expanding Vertices (Number of Vertices: ",Length[res],")"];
          
          For[i=1,i\[LessEqual]Length[res],
            If[Mod[i,10]\[Equal]0,Print["...",i," finished"];];
            If[Length[res[[i,1]]]\[Equal]3,
              tempVert=Join[tempVert,ExpandWHIZARD3[res[[i]]]];,
              tempVert=Join[tempVert,ExpandWHIZARD4[res[[i]]]];
              ];
            i++;];
          
          Print["finished... number of expanded vertices: ", 
            Length[tempVert]];
          
          
          
          VertexListWHIZARDexpanded = 
            tempVert //. conj\[Rule]Conjugate //.  
              Delta[a__]\[Rule]IndexDelta[a];
          
          
          Put[VertexListWHIZARDexpanded,
            ToFileName[$sarahCurrentWODir,"vlist.m"]];,
          
          VertexListWHIZARDexpanded=
              Get[ToFileName[$sarahCurrentWODir,"vlist.m"]];
          ];
        
        PartName=ToString;
        
        Print[""];
        Print[" - - - SARAH interface to WHIZARD/O'Mega - - -"];
        Print[" - - - Authors:  C. Speckner, F.Staub - - -"];
        Print[""];
        
        If[ModelNameInput===Automatic,
          woModelName = ModelName<>"_SARAH";,
          woModelName = ModelNameInput;
          ];
        
        If[Head[woModelName]=!=String,woModelName = ToString[woModelName];];
        
        WO`WriteOutput[WO`WOVertexList\[Rule]VertexListWHIZARDexpanded,
          WO`WOModelName\[Rule]woModelName,WO`WOMaxNcf\[Rule]4,
          WO`WOGauge\[Rule]ChosenGauge,WO`WOGaugeParameter\[Rule]"Rxi",
          WO`WOWhizardVersion\[Rule]WOVersion,WO`WOVerbose\[Rule]False,
          WO`WOAutoGauge\[Rule]AGauge,
          WO`WOMaxCouplingsPerFile\[Rule]maxNumber,
          WO`WORunParameters\[Rule]{aS,strongCoupling},
          WO`WOOutputDir\[Rule]StringDrop[$sarahCurrentWODir,-1],
          WO`WOOplotter\[Rule]False,WO`WOFast\[Rule]True,
          WO`WOMassList\[Rule]MassListFR,WO`WOWidthList\[Rule]WidthListFR,
          WO`WOEParamList\[Rule]EParamList,WO`WOIParamList\[Rule]IParamList,
          WO`WOPartList\[Rule]PartListFR];
        
        ];
      ];

 WOForm[x_]:=Return[x  /. ReplacementsWO /. subGreek]; 



ExpandWHIZARD3[vlist_]:=
    Block[{i,j,gf1,gf2,gf3,start1,start2,start3,iter1,iter2,iter3,ff1,ff2,ff3,
        fstart1,fstart2,fstart3,fiter1,fiter2,fiter3,temp},
      gf1=getGenOne[vlist[[1,1]] /. CC[a_]\[Rule]a];
      gf2=getGenOne[vlist[[1,2]]/. CC[a_]\[Rule]a];
      gf3=getGenOne[vlist[[1,3]]/. CC[a_]\[Rule]a];
      
      ff1=getFla[vlist[[1,1]] /. CC[a_]\[Rule]a];
      ff2=getFla[vlist[[1,2]]/. CC[a_]\[Rule]a];
      ff3=getFla[vlist[[1,3]]/. CC[a_]\[Rule]a];
      
      If[getColorRep[vlist[[1,1]]]===O,ind1=nix1;, ind1=gt1;];
      If[getColorRep[vlist[[1,2]]]===O,ind2=nix1;, ind2=gt2;];
      If[getColorRep[vlist[[1,3]]]===O,ind3=nix1;, ind3=gt3;];
      
      
      
      If[(vlist[[1,2]] /. {gt2\[Rule]gt1,ft2\[Rule]ft1})===vlist[[1,1]],
        start2=Hold[iter1];
        fstart2=Hold[fiter1];,
        start2=1;
        fstart2=1;
        ];
      
      If[(vlist[[1,3]] /. {gt3\[Rule]gt2,ft3\[Rule]ft2})===vlist[[1,2]],
        start3=Hold[iter2];
        fstart3=Hold[fiter2];,
        If[(vlist[[1,3]] /. {gt3\[Rule]gt1,ft3\[Rule]ft1})===vlist[[1,1]],
            start3=Hold[iter1];
            fstart3=Hold[fiter1];,
            start3=1;
            fstart3=1;
            ];
        ];
      
      If[FreeQ[vlist,Delta[gt1,gt2]]==False, start2=Hold[iter1]; 
        gf2=Hold[iter1]; ];
      If[FreeQ[vlist,Delta[gt1,gt3]]==False, start3=Hold[iter1]; 
        gf3=Hold[iter1];];
      If[FreeQ[vlist,Delta[gt2,gt3]]==False,start3=Hold[iter2]; 
        gf3=Hold[iter2];];
      
      If[FreeQ[vlist,Delta[ft1,ft2]]==False, fstart2=Hold[fiter1]; 
        ff2=Hold[fiter1]; ];
      If[FreeQ[vlist,Delta[ft1,ft3]]==False, fstart3=Hold[fiter1]; 
        ff3=Hold[fiter1];];
      If[FreeQ[vlist,Delta[ft2,ft3]]==False, fstart3=Hold[fiter2]; 
        ff3=Hold[fiter2];];
      
      value =vlist[[2]];
      temp={};
      
      For[iter1=1,iter1\[LessEqual]gf1,
        For[fiter1=1,fiter1\[LessEqual]ff1,
          For[iter2=ReleaseHold[start2],iter2\[LessEqual]ReleaseHold[gf2],
            
            For[fiter2=ReleaseHold[fstart2],
              fiter2\[LessEqual]ReleaseHold[ff2],
              
              For[iter3=ReleaseHold[start3],
                iter3\[LessEqual]ReleaseHold[gf3],
                
                For[fiter3=ReleaseHold[fstart3],
                  fiter3\[LessEqual]ReleaseHold[ff3],
                  
                  valueC =
                    value //. {ind1\[Rule]iter1,ind2\[Rule]iter2,
                        ind3\[Rule]iter3,ft1\[Rule]fiter1,ft2\[Rule]fiter2,
                        ft3\[Rule]fiter3};
                  If[valueC=!=0,
                     
                    temp = Join[
                          temp,{{Table[{vlist[[1,k]],k} //. {ind1\[Rule]iter1,
                                        ind2\[Rule]iter2,ind3\[Rule]iter3,
                                        ft1\[Rule]fiter1,ft2\[Rule]fiter2,
                                        ft3\[Rule]fiter3} //.subAlways /. 
                                  subPartWO,{k,1,Length[vlist[[1]]]}],
                              WOForm[valueC]}}]; 
                    ];
                  fiter3++;];
                iter3++;];
              fiter2++;];
            iter2++;];
          fiter1++;];
        iter1++;];
      Return[
        temp /. {gt1\[Rule]Index[Generation8,Ext[1]],
            gt2\[Rule]Index[Generation8,Ext[2]],
            gt3\[Rule]Index[Generation8,Ext[3]]}];
      ];


ExpandWHIZARD4[vlist_]:=
    Block[{i,j,gf1,gf2,gf3,gf4,start1,start2,start3,start4,iter1,iter2,iter3,
        iter4,ff1,ff2,ff3,ff4,fstart1,fstart2,fstart3,fstart4,fiter1,fiter2,
        fiter3,fiter4,temp},
      gf1=getGenOne[vlist[[1,1]]];
      gf2=getGenOne[vlist[[1,2]]];
      gf3=getGenOne[vlist[[1,3]]];
      gf4=getGenOne[vlist[[1,4]]];
      
      ff1=getFla[vlist[[1,1]]];
      ff2=getFla[vlist[[1,2]]];
      ff3=getFla[vlist[[1,3]]];
      ff4=getFla[vlist[[1,4]]];
      
      If[getColorRep[vlist[[1,1]]]===O,ind1=nix1;, ind1=gt1;];
      If[getColorRep[vlist[[1,2]]]===O,ind2=nix1;, ind2=gt2;];
      If[getColorRep[vlist[[1,3]]]===O,ind3=nix1;, ind3=gt3;];
      If[getColorRep[vlist[[1,4]]]===O,ind4=nix1;, ind4=gt4;];
      
      
      temp = {};
      value=vlist[[2]];
      
      
      If[(vlist[[1,2]] /. {gt2\[Rule]gt1,ft2\[Rule]ft1} )===vlist[[1,1]],
        start2=Hold[iter1];
        fstart2=Hold[fiter1];,
        start2=1;
        fstart2=1;
        ];
      
      If[(vlist[[1,3]] /. {gt3\[Rule]gt2,ft3\[Rule]ft2} )===vlist[[1,2]],
        start3=Hold[iter2];
        fstart3=Hold[fiter2];,
        If[(vlist[[1,3]] /. {gt3\[Rule]gt1,ft3\[Rule]ft1} )===vlist[[1,1]],
            start3=Hold[iter1];
            fstart3=Hold[fiter1];,
            start3=1;
            fstart3=1;
            ];
        ];
      
      
      If[(vlist[[1,4]] /. {gt4\[Rule]gt3,ft4\[Rule]ft3} )===vlist[[1,3]],
        start4=Hold[iter3];
        fstart4=Hold[fiter3];,
        If[(vlist[[1,4]] /. {gt4\[Rule]gt2,ft4\[Rule]ft2} )===vlist[[1,2]],
            start4=Hold[iter2];
            fstart4=Hold[fiter2];,
            
            If[(vlist[[1,4]] /. {gt4\[Rule]gt1,ft4\[Rule]ft1} )===
                  vlist[[1,1]],
                start4=Hold[iter1];
                fstart4=Hold[fiter1];,
                start4=1;
                fstart4=1;
                ];
            ];
        ];
      
      
      
      If[FreeQ[vlist,Delta[gt1,gt2]]==False,start2=Hold[iter1];
        gf2=Hold[iter1];];
      If[FreeQ[vlist,Delta[gt1,gt3]]==False,start3=Hold[iter1];
        gf3=Hold[iter1];];
      If[FreeQ[vlist,Delta[gt2,gt3]]==False,start3=Hold[iter2];
        gf3=Hold[iter2];];
      If[FreeQ[vlist,Delta[gt1,gt4]]==False,start4=Hold[iter1];
        gf4=Hold[iter1];];
      If[FreeQ[vlist,Delta[gt3,gt4]]==False,start4=Hold[iter3];
        gf4=Hold[iter3];];
      If[FreeQ[vlist,Delta[gt2,gt4]]==False,start4=Hold[iter2];
        gf4=Hold[iter2];];
      
      If[FreeQ[vlist,Delta[ft1,ft2]]==False,fstart2=Hold[fiter1];
        ff2=Hold[fiter1];];
      If[FreeQ[vlist,Delta[ft1,ft3]]==False,fstart3=Hold[fiter1];
        ff3=Hold[fiter1];];
      If[FreeQ[vlist,Delta[ft2,ft3]]==False,fstart3=Hold[fiter2];
        ff3=Hold[fiter2];];
      If[FreeQ[vlist,Delta[ft1,ft4]]==False,fstart4=Hold[fiter1];
        ff4=Hold[fiter1];];
      If[FreeQ[vlist,Delta[ft3,ft4]]==False,fstart4=Hold[fiter3];
        ff4=Hold[fiter3];];
      If[FreeQ[vlist,Delta[ft2,ft4]]==False,fstart4=Hold[fiter2];
        ff4=Hold[fiter2];];
      
      
      
      For[iter1=1,iter1\[LessEqual]gf1,
        For[fiter1=1,fiter1\[LessEqual]ff1,
          For[iter2=ReleaseHold[start2],iter2\[LessEqual]ReleaseHold[gf2],
            
            For[fiter2=ReleaseHold[fstart2],
              fiter2\[LessEqual]ReleaseHold[ff2],
              
              For[iter3=ReleaseHold[start3],
                iter3\[LessEqual]ReleaseHold[gf3],
                
                For[fiter3=ReleaseHold[fstart3],
                  fiter3\[LessEqual]ReleaseHold[ff3],
                  
                  For[iter4=ReleaseHold[start4],
                    iter4\[LessEqual]ReleaseHold[gf4],
                    
                    For[fiter4=ReleaseHold[fstart4],
                      fiter4\[LessEqual]ReleaseHold[ff4],
                      
                      temp = Join[
                          temp,{{Table[{vlist[[1,k]],k} //. {ind1\[Rule]iter1,
                                        ind2\[Rule]iter2,ind3\[Rule]iter3, 
                                        ind4\[Rule]iter4,ft1\[Rule]fiter1,
                                        ft2\[Rule]fiter2,ft3\[Rule]fiter3,
                                        ft4\[Rule]fiter4} //.subAlways/. 
                                  subPartWO,{k,1,Length[vlist[[1]]]}], 
                              WOForm[
                                value //. {ind1\[Rule]iter1,ind2\[Rule]iter2,
                                    ind3\[Rule]iter3,ind4\[Rule]iter4,
                                    ft1\[Rule]fiter1,ft2\[Rule]fiter2,
                                    ft3\[Rule]fiter3,ft4\[Rule]fiter4}]}}]; 
                      fiter4++;];
                    iter4++;];
                  fiter3++;];
                iter3++;];
              fiter2++;];
            iter2++;];
          fiter1++;];
        iter1++;];
      Return[
        temp/. {gt1\[Rule]Index[Generation8,Ext[1]],
            gt2\[Rule]Index[Generation8,Ext[2]],
            gt3\[Rule]Index[Generation8,Ext[3]],
            gt4\[Rule]Index[Generation8,Ext[4]]}];
      ];




CreateParamListWO:=Block[{i,temp,temp2, allDependences,j1,j2,j3},
      Print["Creating parameter List"];
      
      IParamList={};
      EParamList={};
      
      allDependences =Flatten[{subAlways,subNumDependences,subDependences}];
      
      For[i=1,i\[LessEqual]Length[parameters],
        If[(FreeQ[SA`ParNum,parameters[[i,1]]]\[Equal]False || 
              FreeQ[SA`ParDep,parameters[[i,1]]]\[Equal]False  || 
              FreeQ[SA`ParNeed ,parameters[[i,1]]]\[Equal]False),
          If[FreeQ[SA`ParDep,parameters[[i,1]]]\[Equal]False,
              Switch[Length[parameters[[i,2]]],
                  0,
                  	
                  IParamList=
                      Join[IParamList,{{parameters[[i,1]],
                            parameters[[i,1]] /. allDependences,
                            FreeQ[realVar,parameters[[i,1]]],
                            getDescriptionParameter[parameters[[i,1]]]}}];,
                  1,
                  	
                  IParamList = 
                      Join[IParamList,
                        Table[{parameters[[i,1]][j1],
                            parameters[[i,1]][j1] /. allDependences,
                            FreeQ[realVar,parameters[[i,1]]],
                            getDescriptionParameter[parameters[[i,1]]]<>" "<>
                              ToString[j1]},{j1,1,parameters[[i,3,1]]}]];,
                  2,
                  	
                  IParamList = 
                      Join[IParamList,
                        Flatten[
                          Table[{parameters[[i,1]][j1,j2],
                              parameters[[i,1]][j1,j2] /. allDependences,
                              FreeQ[realVar,parameters[[i,1]]],
                              getDescriptionParameter[parameters[[i,1]]]<>" "<>
                                ToString[j1]<>" "<>ToString[j2]},{j1,1,
                              parameters[[i,3,1]]},{j2,1,
                              parameters[[i,3,2]]}],1]];,
                  3,
                  	
                  IParamList = 
                      Join[IParamList,
                        Flatten[
                          Table[{parameters[[i,1]][j1,j2,j3],
                              parameters[[i,1]][j1,j2,j3] /. allDependences,
                              FreeQ[realVar,parameters[[i,1]]],
                              getDescriptionParameter[parameters[[i,1]]]<>" "<>
                                ToString[j1]<>" "<>ToString[j2]<>" "<>
                                ToString[j3]},{j1,1,parameters[[i,3,1]]},{j2,
                              1,parameters[[i,3,2]]},{j3,1,
                              parameters[[i,3,3]]}],2]];
                  ];,
              
              Switch[Length[parameters[[i,2]]],
                  0,
                  	EParamList=
                      Join[EParamList,{{LHBlockName[
                              parameters[[i,1]]],{{{1},{parameters[[i,1]],
                                  parameters[[i,1]] /. subNum /. 
                                    parameters[[i,1]]\[Rule]Random[],
                                  FreeQ[realVar,parameters[[i,1]]],
                                  getDescriptionParameter[
                                    parameters[[i,1]]]}}}}}];,
                  1,
                  	
                  EParamList = 
                      Join[EParamList,{{LHBlockName[parameters[[i,1]]],
                            Table[{{j1},{parameters[[i,1]][j1],
                                  parameters[[i,1]][j1] /. subNum /. 
                                    parameters[[i,1]][j1]\[Rule]Random[],
                                  FreeQ[realVar,parameters[[i,1]]],
                                  getDescriptionParameter[parameters[[i,1]]]<>
                                    " "<>ToString[j1]}},{j1,1,
                                parameters[[i,3,1]]}]}}];,
                  2,
                  	
                  EParamList = 
                      Join[EParamList,{{LHBlockName[parameters[[i,1]]],
                            Flatten[
                              Table[{{j1,j2},{parameters[[i,1]][j1,j2],
                                    parameters[[i,1]][j1,j2] /. subNum /. 
                                      parameters[[i,1]][j1,j2]\[Rule]Random[],
                                    FreeQ[realVar,parameters[[i,1]]],
                                    getDescriptionParameter[
                                        parameters[[i,1]]]<>" "<>ToString[j1]<>
                                      " "<>ToString[j2]}},{j1,1,
                                  parameters[[i,3,1]]},{j2,1,
                                  parameters[[i,3,2]]}],1]}}];,
                  3,
                  	
                  EParamList = 
                      Join[EParamList,{{LHBlockName[parameters[[i,1]]],
                            Flatten[
                              Table[{{j1,j2,j3},{parameters[[i,1]][j1,j2,j3],
                                    parameters[[i,1]][j1,j2,j3] /. subNum /. 
                                      parameters[[i,1]][j1,j2,
                                        j3]\[Rule]Random[],
                                    FreeQ[realVar,parameters[[i,1]]],
                                    getDescriptionParameter[
                                        parameters[[i,1]]]<>" "<>ToString[j1]<>
                                      " "<>ToString[j2]<>" "<>
                                      ToString[j3]}},{j1,1,
                                  parameters[[i,3,1]]},{j2,1,
                                  parameters[[i,3,2]]},{j3,1,
                                  parameters[[i,3,3]]}],2]}}];
                  ];
              ];
          ];
        i++;];
      
      IParamList = {};
      
      For[i=1,i\[LessEqual]Length[SA`ParDep],
        pos=Position[Transpose[parameters][[1]],SA`ParDep[[i]]][[1,1]];
        Switch[Length[parameters[[pos,2]]],
          0,
          	
          IParamList=
              Join[IParamList,{{parameters[[pos,1]],
                    parameters[[pos,1]] /. allDependences,
                    FreeQ[realVar,parameters[[pos,1]]],
                    getDescriptionParameter[parameters[[pos,1]]]}}];,
          1,
          	
          IParamList = 
              Join[IParamList,
                Table[{parameters[[pos,1]][j1],
                    parameters[[pos,1]][j1] /. allDependences,
                    FreeQ[realVar,parameters[[pos,1]]],
                    getDescriptionParameter[parameters[[pos,1]]]<>" "<>
                      ToString[j1]},{j1,1,parameters[[pos,3,1]]}]];,
          2,
          	
          IParamList = 
              Join[IParamList,
                Flatten[
                  Table[{parameters[[pos,1]][j1,j2],
                      parameters[[pos,1]][j1,j2] /. allDependences,
                      FreeQ[realVar,parameters[[pos,1]]],
                      getDescriptionParameter[parameters[[pos,1]]]<>" "<>
                        ToString[j1]<>" "<>ToString[j2]},{j1,1,
                      parameters[[pos,3,1]]},{j2,1,parameters[[pos,3,2]]}],
                  1]];,
          3,
          	
          IParamList = 
              Join[IParamList,
                Flatten[
                  Table[{parameters[[pos,1]][j1,j2,j3],
                      parameters[[pos,1]][j1,j2,j3] /. allDependences,
                      FreeQ[realVar,parameters[[pos,1]]],
                      getDescriptionParameter[parameters[[pos,1]]]<>" "<>
                        ToString[j1]<>" "<>ToString[j2]<>" "<>
                        ToString[j3]},{j1,1,parameters[[pos,3,1]]},{j2,1,
                      parameters[[pos,3,2]]},{j3,1,parameters[[pos,3,3]]}],
                  2]];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[AllParticlesWHO],
        For[j=1,j\[LessEqual]getGenOne[AllParticlesWHO[[i]]],
          If[getMassNumerical[particles[[i]],j]===Internal,
            IParamList = Join[IParamList,{{
                      getMass[particles[[i]],j],
                      getMassNumerical[particles[[i]],j,
                        ReturnEquation\[Rule]True],True,
                      "Mass of "<>ToString[AllParticlesWHO[[i]]]
                      }}];
            ];
          j++;];
        i++;];
      
      
      temp=IParamList; 
      parDepExpanded={};
      
       While[temp=!={},
        tempNew={};
        For[i=1,i\[LessEqual]Length[temp],
          
          par=Cases[{temp[[i,2]]}/. Mass[a__]:>Random[] /. 
                A_[b__Pattern]\[Rule]A,x_Symbol,5];
          
          remaining=
            Table[temp[[k,1]]/. Mass[a__]\[Rule]Random[],{k,i+1,
                Length[temp]}];
          add=True;
          For[j=1,j\[LessEqual]Length[par],
            If[FreeQ[remaining,par[[j]]]\[Equal]False,
              add=False;
              ];
            j++;];
          If[add\[Equal]False,
            tempNew=Join[tempNew,{temp[[i]]}];,
            parDepExpanded=Join[parDepExpanded,{temp[[i]]}];
            ];
          i++;];
        temp=tempNew;
         ]; 
      
      
      IParamList=parDepExpanded;
      (*
        
        IParamList = 
          WOForm/@(IParamList /. 
                Mass[x_,b___]\[RuleDelayed]
                  getMass[
                    If[Head[getOutputName[x]]===List,getOutputName[x][[1]],
                      getOutputName[x]],b]);
        EParamList = 
          WOForm/@(EParamList /. 
                Mass[x_,b___]\[RuleDelayed]getMass[
                    If[Head[getOutputName[x]]===List,getOutputName[x][[1]],
                      getOutputName[x]],b]);
        *)
      
      IParamList = 
        WOForm/@(IParamList /. Mass[x_,b___]\[RuleDelayed]getMassW[x,b]);
      EParamList = 
        WOForm/@(EParamList /. Mass[x_,b___]\[RuleDelayed]getMassW[x,b]);
      
      ];  


CreatePartListWO:=Block[{i,j,k,temp,temp2,particle},
      
      Print["Creating particle List"];
      
      particles=
        Flatten[{Transpose[PART[F]][[1]],Transpose[PART[S]][[1]],
            Transpose[PART[V]][[1]]}];
      DummyPDG=999900;
      AutoFAnr = 1;
      PartListFR={};
      MassListFR={};
      WidthListFR={};
      subPartWO={};
      AllParticlesWHO=particles;
      
      For[i=1,i\[LessEqual]Length[particles],
        temp2={};
        For[j=1,j\[LessEqual]getGenOne[particles[[i]]],
          For[k=1,k\[LessEqual]getFla[particles[[i]]],
            temp2=Join[temp2,{{
                    ToString[getOutputName[particles[[i]],j,k]],
                    ToString[getOutputNameAnti[particles[[i]],j,k]],
                    getType[particles[[i]]],
                    getPropagatorType[particles[[i]]],
                    getMassW[particles[[i]],j,k],
                    getWidthW[particles[[i]],j,k],
                    getColorRep[particles[[i]]],
                    getOutputName[particles[[i]],j,k],
                    getPDG[particles[[i]],j,k] /. 0\[RuleDelayed]DummyPDG++,
                    getDescriptionField[particles[[i]],j,k],
                    getLaTeXField[particles[[i]],j,k],
                    getLaTeXField[AntiField[particles[[i]]],j,k],
                    CheckGoldstone[particles[[i]],j,k]
                    }}];
            
            MassListFR = 
              Join[MassListFR,{{{Abs[getPDG[particles[[i]],j,k]]},
                    getMassW[particles[[i]],j,k],
                    getMassNumerical[particles[[i]],j,k]}}] ;
            
            WidthListFR = 
              Join[WidthListFR,{{{Abs[getPDG[particles[[i]],j,k]]},
                    getWidthW[particles[[i]],j,k],
                    getWidthNumerical[particles[[i]],j,k]}}];
            
            If[getGenOne[particles[[i]]]>1,
              If[getFla[particles[[i]]]>1,
                  
                  subPartWO = 
                    Join[subPartWO,{AntiField[
                            particles[[i]][{j,k,a___}]]\[Rule]
                          getOutputNameAnti[particles[[i]],j,k]}];
                  
                  subPartWO = 
                    Join[subPartWO,{particles[[i]][{j,k,
                              a___}]\[Rule]getOutputName[particles[[i]],j,
                            k]}];,
                  
                  subPartWO = 
                    Join[subPartWO,{AntiField[
                            particles[[i]][{j,a___}]]\[Rule]getOutputNameAnti[
                            particles[[i]],j,k]}];
                  
                  subPartWO = 
                    Join[subPartWO,{particles[[i]][{j,
                              a___}]\[Rule]getOutputName[particles[[i]],j,
                            k]}];
                  ];,
              If[Length[getIndizes[particles[[i]]]]>0,
                  
                  subPartWO = 
                    Join[subPartWO,{AntiField[
                            particles[[i]][{a___}]]\[Rule]getOutputNameAnti[
                            particles[[i]],j,k]}];
                  
                  subPartWO = 
                    Join[subPartWO,{particles[[i]][{a___}]\[Rule]\
getOutputName[particles[[i]],j,k]}];,
                  
                  subPartWO = 
                    Join[subPartWO,{AntiField[
                            particles[[i]]]\[Rule]getOutputNameAnti[
                            particles[[i]],j,k]}];
                  
                  subPartWO = 
                    Join[subPartWO,{particles[[i]]\[Rule]getOutputName[
                            particles[[i]],j,k]}];
                  ];
              ];
            k++;];
          j++;];
        PartListFR=
          Join[PartListFR,{{{getType[particles[[i]]][
                    FANumber[particles[[i]]]],
                  getOutputName[particles[[i]],0]},temp2}}];
        i++;];
      
      PartListFR = 
        PartListFR /. {Straight \[Rule] S,Sine \[Rule] W, ScalarDash\[Rule]D, 
              GhostDash\[Rule]C} /. 0\[Rule]ZERO;
      
      MassListFR = 
        Select[MassListFR,(FreeQ[#,0]\[Equal]True)&] /. {LesHouches \[Rule] 
                External, Mass \[Rule]External} /. External \[Rule] 100;
      WidthListFR = 
        Select[WidthListFR,(FreeQ[#,0]\[Equal]True)&] /. {Width \[Rule]
                External} /. External \[Rule]1;
      
      ];

getColorRep[x_]:=Block[{},
      If[FreeQ[getIndizes[getBlank[x]],color]\[Equal]True,
          If[FreeQ[ColoredGaugeParticles,getBlank[x]]\[Equal]True,
              Return[S];,
              Return[O];
              ];,
          Return[T];
          ];
      ];

CheckGoldstone[field_,gen_,fla___]:=Block[{pos,temp},
      temp = 
        field /. {bar[x_]\[Rule]x, conj[x_]\[Rule]x} /. A_[{a___}]\[Rule]A;
      If[getType[temp]=!=S,Return[NoGS]];
      If[getGen[temp]>1,
        If[FreeQ[GoldstoneGhost,temp[{gen}]],
            Return[NoGS];,
            pos=Position[GoldstoneGhost,temp][[1,1]];
            Return[getOutputName[GoldstoneGhost[[pos]][[1]],1]];
            ];,
        If[FreeQ[GoldstoneGhost,temp],
            Return[NoGS];,
            pos=Position[GoldstoneGhost,temp][[1,1]];
            Return[getOutputName[GoldstoneGhost[[pos]][[1]],1]];
            ];
        ];
      ];

getMass[field_]:=getMass[field,1,1];
getWidth[field_]:=getWidth[field,1,1];

getMassW[field_]:=getMassW[field,1,1];
getWidthW[field_]:=getWidthW[field,1,1];

getMassW[field_,gen_]:=getMassW[field,gen,1];
getWidthW[field_,gen_]:=getWidthW[field,gen,1];

getWidthW[field_,gen_,fla_]:=getMassWidthOutputName[field,gen,fla,"W"];
getMassW[field_,gen_,fla_]:=getMassWidthOutputName[field,gen,fla,"M"];

(*
  getWidthW[field_,gen_,fla___]:=Block[{outname},
      If[FreeQ[massless,field]\[Equal]False,Return[0]];
      If[CheckGoldstone[field,gen]===NoGS,
        outname=getOutputName[field];
        If[Head[outname]===List,
          Return[getWidth[outname[[1]],gen,fla]];,
          Return[getWidth[outname,gen,fla]];
          ];,
        Return[0];
        ];
      ];
  
  getMassW[field_,gen_,fla___]:=Block[{outname},
      If[FreeQ[massless,field]\[Equal]False,Return[0]];
      If[CheckGoldstone[field,gen]===NoGS,
        outname=getOutputName[field];
        If[Head[outname]===List,
          Return[getMass[outname[[1]],gen,fla]];,
          Return[getMass[outname,gen,fla]];
          ];,
        Return[0];
        ];
      ];
  *)





