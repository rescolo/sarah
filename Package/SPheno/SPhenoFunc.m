(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)


(* Generating Module Elements *)

MakeFunction[name_,possibleParameters_, additionalParameters1_,
      additionalParameters2_, string_, file_]:=Block[{i, TitleSubroutine},
      
      TitleSubroutine = string<>" "<> name <>"(";
      
      For[i=1,i\[LessEqual]Length[additionalParameters1],
        TitleSubroutine = 
          TitleSubroutine  <> additionalParameters1[[i]] <>","; 
        i++;];
      
      For[i=1,i\[LessEqual]Length[possibleParameters],
        TitleSubroutine = 
          TitleSubroutine <>SPhenoForm[possibleParameters[[i]]];
        TitleSubroutine = TitleSubroutine <>",";
        i++;];
      
      For[i=1,i\[LessEqual]Length[additionalParameters2],
        TitleSubroutine = 
          TitleSubroutine  <> additionalParameters2[[i]] <>","; 
        i++;];
      
      TitleSubroutine = StringDrop[TitleSubroutine,-1] <>")";
      WriteString[file,FortranLineBreak[TitleSubroutine,1]<>"\n\n"];
      
      ];

MakeSubroutineTitle[name_,possibleParameters_, additionalParameters1_,
      additionalParameters2_,file_]:=
    MakeFunction[name,possibleParameters, additionalParameters1,
      additionalParameters2,"Subroutine",file];

MakeCall[name_,possibleParameters_, additionalParameters1_,
    additionalParameters2_,file_]:=
  MakeFunction[name,possibleParameters, additionalParameters1,
    additionalParameters2,"Call",file]

MakeVariableList[PossibleParameters_,string_,file_]:=Block[{i,j, NewString},
      StringReal="";
      StringComplex="";
      
      For[i=1,i\[LessEqual]Length[PossibleParameters],
        NewString = "";
        NewString=NewString <> SPhenoForm[PossibleParameters[[i]]];
        dimP=getDimSPheno[PossibleParameters[[i]]];
        If[dimP=!={1} && dimP=!={},
          NewString = NewString <>"(";
          For[j=1,j\[LessEqual] Length[dimP],
            NewString = NewString <>ToString[dimP[[j]]] <>",";
            j++;];
          NewString = StringDrop[NewString,-1]<>")";
          ];
        
        If[MemberQ[realVar,PossibleParameters[[i]]]\[Equal]False,
          StringComplex = StringComplex<> NewString <>",";,
          StringReal = StringReal<> NewString<>",";
          ];
        i++;];
      
      If[StringReal=!="", 
        StringRealHead = "Real(dp)" <> string <> " :: ";
        StringReal =  StringDrop[StringReal,-1];
        StringReal = FortranLineBreakInterrupt[StringReal,0];
        For[i=1,i\[LessEqual]Length[StringReal],
          WriteString[file,StringRealHead <>StringReal[[i]]<>"\n\n"];
          i++;];
        ];
      
      If[StringComplex=!="", 
        StringComplexHead ="Complex(dp)" <> string <> " :: ";
        StringComplex = StringDrop[StringComplex,-1];
        StringComplex = FortranLineBreakInterrupt[StringComplex,0];
        For[i=1,i\[LessEqual]Length[StringComplex],
          WriteString[file,StringComplexHead <>StringComplex[[i]]<>"\n\n"];
          i++;];
        ];
      
      Return[{StringReal,StringComplex}];
      ];

AddDim[x_]:=Block[{j,dimP,NewString},
      NewString = "";
      dimP=getDimSPheno[x];
      If[dimP=!={1} && dimP=!={},
        NewString = NewString <>"(";
        For[j=1,j\[LessEqual] Length[dimP],
          NewString = NewString <>ToString[dimP[[j]]] <>",";
          j++;];
        NewString = StringDrop[NewString,-1]<>")";
        ];
      Return[NewString];
      ];

AddDimAdj[x_]:=Block[{j,dimP,NewString},
      NewString = "";
      dimP=Reverse[getDimSPheno[x]];
      If[dimP=!={1} && dimP=!={},
        NewString = NewString <>"(";
        For[j=1,j\[LessEqual] Length[dimP],
          NewString = NewString <>ToString[dimP[[j]]] <>",";
          j++;];
        NewString = StringDrop[NewString,-1]<>")";
        ];
      Return[NewString];
      ];

AddDimNames[x_]:=Block[{i,j,dimP,NewString},
      NewString = "";
      dimP=getIndexRangeSPheno[x];
      NewString = NewString <>"(";
      For[i=1,i\[LessEqual]Length[dimP],
        For[j=1,j\[LessEqual]Length[dimP[[i]]],
          
          NewString = 
            NewString <>
              ToString[dimP[[i,j,1]] /. subGC[i] /. subIndFinal[i,i] ] <>",";
          j++;];
        i++;];
      
      If[NewString==="(",
        Return[""];,
        NewString = StringDrop[NewString,-1]<>")";
        ];
      Return[NewString];
      
      ];

getSPhenoCoupling[x_]:=getSPhenoCoupling[x,SPhenoCouplingsAll];

getSPhenoCoupling[x_,SPhenoCouplings_]:=Block[{},
      func = x /. Cp[a__]\[Rule]C[a] /. A_[{a__}]\[Rule]A;
      
      If[FreeQ[SPhenoCouplings,func]\[Equal]False,
        pos=Position[SPhenoCouplings,func];
        cList=Extract[SPhenoCouplings,pos[[1,1]]][[2]];
        pList=Last[Extract[SPhenoCouplings,pos[[1,1]]]];
        Return[{Delete[cList,1],pList}];,
        pos=Position[SPhenoCouplings,ConjCoupling[func]];
        cList=Extract[SPhenoCouplings,pos[[1,1]]][[2]];
        pList=Map[AntiField,Last[Extract[SPhenoCouplings,pos[[1,1]]]]];
        Return[{Delete[cList,1],pList}];
        ];
      
      ];


getSPhenoCoupling2[x_,SPhenoCouplings_]:=Block[{},
      func = x /. Cp[a__]\[Rule]C[a] /. A_[{a__}]\[Rule]A;
      
      If[FreeQ[SPhenoCouplings,func]\[Equal]False,
        pos=Position[SPhenoCouplings,func];
        cList=Extract[SPhenoCouplings,pos[[1,1]]][[2]];
        pList=Last[Extract[SPhenoCouplings,pos[[1,1]]]];
        Return[{Delete[cList,1],pList}];,
        pos=Position[SPhenoCouplings,ConjCoupling[func]];
        cList=Extract[SPhenoCouplings,pos[[1,1]]][[2]];
        pList=Last[Extract[SPhenoCouplings,pos[[1,1]]]];
        Return[{Delete[cList,1],pList}];
        ];
      
      ];


ConjCoupling[x_]:=Apply[C,Map[AntiField,x]];

AddDimNames2[x_]:=Block[{i,j,dimP,NewString},
      NewString = "";
      dimP={getIndexRangeSPheno[x]};
      NewString = NewString <>"(";
      For[i=1,i\[LessEqual]Length[dimP],
        For[j=1,j\[LessEqual]Length[dimP[[i]]],
          
          NewString = 
            NewString <>
              ToString[dimP[[i,j,1]] /. subGC[i] /. subIndFinal[i,i] ] <>",";
          j++;];
        i++;];
      
      If[NewString==="(",
        Return[""];,
        NewString = StringDrop[NewString,-1]<>")";
        ];
      Return[NewString];
      
      ];


(* Sums and Loops *)


OpenDoes[x_,file_]:=Block[{i,j,k},
      openDo=0;
      For[i=1,i\[LessEqual]Length[x],
        For[j=1,j\[LessEqual]Length[x[[i]]],
          For[k=1,k\[LessEqual]openDo,
            WriteString[file, " "];
            k++;];
          
          WriteString[file,
            "Do "<> ToString[x[[i,j,1]] /. subGC[i] /.subIndFinal[i,i]] <>
              " = 1, " <>ToString[x[[i,j,2]]] <>"\n" ];
          openDo++;
          j++;];
        i++;];
      ];


OpenDoes2[x_,file_]:=Block[{i,j,k},
      openDo2=0;
      For[i=1,i\[LessEqual]Length[x],
        For[j=1,j\[LessEqual]Length[x[[i]]],
          For[k=1,k\[LessEqual]openDo2,
            WriteString[file, " "];
            k++;];
          
          WriteString[file,
            "Do "<> ToString[x[[i,j,1]] /. subGC[i] /.subIndFinal[i,i]] <>
              " = 1, " <>ToString[x[[i,j,2]]] <>"\n" ];
          openDo2++;
          j++;];
        i++;];
      ];


OpenDoName[x_,file_]:=Block[{},
      openDo=0;
      If[getDimParameters[x]=!={1} && getDimParameters[x]=!={},
        dimP=getDimParameters[x];
        For[k=1,k\[LessEqual]Length[dimP],
          
          WriteString[sphenoRGE, 
            "Do i"<>ToString[k]<>" = 1,"<>ToString[dimP[[k]]]<>"\n"];
          openDo++;
          k++;];
        Switch[Length[dimP],
          1,IndexString="(i1)";,
          2,IndexString="(i1,i2)";,
          3,IndexString="(i1,i2,i3)";
          ];,
        IndexString="";
        ];
      
      ];

OpenDoName2[x_,file_]:=Block[{},
      openDo2=0;
      If[getDimParameters[x]=!={1} && getDimParameters[x]=!={},
        dimP=getDimParameters[x];
        For[k=1,k\[LessEqual]Length[dimP],
          
          WriteString[sphenoRGE, 
            "Do i"<>ToString[k]<>" = 1,"<>ToString[dimP[[k]]]<>"\n"];
          openDo2++;
          k++;];
        Switch[Length[dimP],
          1,IndexString="(i1)";,
          2,IndexString="(i1,i2)";,
          3,IndexString="(i1,i2,i3)";
          ];,
        IndexString="";
        ];
      
      ];

CloseDoes[file_]:=Block[{i,j},
      For[i=1,i\[LessEqual]openDo,
          For[k=1,k\[LessEqual]openDo-i,
            WriteString[file, " "];
            k++;];
          WriteString[file, "End Do \n"];
          i++];
      ];

CloseDoes2[file_]:=Block[{i,j},
      For[i=1,i\[LessEqual]openDo2,
          For[k=1,k\[LessEqual]openDo2-i,
            WriteString[file, " "];
            k++;];
          WriteString[file, "End Do \n"];
          i++];
      ];

a_*sumSPheno[b_,c_,d_,e_] ^=sumSPheno[b,c,d,a*e];


(* Names and Indices *)

MakeIndices[x_]:=Block[{i,j},
      newString="";
      For[i=1,i\[LessEqual]Length[x],
        For[j=1,j\[LessEqual]Length[x[[i]]],
          
          newString = 
            newString <>  
              ToString[x[[i,j,1]] /. subGC[i] /. subIndFinal[i,i]] <>",";
          j++;];
        i++;];
      
      If[newString=!="",
        newString = "(" <>StringDrop[newString,-1] <>")";
        ];
      Return[newString];
      
      ];


MakeIndicesCoupling[{p1_,in1_},{p2_,in2_},{p3_,in3_},proc_]:=
  MakeIndicesCoupling[{p1,in1},{p2,in2},{p3,in3},proc,False]

MakeIndicesCoupling[{p1_,in1_},{p2_,in2_},{p3_,in3_},proc_, adjoint_]:=
    Block[{pListTemp={},indexListTemp={},n2,i,HC,indRange={}},
      
      (*
        pListTemp = Select[{p1,p2,p3},(getGenSPheno[#1]>1)&];
        indexListTemp = 
          Transpose[
              Select[{{p1,in1},{p2,in2},{p3,
                    in3}},(getGenSPheno[#1[[1]]]>1)&]][[2]]; *)
      
      If[getGenSPheno[p1]>1,
        pListTemp = Join[pListTemp,{p1}];
        indexListTemp = Join[indexListTemp,{in1}];
        ];
      
      If[getGenSPheno[p2]>1,
        pListTemp = Join[pListTemp,{p2}];
        indexListTemp = Join[indexListTemp,{in2}];
        ];
      
      If[getGenSPheno[p3]>1,
        pListTemp = Join[pListTemp,{p3}];
        indexListTemp = Join[indexListTemp,{in3}];
        ]; 
      
      indRange={};
      
      procTemp=proc /. a_[{x__}]\[Rule]a;
      
      If[adjoint\[Equal]True,
        procTemp = getConjugatedVertex[procTemp];
        ];
      
      
      (* If[FreeQ[procTemp,p1] || FreeQ[procTemp,p2] || FreeQ[procTemp,p3],
            procTemp=getConjugatedVertex[procTemp];
            HC=True;,
            HC=False;
            ]; *)
      
      
      If[C@@procTemp=!=C@@{p1,p2,p3},
        procTemp=getConjugatedVertex[procTemp];
        HC=True;,
        HC=False;
        ]; 
      
      For[n2=1,n2\[LessEqual]3,
        pos= Position[pListTemp,procTemp[[n2]],1];
        If[pos=!={} && getGenSPheno[proc[[n2]]]>1,
          indRange = Join[indRange,{Extract[indexListTemp,pos[[1,1]]]}];
          pListTemp = Delete[pListTemp,pos[[1,1]]];
          indexListTemp = Delete[indexListTemp,pos[[1,1]]];,
          If[getGenSPheno[proc[[n2]]]>1,
              Print["Not Found",procTemp[[n2]], procTemp,{p1,p2,p3}];
              ];
          ];
        n2++;];
      
      
      If[Length[indRange]\[GreaterEqual] 1,
        ind="(";
        For[n2=1,n2\[LessEqual]Length[indRange],
          ind = ind <> ToString[indRange[[n2]]];
          If[n2 =!= Length[indRange],ind=ind<>",";,ind=ind<>")";];
          n2++;];,
        ind="";
        ];
      
      Return[{ind,HC}];
      ];

getConjugatedVertex[vertex_]:= Map[AntiField,vertex];

getCorrespondingIndices[{p1_,n1_},{p2_,n2_},{p3_,n3_},q1_,q2_,q3_]:=
    Block[{i,listOrg,Norg,listFin,NFinCorr},
      listOrg={p1,p2,p3};
      Norg={n1,n2,n3};
      listFin={q1,q2,q3};
      NFinCorr={};
      
      For[i=1,i\[LessEqual]3,
        pos=Position[listOrg,listFin[[i]],1][[1,1]];
        NFinCorr=Join[NFinCorr,{Extract[Norg,pos]}];
        listOrg=Delete[listOrg,pos];
        Norg=Delete[Norg,pos];
        i++;];
      Return[NFinCorr];
      ];



MakeIndicesCoupling[{p1a_,in1a_},{p1b_,in1b_},{p2_,in2_},{p3_,in3_},proc_]:=
    Block[{pListTemp,indexListTemp,n2,i},
      pListTemp={};
      indexListTemp={};
      
      If[getGenSPheno[p1a]>1,
        pListTemp = Join[pListTemp,{AntiField[p1a]}];
        indexListTemp = Join[indexListTemp,{in1a}];
        ];
      
      If[getGenSPheno[p1b]>1,
        pListTemp = Join[pListTemp,{p1b}];
        indexListTemp = Join[indexListTemp,{in1b}];
        ];
      
      If[getGenSPheno[p2]>1,
        pListTemp = Join[pListTemp,{p2}];
        indexListTemp = Join[indexListTemp,{in2}];
        ];
      
      If[getGenSPheno[p3]>1,
        pListTemp = Join[pListTemp,{p3}];
        indexListTemp = Join[indexListTemp,{in3}];
        ];
      
      indRange={};
      
      For[n2=1,n2\[LessEqual]4,
        pos= Position[pListTemp,proc[[n2]] /. a_[{x__}]\[Rule]a,1];
        If[pos=!={} && getGenSPheno[proc[[n2]]]>1,
          indRange = Join[indRange,{Extract[indexListTemp,pos[[1,1]]]}];
          pListTemp = Delete[pListTemp,pos[[1,1]]];
          indexListTemp = Delete[indexListTemp,pos[[1,1]]];
          ];
        n2++;];
      
      
      
      If[Length[indRange]\[GreaterEqual] 1,
        ind="(";
        For[n2=1,n2\[LessEqual]Length[indRange],
          ind = ind <> ToString[indRange[[n2]]];
          If[n2 =!= Length[indRange],ind=ind<>",";,ind=ind<>")";];
          n2++;];,
        ind="";
        ];
      
      Return[ind];
      ];


SPhenoMass[x_]:=
    If[FreeQ[massless,getBlank[x]]\[Equal]True,
      Return[ToExpression[
            "M"<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]]];,
      Return[0.]];
SPhenoMassSq[x_]:=
    If[FreeQ[massless,getBlank[x]]\[Equal]True,
      Return[ToExpression[ToString[SPhenoMass[x]]<>"2"]];,Return[0.]];
SPhenoMass[x_,nr_]:=Block[{},
      If[getGenSPheno[x]>1 && FreeQ[massless,getBlank[x]]\[Equal]True,
          Return[ToString[SPhenoMass[x]]<>"("<>ToString[nr]<>")" ];,
          Return[ToString[SPhenoMass[x]]];
          ];
      ];

SPhenoWidth[x_]:=
    If[FreeQ[massless,getBlank[x]]\[Equal]True,
      Return[ToExpression[
            "gT"<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]]];,
      Return[0.]];

SPhenoPartialWidth[x_]:=
    If[FreeQ[massless,getBlank[x]]\[Equal]True,
      Return[ToExpression[
            "gP"<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]]];,
      Return[0.]];
SPhenoBR[x_]:=
    If[FreeQ[massless,getBlank[x]]\[Equal]True,
      Return[ToExpression[
            "BR"<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]]];,
      Return[0.]];

SPhenoWidth[x_,nr_]:=Block[{},
      If[getGenSPheno[x]>1 && FreeQ[massless,getBlank[x]]\[Equal]True,
          Return[ToString[SPhenoWidth[x]]<>"("<>ToString[nr]<>")" ];,
          Return[ToString[SPhenoWidth[x]]];
          ];
      ];

SPhenoRatioPseudo[x_,nr_]:=SPhenoRatioFun[x,nr,"ratP"];
SPhenoRatio[x_,nr_]:=SPhenoRatioFun[x,nr,"rat"];

SPhenoRatioFun[x_,nr_,string_]:=Block[{},
      If[getGenSPheno[x]>1 && FreeQ[massless,getBlank[x]]\[Equal]True,
          Return[
              string<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]<>"("<>
                ToString[nr]<>")" ];,
          
          Return[string<>
                ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]];
          ];
      ];

SPhenoRatioPseudoHB[x_,nr1_,nr2_]:=SPhenoHiggsBoundRatio[x,nr1,nr2,"rHB_P_"];
SPhenoRatioHB[x_,nr1_,nr2_]:=SPhenoHiggsBoundRatio[x,nr1,nr2,"rHB_S_"];
SPhenoRatioPseudoHBS[x_,nr1_,nr2_]:=
    SPhenoHiggsBoundRatio[x,nr1,nr2,"rHB_P_S_"];
SPhenoRatioPseudoHBP[x_,nr1_,nr2_]:=
    SPhenoHiggsBoundRatio[x,nr1,nr2,"rHB_P_P_"];
SPhenoRatioHBS[x_,nr1_,nr2_]:=SPhenoHiggsBoundRatio[x,nr1,nr2,"rHB_S_S_"];
SPhenoRatioHBP[x_,nr1_,nr2_]:=SPhenoHiggsBoundRatio[x,nr1,nr2,"rHB_S_P_"];

SPhenoHiggsBoundRatio[x_,nr1_,nr2_,string_]:=Block[{},
      If[getGenSPheno[x]>1 && FreeQ[massless,getBlank[x]]\[Equal]True,
          
          Return[string<>
                ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]<>"("<>
                ToString[nr1]<>","<>ToString[nr2]<>")" ];,
          
          Return[string<>
                ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]<>"("<>
                ToString[nr1]<>")"];
          ];
      ];

SPhenoRatioSave[x_,nr1_,nr2_]:=Block[{},
      If[getGenSPheno[x]>1 && FreeQ[massless,getBlank[x]]\[Equal]True,
          
          Return["ratio"<>ToString[
                  getBlank[x] /.diracSubBack1 /.diracSubBack2]<>"("<>
                ToString[nr1]<>","<>ToString[nr2]<>")" ];,
          
          Return["ratio"<>ToString[
                  getBlank[x] /.diracSubBack1 /.diracSubBack2]<>"("<>
                ToString[nr1]<>")"];
          ];
      ];


SPhenoRatioSavePseudo[x_,nr1_,nr2_]:=Block[{},
      If[getGenSPheno[x]>1 && FreeQ[massless,getBlank[x]]\[Equal]True,
          
          Return["ratioP"<>ToString[
                  getBlank[x] /.diracSubBack1 /.diracSubBack2]<>"("<>
                ToString[nr1]<>","<>ToString[nr2]<>")" ];,
          
          Return["ratioP"<>ToString[
                  getBlank[x] /.diracSubBack1 /.diracSubBack2]<>"("<>
                ToString[nr1]<>")"];
          ];
      ];

SPhenoPartialWidth[x_,nr_,nr2_]:=Block[{},
      If[getGenSPheno[x]>1,
          
          Return["gP"<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]<>
                  "("<>ToString[nr]<>","<>ToString[nr2]")" ];,
          
          Return["gP"<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]<>
                  "(1,"<>ToString[nr2]")"];
          ];
      ];


SPhenoBR[x_,nr_,nr2_]:=Block[{},
      If[getGenSPheno[x]>1,
          
          Return["BR"<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]<>
                "("<>ToString[nr]<>","<>ToString[nr2]<>")" ];,
          
          Return["BR"<>ToString[getBlank[x] /.diracSubBack1 /.diracSubBack2]<>
                "(1,"<>ToString[nr2]<>")"];
          ];
      ];

SPhenoPDG[x_,nr_]:=Block[{},
      If[getGenSPheno[x]>1,
          Return["PDG"<>ToString[getBlank[x]]<>"("<>ToString[nr]<>")" ];,
          Return["PDG"<>ToString[getBlank[x]]];
          ];
      ];

SPhenoNameArray[x_,nr_]:=Block[{},
      If[getGenSPheno[x]>1,
          
          Return["NameParticle"<>ToString[getBlank[x]]<>"("<>ToString[nr]<>
                ")" ];,
          Return["NameParticle"<>ToString[getBlank[x]]];
          ];
      ];


SPhenoPDG[x_]:=Block[{},
      Return[ToExpression["PDG"<>ToString[getBlank[x]]]];
      ];

SPhenoPhase[x_] :=Block[{},
      If[FreeQ[Gauginos,x]\[Equal]True,
          Return[0];,
          Return[ToExpression["Phase"<>ToString[x]]];
          ];
      ];




(*
  getPDG[x_,y_]:=Block[{pos},
        pos=Position[PDGList,x][[1,1]];
        If[Length[Extract[PDGList,pos][[2]]]>1,
          Return[Extract[PDGList,pos][[2,y]]];,
          Return[Extract[PDGList,pos][[2,1]]];
          ];
        ];
  *)

SPhenoMassSq[x_,nr_]:=Block[{},
      If[getGenSPheno[x]>1 && FreeQ[massless,getBlank[x]]\[Equal]True,
          Return[ToString[SPhenoMass[x]]<>"2("<>ToString[nr]<>")" ];,
          If[FreeQ[massless,getBlank[x]]\[Equal]True,
              Return[ToString[SPhenoMass[x]]<>"2"];,
              Return["0._dp"];
              ];
          ];
      ];

MakeSquaredMass[x_]:=ToExpression[ToString[x]<>"2"];


getGenSPhenoStart[x_]:=Block[{part},
      part=getBlank[x];
      If[FreeQ[Transpose[GoldstoneGhost][[2]],part]\[Equal]True,
        Return[1];,
        Return[2];
        ];
      ];

getGenSPheno[x_]:=Block[{part},
      If[FreeQ[GaugeMassES,getBlank[x]]\[Equal]False,
        part=
            Extract[GaugeMassESorg,
              Position[GaugeMassES,getBlank[x]][[1,1]]];,
        part=getBlank[x];
        ];
      If[FreeQ[Gauginos,part]\[Equal]False || 
          FreeQ[bosons,part]\[Equal]False,
        Return[1];,
        Return[getGen[part]];
        ];
      ];

getRotatedField[x_]:=
    If[FreeQ[GaugeMassES,getBlank[x]]\[Equal]False,
      Return[Extract[GaugeMassESorg,
            Position[GaugeMassES,getBlank[x]][[1,1]]]];,
      Return[x];];

SPhenoCouplingLeft[x_]:=ToExpression[ShortCoup[CouplingName[x]]<>"L"];
SPhenoCouplingRight[x_]:=ToExpression[ShortCoup[CouplingName[x]]<>"R"];
SPhenoCoupling[x_] :=ToExpression[ShortCoup[CouplingName[x]]];

ShortCoup[x_]:=StringReplace[x,"Coupling"->"cpl"];

SPhenoShortName[x_]:=Block[{temp},
      temp="";
      If[Head[x]===conj ||Head[x]===bar,
        temp =temp<>"c";
        ];
      Return[temp<>ToString[RE[x]]];
      ];


CouplingName[x_]:=Block[{i},
      string="Coupling";
      For[i=1,i\[LessEqual]Length[x],
        If[Head[x[[i]]]===conj || Head[x[[i]]]===bar,
          string = string <>"c"<>ToString[getBlank[x[[i]]]];,
          string = string <>ToString[getBlank[x[[i]]]];
          ];
        i++;];
      Return[string];
      ];

getDimSPheno[x_]:=Block[{pos},
      If[Head[x]===Adj ||  Head[x]===Tp || Head[x]===conj || Head[x]===Conj,
        pos=Position[SPhenoParameters,x[[1]]];,
        pos=Position[SPhenoParameters,x]
        ];
      If[pos=!={}, Return[Extract[SPhenoParameters,pos[[1,1]]][[3]]];,
        Return[{0}];
        ];
      ];

getIndexRangeSPheno[x_]:=Block[{},
      pos=Position[SPhenoParameters,x];
      If[pos=!={}, 
        Return[Extract[SPhenoParameters,pos[[1,1]]][[4]]];,
        Return[{}];
        ];
      ];




(* Fortran Output *)

Format[conj[x_],FortranForm]:=
    Format["Conjg("<>ToString[FortranForm[x]]<>")",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[Conj[x_],FortranForm]:=
    Format["Conjg("<>ToString[FortranForm[x]]<>")",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[Tp[x_],FortranForm]:=If[Length[getDimSPheno[x]]\[Equal]2,
        Format["Transpose("<>ToString[FortranForm[x]]<>")",OutputForm],
        Format[ToString[FortranForm[x]],OutputForm]
        ]/;SARAHFortran\[Equal]True;

Unprotect[Real,Complex,Rational, Integer, Times, Power,ArcCos,ArcSin,ArcTan,
    Sec,Csc,Cot, Complex];

Format[ArcCos[x_],FortranForm]:=
    Format["ACos("<>ToString[FortranForm[x]]<>")",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[ArcSin[x_],FortranForm]:=
    Format["ASin("<>ToString[FortranForm[x]]<>")",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[ArcTan[x_],FortranForm]:=
    Format["ATan("<>ToString[FortranForm[x]]<>")",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[RealPart[x_],FortranForm]:=
    Format["Real("<>ToString[FortranForm[x]]<>",dp)",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[Csc[x_],FortranForm]:=
    Format["1/Sin("<>ToString[FortranForm[x]]<>")",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[Sec[x_],FortranForm]:=
    Format["1/Cos("<>ToString[FortranForm[x]]<>")",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[Cot[x_],FortranForm]:=
    Format["1/Tan("<>ToString[FortranForm[x]]<>")",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[\[ImaginaryI],FortranForm]:=
    Format["(0._dp,1._dp)",OutputForm]/;SARAHFortran\[Equal]True;
Format[FortranFalse,FortranForm]:=
    Format[".False.",OutputForm]/;SARAHFortran\[Equal]True;
Format[FortranTrue,FortranForm]:=
    Format[".True.",OutputForm]/;SARAHFortran\[Equal]True;
Format[NumberGenerations[x_],FortranForm]:=
    Format["NumberGenerations"<>ToString[FortranForm[x]],OutputForm]/;
      SARAHFortran\[Equal]True;

 Format[x_Complex, FortranForm]:=
    Which[Re[x]===0,
        Format[ToString[FortranForm[Im[x]]]<>"*(0.,1._dp)",OutputForm],
        Im[x]===0,
        Format[ToString[FortranForm[Re[x]]]<>"*(1._dp,0.)",OutputForm];,
        Re[x]=!=0 && Im[x]=!=0,
        Format["("<>ToString[FortranForm[Re[x]]]<>"*(1._dp,0)+"<>
            ToString[FortranForm[Im[x]]]<>"*(0,1._dp))",OutputForm]
        ]/;SARAHFortran\[Equal]True;

(* Format[x_Complex, FortranForm]:=
      Format["("<>ToString[FortranForm[ Re[x]]]<>","<>
          ToString[FortranForm[ Im[x]]]<>")",OutputForm]; *)

Format[x_Real, FortranForm]:=
    Format[ToString[NumberForm[x,ExponentFunction\[Rule](Null&)]]<>"_dp",
        OutputForm]/;SARAHFortran\[Equal]True;
Format[Sqrt[x_Integer], FortranForm]:=
    Format["sqrt("<>ToString[1.*x]<>"_dp)",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[1/Sqrt[x_Integer], FortranForm]:=
    Format["1._dp/sqrt("<>ToString[1.*x]<>"_dp)",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[x_Rational,FortranForm] :=
    Format[ToString[FortranForm[Numerator[x]]]<>"._dp/"<> 
          ToString[FortranForm[Denominator[x]]]<>"._dp",OutputForm]/;
      SARAHFortran\[Equal]True;
Format[Times[x_Integer,y_],FortranForm]:=
    Format[ToString[FortranForm[N[x]]]<>"*"<>ToString[FortranForm[y]],
        OutputForm] /; (Depth[y]<2 && SARAHFortran\[Equal]True);
Format[Times[x_Integer,y_],FortranForm]:=
    Format[ToString[FortranForm[N[x]]]<>"*("<>ToString[FortranForm[y]]<>")",
        OutputForm] /; (Depth[y]<2 && SARAHFortran\[Equal]True);
Protect[Real,Complex,Rational, Integer, Times,Power,ArcCos,ArcSin,Complex];


FortranLineBreak[string_]:=FortranLineBreak[string,0];
FortranLineBreak[longString_,maxDiff_]:=
    Block[{i,i2,minLength,Counter,start,newString},
      If[StringLength[longString] <75, Return[longString];];
      minLength=70;
      puffer=15;
      start=minLength;
      If[StringLength[longString]>start+puffer,testFin=puffer;,
        testFin = StringLength[longString] - start];
      
      Counter=start;
      newLetters=start;
      newString=StringTake[longString,{1,start}];
      openBracket=StringCount[newString,"("];
      closeBracket=StringCount[newString,")"];
      
      
      For[i=start+1,i\[LessEqual]StringLength[longString],
        If[(StringLength[longString]- i)<10,
            newString=newString<>StringTake[longString,{i}];
            Counter++;
            i++;,
            diffBracket = openBracket - closeBracket;
            
            If[diffBracket \[LessEqual]  maxDiff && 
                diffBracket \[GreaterEqual] 0,BracketTrue=True;,
              BracketTrue=False;];
            
            If[((StringTake[longString,{i}]===
                        ")")&&(StringTake[longString,{i+1}]=!=
                        ")")&&(StringTake[longString,{i+1,i+2}]=!=
                        " )"))||((StringTake[longString,{i}]==="+"&&
                        BracketTrue)||(StringTake[longString,{i}]==="-"&&
                        BracketTrue) ||(StringTake[longString,{i}]===","&&
                        BracketTrue)),
              
              newString=newString<>StringTake[longString,{i}];
              If[StringTake[longString,{i}]\[Equal]")",closeBracket++];
              If[StringTake[longString,{i}]\[Equal]"(",openBracket++];
              
              
              For[i2=1,i2\[LessEqual]85-newLetters,newString =newString <>" ";
                i2++;]; 
              newString=newString<>"& \n"<>"& ";
              
              
              If[StringLength[longString]-i<minLength+1,
                ende=StringLength[longString];,
                ende=i+minLength+1;
                ];
              
              newString=newString <> StringTake[longString,{i+1,ende}];
              Counter=ende;
              
              openBracket=
                openBracket+
                  StringCount[StringTake[longString,{i+1,ende}],"("];
              
              closeBracket=
                closeBracket+
                  StringCount[StringTake[longString,{i+1,ende}],")"];
              newLetters=ende-i-1;
              i=ende+1;,
              newString=newString<>StringTake[longString,{i}];
              If[StringTake[longString,{i}]\[Equal]")",closeBracket++];
              If[StringTake[longString,{i}]\[Equal]"(",openBracket++];
              newLetters++;
              Counter++;
              i++;
              ];
            ];
        ];
      Return[newString];
      ];



FortranLineBreakInterrupt[longString_,maxDiff_]:=
    Block[{i,i2,minLength,Counter,start,temp,lines,newString},
      If[StringLength[longString] <75, Return[{longString}];];
      minLength=70;
      puffer=15;
      start=minLength;
      temp = {};
      lines=0;
      If[StringLength[longString]>start+puffer,testFin=puffer;,
        testFin = StringLength[longString] - start];
      
      Counter=start;
      newLetters=start;
      newString=StringTake[longString,{1,start}];
      openBracket=StringCount[newString,"("];
      closeBracket=StringCount[newString,")"];
      
      For[i=start+1,i\[LessEqual]StringLength[longString],
        If[(StringLength[longString]- i)<10,
            newString=newString<>StringTake[longString,{i}];
            Counter++;
            i++;,
            diffBracket = openBracket - closeBracket;
            
            If[diffBracket \[LessEqual]  maxDiff && 
                diffBracket \[GreaterEqual] 0,BracketTrue=True;,
              BracketTrue=False;];
            
            If[(StringTake[longString,{i}]===
                      ")")&&(StringTake[longString,{i+1}]=!=
                      ",")&&(StringTake[longString,{i+1}]=!=
                      ")")&&(StringTake[longString,{i+1,i+2}]=!=
                      " )")||(StringTake[longString,{i}]==="+"&&
                    BracketTrue)||(StringTake[longString,{i}]==="-"&&
                    BracketTrue) ||(StringTake[longString,{i}]===","&&
                    BracketTrue),
              
              newString=newString<>StringTake[longString,{i}];
              If[StringTake[longString,{i}]\[Equal]")",closeBracket++];
              If[StringTake[longString,{i}]\[Equal]"(",openBracket++];
              
               If[lines\[LessEqual]35,
                
                For[i2=1,i2\[LessEqual]85-newLetters,newString =newString <>" ";
                  i2++;]; 
                newString=newString<>"& \n"<>"& ";
                lines++;,
                lines = 0;
                temp = Join[temp,{StringDrop[newString,-1]}];
                newString="";
                ];
              
              If[(StringLength[longString]-i)<(minLength+1),
                ende=StringLength[longString];,
                ende=i+minLength+1;
                ];
              
              newString=newString <> StringTake[longString,{i+1,ende}];
              Counter=ende;
              
              openBracket=
                openBracket+
                  StringCount[StringTake[longString,{i+1,ende}],"("];
              
              closeBracket=
                closeBracket+
                  StringCount[StringTake[longString,{i+1,ende}],")"];
              newLetters=ende-i-1;
              i=ende+1;,
              newString=newString<>StringTake[longString,{i}];
              If[StringTake[longString,{i}]\[Equal]")",closeBracket++];
              If[StringTake[longString,{i}]\[Equal]"(",openBracket++];
              newLetters++;
              Counter++;
              i++;
              ];
            ];
        ];
      temp = Join[temp,{newString}];
      (* Return[newString]; *)
      Return[temp];
      ];


FortranLineBreak[leftside_,longString_,maxDiff_] := 
  FortranLineBreak[leftside,longString,maxDiff,False]

FortranLineBreak[leftside_,longString_,maxDiff_,addfirst_]:=
    Block[{i,i2,minLength,Counter,start,lines,sign,newString},
      If[StringLength[longString] <75, 
        Return[leftside <>" = "<> longString];];
      minLength=70;
      puffer=15;
      start=minLength;
      If[StringLength[longString]>start+puffer,testFin=puffer;,
        testFin = StringLength[longString] - start];
      
      Counter=start;
      newLetters=start;
      If[addfirst\[Equal]True,
        If[StringTake[longString,{1,start}]==="-",
            
            newString= 
                leftside <>" = "<>leftside <>
                  StringTake[longString,{1,start}];,
            newString= 
                leftside <>" = "<>leftside <>"+"<>
                  StringTake[longString,{1,start}];
            ];,
        newString= leftside <>" = "<>StringTake[longString,{1,start}];
        ];
      openBracket=StringCount[newString,"("];
      closeBracket=StringCount[newString,")"];
      lines = 1;
      
      For[i=start+1,i\[LessEqual]StringLength[longString],
        
        If[(StringLength[longString]- i)<10,
            newString=newString<>StringTake[longString,{i}];
            Counter++;
            i++;,
            diffBracket = openBracket - closeBracket;
            
            If[diffBracket \[LessEqual]  maxDiff,BracketTrue=True;,
              BracketTrue=False;];
            
            If[(StringTake[longString,{i}]==="+"&&
                    BracketTrue)||(StringTake[longString,{i}]==="-"&&
                    BracketTrue) ||(StringTake[longString,{i}]===","&&
                    BracketTrue),
              
              newString=newString<>StringTake[longString,{i}];
              If[StringTake[longString,{i}]\[Equal]")",closeBracket++];
              If[StringTake[longString,{i}]\[Equal]"(",openBracket++];
              
              If[lines \[LessEqual]20 || diffBracket =!=0,
                
                For[i2=1,i2\[LessEqual]85-newLetters,newString =newString <>" ";
                  i2++;]; 
                newString=newString<>"& \n"<>"& ";
                lines++;,
                lines=1;
                sign = StringTake[newString,-1];
                
                newString=
                  StringDrop[newString,-1]<>" \n"<>leftside<>" =  "<> 
                    leftside <>sign;
                ];
              
              If[StringLength[longString]-i<minLength+1,
                ende=StringLength[longString];,
                ende=i+minLength+1;
                ];
              
              newString=newString <> StringTake[longString,{i+1,ende}];
              Counter=ende;
              
              openBracket=
                openBracket+
                  StringCount[StringTake[longString,{i+1,ende}],"("];
              closeBracket=
                closeBracket+
                  StringCount[StringTake[longString,{i+1,ende}],")"];
              newLetters=ende-i-1;
              i=ende+1;,
              newString=newString<>StringTake[longString,{i}];
              If[StringTake[longString,{i}]\[Equal]")",closeBracket++];
              If[StringTake[longString,{i}]\[Equal]"(",openBracket++];
              newLetters++;
              Counter++;
              i++;
              ];
            ];
        ];
      Return[newString];
      ];




SPhenoForm[x_String]:=StringReplace[StringReplace[x," "->""],StringReSPheno];
SPhenoForm[LHInput[x_]]:=SPhenoForm[x]<>"IN";
SPhenoForm[DotP[x_]]:=
    "Dot_Product("<>SPhenoForm[x[[1]]]<>","<>SPhenoForm[x[[2]]]<>")";
SPhenoForm[x_]:= 
    If[Head===Times,
      Return[ToString[FortranForm[Replace[x,y_Integer\[Rule]y*1.,1]]]];,
      Return[ToString[FortranForm[x]]];
      ]; 



MakeSPhenoCoupling[x_,name_,file_]:=Block[{temp,i,iDo2},
      temp = Expand[x];
      
      While[FreeQ[temp,sum]\[Equal]False,
        temp = temp /. sum \[Rule] sumSPheno;
        ];
      
      WriteString[file, name <>" = 0._dp \n"];
      
      If[temp=!=0,
        If[Head[temp]=!=Plus ,
            openDo=0;
            ifs=MakeCondition[temp];
            WriteString[file,ifs[[1]]];
            
            WriteSPhenoTerm[
              temp/. {Delta[a__]\[Rule]1, ThetaStep[a__]\[Rule]1} ,name,
              file];
            For[iDo2=1,iDo2\[LessEqual]openDo,
              WriteString[file,"End Do \n"];
              iDo2++;];
            WriteString[file,ifs[[2]]];,
            For[i=1,i\[LessEqual]Length[temp],
                openDo=0;
                ifs=MakeCondition[temp[[i]]];
                WriteString[file,ifs[[1]]];
                
                WriteSPhenoTerm[
                  temp[[i]] /. {Delta[a__]\[Rule]1, ThetaStep[a__]\[Rule]1} ,
                  name,file];
                For[iDo2=1,iDo2\[LessEqual]openDo,
                  WriteString[file,"End Do \n"];
                  iDo2++;];
                WriteString[file,ifs[[2]]];
                i++;];
            ];
        ];
      ]; 

MakeCondition[term_]:=Block[{i, deltas, thetas,string,finstring},
      deltas=Cases[term,x:(Delta[a_,b_]),5];
      thetas=Cases[term,x:(ThetaStep[a_,b_]),5];
      
      If[Length[deltas]+Length[thetas]=!=0,
        string="If (";
        For[i=1,i\[LessEqual]Length[deltas],
          
          string=string<>"("<>ToString[deltas[[i,1]]]<>".eq."<>
              ToString[deltas[[i,2]]] <> ").And.";
          i++;];
        
        For[i=1,i\[LessEqual]Length[thetas],
          
          string=string<>"("<>ToString[thetas[[i,1]]]<>".le."<>
              ToString[thetas[[i,2]]] <> ").And.("<>ToString[thetas[[i,1]]]<>
              ".ge.1).And.";
          i++;];
        
        string=StringDrop[string,-5] <>") Then \n";
        finstring="End If \n";,
        string="";
        finstring="";
        ];
      Return[{string,finstring}];
      ];


WriteSPhenoTerm[x_,name_,file_]:=Block[{},
      If[Head[x]===sumSPheno,
          
          WriteString[file,
            "Do " <> ToString[x[[1]]] <> " = " <> ToString[x[[2]]] <>"," <>
              ToString[x[[3]]] <>"\n"];
          openDo++;
          WriteSPhenoTerm[x[[4]],name,file];,
          
          If[StringTake[SPhenoForm[x],1]==="-",
              WriteString[file, name<> " = "<> name <>SPhenoForm[x] <>"\n"];,
              
              WriteString[file, 
                  name<> " = "<> name <>"+" <>SPhenoForm[x] <>"\n"];
              ];
          ];
      ];


WriteVertexToFile[nr_,name_,ind_,type_,file_]:=Block[{},
      Switch[type,
          FFV,
          	If[ind[[2]]\[Equal]False,
              	
              WriteString[file,
                "coup"<>ToString[nr]<>"L = "<>ToString[name[[1,1]]]<>
                  ind[[1]] <>"\n"];
              	
              WriteString[file,
                "coup"<>ToString[nr]<>"R = "<>ToString[name[[1,2]]]<>
                  ind[[1]] <>"\n"];,
              	
              WriteString[file,
                "coup"<>ToString[nr]<>"L = Conjg("<>ToString[name[[1,1]]]<>
                  ind[[1]] <>")\n"];
              	
              WriteString[file,
                "coup"<>ToString[nr]<>"R = Conjg("<>ToString[name[[1,2]]]<>
                  ind[[1]] <>")\n"];
              	];,
          
          
          FFS,
          	If[ind[[2]]\[Equal]False,
              	
              WriteString[file,
                "coup"<>ToString[nr]<>"L = "<>ToString[name[[1,1]]]<>
                  ind[[1]] <>"\n"];
              	
              WriteString[file,
                "coup"<>ToString[nr]<>"R = "<>ToString[name[[1,2]]]<>
                  ind[[1]] <>"\n"];,
              	
              WriteString[file,
                "coup"<>ToString[nr]<>"R = Conjg("<>ToString[name[[1,1]]]<>
                  ind[[1]] <>")\n"];
              	
              WriteString[file,
                "coup"<>ToString[nr]<>"L = Conjg("<>ToString[name[[1,2]]]<>
                  ind[[1]] <>")\n"];
              	];,
          _,
          	If[ind[[2]]\[Equal]False,
              	
              WriteString[file,
                  "coup"<>ToString[nr]<>" = "<>ToString[name[[1,1]]]<>
                    ind[[1]] <>"\n"];,
              	
              WriteString[file,
                  "coup"<>ToString[nr]<>" = Conjg("<>ToString[name[[1,1]]]<>
                    ind[[1]] <>")\n"];
              	];
          
          ];
      
      
      ];



AppendSourceCode[file_,output_]:=
    Block[{$Path=ToFileName[{$sarahSPhenoPackageDir,"IncludeSPheno"}],t,
        copy},
      copy=OpenRead[file];
      t=False;
      While[t =!= EndOfFile,
            t = Read[copy, String];
        If[t=!= EndOfFile,
              WriteString[output, t];
              WriteString[output, "\n"];
          ];
            ];
      Close[copy];
      
      
      ];




MakeMassesCouplingLists[temp_]:=MakeMassesCouplingLists[temp,True,{}];
MakeMassesCouplingLists[temp_,SM_]:=MakeMassesCouplingLists[temp,SM,{}];
MakeMassesCouplingLists[temp_,SM_,ExceptionSM_]:=
    Block[{i,j,NeededCouplings,NeededMasses,NeededCouplingsInsert,
        AllInternalParticles,AllAddedCouplings},
      
      list={};
      AllInternalParticles={};
      AllAddedCouplings={};
      
      If[SM\[Equal]True,
        For[j=1,j\[LessEqual]Length[temp],
            If[Intersection[VerticesInv[VVV],temp[[j,1]]]==={},
              list= Join[list,{temp[[j]] /. C[a__]\[Rule]Cp[a]}];
              
              AllInternalParticles=
                Join[AllInternalParticles,
                  Cases[temp[[1,2]],Internal[_],3] /. temp[[j,2]]];
              AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
              ];
            j++;];,
        
        For[j=1,j\[LessEqual]Length[temp],
            
            If[Cases[
                  DeleteCases[Cases[temp[[j,2]],Internal[_],3],ExceptionSM] /. 
                    temp[[j,2]],x_?SMQ,3]==={},
              list= Join[list,{temp[[j]] /. C[a__]\[Rule]Cp[a]}];
              
              AllInternalParticles=
                Join[AllInternalParticles,
                  Cases[temp[[1,2]],Internal[_],3] /. temp[[j,2]]];
              AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
              ];
            j++;];
        ];
      
      NeededMasses=
        DeleteCases[Intersection[SPhenoMass/@AllInternalParticles],0.];
      NeededCouplingsInsert=Intersection[AllAddedCouplings];
      NeededCouplings={};
      
      For[i=1,i\[LessEqual]Length[NeededCouplingsInsert],
        If[FreeQ[SPhenoCouplingsAll,NeededCouplingsInsert[[i]]]\[Equal]False,
          
          NeededCouplings=
              Join[NeededCouplings,
                getSPhenoCoupling[NeededCouplingsInsert[[i]],
                    SPhenoCouplingsAll][[1]]];
          ];
        i++;];
      
      NeededCouplings = Flatten[NeededCouplings];
      
      Return[{list,NeededMasses,NeededCouplings,NeededCouplingsInsert}];
      
      ];

