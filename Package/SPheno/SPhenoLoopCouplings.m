(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

GenerateSPhenoLoopCouplings[Eigenstates_]:=Block[{},
      Print["----------------------------------------------"];
      Print["Writing Routines for Loop Couplings"];
      Print["----------------------------------------------"];
      
       
      $sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}];
      (* CreateDirectory[$sarahCurrentSPhenoDir]; *)
      
      sphenoLoopCoup=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,
            "LoopCouplings_"<>ModelName<>".f90"]];
      
      InitSPhenoLoopCouplings[Eigenstates];
      
      WriteLoopCouplingsHeader;
      WriteAlphaMS;
      WriteAlphaEWSB;
      WriteAlphaStrong;
      
      (*
        If[getGen[Electron] >3 || getGen[Neutrino] >3,
            GenerateDeltaVB2;,
            GenerateDeltaVB;
            ];
        *)
      GenerateDeltaVB2;
      
      Print["Generate effective Higgs-to-Fermion couplings"];
      
      ParametersEffCouplings={};
      
      If[FreeQ[ParticleDefinitions[Eigenstates],"Higgs"]===False,
        GenerateHiggsFermionCouplings[HiggsBoson,Electron, ElectronYukawa,
          ElectronMatrixL ,ElectronMatrixR, VEVSM1,HiggsMixingMatrix, 1];
        GenerateHiggsFermionCouplings[HiggsBoson,TopQuark,UpYukawa,UpMatrixL ,
          UpMatrixR,VEVSM2,HiggsMixingMatrix ,2];
        GenerateHiggsFermionCouplings[HiggsBoson,BottomQuark, DownYukawa,
          DownMatrixL ,DownMatrixR,VEVSM1,HiggsMixingMatrix ,1];
        ];
      
      If[FreeQ[ParticleDefinitions[Eigenstates],"Pseudo-Scalar Higgs"]===
          False,
        GenerateHiggsFermionCouplings[PseudoScalar,Electron,ElectronYukawa,
          ElectronMatrixL ,ElectronMatrixR, VEVSM1,PseudoScalarMixingMatrix, 
          1];
        GenerateHiggsFermionCouplings[PseudoScalar,TopQuark,UpYukawa,
          UpMatrixL ,UpMatrixR,VEVSM2,PseudoScalarMixingMatrix ,2];
        GenerateHiggsFermionCouplings[PseudoScalar,BottomQuark, DownYukawa,
          DownMatrixL ,DownMatrixR,VEVSM1,PseudoScalarMixingMatrix,1];
        ];
      
      InitHiggsLoopCouplings;
      
      (* AppendSourceCode["AP_onehalf.f90",sphenoLoopCoup]; *)
      
      
      WriteString[sphenoLoopCoup, 
        "End Module LoopCouplings_"<>ModelName<>" \n \n"];
      
      Close[sphenoLoopCoup];
      ];

WriteLoopCouplingsHeader:=Block[{},
      
      Print["Writing Header"];
      
      
      WriteString[sphenoLoopCoup, 
        "Module LoopCouplings_"<>ModelName<>" \n \n"];
      WriteString[sphenoLoopCoup, "Use Control \n"];
      WriteString[sphenoLoopCoup, "Use Couplings_"<>ModelName<>" \n"];
      WriteString[sphenoLoopCoup, "Use Mathematics \n"];
      WriteString[sphenoLoopCoup, "Use LoopFunctions \n"];
      WriteString[sphenoLoopCoup, "Use StandardModel \n \n "];
      
      WriteString[sphenoLoopCoup,"Logical,Save::MZ_input= .False. \n \n"];
      
      WriteString[sphenoLoopCoup, "Contains \n \n"];
      
      
      
      ];

InitSPhenoLoopCouplings[Eigenstates_]:=
    Block[{i,particles, partS,partF,partV,diracF,temp},
      coupAlphaEWSB={};
      coupAlphaStrong={};
      
      particles=Particles[Eigenstates];
      
      
      partS={};
      partF={};
      
      
      diracTemp=dirac;
      
      For[i=1,i\[LessEqual]Length[Particles[Eigenstates]],
        Switch[Particles[Eigenstates][[i,4]],
          S, partS = Join[partS,{Particles[Eigenstates][[i,1]]}];,
          V, partS = Join[partS,{Particles[Eigenstates][[i,1]]}];,
          F, pos=Position[diracTemp,Particles[Eigenstates][[i,1]]];
          	If[Length[pos]>0,
            	diracF=Extract[diracTemp,pos[[1,1]]][[1]];
            		partF=Join[partF,{diracF}];
            	diracTemp=Delete[diracTemp,pos[[1,1]]];
            	];
          ];
        i++;];
      
      
      
      For[i=1,i\[LessEqual]Length[partS],
        val=
          Cases[Vertex[{conj[partS[[i]]],partS[[i]],VectorP},
                UseDependences\[Rule]True][[2,1]], x_?NumberQ];
        	If[val=!={},
          	
          coupAlphaEWSB= 
            Join[coupAlphaEWSB,{{partS[[i]],Abs[val[[1]]],1,
                  CalculateColorFactor[VectorP,partS[[i]],partS[[i]]]}}];
          	If[Head[val[[1]]]===Complex,
            	RelativeCoupling[VectorP,partS[[i]]]=val[[1]]/\[ImaginaryI];,
            	RelativeCoupling[VectorP,partS[[i]]]=val[[1]];
            	];,
          	RelativeCoupling[VectorP,partS[[i]]]=0;
          	];
        val=Vertex[{conj[partS[[i]]],partS[[i]],VectorG}][[2,1]];
        	If[val=!=0,
          	
          coupAlphaStrong= 
            Join[coupAlphaStrong,{{partS[[i]],1,1,
                  CalculateColorFactor[VectorG,partS[[i]],partS[[i]]]}}];
          	RelativeCoupling[VectorG,partS[[i]]]=1;,
          	RelativeCoupling[VectorG,partS[[i]]]=0;
          	];
        i++;];
      
      
      
      For[i=1,i\[LessEqual]Length[partF],
        val=
          Cases[Vertex[{bar[partF[[i]]],partF[[i]],VectorP},
                UseDependences\[Rule]True][[2,1]], x_?NumberQ];
        	If[val=!={},
          	
          coupAlphaEWSB= 
            Join[coupAlphaEWSB,{{partF[[i]],Abs[val[[1]]],4,
                  CalculateColorFactor[VectorP,partF[[i]],partF[[i]]]}}];
          	If[Head[val[[1]]]===Complex,
            	RelativeCoupling[VectorP,partF[[i]]]=val[[1]]/\[ImaginaryI];,
            	RelativeCoupling[VectorP,partF[[i]]]=val[[1]];
            	];,
          	RelativeCoupling[VectorP,partF[[i]]]=0;
          	];
        	
        	val=Vertex[{bar[partF[[i]]],partF[[i]],VectorG}][[2,1]];
        	If[val=!=0,
          	If[partF[[i]]===bar[partF[[i]]],
            	
            coupAlphaStrong= 
                Join[coupAlphaStrong,{{partF[[i]],1,4,
                      CalculateColorFactor[VectorG,partF[[i]],partF[[i]]]/
                        2}}];,
            	
            coupAlphaStrong= 
                Join[coupAlphaStrong,{{partF[[i]],1,4,
                      CalculateColorFactor[VectorG,partF[[i]],partF[[i]]]}}];
            	];
          	RelativeCoupling[VectorG,partF[[i]]]=1;,
          	RelativeCoupling[VectorG,partF[[i]]]=0;
          	];
        i++;];
      
      ParticlesToPhoton=coupAlphaEWSB;
      ParticlesToGluon=coupAlphaStrong;
      
      temp={};
      For[i=1,i\[LessEqual]Length[coupAlphaStrong],
        If[FreeQ[SMParticles,coupAlphaStrong[[i,1]]]\[Equal]True ,
          temp=Join[temp,{coupAlphaStrong[[i]]}];
          ];
        i++;];
      coupAlphaStrong=temp;
      
      temp={};
      For[i=1,i\[LessEqual]Length[coupAlphaEWSB],
        If[FreeQ[SMParticles,coupAlphaEWSB[[i,1]]]\[Equal]True,
          temp=Join[temp,{coupAlphaEWSB[[i]]}];
          ];
        i++;];
      coupAlphaEWSB=temp;
      
      
      
      ];

WriteAlphaEWSB:=Block[{i},
      
      Print["AlphaEwDR"];
      
      WriteString[sphenoLoopCoup,"Real(dp) Function AlphaEwDR(Q,"];
      For[i=1,i\[LessEqual]Length[coupAlphaEWSB],
        WriteString[sphenoLoopCoup,
          SPhenoForm[SPhenoMass[coupAlphaEWSB[[i,1]]]]];
        If[i\[NotEqual] Length[coupAlphaEWSB],
          WriteString[sphenoLoopCoup,","];
          ];
        i++;];
      WriteString[sphenoLoopCoup,") \n \n"];
      
      
      WriteString[sphenoLoopCoup,"Real(dp),Intent(in)::Q,"];
      For[i=1,i\[LessEqual]Length[coupAlphaEWSB],
        WriteString[sphenoLoopCoup,
          SPhenoMass[coupAlphaEWSB[[i,1]],
            getGenSPheno[coupAlphaEWSB[[i,1]]]]];
        If[i\[NotEqual] Length[coupAlphaEWSB],
          WriteString[sphenoLoopCoup,","];
          ];
        i++;];
      WriteString[sphenoLoopCoup,"\n"];
      WriteString[sphenoLoopCoup,"Integer::i1 \n"];
      WriteString[sphenoLoopCoup,"Real(dp)::DeltaAlpha \n"];
      
      WriteString[sphenoLoopCoup,"If (MZ_input) then \n"];
      WriteString[sphenoLoopCoup,
        "DeltaAlpha=1._dp-Alpha/Alpha_MZ_MS! MSbar value^=mW+light fermions \n"]\
;
      WriteString[sphenoLoopCoup,
        "DeltaAlpha=DeltaAlpha+alpha/(6._dp*Pi)! conversion to DRbar \n"];
      WriteString[sphenoLoopCoup,
        "DeltaAlpha=DeltaAlpha-16._dp*Log(mf_u(3)/Q)/9._dp * Alpha / (2._dp * pi) \n"]\
;
      For[i=1,i\[LessEqual]Length[coupAlphaEWSB],
        If[getGenSPheno[coupAlphaEWSB[[i,1]]]>1,
          
          WriteString[sphenoLoopCoup, 
            "Do i1="<> ToString[getGenSPhenoStart[coupAlphaEWSB[[i,1]]]]<>","<> 
              ToString[getGenSPheno[coupAlphaEWSB[[i,1]]]]<>"\n"];
          
          WriteString[sphenoLoopCoup,
            "DeltaAlpha=DeltaAlpha-"<>SPhenoForm[
                coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*
                  coupAlphaEWSB[[i,4]]/3]<>"*Log("<>
              SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q)  \n"];
          WriteString[sphenoLoopCoup,"End Do \n"];,
          
          WriteString[sphenoLoopCoup,
              "DeltaAlpha=DeltaAlpha-"<>SPhenoForm[
                  coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*
                    coupAlphaEWSB[[i,4]]/3]<>"*Log("<>
                SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q) \n"];
          ];
        i++;];
      
      
      WriteString[sphenoLoopCoup,"Else \n"];
      WriteString[sphenoLoopCoup,
        "DeltaAlpha=7._dp*Log(Q/mW)+16._dp*Log(mf_u(3)/Q)/9._dp \n"];
      For[i=1,i\[LessEqual]Length[coupAlphaEWSB],
        If[getGenSPheno[coupAlphaEWSB[[i,1]]]>1,
          
          WriteString[sphenoLoopCoup, 
            "Do i1="<> ToString[getGenSPhenoStart[coupAlphaEWSB[[i,1]]]]<>","<> 
              ToString[getGenSPheno[coupAlphaEWSB[[i,1]]]]<>"\n"];
          
          WriteString[sphenoLoopCoup,
            "DeltaAlpha=DeltaAlpha+"<>SPhenoForm[
                coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*
                  coupAlphaEWSB[[i,4]]/3]<>"*Log("<>
              SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q) \n"];
          WriteString[sphenoLoopCoup,"End Do \n"];,
          
          WriteString[sphenoLoopCoup,
              "DeltaAlpha=DeltaAlpha+"<>SPhenoForm[
                  coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*
                    coupAlphaEWSB[[i,4]]/3]<>"*Log("<>
                SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q)\n"];
          ];
        i++;];
      
      WriteString[sphenoLoopCoup,
        "DeltaAlpha=Delta_Alpha_Lepton+Delta_Alpha_Hadron& \n"];
      WriteString[sphenoLoopCoup,"    &-alpha*DeltaAlpha/(2._dp*Pi) \n"];
      WriteString[sphenoLoopCoup,"End If \n \n"];
      
      WriteString[sphenoLoopCoup,"AlphaEwDR=Alpha/(1._dp-DeltaAlpha) \n \n"];
      WriteString[sphenoLoopCoup,"End Function AlphaEwDR \n \n \n"];
      
      ];


WriteAlphaStrong:=Block[{i},
      
      Print["Writing AlphaSdr"];
      
      WriteString[sphenoLoopCoup,"Real(dp) Function AlphaSDR(Q,"];
      For[i=1,i\[LessEqual]Length[coupAlphaStrong],
        WriteString[sphenoLoopCoup,
          SPhenoForm[SPhenoMass[coupAlphaStrong[[i,1]]]]];
        If[i\[NotEqual] Length[coupAlphaStrong],
          WriteString[sphenoLoopCoup,","];
          ];
        i++;];
      WriteString[sphenoLoopCoup,") \n"];
      
      
      WriteString[sphenoLoopCoup,"Real(dp),Intent(in)::Q,"];
      For[i=1,i\[LessEqual]Length[coupAlphaStrong],
        WriteString[sphenoLoopCoup,
          SPhenoMass[coupAlphaStrong[[i,1]],
            getGenSPheno[coupAlphaStrong[[i,1]]]]];
        If[i\[NotEqual] Length[coupAlphaStrong],
          WriteString[sphenoLoopCoup,","];
          ];
        i++;];
      WriteString[sphenoLoopCoup," \n"];
      
      WriteString[sphenoLoopCoup,"Integer::i1 \n"];
      WriteString[sphenoLoopCoup,"Real(dp)::DeltaAlpha \n"];
      
      
      WriteString[sphenoLoopCoup,
        "DeltaAlpha = 0.5_dp- 2._dp*Log(mf_u(3)/Q)/3._dp \n"];
      For[i=1,i\[LessEqual]Length[coupAlphaStrong],
        If[getGenSPheno[coupAlphaStrong[[i,1]]]>1,
          
          WriteString[sphenoLoopCoup, 
            "Do i1=1,"<> ToString[getGenSPheno[coupAlphaStrong[[i,1]]]]<>
              "\n"];
          
          WriteString[sphenoLoopCoup,
            "DeltaAlpha=DeltaAlpha-"<>SPhenoForm[
                coupAlphaStrong[[i,2]]^2*coupAlphaStrong[[i,3]]*
                  coupAlphaStrong[[i,4]]/3]<>"*Log("<>
              SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q) \n"];
          WriteString[sphenoLoopCoup,"End Do \n"];,
          
          WriteString[sphenoLoopCoup,
              "DeltaAlpha=DeltaAlpha-"<>SPhenoForm[
                  coupAlphaStrong[[i,2]]^2*coupAlphaStrong[[i,3]]*
                    coupAlphaStrong[[i,4]]/3]<>"*Log("<>
                SPhenoMass[coupAlphaStrong[[i,1]],i1]<>"/ Q) \n"];
          ];
        i++;];
      
      WriteString[sphenoLoopCoup,
        "DeltaAlpha=AlphaS_mZ*DeltaAlpha/(2._dp*Pi) \n"];
      WriteString[sphenoLoopCoup,
        "   AlphaSDR=AlphaS_mZ/(1._dp-DeltaAlpha)\n \n"];
      
      WriteString[sphenoLoopCoup,"End Function AlphaSDR \n"];
      
      ];


InitHiggsLoopCouplings:=Block[{i,temp,name, ProcessList},
      ParticlesToHiggs=TwoBodyDecay[HiggsBoson];
      temp={};
      For[i=1,i\[LessEqual]Length[ParticlesToHiggs],
        If[
          getBlank[ParticlesToHiggs[[i,1]]]===
            getBlank[ParticlesToHiggs[[i,1]]],
          temp = Join[temp,{ParticlesToHiggs[[i]]}];
          ];
        i++;];
      ProcessList=temp;
      
      NeededMassesLoopPhoton={};
      NeededMassesLoopGluon={};
      NeededCouplingsLoopPhoton={};
      NeededCouplingsLoopGluon={};
      NeededCouplingsLoopPhotonInsert={};
      NeededCouplingsLoopGluonInsert={};
      
      
      For[i=1,i\[LessEqual]Length[ProcessList],
        If[
          FreeQ[ParticlesToPhoton,getBlank[ProcessList[[i,1]]]]\[Equal]False,
          
          If[FreeQ[NeededMassesLoopPhoton, 
                SPhenoMass[ProcessList[[i,1]]]]\[Equal]True,
            NeededMassesLoopPhoton=
                Join[NeededMassesLoopPhoton,{SPhenoMass[
                      ProcessList[[i,1]]]}];
            ];
          
          If[FreeQ[NeededCouplingsLoopPhoton, ProcessList[[i,3]]]\[Equal]
              True,
            
            NeededCouplingsLoopPhotonInsert=
              Join[NeededCouplingsLoopPhotonInsert,{{ProcessList[[i,3]]}}];
            
            NeededCouplingsLoopPhoton=
              Join[NeededCouplingsLoopPhoton,{getSPhenoCoupling[
                      ProcessList[[i,3]]][[1]]}];
            ];
          ];
        
        If[FreeQ[ParticlesToGluon,getBlank[ProcessList[[i,1]]]]\[Equal]False,
          
          If[FreeQ[NeededMassesLoopGluon, 
                SPhenoMass[ProcessList[[i,1]]]]\[Equal]True,
            NeededMassesLoopGluon=
                Join[NeededMassesLoopGluon,{SPhenoMass[ProcessList[[i,1]]]}];
            ];
          If[FreeQ[NeededCouplingsLoopgluon, ProcessList[[i,3]]]\[Equal]True,
            
            NeededCouplingsLoopGluonInsert=
              Join[NeededCouplingsLoopGluonInsert,{{ProcessList[[i,3]]}}];
            
            NeededCouplingsLoopGluon=
              Join[NeededCouplingsLoopGluon,{getSPhenoCoupling[
                      ProcessList[[i,3]]][[1]]}];
            ];
          ];
        i++;];
      
      
      temp={};
      For[i=1,i\[LessEqual]Length[ParticlesToPhoton],
        If[FreeQ[ProcessList,ParticlesToPhoton[[i,1]]]\[Equal]False,
          temp = Join[temp,{ParticlesToPhoton[[i]]}];
          ];
        i++;];
      ParticlesToPhotonAndHiggs=temp;
      
      temp={};
      For[i=1,i\[LessEqual]Length[ParticlesToGluon],
        If[FreeQ[ProcessList,ParticlesToGluon[[i,1]]]\[Equal]False,
          temp = Join[temp,{ParticlesToGluon[[i]]}];
          ];
        i++;];
      ParticlesToGluonAndHiggs=temp;
      
      temp=
        Complement[
          Join[Transpose[ParticlesToGluonAndHiggs][[1]],
            Transpose[ParticlesToPhotonAndHiggs][[1]]]];
      
      NeededRatiosLoopCouplings={};
      NeededRatiosLoopCouplingsPseudo={};
      NeededRatiosLoopCouplingsSave={};
      NeededRatiosLoopCouplingsSavePseudo={};
      NeededRatiosLoopCouplingsPhoton={};
      NeededRatiosLoopCouplingsGluon={};
      NeededRatiosLoopCouplingsPhotonPseudo={};
      NeededRatiosLoopCouplingsGluonPseudo={};
      
      
      For[i=1,i\[LessEqual]Length[temp],
        name = ToExpression["rat"<>SPhenoForm[temp[[i]]]];
        name2 = ToExpression["ratio"<>SPhenoForm[temp[[i]]]];
        
        nameP = ToExpression["ratP"<>SPhenoForm[temp[[i]]]];
        nameP2 = ToExpression["ratioP"<>SPhenoForm[temp[[i]]]];
        
        If[getGenSPheno[temp[[i]]]>1,
          
          SPhenoParameters=
            Join[SPhenoParameters,{{name,{generation},{getGenSPheno[
                      temp[[i]]]}}}];
          
          SPhenoParameters=
            Join[SPhenoParameters,{{nameP,{generation},{getGenSPheno[
                      temp[[i]]]}}}];
          
          SPhenoParameters=
            Join[SPhenoParameters,{{name2,{generation,
                    generation},{getGenSPheno[HiggsBoson],
                    getGenSPheno[temp[[i]]]}}}];
          
          SPhenoParameters=
            Join[SPhenoParameters,{{nameP2,{generation,
                    generation},{getGenSPheno[PseudoScalar],
                    getGenSPheno[temp[[i]]]}}}];,
          SPhenoParameters=Join[SPhenoParameters,{{name,{},{}}}];
          SPhenoParameters=Join[SPhenoParameters,{{nameP,{},{}}}];
          
          SPhenoParameters=
            Join[SPhenoParameters,{{name2,{generation},{getGenSPheno[
                      HiggsBoson]}}}];
          
          SPhenoParameters=
            Join[SPhenoParameters,{{nameP2,{generation},{getGenSPheno[
                      PseudoScalar]}}}];
          ];
        
        realVar=Join[realVar,{name,nameP,name2,nameP2}];
        NeededRatiosLoopCouplings=Join[NeededRatiosLoopCouplings,{name}];
        NeededRatiosLoopCouplingsSave=
          Join[NeededRatiosLoopCouplingsSave,{name2}];
        
        NeededRatiosLoopCouplingsPseudo=
          Join[NeededRatiosLoopCouplingsPseudo,{nameP}];
        NeededRatiosLoopCouplingsSavePseudo=
          Join[NeededRatiosLoopCouplingsSavePseudo,{nameP2}];
        
        If[FreeQ[ParticlesToGluonAndHiggs,temp[[i]]]\[Equal]False,
          
          NeededRatiosLoopCouplingsGluon = 
            Join[NeededRatiosLoopCouplingsGluon,{name}];
          
          NeededRatiosLoopCouplingsGluonPseudo = 
            Join[NeededRatiosLoopCouplingsGluonPseudo,{nameP}];
          ];
        
        If[FreeQ[ParticlesToPhotonAndHiggs,temp[[i]]]\[Equal]False,
          
          NeededRatiosLoopCouplingsPhoton = 
            Join[NeededRatiosLoopCouplingsPhoton,{name}];
          
          NeededRatiosLoopCouplingsPhotonPseudo = 
            Join[NeededRatiosLoopCouplingsPhotonPseudo,{nameP}];
          ];
        
        i++;];
      
      NeededRatiosLoopCouplingsSave=
        Join[NeededRatiosLoopCouplingsSave,{ratioGG,ratioPP}];
      NeededRatiosLoopCouplingsSavePseudo=
        Join[NeededRatiosLoopCouplingsSavePseudo,{ratioPGG,ratioPPP}];
      SPhenoParameters=
        Join[SPhenoParameters,{{ratioGG,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{ratioPP,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{ratioPGG,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{ratioPPP,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      
      
      ParticlesToGPH=temp;
      
      
      SPhenoParameters=
        Join[SPhenoParameters,{{cplHiggsPP,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{cplHiggsGG,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{cplHiggsZZvirt,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{cplHiggsWWvirt,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{cplPseudoHiggsPP,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{cplPseudoHiggsGG,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      
      
      GenerateHiggsLoopCoupling["Photon",NeededRatiosLoopCouplingsPhoton,
        NeededMassesLoopPhoton,ParticlesToPhotonAndHiggs];
      GenerateHiggsLoopCoupling["Gluon",NeededRatiosLoopCouplingsGluon,
        NeededMassesLoopGluon,ParticlesToGluonAndHiggs];
      GenerateHiggsLoopCouplingSM["Photon",NeededRatiosLoopCouplingsPhoton,
        NeededMassesLoopPhoton,ParticlesToPhotonAndHiggs];
      GenerateHiggsLoopCouplingSM["Gluon",NeededRatiosLoopCouplingsGluon,
        NeededMassesLoopGluon,ParticlesToGluonAndHiggs];
      
      
      GeneratePseudoHiggsLoopCoupling["Photon",
        NeededRatiosLoopCouplingsPhoton,NeededMassesLoopPhoton,
        ParticlesToPhotonAndHiggs];
      GeneratePseudoHiggsLoopCoupling["Gluon",NeededRatiosLoopCouplingsGluon,
        NeededMassesLoopGluon,ParticlesToGluonAndHiggs];
      GeneratePseudoHiggsLoopCouplingSM["Photon",
        NeededRatiosLoopCouplingsPhoton,NeededMassesLoopPhoton,
        ParticlesToPhotonAndHiggs];
      GeneratePseudoHiggsLoopCouplingSM["Gluon",
        NeededRatiosLoopCouplingsGluon,NeededMassesLoopGluon,
        ParticlesToGluonAndHiggs];
      
      
      
      ];

GenerateHiggsCouplingRatios[Eigenstates_]:=Block[{ind, i , coup,list},
      SPhenoParameters=
        Join[SPhenoParameters,{{coupHiggsPP,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{coupHiggsGG,{generation},{getGenSPheno[
                  HiggsBoson]}}}];
      
      
      WriteString[sphenoBR, 
        "cplHiggsWWvirt = " <>
          ToString[
            getSPhenoCoupling[C[HiggsBoson,VectorW,conj[VectorW]],
                SPhenoCouplingsAll][[1,1]]] <>"/sqrt("<>SPhenoForm[VEVSM1]<>"**2 + "<> 
          SPhenoForm[VEVSM2] <>"**2) \n"];
      WriteString[sphenoBR, 
        "cplHiggsZZvirt = " <>
          ToString[
            getSPhenoCoupling[C[HiggsBoson,VectorZ,VectorZ],
                SPhenoCouplingsAll][[1,1]]] <>"*Sqrt(7._dp/12._dp-10._dp/9._dp*Sin("<>
          SPhenoForm[Weinberg]<>")**2+40._dp/27._dp*Sin("<>
          SPhenoForm[Weinberg]<>")**2)/sqrt("<>SPhenoForm[VEVSM1]<>"**2 + "<> 
          SPhenoForm[VEVSM2] <>"**2) \n"];
      
      WriteString[sphenoBR, 
        "vev = "<>SPhenoForm[
            2Sqrt[- Vertex[{VectorW,conj[VectorW]}][[2,1]]/leftCoupling^2] /. 
              sum[a_,b_,c_,d_]\[RuleDelayed]Sum[d,{a,b,c}]] <>"\n"];
      
      list = 
        Table[SPhenoCouplingsAll[[i,1,1]],{i,1,Length[SPhenoCouplingsAll]}];
      
      Print["Write loop induced couplings to Higgs"];
      
      WriteString[sphenoBR, 
        "Do i1=1, "<>ToString[getGenSPheno[HiggsBoson]]<>"\n"];
      For[i=1,i\[LessEqual]Length[ParticlesToGPH],
        If[getGenSPheno[ParticlesToGPH[[i]]]>1,
          
          WriteString[sphenoBR, 
              "Do i2=1, "<>ToString[getGenSPheno[ParticlesToGPH[[i]]]]<>
                "\n"];
          ];
        If[FreeQ[ParticleDefinitions[Eigenstates],"Higgs"]===False,
          
          If[FreeQ[list,
                  C[HiggsBoson,AntiField[ParticlesToGPH[[i]]],
                    ParticlesToGPH[[i]]]]\[Equal]False,
              
              coup = getSPhenoCoupling[
                    Cp[HiggsBoson,AntiField[ParticlesToGPH[[i]]],
                      ParticlesToGPH[[i]]]][[1,1]];
              
              ind = MakeIndicesCoupling[{HiggsBoson,
                      i1},{AntiField[ParticlesToGPH[[i]]],
                      i2},{ParticlesToGPH[[i]],i2},
                    getSPhenoCoupling[
                        Cp[HiggsBoson,AntiField[ParticlesToGPH[[i]]],
                          ParticlesToGPH[[i]]]][[2]]][[1]];
              If[FreeQ[SMParticles,ParticlesToGPH[[i]]]\[Equal]True,
                Switch[getType[ParticlesToGPH[[i]]],
                    F,
                    
                    WriteString[sphenoBR,
                        SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = "<>
                          SPhenoForm[coup]<>ind<>"*2._dp*vev/"<>
                          SPhenoMass[ParticlesToGPH[[i]],i2]<>" \n" ];,
                    S,
                    
                    WriteString[sphenoBR,
                        SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = 0.5_dp*"<>
                          SPhenoForm[coup]<>ind<>"*vev/"<>
                          SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];,
                    V,
                    
                    WriteString[sphenoBR,
                        SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -0.5_dp*"<>
                          SPhenoForm[coup]<>ind<>"*vev/"<>
                          SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];
                    ];,
                Switch[ParticlesToGPH[[i]],
                    Electron,
                    	
                    WriteString[sphenoBR,
                        SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>
                          SPhenoForm[HiggsMixingMatrix]<>"(i1,1)*vev/"<>
                          SPhenoForm[VEVSM1] <>" \n"];,
                    TopQuark,
                    	
                    WriteString[sphenoBR,
                        SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>
                          SPhenoForm[HiggsMixingMatrix]<>"(i1,2)*vev/"<>
                          SPhenoForm[VEVSM2] <>" \n"];,
                    BottomQuark,
                    	
                    WriteString[sphenoBR,
                        SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>
                          SPhenoForm[HiggsMixingMatrix]<>"(i1,1)*vev/"<>
                          SPhenoForm[VEVSM1] <>" \n"];,
                    VectorW,
                    	
                    WriteString[sphenoBR,
                        SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -("<>
                          SPhenoForm[VEVSM1]<>"*"<>
                          SPhenoForm[HiggsMixingMatrix]<>"(i1,1) + "<>
                          SPhenoForm[VEVSM2]<>"*"<>
                          SPhenoForm[HiggsMixingMatrix]<>"(i1,2))/vev  \n"];
                    ];
                ];,
              
              WriteString[sphenoBR,
                  SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = 0._dp \n"]; 
              ];
          ];
        
        If[
          FreeQ[ParticleDefinitions[Eigenstates],"Pseudo-Scalar Higgs"]===
            False,
          
          If[FreeQ[list,
                C[PseudoScalar,AntiField[ParticlesToGPH[[i]]],
                  ParticlesToGPH[[i]]]]\[Equal]False,
            
            coup = getSPhenoCoupling[
                  Cp[PseudoScalar,AntiField[ParticlesToGPH[[i]]],
                    ParticlesToGPH[[i]]]][[1,1]];
            
            ind = MakeIndicesCoupling[{PseudoScalar,
                    i1},{AntiField[ParticlesToGPH[[i]]],
                    i2},{ParticlesToGPH[[i]],i2},
                  getSPhenoCoupling[
                      Cp[PseudoScalar,AntiField[ParticlesToGPH[[i]]],
                        ParticlesToGPH[[i]]]][[2]]][[1]];
            Switch[getType[ParticlesToGPH[[i]]],
              F,
              
              WriteString[sphenoBR,
                  SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = "<>
                    SPhenoForm[coup]<>ind<>"*2._dp*vev/"<>
                    SPhenoMass[ParticlesToGPH[[i]],i2]<>" \n" ];,
              S,
              
              WriteString[sphenoBR,
                  SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = 0.5_dp*"<>
                    SPhenoForm[coup]<>ind<>"*vev/"<>
                    SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];,
              V,
              
              WriteString[sphenoBR,
                  SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = -0.5_dp*"<>
                    SPhenoForm[coup]<>ind<>"*vev/"<>
                    SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];
              ];,
            
            WriteString[sphenoBR,
                SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = 0._dp \n"]; 
            ];
          (* 
            WriteString[sphenoBR,
                SPhenoRatioSavePseudo[ParticlesToGPH[[i]],i1,i2]<>" = "<>
                  SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>
                  " \n" ]; *)
          ];
        
        
        If[getGenSPheno[ParticlesToGPH[[i]]]>1,
          WriteString[sphenoBR, "End Do \n"];
          ];
        i++;];
      
      MakeCall["CoupHiggsToPhoton",
        Flatten[{NeededRatiosLoopCouplingsPhoton,
            NeededMassesLoopPhoton}],{SPhenoMass[HiggsBoson,i1]},{"coup"},
        sphenoBR];
      WriteString[sphenoBR,
        "cplHiggsPP(i1) = coup*oo4pi*"<>SPhenoForm[leftCoupling]<>"**2 * Sin("<>
          SPhenoForm[Weinberg]<>")**2 \n"]; 
      MakeCall["CoupHiggsToPhotonSM",
        NeededMassesLoopPhoton,{SPhenoMass[HiggsBoson,i1]},{"coup"},
        sphenoBR];
      WriteString[sphenoBR,
        "ratioPP(i1) = Real((cplHiggsPP(i1)/(coup*oo4pi*"<>SPhenoForm[
            leftCoupling]<>"**2 * Sin("<>SPhenoForm[Weinberg]<>
          ")**2 ))**2,dp)\n"]; 
      
      MakeCall["CoupHiggsToGluon",
        Flatten[{NeededRatiosLoopCouplingsGluon,
            NeededMassesLoopGluon}],{SPhenoMass[HiggsBoson,i1]},{"coup"},
        sphenoBR];
      WriteString[sphenoBR,
        "cplHiggsGG(i1) = coup*oo4pi*"<>SPhenoForm[leftCoupling]<>"**2 * Sin("<>
          SPhenoForm[Weinberg]<>")**2 \n"]; 
      MakeCall["CoupHiggsToGluonSM",
        NeededMassesLoopGluon,{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
      WriteString[sphenoBR,
        "ratioGG(i1) = Real((cplHiggsGG(i1)/(coup*oo4pi*"<>SPhenoForm[
            leftCoupling]<>"**2 * Sin("<>SPhenoForm[Weinberg]<>
          ")**2))**2,dp)\n"]; 
      
      
      If[FreeQ[ParticleDefinitions[Eigenstates],"Pseudo-Scalar Higgs"]===
          False,
        MakeCall["CoupPseudoHiggsToPhoton",
          Flatten[{NeededRatiosLoopCouplingsPhotonPseudo,
              NeededMassesLoopPhoton}],{SPhenoMass[HiggsBoson,i1]},{"coup"},
          sphenoBR];
        WriteString[sphenoBR,
          "cplPseudoHiggsPP(i1) = coup*oo4pi*"<>SPhenoForm[leftCoupling]<>"**2 * Sin("<>
            SPhenoForm[Weinberg]<>")**2 \n"]; 
        MakeCall["CoupPseudoHiggsToPhotonSM",
          NeededMassesLoopPhoton,{SPhenoMass[HiggsBoson,i1]},{"coup"},
          sphenoBR];
        WriteString[sphenoBR,
          "ratioPPP(i1) = Real((cplHiggsPP(i1)/(coup*oo4pi*"<>SPhenoForm[
              leftCoupling]<>"**2 * Sin("<>SPhenoForm[Weinberg]<>
            ")**2 ))**2,dp)\n"]; 
        
        MakeCall["CoupPseudoHiggsToGluon",
          Flatten[{NeededRatiosLoopCouplingsGluonPseudo,
              NeededMassesLoopGluon}],{SPhenoMass[HiggsBoson,i1]},{"coup"},
          sphenoBR];
        WriteString[sphenoBR,
          "cplPseudoHiggsGG(i1) = coup*oo4pi*"<>SPhenoForm[leftCoupling]<>"**2 * Sin("<>
            SPhenoForm[Weinberg]<>")**2 \n"]; 
        MakeCall["CoupPseudoHiggsToGluonSM",
          NeededMassesLoopGluon,{SPhenoMass[HiggsBoson,i1]},{"coup"},
          sphenoBR];
        WriteString[sphenoBR,
          "ratioPGG(i1) = Real((cplHiggsGG(i1)/(coup*oo4pi*"<>SPhenoForm[
              leftCoupling]<>"**2 * Sin("<>SPhenoForm[Weinberg]<>
            ")**2))**2,dp)\n"]; 
        ];
      
      WriteString[sphenoBR, "End Do\n"];
      
      
      Print["   Writing Coupling ratios for HiggsBounds"];
      
      WriteString[sphenoBR, 
        "Do i1=1, "<>ToString[getGenSPheno[HiggsBoson]]<>"\n"];
      For[i=1,i\[LessEqual]Length[SMParticles],
        If[FreeQ[ParticleDefinitions[Eigenstates],"Higgs"]===False,
          
          If[FreeQ[list,
                  C[HiggsBoson,AntiField[SMParticles[[i]]],
                    SMParticles[[i]]]]\[Equal]False,
              
              ind = MakeIndicesCoupling[{HiggsBoson,
                      i1},{AntiField[SMParticles[[i]]],i2},{SMParticles[[i]],
                      i2},getSPhenoCoupling[
                        Cp[HiggsBoson,AntiField[SMParticles[[i]]],
                          SMParticles[[i]]]][[2]]][[1]];
              
              If[getGenSPheno[SMParticles[[i]]]>1,
                
                WriteString[sphenoBR, 
                    "Do i2=1, "<>ToString[getGenSPheno[SMParticles[[i]]]]<>
                      "\n"];
                ];
              
              Switch[getType[SMParticles[[i]]],
                F,
                	
                coupL = 
                  getSPhenoCoupling[
                      Cp[HiggsBoson,AntiField[SMParticles[[i]]],
                        SMParticles[[i]]]][[1,1]];
                	
                coupR = 
                  getSPhenoCoupling[
                      Cp[HiggsBoson,AntiField[SMParticles[[i]]],
                        SMParticles[[i]]]][[1,2]];
                	
                WriteString[sphenoBR,
                  SPhenoRatioHBS[SMParticles[[i]],i1,i2]<>" = 2._dp*(("<>
                    SPhenoForm[coupL]<>ind<>"+"<>SPhenoForm[coupR]<>ind<>")*vev/"<>
                    SPhenoMass[SMParticles[[i]],i2]<>")**2 \n" ];
                	
                WriteString[sphenoBR,
                  SPhenoRatioHBP[SMParticles[[i]],i1,i2]<>" = 2._dp*(("<>
                    SPhenoForm[coupL]<>ind<>"-"<>SPhenoForm[coupR]<>ind<>")*vev/"<>
                    SPhenoMass[SMParticles[[i]],i2]<>")**2 \n" ];,
                V,
                	
                coup = getSPhenoCoupling[
                      Cp[HiggsBoson,AntiField[SMParticles[[i]]],
                        SMParticles[[i]]]][[1,1]];
                	
                WriteString[sphenoBR,
                  SPhenoRatioHB[SMParticles[[i]],i1,i2]<>" = (-0.5_dp*"<>
                    SPhenoForm[coup]<>ind<>"*vev/"<>
                    SPhenoMassSq[SMParticles[[i]],i2]<>")**2 \n" ];
                ];
              If[getGenSPheno[SMParticles[[i]]]>1,
                WriteString[sphenoBR, "End Do \n"];
                ];
              ];
          ];
        If[
          FreeQ[ParticleDefinitions[Eigenstates],"Pseudo-Scalar Higgs"]===
            False,
          
          If[FreeQ[list,
                  C[PseudoScalar,AntiField[SMParticles[[i]]],
                    SMParticles[[i]]]]\[Equal]False,
              
              ind = MakeIndicesCoupling[{PseudoScalar,
                      i1},{AntiField[SMParticles[[i]]],i2},{SMParticles[[i]],
                      i2},getSPhenoCoupling[
                        Cp[PseudoScalar,AntiField[SMParticles[[i]]],
                          SMParticles[[i]]]][[2]]][[1]];
              If[getGenSPheno[SMParticles[[i]]]>1,
                
                WriteString[sphenoBR, 
                    "Do i2=1, "<>ToString[getGenSPheno[SMParticles[[i]]]]<>
                      "\n"];
                ];
              Switch[getType[SMParticles[[i]]],
                F,
                	
                coupL = 
                  getSPhenoCoupling[
                      Cp[PseudoScalar,AntiField[SMParticles[[i]]],
                        SMParticles[[i]]]][[1,1]];
                	
                coupR = 
                  getSPhenoCoupling[
                      Cp[PseudoScalar,AntiField[SMParticles[[i]]],
                        SMParticles[[i]]]][[1,2]];
                	
                WriteString[sphenoBR,
                  SPhenoRatioPseudoHBS[SMParticles[[i]],i1,i2]<>" = 2._dp*(("<>
                    SPhenoForm[coupL]<>ind<>"+"<>SPhenoForm[coupR]<>ind<>")*vev/"<>
                    SPhenoMass[SMParticles[[i]],i2]<>")**2 \n" ];
                	
                WriteString[sphenoBR,
                  SPhenoRatioPseudoHBP[SMParticles[[i]],i1,i2]<>" = 2._dp*(("<>
                    SPhenoForm[coupL]<>ind<>"-"<>SPhenoForm[coupR]<>ind<>")*vev/"<>
                    SPhenoMass[SMParticles[[i]],i2]<>")**2 \n" ];,
                V,
                	
                coup = getSPhenoCoupling[
                      Cp[HiggsBoson,AntiField[SMParticles[[i]]],
                        SMParticles[[i]]]][[1,1]];
                	
                WriteString[sphenoBR,
                  SPhenoRatioPseudoHB[SMParticles[[i]],i1,i2]<>" = (-0.5_dp*"<>
                    SPhenoForm[coup]<>ind<>"*vev/"<>
                    SPhenoMassSq[SMParticles[[i]],i2]<>")**2 \n" ];
                ];
              If[getGenSPheno[SMParticles[[i]]]>1,
                WriteString[sphenoBR, "End Do \n"];
                ];
              ];
          ];
        i++;];
      WriteString[sphenoBR, "End Do \n"];
      
      
      ];

GenerateHiggsLoopCoupling[vname_,ratios_,masses_,list_]:=Block[{i, factor},
      
      Print["Write Loop induced coupling Higgs to ",vname];
      
      MakeSubroutineTitle["CoupHiggsTo"<>vname,
        Flatten[{ratios,masses}],{"mHiggs"},{"coup"},sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Implicit None \n"];
      MakeVariableList[ratios,",Intent(in)",sphenoLoopCoup];
      MakeVariableList[masses,",Intent(in)",sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mHiggs \n"];
      WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coup \n"];
      WriteString[sphenoLoopCoup,"Integer :: i1 \n"];
      WriteString[sphenoLoopCoup,"Real(dp) :: Mh2p \n"];
      
      WriteString[sphenoLoopCoup,"mH2p = 0.25_dp*mHiggs**2 \n"];
      WriteString[sphenoLoopCoup,"coup = 0._dp \n \n"];
      
      For[i=1,i\[LessEqual]Length[list],
        If[getGenSPheno[list[[i,1]]]>1,
          
          WriteString[sphenoLoopCoup,
              "Do i1 =1, "<>ToString[getGenSPheno[list[[i,1]]]] <>"\n"];
          ];
        
        Switch[getType[list[[i,1]]],
          S,
          	spinname = "zero";,
          V,
          	spinname ="one";,
          F,
          	spinname ="onehalf";
          ];
        
        factor = list[[i,2]]^2;
        
        
        If[vname=!="Gluon",
          factor = ChargeFactor[VectorP,list[[i,1]],list[[i,1]]];
          ];
        
        
        WriteString[sphenoLoopCoup,
          "coup = coup + "<>SPhenoForm[factor]<>"*"<>
            SPhenoRatio[list[[i,1]],i1]<>"*A_"<>spinname <>"(mH2p/"<>
            SPhenoMass[list[[i,1]],i1]<>"**2)\n"];
        
        If[getGenSPheno[list[[i,1]]]>1,
          WriteString[sphenoLoopCoup,"End Do \n"];
          ];
        
        i++;];
      
      If[vname==="Gluon",
        WriteString[sphenoLoopCoup,"coup = 0.75_dp*coup \n"];
        ];
      
      WriteString[sphenoLoopCoup,
        "End Subroutine CoupHiggsTo"<>vname <>"\n\n"];
      ];


GenerateHiggsLoopCouplingSM[vname_,ratios_,masses_,list_]:=Block[{i},
      
      Print["Write Loop induced coupling Higgs to ",vname];
      
      MakeSubroutineTitle["CoupHiggsTo"<>vname<>"SM",
        Flatten[{masses}],{"mHiggs"},{"coup"},sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Implicit None \n"];
      MakeVariableList[masses,",Intent(in)",sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mHiggs \n"];
      WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coup \n"];
      WriteString[sphenoLoopCoup,"Integer :: i1 \n"];
      WriteString[sphenoLoopCoup,"Real(dp) :: Mh2p \n"];
      
      WriteString[sphenoLoopCoup,"mH2p = 0.25_dp*mHiggs \n"];
      WriteString[sphenoLoopCoup,"coup = 0._dp \n \n"];
      
      For[i=1,i\[LessEqual]Length[list],
        If[getGenSPheno[list[[i,1]]]>1,
          
          WriteString[sphenoLoopCoup,
              "Do i1 =1, "<>ToString[getGenSPheno[list[[i,1]]]] <>"\n"];
          ];
        
        Switch[getType[list[[i,1]]],
          S,
          	spinname = "zero";,
          V,
          	spinname ="one";,
          F,
          	spinname ="onehalf";
          ];
        
        WriteString[sphenoLoopCoup,
          "coup = coup + "<>SPhenoForm[list[[i,2]]]<>"*A_"<>spinname <>"(mH2p/"<>
            SPhenoMass[list[[i,1]],i1]<>")\n"];
        
        If[getGenSPheno[list[[i,1]]]>1,
          WriteString[sphenoLoopCoup,"End Do \n"];
          ];
        
        i++;];
      WriteString[sphenoLoopCoup,
        "End Subroutine CoupHiggsTo"<>vname <>"SM \n\n"];
      ];



GeneratePseudoHiggsLoopCoupling[vname_,ratios_,masses_,list_]:=Block[{i},
      
      Print["Write Loop induced coupling Higgs to ",vname];
      
      MakeSubroutineTitle["CoupPseudoHiggsTo"<>vname,
        Flatten[{ratios,masses}],{"mHiggs"},{"coup"},sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Implicit None \n"];
      MakeVariableList[ratios,",Intent(in)",sphenoLoopCoup];
      MakeVariableList[masses,",Intent(in)",sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mHiggs \n"];
      WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coup \n"];
      WriteString[sphenoLoopCoup,"Integer :: i1 \n"];
      WriteString[sphenoLoopCoup,"Real(dp) :: Mh2p \n"];
      
      WriteString[sphenoLoopCoup,"mH2p = 0.25_dp*mHiggs \n"];
      WriteString[sphenoLoopCoup,"coup = 0._dp \n \n"];
      
      For[i=1,i\[LessEqual]Length[list],
        If[getGenSPheno[list[[i,1]]]>1  && getType[list[[i,1]]]===F,
          
          WriteString[sphenoLoopCoup,
              "Do i1 =1, "<>ToString[getGenSPheno[list[[i,1]]]] <>"\n"];
          ];
        
        Switch[getType[list[[i,1]]],
          S,
          	spinname = "zero";,
          V,
          	spinname ="one";,
          F,
          	spinname ="onehalf";
          
          
          WriteString[sphenoLoopCoup,
            "coup = coup + "<>SPhenoForm[list[[i,2]]]<>"*"<>
              SPhenoRatio[list[[i,1]],i1]<>"*AP_"<>spinname <>"(mH2p/"<>
              SPhenoMass[list[[i,1]],i1]<>")\n"];
          ];
        
        
        If[getGenSPheno[list[[i,1]]]>1 && getType[list[[i,1]]]===F,
          WriteString[sphenoLoopCoup,"End Do \n"];
          ];
        
        i++;];
      WriteString[sphenoLoopCoup,
        "End Subroutine CoupPseudoHiggsTo"<>vname <>"\n\n"];
      ];


GeneratePseudoHiggsLoopCouplingSM[vname_,ratios_,masses_,list_]:=Block[{i},
      
      Print["Write Loop induced coupling Higgs to ",vname];
      
      MakeSubroutineTitle["CoupPseudoHiggsTo"<>vname<>"SM",
        Flatten[{masses}],{"mHiggs"},{"coup"},sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Implicit None \n"];
      MakeVariableList[masses,",Intent(in)",sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mHiggs \n"];
      WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coup \n"];
      WriteString[sphenoLoopCoup,"Integer :: i1 \n"];
      WriteString[sphenoLoopCoup,"Real(dp) :: Mh2p \n"];
      
      WriteString[sphenoLoopCoup,"mH2p = 0.25_dp*mHiggs \n"];
      WriteString[sphenoLoopCoup,"coup = 0._dp \n \n"];
      
      For[i=1,i\[LessEqual]Length[list],
        If[getGenSPheno[list[[i,1]]]>1 && getType[list[[i,1]]]===F,
          
          WriteString[sphenoLoopCoup,
              "Do i1 =1, "<>ToString[getGenSPheno[list[[i,1]]]] <>"\n"];
          ];
        
        Switch[getType[list[[i,1]]],
          S,
          	spinname = "zero";,
          V,
          	spinname ="one";,
          F,
          	spinname ="onehalf";
          	
          WriteString[sphenoLoopCoup,
            "coup = coup + "<>SPhenoForm[list[[i,2]]]<>"*AP_"<>spinname <>"(mH2p/"<>
              SPhenoMass[list[[i,1]],i1]<>")\n"];
          
          ];
        If[getGenSPheno[list[[i,1]]]>1 && getType[list[[i,1]]]===F,
          WriteString[sphenoLoopCoup,"End Do \n"];
          ];
        
        
        i++;];
      WriteString[sphenoLoopCoup,
        "End Subroutine CoupPseudoHiggsTo"<>vname <>"SM \n\n"];
      ];


GenerateHiggsFermionCouplings[scalar_,fermion_,yukawa_,mixL_,mixR_,vev_,
      mixHiggs_,compHiggs_]:=Block[{i,temp},
      
      temp=
        InsFields[{{C[fermion,FieldToInsert[1],AntiField[FieldToInsert[2]]],
              C[bar[fermion],FieldToInsert[2],
                AntiField[FieldToInsert[1]]]},{Internal[1]\[Rule]
                FieldToInsert[1], Internal[2]\[Rule]FieldToInsert[2],
              External[1]\[Rule]fermion,External[2]\[Rule]bar[fermion]}}];
      
      AllInternalParticles={};
      AllAddedCouplings ={};
      
      WaveFunctionContribution={};
      For[i=1,i\[LessEqual]Length[temp],
        If[
          FreeQ[SMParticles,getBlank[Internal[1] /. temp[[i,2]]]] && 
            FreeQ[SMParticles,getBlank[Internal[2] /. temp[[i,2]]]],
          
          WaveFunctionContribution = 
            Join[WaveFunctionContribution,{temp[[i]]/. C[a__]\[Rule]Cp[a]}];
          
          AllInternalParticles=
            Join[AllInternalParticles,{Internal[1],Internal[2]}/. 
                temp[[i,2]]];
          AllAddedCouplings = Join[AllAddedCouplings,temp[[i,1]]];
          ];
        i++;];
      
      	PenguinContributions={};
      
      temp=
        InsFields[{{C[fermion,FieldToInsert[1],AntiField[FieldToInsert[2]]],
              C[bar[fermion],AntiField[FieldToInsert[1]],FieldToInsert[3]],
              C[scalar,FieldToInsert[2],
                AntiField[FieldToInsert[3]]]},{Internal[1]\[Rule]
                FieldToInsert[1], Internal[2]\[Rule]FieldToInsert[2], 
              Internal[3]\[Rule]FieldToInsert[3],External[1]\[Rule]fermion,
              External[2]\[Rule]bar[fermion],External[3]\[Rule]scalar}}];
      For[j=1,j\[LessEqual]Length[temp],
        If[
          FreeQ[SMParticles,getBlank[Internal[1] /. temp[[j,2]]]] && 
            FreeQ[SMParticles,getBlank[Internal[2] /. temp[[j,2]]]] && 
            FreeQ[SMParticles,getBlank[Internal[3] /. temp[[j,2]]]],
          
          PenguinContributions= 
            Join[PenguinContributions,{temp[[j]]/. C[a__]\[Rule]Cp[a]}];
          
          AllInternalParticles=
            Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. 
                temp[[j,2]]];
          AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
          ];
        j++;];
      
      NeededMasses=Intersection[SPhenoMass/@AllInternalParticles];
      NeededCouplingsInsert=
        Intersection[AllAddedCouplings /. C[a__]\[Rule]Cp[a]];
      NeededCouplings={};
      For[i=1,i\[LessEqual]Length[NeededCouplingsInsert],
        NeededCouplings=
          Join[NeededCouplings,
            getSPhenoCoupling[NeededCouplingsInsert[[i]],
                SPhenoCouplingsAll][[1]]];
        i++;];
      NeededCouplings = Intersection[Flatten[NeededCouplings]];
      
      ParametersEffCouplings=
        Join[ParametersEffCouplings,{{ToExpression[
                "EffC"<>SPhenoForm[scalar]<>"To"<>SPhenoForm[fermion]],
              NeededMasses,NeededCouplings}}];
      
      WriteEffCouplingsFermionHiggs[
        "Coup"<>SPhenoForm[fermion]<>"To"<>SPhenoForm[scalar],NeededMasses,
        NeededCouplings,WaveFunctionContribution,PenguinContributions, yukawa,
        mixL,mixR,vev,mixHiggs,compHiggs];
      
      ];

WriteEffCouplingsFermionHiggs[name_,masses_,couplings_,wave_,penguin_,yukawa_,
      mixL_,mixR_,vev_,mixHiggs_,compHiggs_]:=Block[{i},
      
      Print["Write effective Coupling ",name];
      
      MakeSubroutineTitle[name,
        Flatten[{masses,couplings,yukawa,mixL,mixR,vev,mixHiggs}],{"gt1","gt2",
          "gt3"},{"coupL","coupR"},sphenoLoopCoup];
      
      WriteString[sphenoLoopCoup, "Implicit None \n"];
      MakeVariableList[
        Flatten[{couplings,masses,yukawa,mixL,mixR,vev,mixHiggs}],",Intent(in)",
        sphenoLoopCoup];
      MakeVariableList[MakeSquaredMass/@masses,"",sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"Integer, Intent(in) :: gt1, gt2, gt3 \n"];
      WriteString[sphenoLoopCoup,
        "Complex(dp), Intent(out) :: coupL, coupR \n"];
      WriteString[sphenoLoopCoup, "Integer :: i1, i2, i3 \n"];
      WriteString[sphenoLoopCoup, 
        "Complex(dp) :: sigLR, sigRL,dc_L,dc_R, coupL1, coupR1, coupL2, coupR2, coupL3, coupR3,coupC, B0m2 \n"]\
;
      WriteString[sphenoLoopCoup, "Complex(dp) :: C0m,C2m \n \n\n"];
      
      For[i=1,i\[LessEqual]Length[masses],
        WriteString[sphenoLoopCoup,
          ToString[MakeSquaredMass[masses[[i]]]]<>" = " <>
            ToString[masses[[i]]]<>"**2 \n"];
        i++;];
      
      
      
      WriteString[sphenoLoopCoup, 
        "If (CompareMatrices(id3C,"<>SPhenoForm[mixL]<>
          ",NearlyZero).And.& \n"];
      WriteString[sphenoLoopCoup, 
        "      & CompareMatrices(id3C,"<>SPhenoForm[mixR]<>
          ",NearlyZero)) Then \n"];
      WriteString[sphenoLoopCoup, 
        "coupL="<>SPhenoForm[yukawa]<>"(gt2,gt1) \n"];
      WriteString[sphenoLoopCoup, 
        "coupR=Conjg("<>SPhenoForm[yukawa]<>"(gt1,gt2)) \n"];
      
      WriteString[sphenoLoopCoup, 
        "Else If (CompareMatrices(id3C,"<>SPhenoForm[mixL]<>
          ",NearlyZero)) Then \n"];
      WriteString[sphenoLoopCoup, "Do i2=1,3 \n"];
      WriteString[sphenoLoopCoup, 
        "coupL=coupL+"<>SPhenoForm[yukawa]<>"(gt2,i2)*Conjg("<>
          SPhenoForm[mixR]<>"(gt1,i2)) \n"];
      WriteString[sphenoLoopCoup, 
        "coupR=coupR+Conjg("<>SPhenoForm[yukawa]<>"(gt1,i2))*"<>
          SPhenoForm[mixR]<>"(gt2,i2) \n"];
      WriteString[sphenoLoopCoup, "End Do \n"];
       
      WriteString[sphenoLoopCoup, 
        "Else If (CompareMatrices(id3C,"<>SPhenoForm[mixR]<>
          ",NearlyZero)) Then \n"];
      WriteString[sphenoLoopCoup, "Do i1=1,3 \n"];
      WriteString[sphenoLoopCoup, 
        "coupL=coupL+Conjg("<>SPhenoForm[mixL]<>"(gt2,i1))*"<>
          SPhenoForm[yukawa]<>"(i1,gt1) \n"];
      WriteString[sphenoLoopCoup, 
        "coupR=coupR+"<>SPhenoForm[mixL]<>"(gt1,i1)*Conjg("<>
          SPhenoForm[yukawa]<>"(i1,gt2)) \n"];
      WriteString[sphenoLoopCoup, "End Do \n"];
      
      WriteString[sphenoLoopCoup, "Else \n"];
      WriteString[sphenoLoopCoup, "Do i1=1,3 \n"];
      WriteString[sphenoLoopCoup, "Do i2=1,3 \n"];
      WriteString[sphenoLoopCoup, 
        "coupL=coupL+Conjg("<>SPhenoForm[mixL]<>"(gt2,i1))*"<>
          SPhenoForm[yukawa]<>"(i1,i2)*Conjg("<>SPhenoForm[mixR]<>
          "(gt1,i2)) \n"];
      WriteString[sphenoLoopCoup, 
        "coupR=coupR+"<>SPhenoForm[mixL]<>"(gt1,i1)*Conjg("<>
          SPhenoForm[yukawa]<>"(i1,i2))*"<>SPhenoForm[mixL]<>"(gt2,i2) \n"];
      WriteString[sphenoLoopCoup, "End Do \n"];
      WriteString[sphenoLoopCoup, "End Do \n"];
      WriteString[sphenoLoopCoup, "End If \n"];
      
      WriteString[sphenoLoopCoup, 
        "coupR = - coupR*"<>SPhenoForm[mixHiggs]<>"(gt3,"<>
          SPhenoForm[compHiggs]<>") \n"];
      WriteString[sphenoLoopCoup, 
        "coupL = - coupL*"<>SPhenoForm[mixHiggs]<>"(gt3,"<>
          SPhenoForm[compHiggs]<>") \n \n\n"];	
      
      
      
      WriteString[sphenoLoopCoup,"sigLR = 0._dp \n"];
      WriteString[sphenoLoopCoup,"sigRL = 0._dp \n"];
      
      For[i=1, i\[LessEqual]Length[wave],
        p1=(Internal[1] /. wave[[i,2]]);
        p2 =(Internal[2] /. wave[[i,2]]);
        
        If[getType[p1]===F, pt1=p1; pt2=p2;,pt1=p2; pt2=p1;];
        If[getGenSPheno[pt1]>1,
          WriteString[sphenoLoopCoup,
              "Do i1=1,"<> ToString[getGenSPheno[pt1]]<>"\n"];];
        If[getGenSPheno[pt2]>1,
          WriteString[sphenoLoopCoup,
              "Do i2=1,"<> ToString[getGenSPheno[pt2]]<>"\n"];];
        WriteString[sphenoLoopCoup,
          "B0m2 = "<> SPhenoMass[pt1,i1]<>"*B0(0._dp,"<>SPhenoMass[pt1,i1]<>"**2,"<>
            SPhenoMass[pt2,i2]<>"**2) \n"];
        
        c1=getSPhenoCoupling[wave[[i,1,1]],SPhenoCouplingsAll];
        c2=getSPhenoCoupling[wave[[i,1,2]],SPhenoCouplingsAll];
        
        ind1 = 
          MakeIndicesCoupling[{External[1],gt1}/.wave[[i,2]],{Internal[1],
                i1}/.wave[[i,2]],{AntiField[Internal[2]],i2}/.wave[[i,2]],
            c1[[2]]];
        ind2 =
          MakeIndicesCoupling[{External[2],
                gt2}/.wave[[i,2]],{AntiField[Internal[1]],
                i1}/.wave[[i,2]],{Internal[2],i2}/.wave[[i,2]],c2[[2]]];
        
        If[ind1[[2]]\[Equal]False,
          
          WriteString[sphenoLoopCoup,
            "coupL1 = "<>ToString[c1[[1,1]]]<>ind1[[1]] <>"\n"];
          
          WriteString[sphenoLoopCoup,
            "coupR1 = "<>ToString[c1[[1,2]]]<>ind1[[1]] <>"\n"];,
          
          WriteString[sphenoLoopCoup,
            "coupR1 = Conjg("<>ToString[c1[[1,1]]]<>ind1[[1]] <>")\n"];
          WriteString[sphenoLoopCoup,
            "coupL1 = Conjg("<>ToString[c1[[1,2]]]<>ind1[[1]] <>")\n"];
          ];
        
        If[ind2[[2]]\[Equal]False,
          
          WriteString[sphenoLoopCoup,
            "coupL2 = "<>ToString[c2[[1,1]]]<>ind2[[1]] <>"\n"];
          
          WriteString[sphenoLoopCoup,
            "coupR2 = "<>ToString[c2[[1,2]]]<>ind2[[1]] <>"\n"];,
          
          WriteString[sphenoLoopCoup,
            "coupR2 = Conjg("<>ToString[c2[[1,1]]]<>ind2[[1]] <>")\n"];
          
          WriteString[sphenoLoopCoup,
            "coupL2 = Conjg("<>ToString[c2[[1,2]]]<>ind2[[1]] <>")\n"];
          ];
        
        factor = 
          SPhenoForm[
            CalculateColorFactor[External[1] /. wave[[i,2]],
              Internal[1] /. wave[[i,2]],Internal[1] /. wave[[i,2]]]];
        
        WriteString[sphenoLoopCoup,
          "sigLR = sigLR + "<>factor<>"*coupR2*coupR1*B0m2 \n"];
        WriteString[sphenoLoopCoup,
          "sigRL = sigRL + "<>factor<>"*coupL2*coupL1*B0m2 \n"];
        
        
        If[getGenSPheno[pt1]>1,WriteString[sphenoLoopCoup,"End Do \n"];];
        If[getGenSPheno[pt2]>1,WriteString[sphenoLoopCoup,"End Do \n"];];
        WriteString[sphenoLoopCoup,"\n\n"];
        i++;];
      
      WriteString[sphenoLoopCoup,"\n\n\n"];
      WriteString[sphenoLoopCoup,
        "sigRL = Cmplx(0._dp,oosqrt2,dp)*"<>SPhenoForm[yukawa]<>
          "(gt1,gt2)*oo16pi2*sigRL \n"];
      WriteString[sphenoLoopCoup,
        "sigLR = Cmplx(0._dp,-oosqrt2,dp)*Conjg("<>SPhenoForm[yukawa]<>
          "(gt2,gt1))*oo16pi2*sigLR \n"];
      
      WriteString[sphenoLoopCoup,"dc_L = 0._dp \n"];
      WriteString[sphenoLoopCoup,"dc_R = 0._dp \n"];
      
      For[i=1, i\[LessEqual]Length[penguin],
        
        c1=getSPhenoCoupling[penguin[[i,1,1]],SPhenoCouplingsAll];
        c2=getSPhenoCoupling[penguin[[i,1,2]],SPhenoCouplingsAll];
        c3=getSPhenoCoupling[penguin[[i,1,3]],SPhenoCouplingsAll];
        
        ind1 = 
          MakeIndicesCoupling[{External[1],gt1}/.penguin[[i,2]],{Internal[1],
                i1}/.penguin[[i,2]],{AntiField[Internal[2]],
                i2}/.penguin[[i,2]],c1[[2]]];
        ind2 =
          MakeIndicesCoupling[{External[2],
                gt2}/.penguin[[i,2]],{AntiField[Internal[1]],
                i1}/.penguin[[i,2]],{Internal[3],i3}/.penguin[[i,2]],
            c2[[2]]]; 
        ind3 = 
          MakeIndicesCoupling[{External[3],gt3}/.penguin[[i,2]],{Internal[2],
                i2}/.penguin[[i,2]],{AntiField[Internal[3]],
                i3}/.penguin[[i,2]],c3[[2]]];
        
        Switch[
          VType[getType[penguin[[i,1,3,1]]],getType[penguin[[i,1,3,2]]],
            getType[penguin[[i,1,3,3]]]],
          FFS,
          	pS1=(Internal[1] /.penguin[[i,2]]);
          	pF1 =(Internal[2] /. penguin[[i,2]]);
          		  pF2 =(Internal[3] /. penguin[[i,2]]);
          
          
          If[getGenSPheno[pS1]>1,
            WriteString[sphenoLoopCoup,
                "Do i1=1,"<> ToString[getGenSPheno[pS1]]<>"\n"];];
          If[getGenSPheno[pF1]>1,
            WriteString[sphenoLoopCoup,
                "Do i2=1,"<> ToString[getGenSPheno[pF1]]<>"\n"];];
          
          If[getGenSPheno[pF2]>1,
            WriteString[sphenoLoopCoup,
                "Do i3=1,"<> ToString[getGenSPheno[pF2]]<>"\n"];];
          
          
          WriteString[sphenoLoopCoup,
            "C0m = -"<>SPhenoMass[pF1,i2]<>"*"<>SPhenoMass[pF2,i3]  <>"* C0_3m("<>
              SPhenoMassSq[pS1,i1] <>","<>SPhenoMassSq[pF1,i2]<>","<>
              SPhenoMassSq[pF2,i3] <> ")\n"];
          
          WriteString[sphenoLoopCoup,
            "C2m = C_2("<>SPhenoMassSq[pS1,i1] <>","<>SPhenoMassSq[pF1,i2]<>","<>
              SPhenoMassSq[pF2,i3] <> ")\n"];
          
          If[ind1[[2]]\[Equal]False,
            
            WriteString[sphenoLoopCoup,
              "coupL1 = "<>ToString[c1[[1,1]]]<>ind1[[1]] <>"\n"];
            
            WriteString[sphenoLoopCoup,
              "coupR1 = "<>ToString[c1[[1,2]]]<>ind1[[1]] <>"\n"];,
            
            WriteString[sphenoLoopCoup,
              "coupR1 = Conjg("<>ToString[c1[[1,1]]]<>ind1[[1]] <>")\n"];
            WriteString[sphenoLoopCoup,
              "coupL1 = Conjg("<>ToString[c1[[1,2]]]<>ind1[[1]] <>")\n"];
            ];
          
          If[ind2[[2]]\[Equal]False,
            
            WriteString[sphenoLoopCoup,
              "coupL2 = "<>ToString[c2[[1,1]]]<>ind2[[1]] <>"\n"];
            
            WriteString[sphenoLoopCoup,
              "coupR2 = "<>ToString[c2[[1,2]]]<>ind2[[1]] <>"\n"];,
            
            WriteString[sphenoLoopCoup,
              "coupR2 = Conjg("<>ToString[c2[[1,1]]]<>ind2[[1]] <>")\n"];
            
            WriteString[sphenoLoopCoup,
              "coupL2 = Conjg("<>ToString[c2[[1,2]]]<>ind2[[1]] <>")\n"];
            ];
          
          If[ind3[[2]]\[Equal]False,
            
            WriteString[sphenoLoopCoup,
              "coupL3 = "<>ToString[c3[[1,1]]]<>ind3[[1]] <>"\n"];
            
            WriteString[sphenoLoopCoup,
              "coupR3 = "<>ToString[c3[[1,2]]]<>ind3[[1]] <>"\n"];,
            
            WriteString[sphenoLoopCoup,
              "coupR3 = Conjg("<>ToString[c3[[1,1]]]<>ind3[[1]] <>")\n"];
            
            WriteString[sphenoLoopCoup,
              "coupL3 = Conjg("<>ToString[c3[[1,2]]]<>ind3[[1]] <>"=\n"];
            ];
          
          
          factor = 
            SPhenoForm[
              CalculateColorFactor[External[1] /. penguin[[i,2]],
                Internal[1] /. penguin[[i,2]],
                Internal[1] /. penguin[[i,2]]]];
          
          
          
          
          WriteString[sphenoLoopCoup,
            "dc_L = dc_L -"<>factor<>
              "* (coupR3*C2m+coupL3*C0m)*coupL2*coupL1 \n"];
          
          WriteString[sphenoLoopCoup,
            "dc_R = dc_R -"<>factor<>
              "* (coupL3*C2m+coupR3*C0m)*coupR2*coupR1 \n"];
          
          
          If[getGenSPheno[pF1]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
          If[getGenSPheno[pS1]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
          If[getGenSPheno[pF2]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
          WriteString[sphenoLoopCoup,"\n\n"];,	
          
          SSS,
          	pF1=(Internal[1] /.penguin[[i,2]]);
          	pS1 =(Internal[2] /. penguin[[i,2]]);
          		  pS2 =(Internal[3] /. penguin[[i,2]]);
          
          
          If[getGenSPheno[pF1]>1,
            WriteString[sphenoLoopCoup,
                "Do i1=1,"<> ToString[getGenSPheno[pF1]]<>"\n"];];
          
          If[getGenSPheno[pS1]>1,
            WriteString[sphenoLoopCoup,
                "Do i2=1,"<> ToString[getGenSPheno[pS1]]<>"\n"];];
          
          If[getGenSPheno[pS2]>1,
            WriteString[sphenoLoopCoup,
                "Do i3=1,"<> ToString[getGenSPheno[pS2]]<>"\n"];];
          
          
          
          WriteString[sphenoLoopCoup,
            "C0m = -"<>SPhenoMass[pF1,i1]  <>"* C0_3m("<>
              SPhenoMassSq[pF1,i1] <>","<>SPhenoMassSq[pS1,i2]<>","<>
              SPhenoMassSq[pS2,i3] <> ")\n"];
          
          If[ind1[[2]]\[Equal]False,
            
            WriteString[sphenoLoopCoup,
              "coupL1 = "<>ToString[c1[[1,1]]]<>ind1[[1]] <>"\n"];
            
            WriteString[sphenoLoopCoup,
              "coupR1 = "<>ToString[c1[[1,2]]]<>ind1[[1]] <>"\n"];,
            
            WriteString[sphenoLoopCoup,
              "coupR1 = Conjg("<>ToString[c1[[1,1]]]<>ind1[[1]] <>")\n"];
            WriteString[sphenoLoopCoup,
              "coupL1 = Conjg("<>ToString[c1[[1,2]]]<>ind1[[1]] <>")\n"];
            ];
          
          If[ind2[[2]]\[Equal]False,
            
            WriteString[sphenoLoopCoup,
              "coupL2 = "<>ToString[c2[[1,1]]]<>ind2[[1]] <>"\n"];
            
            WriteString[sphenoLoopCoup,
              "coupR2 = "<>ToString[c2[[1,2]]]<>ind2[[1]] <>"\n"];,
            
            WriteString[sphenoLoopCoup,
              "coupR2 = Conjg("<>ToString[c2[[1,1]]]<>ind2[[1]] <>")\n"];
            
            WriteString[sphenoLoopCoup,
              "coupL2 = Conjg("<>ToString[c2[[1,2]]]<>ind2[[1]] <>")\n"];
            ];
          
          If[ind3[[2]]\[Equal]False,
            
            WriteString[sphenoLoopCoup,
                "coupC = "<>ToString[c3[[1,1]]]<>ind3[[1]] <>"\n"];,
            WriteString[sphenoLoopCoup,
                "coupC = Conjg("<>ToString[c3[[1,1]]]<>ind3[[1]] <>")\n"];
            ];
          
          
          factor = 
            SPhenoForm[
              CalculateColorFactor[External[1] /. penguin[[i,2]],
                Internal[1] /. penguin[[i,2]],
                Internal[1] /. penguin[[i,2]]]];
          
          
          WriteString[sphenoLoopCoup,
            "dc_L = dc_L - "<>factor<>"*coupC*coupL2*coupL1*C0m \n"];
          
          WriteString[sphenoLoopCoup,
            "dc_R = dc_R - "<>factor<>"*coupC*coupR2*coupR1*C0m \n"];
          
          
          If[getGenSPheno[pS1]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
          If[getGenSPheno[pF1]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
          If[getGenSPheno[pS2]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
          WriteString[sphenoLoopCoup,"\n\n"];
          
          ];
        
        i++;];
      
      WriteString[sphenoLoopCoup,
        "coupL = coupL - SigRL*"<>SPhenoForm[mixHiggs] <>"(gt3,"<>
          SPhenoForm[compHiggs]<>")/"<>SPhenoForm[vev]<>"\n"];
      WriteString[sphenoLoopCoup,
        "coupL = coupL - SigLR*"<>SPhenoForm[mixHiggs] <>"(gt3,"<>
          SPhenoForm[compHiggs]<>")/"<>SPhenoForm[vev]<>"\n"];
      
      WriteString[sphenoLoopCoup,"coupL = coupL + oo16pi2*dc_L \n"];
      WriteString[sphenoLoopCoup,"coupR = coupR + oo16pi2*dc_R \n"];
      
      WriteString[sphenoLoopCoup,"End Subroutine "<>name<>" \n\n \n"];
      
      ];

(*
  GenerateDeltaVB:=
      Block[{i,j,temp,res,masses,couplings,couplinglist,i1,j1,f1,f2,f3,f4},
        Print["Write Delta VB"];
        
        temp=
          InsFields[{{C[Neutrino,FieldToInsert[1],
                  AntiField[FieldToInsert[2]]]},{Internal[1]\[Rule]
                  FieldToInsert[1], Internal[2]\[Rule]FieldToInsert[2],
                External[1]\[Rule]Neutrino}}];
        resWave=MakeMassesCouplingLists[temp,False];
        temp=
          InsFields[{{C[Electron,FieldToInsert[1],
                  AntiField[FieldToInsert[2]]]},{Internal[1]\[Rule]
                  FieldToInsert[1], Internal[2]\[Rule]FieldToInsert[2],
                External[1]\[Rule]Electron}}];
        resWaveTemp=MakeMassesCouplingLists[temp,False];
        resWave[[1]] = Join[resWave[[1]],resWaveTemp[[1]]];
        resWave[[2]] = Join[resWave[[2]],resWaveTemp[[2]]];
        resWave[[3]] = Join[resWave[[3]],resWaveTemp[[3]]];
        resWave[[4]] = Join[resWave[[4]],resWaveTemp[[4]]];
        
        temp = GeneratePenguinDiagrams[Neutrino,bar[Electron],VectorW];
        resPenguin = MakeMassesCouplingLists[temp,False];
        
        tempBox={};
        f1=Neutrino;f2=bar[Neutrino];f3=Electron; f4=bar[Electron];
        currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],
              C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],
              C[f3,AntiField[FieldToInsert[2]],FieldToInsert[3]],
              C[f4,AntiField[FieldToInsert[3]],
                FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],
              Internal[2]\[Rule]FieldToInsert[2],
              Internal[3]\[Rule]FieldToInsert[3],
              Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,
              External[2]\[Rule]f2,External[3]\[Rule]f3,External[4]\[Rule]f4,
              Index[1]\[Rule]gt1,Index[2]\[Rule]gt2,Index[3]\[Rule]gt3,
              Index[4]\[Rule]gt4, InsertionOrder\[Rule]1}};
        temp = MakeMassesCouplingLists[InsFields[currentTop],False][[1]];
        
        For[i=1,i\[LessEqual]Length[temp],
          If[getType[Internal[1] /. temp[[i,2]]]===F,
            tempBox = Join[tempBox,{temp[[i]]}];
            ];
          i++;];
        
        currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],
              C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],
              C[f4,AntiField[FieldToInsert[2]],FieldToInsert[3]],
              C[f3,AntiField[FieldToInsert[3]],
                FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],
              Internal[2]\[Rule]FieldToInsert[2],
              Internal[3]\[Rule]FieldToInsert[3],
              Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,
              External[2]\[Rule]f2,External[3]\[Rule]f4,External[4]\[Rule]f3,
              Index[1]\[Rule]gt1,Index[2]\[Rule]gt2,Index[3]\[Rule]gt4,
              Index[4]\[Rule]gt3, InsertionOrder\[Rule]2}};
        temp = MakeMassesCouplingLists[InsFields[currentTop],False][[1]];
        For[i=1,i\[LessEqual]Length[temp],
          If[getType[Internal[1] /. temp[[i,2]]]===S,
            tempBox = Join[tempBox,{temp[[i]]}];
            ];
          i++;];
        
        currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],
              C[f4,AntiField[FieldToInsert[1]],FieldToInsert[2]],
              C[f2,AntiField[FieldToInsert[2]],FieldToInsert[3]],
              C[f3,AntiField[FieldToInsert[3]],
                FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],
              Internal[2]\[Rule]FieldToInsert[2],
              Internal[3]\[Rule]FieldToInsert[3],
              Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,
              External[2]\[Rule]f4,External[3]\[Rule]f2,External[4]\[Rule]f3,
              Index[1]\[Rule]gt1,Index[2]\[Rule]gt4,Index[3]\[Rule]gt3,
              Index[4]\[Rule]gt2, InsertionOrder\[Rule]4}};
        temp = MakeMassesCouplingLists[InsFields[currentTop],False][[1]];
        For[i=1,i\[LessEqual]Length[temp],
          If[getType[Internal[1] /. temp[[i,2]]]===S,
            tempBox = Join[tempBox,{temp[[i]]}];
            ];
          i++;];
        
        resBox =  MakeMassesCouplingLists[tempBox,False] /. Cp\[Rule]C;
        
        Clear[f1,f2,f3,f4];
        
        couplings=
          Intersection[Flatten[{resWave[[4]],resPenguin[[4]],resBox[[4]]}]];
        
        SPhenoCouplingsDeltaVB={};
        parametersDeltaVB={};
        namesDeltaVB={};
        
        
        For[i=1,i\[LessEqual]Length[couplings],
          pos=Position[SPhenoCouplingsAll,couplings[[i]]];
          If[pos==={},
            pos=Position[SPhenoCouplingsAll,AntiField/@couplings[[i]]];
            ];
          
          SPhenoCouplingsDeltaVB=
            Join[SPhenoCouplingsDeltaVB,{Extract[SPhenoCouplingsAll,
                  pos[[1,1]]]}];
          
          parameterDeltaVB = 
            Join[parametersDeltaVB,
              Extract[SPhenoCouplingsAll,pos[[1,1]]][[4]]];
          
          namesDeltaVB = 
            Join[namesDeltaVB,
              Delete[Extract[SPhenoCouplingsAll,pos[[1,1]]][[2]],1]];
          i++;];
        
        parametersDeltaVB=Intersection[parametersDeltaVB];
        
        masses=
          Intersection[Flatten[{resWave[[2]],resPenguin[[2]],resBox[[2]]}]];
        namesDeltaVB=Intersection[namesDeltaVB];
        
        neededParameters=
          getNeededParametersForCouplings[
            Intersection[
              Flatten[{resWave[[4]],resPenguin[[4]],resBox[[4]]}]]];
        NeededParametersForDeltaVB=Flatten[{masses,neededParameters}];
        
        
        WriteString[sphenoLoopCoup,"\n\n\n"];
        
        MakeSubroutineTitle["DeltaVB",
          Flatten[{masses,neededParameters}],{"sinW2","sinW2_dr",
            "rho"},{"res"},sphenoLoopCoup];
        
        WriteString[sphenoLoopCoup,"Implicit None \n"];
        MakeVariableList[Flatten[{masses,neededParameters}],",Intent(in)",
          sphenoLoopCoup];
        MakeVariableList[MakeSquaredMass /@masses,"",sphenoLoopCoup];
        MakeVariableList[namesDeltaVB,"",sphenoLoopCoup];
        WriteString[sphenoLoopCoup,
          "Integer :: i1,i2,i3,i4,gt1,gt2,gt3,gt4 \n"];
        WriteString[sphenoLoopCoup,
          "Real(dp), Intent(in) :: sinW2,sinW2_Dr, rho \n"];
        WriteString[sphenoLoopCoup,"Real(dp), Intent(out) :: res \n \n"];
        WriteString[sphenoLoopCoup,
          "Complex(dp) :: sumI, coup1L,coup1R,coup2L,coup2R,coup3L,coup3R,coup3, coup4L,coup4R, teil \n"]\
;
        WriteString[sphenoLoopCoup,"Complex(dp) :: D27m2, D0m2, vertex \n"];
        WriteString[sphenoLoopCoup,"Real(dp) :: cosW2, cosW2_Dr \n"];
        WriteString[sphenoLoopCoup,"Iname = Iname+1\n"];
        WriteString[sphenoLoopCoup,"NameOfUnit(Iname) = \"DeltaVB\" \n"];
        
        For[i=1,i\[LessEqual]Length[masses],
          
          WriteString[sphenoLoopCoup,
            ToString[MakeSquaredMass[masses[[i]]]]<>" = " <>
              ToString[masses[[i]]]<>"**2 \n"];
          i++;];
        
        
        
        
        For[i=1,i\[LessEqual]Length[SPhenoCouplingsDeltaVB],
          If[Length[SPhenoCouplingsDeltaVB[[i,2]]]\[Equal]2,
            
            WriteString[sphenoLoopCoup, 
                ToString[SPhenoCouplingsDeltaVB[[i,2,2]]] <> " = 0._dp \n"];,
            
            WriteString[sphenoLoopCoup, 
              ToString[SPhenoCouplingsDeltaVB[[i,2,2]]] <> " = 0._dp \n"];
            
            WriteString[sphenoLoopCoup, 
              ToString[SPhenoCouplingsDeltaVB[[i,2,3]]] <> " = 0._dp \n"];
            ];
          
          
          OpenDoes[{getIndexRangeSPheno[SPhenoCouplingsDeltaVB[[i,2,2]]]},
            sphenoLoopCoup];
          
          cNames="";
          For[j1=2,j1\[LessEqual]Length[SPhenoCouplingsDeltaVB[[i,2]]],
            
            cNames = 
              cNames <> ToString[SPhenoCouplingsDeltaVB[[i,2,j1]]] <> 
                AddDimNames2[SPhenoCouplingsDeltaVB[[i,2,j1]]]<>","; 
            j1++;];
          
          cNames = StringDrop[cNames,-1];
          
          MakeCall[SPhenoCouplingsDeltaVB[[i,2,1]],
            Join[SPhenoCouplingsDeltaVB[[i,3]],
              SPhenoCouplingsDeltaVB[[i,4]]],{},{cNames},sphenoLoopCoup];
          CloseDoes[sphenoLoopCoup];
          WriteString[sphenoLoopCoup,"\n\n"];
          i++;];
        
        WriteString[sphenoLoopCoup,"!-------------------------- \n"];
        WriteString[sphenoLoopCoup,"!SM Contributions \n"];
        WriteString[sphenoLoopCoup,"!-------------------------- \n"];
        WriteString[sphenoLoopCoup,"cosW2 = 1._dp - sinW2 \n"];
        WriteString[sphenoLoopCoup,"cosW2_DR = 1._dp - sinW2_DR \n"];
        
        WriteString[sphenoLoopCoup,"sumI = 6._dp & \n"];
        WriteString[sphenoLoopCoup,
          "  & + Log(cosW2)*(3.5_dp - 2.5_dp *sinW2   & \n"];
        WriteString[sphenoLoopCoup,
          "  & - sinW2_DR*(5._dp - 1.5_dp*cosW2/cosW2_DR))/sinW2   \n"];
        WriteString[sphenoLoopCoup,
          "res = sumI*"<>SPhenoForm[leftCoupling]<>"**2*rho \n \n \n"];
        
        WriteString[sphenoLoopCoup,"!-------------------------- \n"];
        WriteString[sphenoLoopCoup,"!SUSY  Contributions \n"];
        WriteString[sphenoLoopCoup,"!-------------------------- \n"];
        
        WriteString[sphenoLoopCoup,"teil = 0._dp \n \n"];
        
        WriteString[sphenoLoopCoup,"Do gt1=1,2 \n"];
        WriteString[sphenoLoopCoup,"sumI = 0._dp \n \n"];
        WriteString[sphenoLoopCoup,"gt2 = gt1 \n"];
        AddWaveContributions[resWave[[1]],WaveDeltaVB,None,None,None,
          sphenoLoopCoup];
        WriteString[sphenoLoopCoup, "res = res + sumI \n"];
        WriteString[sphenoLoopCoup,"End Do \n \n"];
        
        WriteString[sphenoLoopCoup,"vertex = 0._dp \n \n"];
        WriteString[sphenoLoopCoup,"Do gt1=1,2 \n"];
        WriteString[sphenoLoopCoup,"gt2 = gt1 \n"];
        AddPenguinContributions[resPenguin[[1]],PenguinDeltaVBFFVscalar,
          PenguinDeltaVBFFVvector,PenguinDeltaVBSSV,None,None,None,None,None,
          None,True,sphenoLoopCoup];
        WriteString[sphenoLoopCoup,"End Do \n \n"];
        WriteString[sphenoLoopCoup, 
          "res = res + vertex/"<>SPhenoForm[leftCoupling]<>" \n"];
        
        
        WriteString[sphenoLoopCoup,"gt1 = 1 \n"];
        WriteString[sphenoLoopCoup,"gt2 = 2 \n"];
        WriteString[sphenoLoopCoup,"gt3 = 2 \n"];
        WriteString[sphenoLoopCoup,"gt4 = 1 \n"];
        AddBoxContributions[resBox[[1]],BoxDeltaVB,None,None,sphenoLoopCoup];
        
        WriteString[sphenoLoopCoup,"\n \n"];
        
        
        WriteString[sphenoLoopCoup,
          "sumI = -2._dp*cosW2_DR*mz2*Real(teil,dp)/"<>SPhenoForm[
              leftCoupling]<>"**2 \n"];
        WriteString[sphenoLoopCoup, "res = res + SumI \n"];
        WriteString[sphenoLoopCoup, "res = res*oo16pi2 \n"];
        
        
        
        WriteString[sphenoLoopCoup,"Iname = Iname-1\n"];
        WriteString[sphenoLoopCoup,"End subroutine DeltaVB \n \n \n"];
        
        
        ];
  *)



GenerateDeltaVB2:=
    Block[{i,j,temp,res,masses,couplings,couplinglist,i1,j1,f1,f2,f3,f4},
      Print["Write Delta VB"];
      
      temp=
        InsFields[{{C[Neutrino,FieldToInsert[1],
                AntiField[FieldToInsert[2]]]},{Internal[1]\[Rule]
                FieldToInsert[1], Internal[2]\[Rule]FieldToInsert[2],
              External[1]\[Rule]Neutrino}}];
      temp = 
        DeleteContributions[temp,Flatten[{VectorP,VectorG,VectorW,VectorZ}]];
      
      resWave=MakeMassesCouplingLists[temp,True];
      temp=
        InsFields[{{C[Electron,FieldToInsert[1],
                AntiField[FieldToInsert[2]]]},{Internal[
                  1]\[Rule]FieldToInsert[1], 
              Internal[2]\[Rule]FieldToInsert[2],
              External[1]\[Rule]Electron}}];
      temp = 
        DeleteContributions[temp,Flatten[{VectorP,VectorG,VectorW,VectorZ}]];
      
      resWaveTemp=MakeMassesCouplingLists[temp,True];
      resWave[[1]] = Join[resWave[[1]],resWaveTemp[[1]]];
      resWave[[2]] = Join[resWave[[2]],resWaveTemp[[2]]];
      resWave[[3]] = Join[resWave[[3]],resWaveTemp[[3]]];
      resWave[[4]] = Join[resWave[[4]],resWaveTemp[[4]]];
      
      temp = GeneratePenguinDiagrams[Neutrino,bar[Electron],VectorW];
      
      temp = InsFields[currentTop];
      temp = DeleteContributions[temp,Flatten[{VectorG,VectorZ,VectorP}]];
      resPenguin = MakeMassesCouplingLists[temp,True];
      
      tempBox={};
      f1=Neutrino;f2=bar[Neutrino];f3=Electron; f4=bar[Electron];
      currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],
            C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],
            C[f3,AntiField[FieldToInsert[2]],FieldToInsert[3]],
            C[f4,AntiField[FieldToInsert[3]],
              FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],
            Internal[2]\[Rule]FieldToInsert[2],
            Internal[3]\[Rule]FieldToInsert[3],
            Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,
            External[2]\[Rule]f2,External[3]\[Rule]f3,External[4]\[Rule]f4,
            Index[1]\[Rule]gt1,Index[2]\[Rule]gt2,Index[3]\[Rule]gt3,
            Index[4]\[Rule]gt4, InsertionOrder\[Rule]1}};
      
      
      temp = InsFields[currentTop];
      temp = DeleteContributions[temp,Flatten[{VectorP,VectorW, VectorZ}]];
      temp = MakeMassesCouplingLists[temp,True][[1]];
      
      For[i=1,i\[LessEqual]Length[temp],
        If[getType[Internal[1] /. temp[[i,2]]]===F,
          tempBox = Join[tempBox,{temp[[i]]}];
          ];
        i++;];
      
      currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],
            C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],
            C[f4,AntiField[FieldToInsert[2]],FieldToInsert[3]],
            C[f3,AntiField[FieldToInsert[3]],
              FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],
            Internal[2]\[Rule]FieldToInsert[2],
            Internal[3]\[Rule]FieldToInsert[3],
            Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,
            External[2]\[Rule]f2,External[3]\[Rule]f4,External[4]\[Rule]f3,
            Index[1]\[Rule]gt1,Index[2]\[Rule]gt2,Index[3]\[Rule]gt4,
            Index[4]\[Rule]gt3, InsertionOrder\[Rule]2}};
      
      temp = InsFields[currentTop];
      temp = DeleteContributions[temp,Flatten[{VectorP,VectorW,VectorZ}]];
      
      temp = MakeMassesCouplingLists[temp,True][[1]];
      For[i=1,i\[LessEqual]Length[temp],
        If[getType[Internal[1] /. temp[[i,2]]]===S,
          tempBox = Join[tempBox,{temp[[i]]}];
          ];
        i++;];
      currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],
            C[f4,AntiField[FieldToInsert[1]],FieldToInsert[2]],
            C[f2,AntiField[FieldToInsert[2]],FieldToInsert[3]],
            C[f3,AntiField[FieldToInsert[3]],
              FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],
            Internal[2]\[Rule]FieldToInsert[2],
            Internal[3]\[Rule]FieldToInsert[3],
            Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,
            External[2]\[Rule]f4,External[3]\[Rule]f2,External[4]\[Rule]f3,
            Index[1]\[Rule]gt1,Index[2]\[Rule]gt4,Index[3]\[Rule]gt3,
            Index[4]\[Rule]gt2, InsertionOrder\[Rule]4}};
      
      temp = InsFields[currentTop];
      temp = DeleteContributions[temp,Flatten[{VectorP,VectorW,VectorZ}]];
      
      temp = MakeMassesCouplingLists[temp,True][[1]];
      For[i=1,i\[LessEqual]Length[temp],
        If[getType[Internal[1] /. temp[[i,2]]]===S,
          tempBox = Join[tempBox,{temp[[i]]}];
          ];
        i++;];
      
      resBox =  MakeMassesCouplingLists[tempBox,True] /. Cp\[Rule]C;
      
      Clear[f1,f2,f3,f4];
      
      couplings=
        Intersection[Flatten[{resWave[[4]],resPenguin[[4]],resBox[[4]]}]];
      
      SPhenoCouplingsDeltaVB={};
      parametersDeltaVB={};
      namesDeltaVB={};
      
      
      For[i=1,i\[LessEqual]Length[couplings],
        pos=Position[SPhenoCouplingsAll,couplings[[i]]];
        If[pos==={},
          pos=Position[SPhenoCouplingsAll,AntiField/@couplings[[i]]];
          ];
        SPhenoCouplingsDeltaVB=
          Join[SPhenoCouplingsDeltaVB,{Extract[SPhenoCouplingsAll,
                pos[[1,1]]]}];
        parameterDeltaVB = 
          Join[parametersDeltaVB,
            Extract[SPhenoCouplingsAll,pos[[1,1]]][[4]]];
        namesDeltaVB = 
          Join[namesDeltaVB,
            Delete[Extract[SPhenoCouplingsAll,pos[[1,1]]][[2]],1]];
        i++;];
      
      parametersDeltaVB=Intersection[parametersDeltaVB];
      
      masses=
        Intersection[Flatten[{resWave[[2]],resPenguin[[2]],resBox[[2]]}]];
      namesDeltaVB=Intersection[namesDeltaVB];
      
      neededParameters=
        getNeededParametersForCouplings[
          Intersection[Flatten[{resWave[[4]],resPenguin[[4]],resBox[[4]]}]]];
      NeededParametersForDeltaVB=Flatten[{masses,neededParameters}];
      
      
      WriteString[sphenoLoopCoup,"\n\n\n"];
      
      MakeSubroutineTitle["DeltaVB",
        Flatten[{masses,neededParameters}],{"sinW2","sinW2_dr","rho"},{"res"},
        sphenoLoopCoup];
      
      WriteString[sphenoLoopCoup,"Implicit None \n"];
      MakeVariableList[Flatten[{masses,neededParameters}],",Intent(in)",
        sphenoLoopCoup];
      MakeVariableList[MakeSquaredMass /@masses,"",sphenoLoopCoup];
      MakeVariableList[namesDeltaVB,"",sphenoLoopCoup];
      WriteString[sphenoLoopCoup,
        "Integer :: i1,i2,i3,i4,gt1,gt2,gt3,gt4 \n"];
      WriteString[sphenoLoopCoup,
        "Real(dp), Intent(in) :: sinW2,sinW2_Dr, rho \n"];
      WriteString[sphenoLoopCoup,"Real(dp), Intent(out) :: res \n \n"];
      WriteString[sphenoLoopCoup,
        "Complex(dp) :: sumI, coup1L,coup1R,coup2L,coup2R,coup3L,coup3R,coup3, coup4L,coup4R, teil \n"]\
;
      WriteString[sphenoLoopCoup,"Complex(dp) :: D27m2, D0m2, vertex \n"];
      WriteString[sphenoLoopCoup,"Real(dp) :: cosW2, cosW2_Dr \n"];
      WriteString[sphenoLoopCoup,"Iname = Iname+1\n"];
      WriteString[sphenoLoopCoup,"NameOfUnit(Iname) = \"DeltaVB\" \n"];
      
      For[i=1,i\[LessEqual]Length[masses],
        WriteString[sphenoLoopCoup,
          ToString[MakeSquaredMass[masses[[i]]]]<>" = " <>
            ToString[masses[[i]]]<>"**2 \n"];
        i++;];
      
      
      
      
      For[i=1,i\[LessEqual]Length[SPhenoCouplingsDeltaVB],
        If[Length[SPhenoCouplingsDeltaVB[[i,2]]]\[Equal]2,
          
          WriteString[sphenoLoopCoup, 
              ToString[SPhenoCouplingsDeltaVB[[i,2,2]]] <> " = 0._dp \n"];,
          
          WriteString[sphenoLoopCoup, 
            ToString[SPhenoCouplingsDeltaVB[[i,2,2]]] <> " = 0._dp \n"];
          
          WriteString[sphenoLoopCoup, 
            ToString[SPhenoCouplingsDeltaVB[[i,2,3]]] <> " = 0._dp \n"];
          ];
        
        OpenDoes[{getIndexRangeSPheno[SPhenoCouplingsDeltaVB[[i,2,2]]]},
          sphenoLoopCoup];
        
        cNames="";
        For[j1=2,j1\[LessEqual]Length[SPhenoCouplingsDeltaVB[[i,2]]],
          
          cNames = 
            cNames <> ToString[SPhenoCouplingsDeltaVB[[i,2,j1]]] <> 
              AddDimNames2[SPhenoCouplingsDeltaVB[[i,2,j1]]]<>","; 
          j1++;];
        
        cNames = StringDrop[cNames,-1];
        MakeCall[SPhenoCouplingsDeltaVB[[i,2,1]],
          Join[SPhenoCouplingsDeltaVB[[i,3]],
            SPhenoCouplingsDeltaVB[[i,4]]],{},{cNames},sphenoLoopCoup];
        CloseDoes[sphenoLoopCoup];
        WriteString[sphenoLoopCoup,"\n\n"];
        i++;];
      
      WriteString[sphenoLoopCoup,"!-------------------------- \n"];
      WriteString[sphenoLoopCoup,"!SM Contributions \n"];
      WriteString[sphenoLoopCoup,"!-------------------------- \n"];
      WriteString[sphenoLoopCoup,"cosW2 = 1._dp - sinW2 \n"];
      WriteString[sphenoLoopCoup,"cosW2_DR = 1._dp - sinW2_DR \n"];
      
      WriteString[sphenoLoopCoup,"sumI = 6._dp & \n"];
      WriteString[sphenoLoopCoup,
        "  & + Log(cosW2)*(3.5_dp - 2.5_dp *sinW2   & \n"];
      WriteString[sphenoLoopCoup,
        "  & - sinW2_DR*(5._dp - 1.5_dp*cosW2/cosW2_DR))/sinW2   \n"];
      WriteString[sphenoLoopCoup,
        "res = sumI*"<>SPhenoForm[leftCoupling]<>"**2*rho \n \n \n"];
      
      WriteString[sphenoLoopCoup,"!-------------------------- \n"];
      WriteString[sphenoLoopCoup,"!SUSY  Contributions \n"];
      WriteString[sphenoLoopCoup,"!-------------------------- \n"];
      
      WriteString[sphenoLoopCoup,"teil = 0._dp \n \n"];
      
      WriteString[sphenoLoopCoup,"Do gt1=1,2 \n"];
      WriteString[sphenoLoopCoup,"sumI = 0._dp \n \n"];
      WriteString[sphenoLoopCoup,"gt2 = gt1 \n"];
      AddWaveContributions2[resWave[[1]],WaveDeltaVB,None,None,None,
        sphenoLoopCoup];
      WriteString[sphenoLoopCoup, "res = res + sumI \n"];
      WriteString[sphenoLoopCoup,"End Do \n \n"];
      
      WriteString[sphenoLoopCoup,"vertex = 0._dp \n \n"];
      WriteString[sphenoLoopCoup,"Do gt1=1,2 \n"];
      WriteString[sphenoLoopCoup,"gt2 = gt1 \n"];
      AddPenguinContributions2[resPenguin[[1]],PenguinDeltaVBFFVscalar,
        PenguinDeltaVBFFVvector,PenguinDeltaVBSSV,None,None,None,None,None,
        None,True,sphenoLoopCoup];
      WriteString[sphenoLoopCoup,"End Do \n \n"];
      WriteString[sphenoLoopCoup, 
        "res = res + vertex/"<>SPhenoForm[leftCoupling]<>" \n"];
      
      
      WriteString[sphenoLoopCoup,"gt1 = 1 \n"];
      WriteString[sphenoLoopCoup,"gt2 = 2 \n"];
      WriteString[sphenoLoopCoup,"gt3 = 2 \n"];
      WriteString[sphenoLoopCoup,"gt4 = 1 \n"];
      AddBoxContributions2[resBox[[1]],BoxDeltaVB,None,None,sphenoLoopCoup];
      
      WriteString[sphenoLoopCoup,"\n \n"];
      
      
      WriteString[sphenoLoopCoup,
        "sumI = -2._dp*cosW2_DR*mz2*Real(teil,dp)/"<>SPhenoForm[leftCoupling]<>
          "**2 \n"];
      WriteString[sphenoLoopCoup, "res = res + SumI \n"];
      WriteString[sphenoLoopCoup, "res = res*oo16pi2 \n"];
      
      
      
      WriteString[sphenoLoopCoup,"Iname = Iname-1\n"];
      WriteString[sphenoLoopCoup,"End subroutine DeltaVB \n \n \n"];
      
      
      ];

WriteAlphaMS:=Block[{},
      WriteString[sphenoLoopCoup,
        "Real(dp) Function Alpha_MSbar(Q,mW,mt) \n"];
      WriteString[sphenoLoopCoup,"Implicit None \n"];
      WriteString[sphenoLoopCoup,"Real(dp),Intent(in)::Q,mW \n"];
      WriteString[sphenoLoopCoup,"Real(dp),Intent(in),Optional::mt \n"];
      
      WriteString[sphenoLoopCoup,"Real(dp)::DeltaAlpha \n"];
       
      WriteString[sphenoLoopCoup,"If (MZ_input) Then \n"];
      WriteString[sphenoLoopCoup,"Alpha_MSbar=Alpha_mZ_MS \n"];
      WriteString[sphenoLoopCoup,"If (Present(mt)) Then \n"];
      WriteString[sphenoLoopCoup,
        "DeltaAlpha=-8._dp*Log(Q/mt)/(9._dp*Pi) \n"];
      WriteString[sphenoLoopCoup,
        "Alpha_MSbar=Alpha_MSbar/(1._dp+DeltaAlpha*alpha) \n"];
      WriteString[sphenoLoopCoup,"End If \n"];
      WriteString[sphenoLoopCoup,"Else \n"];
      WriteString[sphenoLoopCoup,
        "DeltaAlpha=3.5_dp*Log(Q/mW)/Pi+0.5_dp*oo3pi \n"];
      WriteString[sphenoLoopCoup,
        "If (Present(mt)) DeltaAlpha=DeltaAlpha-8._dp*Log(Q/mt)/(9._dp*Pi) \n"]\
;
      WriteString[sphenoLoopCoup,
        "Alpha_MSbar=Alpha/(1._dp-Delta_Alpha_Lepton-Delta_Alpha_Hadron& \n"];\

      WriteString[sphenoLoopCoup,"&+DeltaAlpha*alpha) \n"];
      WriteString[sphenoLoopCoup,"Alpha_MZ_MS=Alpha_MSbar \n"];
      WriteString[sphenoLoopCoup,"End If \n"];
      
      WriteString[sphenoLoopCoup,"End Function Alpha_MSbar\n \n \n"];
      
      
      ];


DeleteContributions[x_,list_]:=Block[{i,j,temp,add},
      temp={};
      
      For[i=1,i\[LessEqual]Length[x],
        add = True;
        For[j=1,j\[LessEqual]Length[list],
          If[FreeQ[x[[i]],list[[j]]]\[Equal]False,
            add = False;
            ];
          j++;];
        If[add\[Equal]True,
          temp = Join[temp,{x[[i]]}];
          ];
        i++;];
      Return[temp];
      
      
      ];