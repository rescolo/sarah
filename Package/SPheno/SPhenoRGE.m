(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

GenerateSPhenoRGEs:=Block[{i, currentRegime,readRegime},
      $sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}];
      (* CreateDirectory[$sarahCurrentSPhenoDir]; *)
      
      sphenoRGE=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,"RGEs_"<>ModelName<>".f90"]];
      
      SPhenoParameters=
        Join[SPhenoParameters,{{Tr1,{gaugenr},{AnzahlGauge}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{Tr2,{gaugenr},{AnzahlGauge}}}];
      SPhenoParameters=
        Join[SPhenoParameters,{{Tr3,{gaugenr},{AnzahlGauge}}}];
      
      listAllParameters = {};
      listBeta1Loop = {};
      listBeta2Loop = {};
      
      If[ThreeIndexParametersInvolved===True,
        BetaYijk=BetaYijk3I;
        BetaTijk=BetaTijk3I;
        BetaMuij=BetaMuij3I;
        BetaBij=BetaBij3I;
        BetaMi=BetaMi3I;
        Betam2ij=Betam2ij3I;
        BetaGauge=BetaGauge3I;
        BetaVEV=BetaVEV3I;
        TraceAbbr=TraceAbbr3I;
        ];
      
      If[Length[BetaGauge]\[NotEqual] 0,
        listAllParameters =
          Join[listAllParameters ,Transpose[BetaGauge][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaGauge][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaGauge][[3]]];
        ];
      If[Length[BetaYijk]\[NotEqual] 0,
        listAllParameters =Join[listAllParameters ,Transpose[BetaYijk][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaYijk][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaYijk][[3]]];
        ];
      If[Length[BetaMi]\[NotEqual] 0,
        listAllParameters =Join[listAllParameters ,Transpose[BetaMi][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaMi][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaMi][[3]]];
        ];
      If[Length[BetaTijk]\[NotEqual] 0,
        listAllParameters =Join[listAllParameters ,Transpose[BetaTijk][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaTijk][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaTijk][[3]]];
        ];
      If[Length[Betam2ij]\[NotEqual] 0,
        listAllParameters =Join[listAllParameters ,Transpose[Betam2ij][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[Betam2ij][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[Betam2ij][[3]]];
        ];
      If[Length[BetaMuij]\[NotEqual] 0,
        listAllParameters =Join[listAllParameters ,Transpose[BetaMuij][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaMuij][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaMuij][[3]]];
        ];
      If[Length[BetaBij]\[NotEqual] 0,
        listAllParameters =Join[listAllParameters ,Transpose[BetaBij][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaBij][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaBij][[3]]];
        ];
      If[Length[BetaWijkl]\[NotEqual] 0,
        listAllParameters =
          Join[listAllParameters ,Transpose[BetaWijkl][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaWijkl][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaWijkl][[3]]];
        ];
      If[Length[BetaLi]\[NotEqual] 0,
        listAllParameters =Join[listAllParameters ,Transpose[BetaLi][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaLi][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaLi][[3]]];
        ];
      If[Length[BetaLSi]\[NotEqual] 0,
        listAllParameters =Join[listAllParameters ,Transpose[BetaLSi][[1]]];
        listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaLSi][[2]]];
        listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaLSi][[3]]];
        ];
      
      
      
      listBeta1LoopTemp={};
      listBeta2LoopTemp={};
      listAllParametersTemp=Join[lowScaleNames,highScaleNames];
      
      For[i=1,i\[LessEqual]Length[listAllParametersTemp],
        pos=Position[listAllParameters,listAllParametersTemp[[i]]][[1,1]];
        listBeta1LoopTemp=Join[listBeta1LoopTemp,{listBeta1Loop[[pos]]}];
        listBeta2LoopTemp=Join[listBeta2LoopTemp,{listBeta2Loop[[pos]]}];
        i++;];
      
      listAllParameters=listAllParametersTemp;
      listBeta1Loop=listBeta1LoopTemp;
      listBeta2Loop=listBeta2LoopTemp;
      
      If[IntermediateScale =!=True,
        WriteRGEsHeader;
        SubNr="";,
        SubNr="R"<>ToString[RegimeNr];
        ];
      
      (* RGEs for Gauge and Yukawa Couplings *)
      
      
      
      list1LoopLow={};
      list2LoopLow={};
      
      For[i=1,i\[LessEqual]Length[listAllParameters],
        If[FreeQ[lowScaleNames,listAllParameters[[i]]]\[Equal]False,
          list1LoopLow = Join[list1LoopLow,{listBeta1Loop[[i]]}];
          list2LoopLow= Join[list2LoopLow,{listBeta2Loop[[i]]}];
          ];
        i++;];
      
      
      
      Print["-----------------------------------"];
      Print["Write RGEs for Low Scale Parameters"];
      Print["-----------------------------------"];
      
      subSPhenoMatTr={};
      GenerateSPhenoAbbr[list1LoopLow,list2LoopLow];
      
      numberLow = GetNumberParameters[lowScaleNames];
      
      WriteGToParameters[lowScaleNames,numberLow];
      WriteParametersToG[lowScaleNames,numberLow]; 
      
      If[FreeQ[list1LoopLow,Tr1]\[Equal]False,
        WriteSPhenoRGE[lowScaleNames,list1LoopLow,list2LoopLow,{},TraceAbbr,
            numberLow];,
        WriteSPhenoRGE[lowScaleNames,list1LoopLow,list2LoopLow,{},{},
            numberLow];
        ];
      
      
      
      
      If[AllRGEsRunning\[Equal]False,
        
        Print["-------------------------------"];
        Print["Write RGEs for all Parameters"];
        Print["-------------------------------"];
        
        (* All RGEs  *)
        
        subSPhenoMatTr={};
        GenerateSPhenoAbbr[Join[listBeta1Loop,Transpose[TraceAbbr[[1]]][[2]]],
          Join[listBeta2Loop,Transpose[TraceAbbr[[2]]][[2]]]];
        numberAll = GetNumberParameters[listAllParameters];
        
        WriteGToParameters[listAllParameters,numberAll];
        WriteParametersToG[listAllParameters,numberAll];
        
        WriteSPhenoRGE[listAllParameters,listBeta1Loop ,listBeta2Loop ,{},
          TraceAbbr, numberAll];,
        
        numberAll = numberLow;
        
        
        
        ];
      
      
      If[Length[NeededAnaDimsForVEVs]>0 ,
        Print["-------------------------------"];
        Print["Write RGEs including VEVs      "];
        Print["-------------------------------"];
        
        subSPhenoMatTr={};
        listAllParametersAndVEVs = listAllParameters;
        listBeta1LoopVEVs = listBeta1Loop;
        listBeta2LoopVEVs = listBeta2Loop;
        
        
        For[i=1,i\[LessEqual]Length[NeededAnaDimsForVEVs],
          
          listAllParametersAndVEVs =
            Join[listAllParametersAndVEVs,{NeededAnaDimsForVEVs[[i,2]]}];
          listBeta1LoopVEVs = Join[listBeta1LoopVEVs,{BetaVEV[[i,2]]}];
          listBeta2LoopVEVs = Join[listBeta2LoopVEVs,{BetaVEV[[i,3]]}];
          i++;];
        
         numberAllwithVEVs = 
          numberAll +GetNumberParameters[Transpose[BetaVEV][[1]]];
        
        If[ RGEsForVEVs=!=False,
          
          GenerateSPhenoAbbr[
            Join[listBeta1LoopVEVs,Transpose[TraceAbbr[[1]]][[2]]],
            Join[listBeta2LoopVEVs,Transpose[TraceAbbr[[2]]][[2]]]];
          WriteGToParameters[listAllParametersAndVEVs,numberAllwithVEVs ];
          WriteParametersToG[listAllParametersAndVEVs,numberAllwithVEVs ];
          
          
          WriteSPhenoRGE[listAllParametersAndVEVs,listBeta1LoopVEVs,
            listBeta2LoopVEVs ,{},TraceAbbr, numberAllwithVEVs];
          ];,
        numberAllwithVEVs = numberAll;
        listAllParametersAndVEVs = listAllParameters;
        ];
      
      
      If[IntermediateScale =!= True && Head[RegimeNr]===Integer,
        currentRegime = "Regime-"<>ToString[RegimeNr];
        For[i=1,i<RegimeNr,
          readRegime = "Regime-"<>ToString[i];
          
          AppendSourceCode[
            ToFileName[
              StringReplace[$sarahCurrentSPhenoDir,{currentRegime\[Rule]
                    readRegime,
                  ToString[EigenstateName]\[Rule]
                    ToString[ListOfRegimeEigenstates[[i]]]}],
              "RGEs_"<>ModelName<>".f90"],sphenoRGE];
          i++;];
        ];
      
      If[IntermediateScale =!=True,
        (* AppendSourceCode["RGE10_SM.f90",sphenoRGE]; *)
        
        WriteKronecker;
        
        
        WriteString[sphenoRGE, "End Module RGEs_"<>ModelName<>" \n \n"];
        ];
      
      
      
      
      Close[sphenoRGE];
      ];






GetNumberParameters[x_]:=Block[{i,temp,dim},
      temp=0;
      For[i=1,i\[LessEqual]Length[x],
        If[MemberQ[realVar,x[[i]]]\[Equal]True,
          temp += Apply[Times,getDimParameters[x[[i]]]];,
          temp +=2* Apply[Times,getDimParameters[x[[i]]]];
          ];
        i++;];
      Return[temp];
      ];

WriteRGEsHeader :=Block[{i, generationsUnitMatrix, i1, i2},
      WriteString[sphenoRGE, "Module RGEs_"<>ModelName<>" \n \n"];
      WriteString[sphenoRGE, "Use Control \n"];
      WriteString[sphenoRGE, "Use Model_Data_"<>ModelName<>" \n"];
      WriteString[sphenoRGE, "Use Mathematics \n \n"];
      
      
      WriteString[sphenoRGE, "Logical,Save::TwoLoopRGE=.True.\n"];
      WriteString[sphenoRGE, "Logical,Private,Save::OnlyDiagonal\n\n"];
      
      For[i=1,i\[LessEqual]Length[ThresholdParticles],
        WriteString[sphenoRGE,
          "Real(dp) :: NumberGenerations" <> 
            SPhenoForm[ThresholdParticles[[i]]]<>" \n"];
        i++];
      
      If[Length[ThresholdParticles]>0,
        WriteString[sphenoRGE,"Integer, save :: ThresholdCrossed = 1 \n"];
        ];
      
       generationsUnitMatrix ={};
      
      For[i=1,i\[LessEqual]Length[listAllParameters],
        dim=getDimSPheno[listAllParameters[[i]]];
        If[Length[dim]\[Equal]2,
          If[dim[[1]]\[Equal]dim[[2]] && dim[[1]]\[NotEqual]2,
               
              generationsUnitMatrix = 
                  Join[ generationsUnitMatrix,{dim[[1]]}];
              ];
          ];
        i++;];
       generationsUnitMatrix = Intersection[generationsUnitMatrix];
      
      For[i=1,i\[LessEqual]Length[generationsUnitMatrix],
        dim = generationsUnitMatrix[[i]];
        WriteString[sphenoRGE, 
          "Real(dp),Parameter::id"<>ToString[dim]<>"R("<>ToString[dim]<>","<>
            ToString[dim]<>")=& \n"];
        WriteString[sphenoRGE, "   & Reshape(Source=(/& \n"];
        WriteString[sphenoRGE, "   & "];
        For[i1=1,i1\[LessEqual]dim,
          For[i2=1,i2\[LessEqual]dim,
            If[i2\[Equal]i1,
              If[i2===dim,
                  WriteString[sphenoRGE,"1"];,
                  WriteString[sphenoRGE,"1,"];
                  ];,
              WriteString[sphenoRGE,"0,"];
              ];
            i2++;];
          WriteString[sphenoRGE,"& \n &"];
          i1++;];
        WriteString[sphenoRGE, 
          "/),shape=(/"<>ToString[dim]<>","<>ToString[dim]<>"/)) \n"];
        
        i++;];
      
      
      
      
      WriteString[sphenoRGE, "Contains \n\n\n"];
      ];

WriteGToParameters[parameterList_, numberParameters_] :=Block[{i,i1,i2},
      
      Print["Write Function GToParameters"];
      
      MakeSubroutineTitle["GToParameters"<>ToString[numberParameters]<>SubNr,
        parameterList, {"g"},{},sphenoRGE];
      
      
      WriteString[sphenoRGE,"Implicit None \n"];
      WriteString[sphenoRGE, 
        "Real(dp), Intent(in) :: g("<>ToString[numberParameters]<>") \n"];
      MakeVariableList[parameterList,",Intent(out)",sphenoRGE];
      WriteString[sphenoRGE, "Integer i1, i2, i3, i4, SumI \n \n"];
      
      
      WriteString[sphenoRGE, "Iname = Iname +1 \n"];
      WriteString[sphenoRGE, 
        "NameOfUnit(Iname) = 'GToParameters"<>ToString[numberParameters]<> 
          "' \n \n"];
      
      entryNr=1;
      
      For[i=1,i\[LessEqual]Length[parameterList],
        openDo=0;
        If[
          getDimParameters[parameterList[[i]]]=!={1} && 
            getDimParameters[parameterList[[i]]]=!={},
          dimP=getDimParameters[parameterList[[i]]];
          For[k=1,k\[LessEqual]Length[dimP],
            
            WriteString[sphenoRGE, 
              "Do i"<>ToString[k]<>" = 1,"<>ToString[dimP[[k]]]<>"\n"];
            openDo++;
            k++;];
          
          Switch[Length[dimP],
            1,WriteString[sphenoRGE,"SumI = (i1-1) \n"];,
            2,
            WriteString[sphenoRGE,
                "SumI = (i2-1) + (i1-1)*"<>ToString[dimP[[2]]]<> "\n"];,
            3,
            WriteString[sphenoRGE,
                "SumI = (i3-1) + (i2-1)*"<>ToString[dimP[[3]]]<>" + (i1-1)*"<>
                  ToString[dimP[[3]]*dimP[[2]]]<> "\n"];,
            4,
            WriteString[sphenoRGE,
                "SumI = (i4-1) + (i3-1)*"<>ToString[dimP[[4]]]<>" + (i2-1)*"<>
                  ToString[dimP[[4]]*dimP[[3]]]<>" + (i1-1)*"<>
                  ToString[dimP[[4]]*dimP[[2]]*dimP[[3]]]<> "\n"];
            ];
          If[MemberQ[realVar,parameterList[[i]]]\[Equal]False,
            WriteString[sphenoRGE, "SumI = SumI*2 \n"];
            WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
            Switch[Length[dimP],
              1,WriteString[sphenoRGE,"(i1)"];,
              2,WriteString[sphenoRGE,"(i1,i2)"];,
              3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
              4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
              ];
            
            WriteString[sphenoRGE,
              " = Cmplx( g(SumI+" <>ToString[entryNr] <>"), g(SumI+"<>
                ToString[entryNr+1] <>"), dp) \n"];
            entryNr += 2*Apply[Times,dimP];,
            
            WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
            Switch[Length[dimP],
              1,WriteString[sphenoRGE,"(i1)"];,
              2,WriteString[sphenoRGE,"(i1,i2)"];,
              3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
              4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
              ];
            
            WriteString[sphenoRGE,
              " =  g(SumI+" <>ToString[entryNr] <>") \n"];
            entryNr +=Apply[Times,dimP];
            ];
          
          For[k=1,k\[LessEqual]openDo,
            WriteString[sphenoRGE, "End Do \n "];
            k++;];
          WriteString[sphenoRGE, "\n"];,
          
          If[MemberQ[realVar,parameterList[[i]]]\[Equal]False,
              
              WriteString[sphenoRGE,
                SPhenoForm[parameterList[[i]]]<>"= Cmplx(g("<>
                  ToString[entryNr]<>"),g("<>ToString[entryNr+1]<>
                  "),dp) \n"];
              entryNr=entryNr+2;,
              
              WriteString[sphenoRGE,
                SPhenoForm[parameterList[[i]]]<>"= g("<>ToString[entryNr]<>
                  ") \n"];
              entryNr++;
              ];
          
          ];
        
        i++;];
      
      
      
      WriteString[sphenoRGE, "Iname = Iname - 1 \n \n"];
      WriteString[sphenoRGE, 
        "End Subroutine GToParameters"<> ToString[numberParameters]<>SubNr<>
          "\n\n"];
      
      ];


WriteParametersToG[parameterList_, numberParameters_] :=Block[{i,i1,i2},
      
      Print["Write Function ParametersToG"];
      
      MakeSubroutineTitle["ParametersToG"<>ToString[numberParameters]<>SubNr,
        parameterList, {},{"g"}, sphenoRGE];
      
      WriteString[sphenoRGE,"Implicit None \n"];
      WriteString[sphenoRGE, 
        "Real(dp), Intent(out) :: g("<>ToString[numberParameters]<>") \n"];
      
      
      MakeVariableList[parameterList,", Intent(in)",sphenoRGE];
      WriteString[sphenoRGE, "Integer i1, i2, i3, i4, SumI \n \n"];
      
      
      WriteString[sphenoRGE, "Iname = Iname +1 \n"];
      WriteString[sphenoRGE, 
        "NameOfUnit(Iname) = 'ParametersToG"<>ToString[numberParameters]<> 
          "' \n \n"];
      
      entryNr=1;
      
      For[i=1,i\[LessEqual]Length[parameterList],
        openDo=0;
        If[
          getDimParameters[parameterList[[i]]]=!={1} && 
            getDimParameters[parameterList[[i]]]=!={},
          dimP=getDimParameters[parameterList[[i]]];
          For[k=1,k\[LessEqual]Length[dimP],
            
            WriteString[sphenoRGE, 
              "Do i"<>ToString[k]<>" = 1,"<>ToString[dimP[[k]]] <>"\n"];
            openDo++;
            k++;];
          
          Switch[Length[dimP],
            1,WriteString[sphenoRGE,"SumI = (i1-1) \n"];,
            2,
            WriteString[sphenoRGE,
                "SumI = (i2-1) + (i1-1)*"<>ToString[dimP[[2]]]<> "\n"];,
            3,
            WriteString[sphenoRGE,
                "SumI = (i3-1) + (i2-1)*"<>ToString[dimP[[3]]]<>" + (i1-1)*"<>
                  ToString[dimP[[3]]*dimP[[2]]]<> "\n"];,
            4,
            WriteString[sphenoRGE,
                "SumI = (i4-1) + (i3-1)*"<>ToString[dimP[[4]]]<>" + (i2-1)*"<>
                  ToString[dimP[[4]]*dimP[[3]]]<>" + (i1-1)*"<>
                  ToString[dimP[[4]]*dimP[[2]]*dimP[[3]]]<> "\n"];
            ];
          If[MemberQ[realVar,parameterList[[i]]]\[Equal]False,
            WriteString[sphenoRGE, "SumI = SumI*2 \n"];
            
            
            WriteString[sphenoRGE,
              "g(SumI+" <>ToString[entryNr] <>") = Real("];
            WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
            Switch[Length[dimP],
              1,WriteString[sphenoRGE,"(i1)"];,
              2,WriteString[sphenoRGE,"(i1,i2)"];,
              3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
              4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
              ];
            WriteString[sphenoRGE,", dp) \n"];
            
            
            WriteString[sphenoRGE,
              "g(SumI+" <>ToString[entryNr+1] <>") = Aimag("];
            WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
            Switch[Length[dimP],
              1,WriteString[sphenoRGE,"(i1)"];,
              2,WriteString[sphenoRGE,"(i1,i2)"];,
              3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
              4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
              ];
            
            WriteString[sphenoRGE,") \n"];
            
            
            entryNr += 2*Apply[Times,dimP]; ,
            
            WriteString[sphenoRGE,"g(SumI+" <>ToString[entryNr] <>") = "];
            WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
            Switch[Length[dimP],
              1,WriteString[sphenoRGE,"(i1)"];,
              2,WriteString[sphenoRGE,"(i1,i2)"];,
              3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
              4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
              ];
            WriteString[sphenoRGE," \n"];
            entryNr +=Apply[Times,dimP];
            ];
          
          For[k=1,k\[LessEqual]openDo,
            WriteString[sphenoRGE, "End Do \n"];
            k++;];
          WriteString[sphenoRGE, "\n"];,
          
          If[MemberQ[realVar,parameterList[[i]]]\[Equal]False,
              
              WriteString[sphenoRGE,
                "g("<>ToString[entryNr]<>") = Real("<> 
                  SPhenoForm[parameterList[[i]]]<>",dp)  \n"];
              
              WriteString[sphenoRGE,
                "g("<>ToString[entryNr+1]<>") = Aimag("<> 
                  SPhenoForm[parameterList[[i]]]<>")  \n"];
              entryNr=entryNr+2;,
              
              WriteString[sphenoRGE,
                "g("<>ToString[entryNr]<>") = "<> 
                  SPhenoForm[parameterList[[i]]]<>"  \n"];
              entryNr++;
              ];
          
          ];
        
        i++;];
      
      
      
      WriteString[sphenoRGE, "Iname = Iname - 1 \n \n"];
      WriteString[sphenoRGE, 
        "End Subroutine ParametersToG" <> ToString[numberParameters]<>SubNr<>
          "\n\n"];
      
      ];




WriteSPhenoRGE[listParameters_, OneLoop_, TwoLoop_, AddInvolvedParameters_,
      spuren_,nr_]:=Block[{i,i1,i2},
      
      Print["Write RGE Function"];
      
      
      WriteString[sphenoRGE,
        "Subroutine rge"<>ToString[nr]<>SubNr<>"(len, T, GY, F) \n"];
      WriteString[sphenoRGE,"Implicit None \n"];
      
      WriteString[sphenoRGE, "Integer, Intent(in) :: len \n"];
      WriteString[sphenoRGE, "Real(dp), Intent(in) :: T, GY(len) \n"];
      WriteString[sphenoRGE, "Real(dp), Intent(out) :: F(len) \n"];
      WriteString[sphenoRGE, "Integer :: i1,i2,i3,i4 \n"];
      WriteString[sphenoRGE, "Integer :: j1,j2,j3,j4,j5,j6,j7 \n"];
      WriteString[sphenoRGE, "Real(dp) :: q \n"];
      
      
      ComplexOut="";
      RealOut="";
      
      For[i=1,i\[LessEqual]Length[listParameters],
        NewString="";
        NewDim=AddDim[listParameters[[i]]];
        NewDimAdj=AddDimAdj[listParameters[[i]]];
        NewString =
          SPhenoForm[listParameters[[i]]]<>NewDim<>","<>"beta"<>
            SPhenoForm[listParameters[[i]]]<>"1"<>NewDim<>","<>"beta"<>
            SPhenoForm[listParameters[[i]]]<>"2"<>NewDim<>","<>"D"<>
            SPhenoForm[listParameters[[i]]]<>NewDim<>",";
        
        If[
          Length[getDimParameters[listParameters[[i]]]]\[Equal]2 && 
            Adj[listParameters[[i]]]=!= listParameters[[i]],
          
          NewString  = 
              NewString <> "adj"<>SPhenoForm[listParameters[[i]]]<>NewDimAdj<>
                ",";
          ];
        
        If[MemberQ[realVar,listParameters[[i]]]\[Equal]False,
          ComplexOut = ComplexOut<> NewString;,
          RealOut = RealOut<> NewString;
          ];
        
        i++;];
      
      If[RealOut=!="",
        WriteString[sphenoRGE, 
            FortranLineBreak[
                RealOut = "Real(dp) :: "<>StringDrop[RealOut,-1]]<>"\n"];
        ];
      
      If[ComplexOut=!="",
        WriteString[sphenoRGE, 
            FortranLineBreak["Complex(dp) :: "<>StringDrop[ComplexOut,-1]]<>
              "\n"];
        ];
      
      If[spuren=!={},
        WriteString[sphenoRGE, 
          "Real(dp) :: Tr1("<>ToString[AnzahlGauge] <>"),Tr2("<>
            ToString[AnzahlGauge] <>"),Tr3("<>ToString[AnzahlGauge] <>
            ") \n"];
        If[FreeQ[spuren,Tr4]===False,
          
          WriteString[sphenoRGE, 
              "Real(dp) :: Tr4("<>ToString[AnzahlGauge] <>","<>
                ToString[AnzahlGauge] <>") \n"];
          ];
        ];
      
      If[Length[listAbsolute]>0,
        NewString="";
        For[i=1,i\[LessEqual]Length[listAbsolute],
          
          NewString  = 
            NewString <> "Abs"<>SPhenoForm[listAbsolute[[i]]]<>",";
          i++;];
        WriteString[sphenoRGE, 
          FortranLineBreak[
              RealOut = "Real(dp) :: "<>StringDrop[NewString,-1]]<>"\n"];
        ];
      
      listMatrizen1=
        Flatten[{listMat2[[1]],listMat3[[1]],listMat4[[1]],listMat5[[1]]},1];
      listMatrizen2=
        Flatten[{listMat2[[2]],listMat3[[2]],listMat4[[2]],listMat5[[2]]},1];
      
      If[listMatrizen1=!={},
        MakeVariableList[Transpose[listMatrizen1][[2]],"",sphenoRGE];
        ];
      If[listMatrizen2=!={},
        MakeVariableList[Transpose[listMatrizen2][[2]],"",sphenoRGE];
        ];
      
      If[listTr[[1]]=!={},
        MakeVariableList[Transpose[listTr[[1]]][[2]],"",sphenoRGE];
        ];
      
      If[listTr[[2]]=!={},
        MakeVariableList[Transpose[listTr[[2]]][[2]],"",sphenoRGE];
        ];
      
      
      If[listPow[[1]]=!={},
        MakeVariableList[Transpose[listPow[[1]]][[2]],"",sphenoRGE];
        ];
      
      If[listPow[[2]]=!={},
        MakeVariableList[Transpose[listPow[[2]]][[2]],"",sphenoRGE];
        ];
      
      If[listDy[[1]]=!={},
        MakeVariableList[Transpose[listDy[[1]]][[4]],"",sphenoRGE];
        ];
      
      If[listDy[[2]]=!={},
        MakeVariableList[Transpose[listDy[[2]]][[4]],"",sphenoRGE];
        ];
      
      If[ThreeIndexParametersInvolved===True,
        For[i=1,i\[LessEqual]Length[threeIndexParameter],
            If[FreeQ[listParameters,threeIndexParameter[[i]]]\[Equal]False,
              dim = getDimParameters[threeIndexParameter[[i]]];
              For[j=1,j\[LessEqual]dim[[3]],
                If[FreeQ[realVar,threeIndexParameter[[i]]],
                  
                  WriteString[sphenoRGE, 
                      "Complex(dp) :: "<>SPhenoForm[
                          threeIndexParameter[[i]][j]]<>"("<>
                        ToString[dim[[1]]]<>","<>ToString[dim[[2]]]<>"), adj"<>
                        SPhenoForm[threeIndexParameter[[i]][j]]<>"("<>
                        ToString[dim[[2]]]<>","<>ToString[dim[[1]]]<>
                        ") \n"];,
                  
                  WriteString[sphenoRGE, 
                      "Real(dp) :: "<>SPhenoForm[threeIndexParameter[[i]][j]]<>
                        "("<>ToString[dim[[1]]]<>","<>ToString[dim[[2]]]<>
                        ")  \n"];
                  ];
                j++;];
              ];
            i++;];
        ];
      
      
      WriteString[sphenoRGE, "Iname = Iname +1 \n"];
      WriteString[sphenoRGE, 
        "NameOfUnit(Iname) = 'rge"<> ToString[nr]<>"' \n \n"];
      WriteString[sphenoRGE, "OnlyDiagonal = .Not.GenerationMixing \n"];
      WriteString[sphenoRGE, "q = t \n \n"];
      
      MakeCall["GToParameters"<>ToString[nr]<>SubNr,listParameters,{"gy"},{},
        sphenoRGE];
      
      If[Length[Thresholds]>0,
        AddThresholdsToRGEs[listParameters];
        ];
      
      If[ThreeIndexParametersInvolved===True,
        For[i=1,i\[LessEqual]Length[threeIndexParameter],
          
          If[FreeQ[listParameters,threeIndexParameter[[i]]]\[Equal]False && 
              FreeQ[realVar,threeIndexParameter[[i]]]\[Equal]True,
            dim = getDimParameters[threeIndexParameter[[i]]];
            For[j=1,j\[LessEqual]dim[[3]],
              
              WriteString[sphenoRGE, 
                SPhenoForm[threeIndexParameter[[i]][j]]<>"="<> 
                  SPhenoForm[threeIndexParameter[[i]]]<>"(:,:,"<>ToString[j]<>
                  ")"<>" \n"];
              
              WriteString[sphenoRGE,
                "Call Adjungate("<> SPhenoForm[threeIndexParameter[[i]][j]]<>",adj"<> 
                  SPhenoForm[threeIndexParameter[[i]][j]]<>") \n"];
              j++;];
            ];
          i++;];
        UseMatMul2=False;
        ];
      
      
      If[DeleteCases[
            DeleteCases[
              DeleteCases[
                Intersection[DeleteCases[getDimSPheno/@listParameters,{}]],{3,
                  3}],{3}],{1}]=!={},
        UseMatMul2=False; 
        ];
      
      subAdj={};
      
      For[i=1,i\[LessEqual]Length[listAbsolute],
        WriteString[sphenoRGE,
          "Abs"<>SPhenoForm[listAbsolute[[i]]]<>" = Conjg("<>
            SPhenoForm[listAbsolute[[i]]]<>")*"<>
            SPhenoForm[listAbsolute[[i]]]<>"\n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listParameters],
        If[
          Length[getDimParameters[listParameters[[i]]]]\[Equal]2  && 
            Adj[listParameters[[i]]]=!=listParameters[[i]] &&  
            FreeQ[realVar,listParameters[[i]]],
          
          WriteString[sphenoRGE,
            "Call Adjungate("<>SPhenoForm[listParameters[[i]]]<>",adj"<>
              SPhenoForm[listParameters[[i]]]<>")\n"];
          
          subAdj = 
            Join[subAdj,{Adj[
                    ToExpression[SPhenoForm[listParameters[[i]]]]]\[Rule] 
                  ToExpression["adj"<>SPhenoForm[listParameters[[i]]]]}];
          
          subAdj = 
            Join[subAdj,{Adj[listParameters[[i]]]\[Rule] 
                  ToExpression["adj"<>SPhenoForm[listParameters[[i]]]]}];
          (* 
            subAdj = 
                Join[subAdj,{listParameters[[i]]\[Rule] 
                      ToExpression[
                        SPhenoForm[listParameters[[i]]]]}]; *)
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listMatrizen1],
        If[
          Length[getDimSPheno[listMatrizen1[[i,1,1]]]]\[Equal]1 &&  
            Length[getDimSPheno[listMatrizen1[[i,1,2]]]]\[Equal]1,
          If[FreeQ[realVar,listMatrizen1[[i,1,1]]/. Tp[x_]\[Rule]x],
              
              WriteString[sphenoRGE,
                  " "<>ToString[listMatrizen1[[i,2]]]<> 
                    " = Dot_Product(Conjg(" <>
                    SPhenoForm[listMatrizen1[[i,1,1]]/.subAdj]  <>"),"<>
                    SPhenoForm[listMatrizen1[[i,1,2]]/.subAdj]  <>") \n"];,
              
              WriteString[sphenoRGE,
                  " "<>ToString[listMatrizen1[[i,2]]]<> " = Dot_Product(" <>
                    SPhenoForm[listMatrizen1[[i,1,1]]/.subAdj]  <>","<>
                    SPhenoForm[listMatrizen1[[i,1,2]]/.subAdj]  <>") \n"];
              ];,
          If[UseMatMul2\[Equal]True,
              
              WriteString[sphenoRGE,
                  " "<>ToString[listMatrizen1[[i,2]]]<> " = Matmul2(" <>
                    SPhenoForm[listMatrizen1[[i,1,1]]/.subAdj]  <>","<>
                    SPhenoForm[listMatrizen1[[i,1,2]]/.subAdj]  <>
                    ",OnlyDiagonal) \n"];,
              
              WriteString[sphenoRGE,
                  " "<>ToString[listMatrizen1[[i,2]]]<> " = Matmul(" <>
                    SPhenoForm[listMatrizen1[[i,1,1]]/.subAdj]  <>","<>
                    SPhenoForm[listMatrizen1[[i,1,2]]/.subAdj]  <>") \n"];
              ];
          ];
        If[
          listMatrizen1[[i,3]]\[Equal]True && 
            Length[getDimSPheno[listMatrizen1[[i,2]]]]>0,
          
          WriteString[sphenoRGE,
              "Forall(i2=1:"<>ToString[
                  getDimSPheno[listMatrizen1[[i,2]]][[1]]] <>")  "<>
                ToString[listMatrizen1[[i,2]]]<>"(i2,i2) =  Real("<>
                ToString[listMatrizen1[[i,2]]]<>"(i2,i2),dp) \n"];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listTr[[1]]],
        If[FreeQ[realVar,listTr[[1,i,1]]],
          
          WriteString[sphenoRGE,
              " "<>ToString[listTr[[1,i,2]]]<> " = Real(cTrace(" <>
                ToString[listTr[[1,i,1]]]  <>"),dp) \n"];,
          
          WriteString[sphenoRGE,
              " "<>ToString[listTr[[1,i,2]]]<> " = Trace(" <>
                ToString[listTr[[1,i,1]]]  <>") \n"];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listPow[[1]]],
        WriteString[sphenoRGE,
          " "<>ToString[listPow[[1,i,2]]]<> " =" <>
            SPhenoForm[listPow[[1,i,1]]]  <>" \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listDy[[1]]],
        WriteString[sphenoRGE,
          "Do i1=1,"<>ToString[getDimSPheno[listDy[[1,i,4]]][[1]]] <>"\n"];
        WriteString[sphenoRGE,
          "  Do i2=1,"<>ToString[getDimSPheno[listDy[[1,i,4]]][[2]]] <>"\n"];
        WriteString[sphenoRGE, 
          SPhenoForm[listDy[[1,i,4]]]<>"(i1,i2) = "<>
            SPhenoForm[listDy[[1,i,2]]]<>"(i1)*"<>SPhenoForm[listDy[[1,i,3]]]<>
            "(i2) \n"];
        WriteString[sphenoRGE,"  End Do \n"];
        WriteString[sphenoRGE,"End Do \n"];
        i++;];
      
      
      WriteString[sphenoRGE, "\n\n"];
      WriteString[sphenoRGE, "If (TwoLoopRGE) Then \n"];
      
      For[i=1,i\[LessEqual]Length[listMatrizen2],
        If[
          Length[getDimSPheno[listMatrizen2[[i,1,1]]]]\[Equal]1 &&  
            Length[getDimSPheno[listMatrizen2[[i,1,2]]]]\[Equal]1,
          If[FreeQ[realVar,listMatrizen2[[i,1,1]] /. Tp[x_]\[Rule]x],
              
              WriteString[sphenoRGE,
                  " "<>ToString[listMatrizen2[[i,2]]]<> 
                    " = Dot_Product(Conjg(" <>
                    SPhenoForm[listMatrizen2[[i,1,1]]/.subAdj]  <>"),"<>
                    SPhenoForm[listMatrizen2[[i,1,2]]/.subAdj]  <>") \n"];,
              
              WriteString[sphenoRGE,
                  " "<>ToString[listMatrizen2[[i,2]]]<> " = Dot_Product(" <>
                    SPhenoForm[listMatrizen2[[i,1,1]]/.subAdj]  <>","<>
                    SPhenoForm[listMatrizen2[[i,1,2]]/.subAdj]  <>") \n"];
              ];,
          If[UseMatMul2\[Equal]True,
              
              WriteString[sphenoRGE,
                  " "<>ToString[listMatrizen2[[i,2]]]<> " = Matmul2(" <>
                    SPhenoForm[listMatrizen2[[i,1,1]]/.subAdj]  <>","<>
                    SPhenoForm[listMatrizen2[[i,1,2]]/.subAdj]  <>
                    ",OnlyDiagonal) \n"];,
              
              WriteString[sphenoRGE,
                  " "<>ToString[listMatrizen2[[i,2]]]<> " = Matmul(" <>
                    SPhenoForm[listMatrizen2[[i,1,1]]/.subAdj]  <>","<>
                    SPhenoForm[listMatrizen2[[i,1,2]]/.subAdj]  <>") \n"];
              ];
           ];
        If[
          listMatrizen2[[i,3]]\[Equal]True && 
            Length[getDimSPheno[listMatrizen2[[i,2]]]]>0,
          
          WriteString[sphenoRGE,
              "Forall(i2=1:"<>ToString[
                  getDimSPheno[listMatrizen2[[i,2]]][[1]]] <>")  "<>
                ToString[listMatrizen2[[i,2]]]<>"(i2,i2) =  Real("<>
                ToString[listMatrizen2[[i,2]]]<>"(i2,i2),dp) \n"];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listTrace[[2]]],
        If[FreeQ[realVar,listTr[[2,i,1]]],
          
          WriteString[sphenoRGE,
              " "<>ToString[listTr[[2,i,2]]]<> " = cTrace(" <>
                ToString[listTr[[2,i,1]]]  <>") \n"];,
          
          WriteString[sphenoRGE,
              " "<>ToString[listTr[[2,i,2]]]<> " = Trace(" <>
                ToString[listTr[[2,i,1]]]  <>") \n"];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listPow[[2]]],
        WriteString[sphenoRGE,
          " "<>ToString[listPow[[2,i,2]]]<> " =" <>
            SPhenoForm[listPow[[2,i,1]]]  <>" \n"];
        i++;];
      
      
      
      WriteString[sphenoRGE, "End If \n \n \n"];
      
      (*
        Print[spuren];
        spuren = spuren //. subSPhenoMatTr;
        Print[spuren];
        *)
      
      If[spuren=!={},
        For[i=1, i\[LessEqual]Length[spuren[[1]]],
          If[FreeQ[spuren[[1]],sum],
            
            string = 
              StringReplace[ToString[spuren[[1,i,1]]],{"["->"(","]"->")"}]<>
                " = " <>SPhenoForm[
                  Simplify[Expand[spuren[[1,i,2]]//. subSPhenoMatTr]] ];
            WriteString[sphenoRGE, FortranLineBreak[string,99] <>"\n\n"];,
            
            MakeSPhenoCoupling[Expand[spuren[[1,i,2]]] //. subSPhenoMatTr,
                StringReplace[ToString[spuren[[1,i,1]]],{"["->"(","]"->")"}],
                sphenoRGE]; 
            ];
          i++;];
        
        WriteString[sphenoRGE, "If (TwoLoopRGE) Then \n"];
        
        For[i=1, i\[LessEqual]Length[spuren[[2]]],
          If[FreeQ[spuren[[1]],sum],
            (*string = 
                  StringReplace[
                      ToString[spuren[[2,i,1]]],{"["->"(","]"->")"}]<>" = " <>
                    SPhenoForm[Expand[spuren[[2,i,2]]] //. subSPhenoMatTr ]; *)

                        
            string = 
              StringReplace[ToString[spuren[[2,i,1]]],{"["->"(","]"->")"}]<>
                " = " <>SPhenoForm[spuren[[2,i,2]] //. subSPhenoMatTr ];
            WriteString[sphenoRGE, FortranLineBreak[string,99] <>"\n\n"];,
            
            MakeSPhenoCoupling[Expand[spuren[[2,i,2]]] //. subSPhenoMatTr,
                StringReplace[ToString[spuren[[2,i,1]]],{"["->"(","]"->")"}],
                sphenoRGE];
            ];
          i++;];
        
        WriteString[sphenoRGE, "End If \n \n \n"];
        ];
      
      
      For[i=1,i\[LessEqual]Length[listParameters],
        If[listDy==={{},{}},
          
          WriteBetaFunction[listParameters[[i]],
              OneLoop[[i]] //. subSPhenoMatTr ,
              TwoLoop[[i]] //. subSPhenoMatTr, False];,
          
          WriteBetaFunction[listParameters[[i]],
              Simplify[Expand[OneLoop[[i]]] //. subSPhenoMatTr] ,
              Simplify[Expand[TwoLoop[[i]]] //. subSPhenoMatTr], False];
          ];
        i++;];
      
      
      
      
      CallString  = "Call ParametersToG"<>ToString[nr]<>SubNr<>"(";
      
      If[Length[Thresholds]>0,
        AddThresholdsToRGEsD[listParameters];
        ];
      
      
      
      For[i=1,i\[LessEqual]Length[listParameters],
        CallString = CallString<>"D"<>SPhenoForm[listParameters[[i]]]<>",";
        i++;];
      
      CallString = CallString <>"f)";
      
      WriteString[sphenoRGE,FortranLineBreak[CallString,1]<>"\n\n"];
      
      WriteString[sphenoRGE, "Iname = Iname - 1 \n \n"];
      WriteString[sphenoRGE, 
        "End Subroutine rge"<>ToString[nr]<>SubNr<>"  \n\n"];
      
      ];

WriteBetaFunction[name_,OneLoop_,TwoLoop_,WriteSums_]:=
    Block[{i,dim,i1,i2,j55,j1,j2,sign},
      
      WriteString[sphenoRGE,"!-------------------- \n"];
      WriteString[sphenoRGE,"! "<>SPhenoForm[name]<>" \n"];
      WriteString[sphenoRGE,"!-------------------- \n \n"];
      
      WriteMatrixMul=False;
      
      If[FreeQ[TwoLoop,sum] &&  FreeQ[OneLoop,sum],
        If[WriteSums\[Equal]True,
            OpenDoName[name,sphenoRGE];
            
            String1Loop = 
              "beta" <>SPhenoForm[name]<>"1" <>IndexString<>" = " <>
                SPhenoForm[OneLoop /. Kronecker[a__]\[Rule]0];
            WriteString[sphenoRGE, FortranLineBreak[String1Loop] <>"\n"];
            
            If[FreeQ[OneLoop,Kronecker]\[Equal]False,
              WriteString[sphenoRGE,"\n"];
              kronecker = Intersection[Cases[OneLoop, x:Kronecker[a_,b_],3]];
              For[i=1,i\[LessEqual]Length[kronecker],
                
                WriteString[sphenoRGE, 
                  "If ("<>ToString[kronecker[[i,1]]]<>".eq."<> 
                    ToString[kronecker[[i,2]]]<>") Then \n"];
                
                String1Loop = 
                  "beta" <>SPhenoForm[name]<>"1" <>IndexString<>" = beta" <>
                    SPhenoForm[name]<>"1" <>IndexString<>"+(" <>
                    SPhenoForm[Coefficient[OneLoop,kronecker[[i]]]]<>")";
                WriteString[sphenoRGE, FortranLineBreak[String1Loop] <>"\n"];
                WriteString[sphenoRGE,"End If \n"];
                i++];
              ];
            CloseDoes[sphenoRGE];,
            
            
            If[ThreeIndexParametersInvolved===
                    True && (FreeQ[OneLoop,a_[i1,b_Integer]]\[Equal]False || 
                      FreeQ[OneLoop,a_[b_Integer,i1]]\[Equal]False ),
                dim = getDimSPheno[name];
                Switch[Length[getDimSPheno[name]],
                  3,
                  	For[j55=1,j55\[LessEqual]dim[[3]],
                      	
                      WriteString[sphenoRGE,
                        "Do i2 = 1,"<>ToString[dim[[1]]]<>"\n"];
                      	
                      WriteString[sphenoRGE,
                        "Do i3 = 1,"<>ToString[dim[[2]]]<>"\n"];
                      	String1LoopHead =
                        "beta" <>SPhenoForm[name]<>"1(i2,i3,"<>ToString[j55]<>
                          ")"; 
                      	
                      String1Loop = 
                        SPhenoForm[Coefficient[OneLoop,Kronecker[j55,i3]]];
                      	
                      WriteString[sphenoRGE, 
                        FortranLineBreak[String1LoopHead,String1Loop,99] <>
                          "\n"];
                      	WriteString[sphenoRGE,"End Do\n"];
                      	WriteString[sphenoRGE,"End Do\n"];
                      	j55++;];,
                  2,
                  	
                  WriteString[sphenoRGE,
                    "beta" <>SPhenoForm[name]<>"1 = 0._dp \n"];
                  	String1LoopHead ="beta" <>SPhenoForm[name]<>"1(i1,i2)"; 
                  	
                  String1Loop = 
                    SPhenoForm[OneLoop /. Kronecker[a__]\[Rule]0];
                  	
                  WriteString[sphenoRGE,
                    "Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
                  	If[FreeQ[ListSymmetricParameters,name]\[Equal]False,
                    	
                    WriteString[sphenoRGE,
                        "Do i2 = i1,"<>ToString[dim[[2]]]<>"\n"];,
                    	If[FreeQ[ListAntiSymmetricParameters,name]\[Equal]False,
                        	
                        WriteString[sphenoRGE,
                            "Do i2 = i1+1,"<>ToString[dim[[2]]]<>"\n"];,
                        	
                        WriteString[sphenoRGE,
                            "Do i2 = 1,"<>ToString[dim[[2]]]<>"\n"];
                        	];
                    	];
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String1LoopHead, String1Loop,99] <>
                      "\n"];
                  
                  	If[Coefficient[TwoLoop, Kronecker[i1,i2]]=!=0,
                    	WriteString[sphenoRGE,"If (i2.eq.i1) Then \n"];
                    	
                    String1Loop =
                      SPhenoForm[Coefficient[OneLoop, Kronecker[i1,i2]]];
                    	
                    WriteString[sphenoRGE, 
                      FortranLineBreak[String1LoopHead, String1Loop,99,True] <>
                        "\n"];
                    	WriteString[sphenoRGE,"End If \n"];
                    	];
                  	
                  	For[j1=1,j1\[LessEqual]dim[[1]],
                    	If[Coefficient[OneLoop, Kronecker[j1,i1]]=!=0,
                      	WriteString[sphenoRGE,
                        "If ("<>ToString[j1]<>".eq.i1) Then \n"];
                      	
                      String1Loop = 
                        SPhenoForm[Coefficient[OneLoop, Kronecker[j1,i1]]];
                      	
                      WriteString[sphenoRGE, 
                        FortranLineBreak[String1LoopHead, String1Loop,99,
                            True] <>"\n"];
                      	WriteString[sphenoRGE,"End If \n"];
                      	];
                    	j1++;];
                  	For[j1=1,j1\[LessEqual]dim[[2]],
                    	
                    If[(Coefficient[OneLoop, Kronecker[j1,i2]] /. 
                            Kronecker[a_,i1]\[Rule]0)=!=0,
                      	
                      WriteString[sphenoRGE,
                        "If ("<>ToString[j1]<>".eq.i2) Then \n"];
                      	
                      String1Loop = 
                        SPhenoForm[
                          Coefficient[OneLoop, Kronecker[j1,i2]] /. 
                            Kronecker[a_,i1]\[Rule]0];
                      	
                      WriteString[sphenoRGE, 
                        FortranLineBreak[String1LoopHead,String1Loop,99,
                            True] <>"\n"];
                      	WriteString[sphenoRGE,"End If \n"];
                      	];
                    	j1++;];
                  	
                  	
                  If[(FreeQ[ListSymmetricParameters,name]\[Equal]False || 
                        FreeQ[ListAntiSymmetricParameters,
                            name]\[Equal]False),
                    	If[FreeQ[ListSymmetricParameters,name]\[Equal]False,
                        	
                        WriteString[sphenoRGE,
                            "beta" <>SPhenoForm[name]<>"1(i2,i1) = beta" <>
                              SPhenoForm[name]<>"1(i1,i2) \n"];,
                        	
                        WriteString[sphenoRGE,
                            "beta" <>SPhenoForm[name]<>"1(i2,i1) = - beta" <>
                              SPhenoForm[name]<>"1(i1,i2) \n"];
                        	];
                    	];
                  	
                  	WriteString[sphenoRGE,"End Do\n"];
                  	WriteString[sphenoRGE,"End Do\n"];,
                  1,
                  	
                  WriteString[sphenoRGE,
                    "Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
                  	String1LoopHead ="beta" <>SPhenoForm[name]<>"1(i1)"; 
                  	String1Loop = SPhenoForm[OneLoop ];
                  	WriteString[sphenoRGE, 
                    FortranLineBreak[String1LoopHead,String1Loop,99] <>"\n"];
                  	WriteString[sphenoRGE,"End Do\n"];,
                  _,
                  	String1LoopHead ="beta" <>SPhenoForm[name]; 
                  	String1Loop = SPhenoForm[OneLoop];
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String1LoopHead,String1Loop,99] <>"\n"];
                  		];,
                dim = getDimSPheno[name];
                Switch[Length[getDimSPheno[name]],
                  3,
                  	For[j55=1,j55\[LessEqual]dim[[3]],
                      	
                      String1LoopHead = 
                        "beta" <>SPhenoForm[name]<>"1(:,:,"<>ToString[j55]<>
                          ")";
                      	
                      String1Loop =  
                        SPhenoForm[
                          Coefficient[OneLoop,Kronecker[j55,i3]] /. 
                                Kronecker[a__]\[Rule]ToExpression[
                                    "id"<>ToString[getDimSPheno[name][[1]]]<>
                                      "R"] /. a_[i1,i2]\[Rule]a /. 
                            a_[i1]\[Rule]a];
                      	
                      WriteString[sphenoRGE, 
                        FortranLineBreak[String1LoopHead, String1Loop,99] <>
                          "\n"];
                      	j55++;];,
                  
                  2,
                  	
                  String1Loop = 
                    "beta" <>SPhenoForm[name]<>"1  = " <>
                      SPhenoForm[
                        OneLoop /. 
                              Kronecker[a__]\[Rule]ToExpression[
                                  "id"<>ToString[getDimSPheno[name][[1]]]<>
                                    "R"] /. a_[i1,i2]\[Rule]a /. 
                          a_[i1]\[Rule]a];
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String1Loop,99] <>"\n"];,
                  _,
                  	
                  String1Loop = 
                    "beta" <>SPhenoForm[name]<>"1  = " <>
                      SPhenoForm[
                        OneLoop  /. a_[i1,i2]\[Rule]a /. a_[i1]\[Rule]a];
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String1Loop,99] <>"\n"];
                  ];
                
                ];
            ];,
        
        OpenDoName2[name,sphenoRGE];
        MakeSPhenoCoupling[OneLoop,
          "beta" <>SPhenoForm[name]<>"1" <>IndexString,sphenoRGE];
        CloseDoes2[sphenoRGE];
        
        
        ];
      
      WriteString[sphenoRGE, "\n \n \n"];
      
      WriteString[sphenoRGE, "If (TwoLoopRGE) Then \n"];
      
      If[FreeQ[TwoLoop,sum] &&  FreeQ[OneLoop,sum],
        If[WriteSums\[Equal]True,
            OpenDoName[name,sphenoRGE];
            
            WriteString[sphenoRGE, 
              FortranLineBreak[ "beta" <>SPhenoForm[name]<>"2" <>IndexString,
                  SPhenoForm[TwoLoop /. Kronecker[a__]\[Rule]0],0] <>"\n"];
            
            If[FreeQ[OneLoop,Kronecker]\[Equal]False,
              WriteString[sphenoRGE,"\n"];
              kronecker = Intersection[Cases[OneLoop, x:Kronecker[a_,b_],3]];
              For[i=1,i\[LessEqual]Length[kronecker],
                
                WriteString[sphenoRGE, 
                  "If ("<>ToString[kronecker[[i,1]]]<>".eq."<> 
                    ToString[kronecker[[i,2]]]<>") Then \n"];
                
                String2Loop = 
                  "beta" <>SPhenoForm[name]<>"2" <>IndexString<>" = beta" <>
                    SPhenoForm[name]<>"2" <>IndexString<>"+(" <>
                    SPhenoForm[Coefficient[TwoLoop,kronecker[[i]]]]<>")";
                
                WriteString[sphenoRGE, 
                  FortranLineBreak[String2Loop] <>"\n"]; 
                WriteString[sphenoRGE,"End If \n"];
                i++];
              ];
            CloseDoes[sphenoRGE];,
            
            
            
            If[ThreeIndexParametersInvolved===
                    True && (FreeQ[OneLoop,a_[i1,b_Integer]]\[Equal]False || 
                      FreeQ[OneLoop,a_[b_Integer,i1]]\[Equal]False ),
                dim = getDimSPheno[name];
                Switch[Length[getDimSPheno[name]],
                  3,
                  	For[j55=1,j55\[LessEqual]dim[[3]],
                      	
                      WriteString[sphenoRGE,
                        "Do i2 = 1,"<>ToString[dim[[1]]]<>"\n"];
                      	
                      WriteString[sphenoRGE,
                        "Do i3 = 1,"<>ToString[dim[[2]]]<>"\n"];
                      	
                      Strint2LoopHead =
                        "beta" <>SPhenoForm[name]<>"2(i2,i3,"<>ToString[j55]<>
                          ")"; 
                      	
                      String2Loop = 
                        SPhenoForm[Coefficient[TwoLoop,Kronecker[j55,i3]] ];
                      	WriteString[sphenoRGE, 
                        FortranLineBreak[String2LoopHead,String2Loop,99] <>
                          "\n"];
                      	WriteString[sphenoRGE,"End Do\n"];
                      	WriteString[sphenoRGE,"End Do\n"];
                      	j55++;];,
                  2,
                  	
                  WriteString[sphenoRGE,
                    "beta" <>SPhenoForm[name]<>"2 = 0._dp \n"];
                  	String2LoopHead ="beta" <>SPhenoForm[name]<>"2(i1,i2)"; 
                  	
                  String2Loop = 
                    SPhenoForm[TwoLoop /. Kronecker[a__]\[Rule]0];
                  	
                  WriteString[sphenoRGE,
                    "Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
                  	If[FreeQ[ListSymmetricParameters,name]\[Equal]False,
                    	
                    WriteString[sphenoRGE,
                        "Do i2 = i1,"<>ToString[dim[[2]]]<>"\n"];,
                    	If[FreeQ[ListAntiSymmetricParameters,name]\[Equal]False,
                        	
                        WriteString[sphenoRGE,
                            "Do i2 = i1+1,"<>ToString[dim[[2]]]<>"\n"];,
                        	
                        WriteString[sphenoRGE,
                            "Do i2 = 1,"<>ToString[dim[[2]]]<>"\n"];
                        	];
                    	];
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String2LoopHead,String2Loop,99] <>"\n"];
                  	If[Coefficient[TwoLoop, Kronecker[i1,i2]]=!=0,
                    	WriteString[sphenoRGE,"If (i2.eq.i1) Then \n"];
                    	
                    String2Loop = 
                      SPhenoForm[Coefficient[TwoLoop, Kronecker[i1,i2]] ];
                    	
                    WriteString[sphenoRGE, 
                      FortranLineBreak[String2LoopHead,String2Loop,99,True] <>
                        "\n"];
                    	WriteString[sphenoRGE,"End If \n"];
                    	];
                  	
                  	For[j1=1,j1\[LessEqual]dim[[1]],
                    	If[Coefficient[TwoLoop, Kronecker[j1,i1]]=!=0,
                      	
                      WriteString[sphenoRGE,
                        "If ("<>ToString[j1]<>".eq.i1) Then \n"];
                      	
                      String2Loop = 
                        SPhenoForm[Coefficient[TwoLoop, Kronecker[j1,i1]]];
                      	WriteString[sphenoRGE, 
                        FortranLineBreak[String2LoopHead,String2Loop,99,
                            True] <>"\n"];
                      	WriteString[sphenoRGE,"End If \n"];
                      	];
                    	j1++;];
                  	For[j1=1,j1\[LessEqual]dim[[2]],
                    	
                    If[(Coefficient[TwoLoop, Kronecker[j1,i2]] /. 
                            Kronecker[a_,i1]\[Rule]0)=!=0,
                      	
                      WriteString[sphenoRGE,
                        "If ("<>ToString[j1]<>".eq.i2) Then \n"];
                      	
                      String2Loop = 
                        SPhenoForm[
                          Coefficient[TwoLoop, Kronecker[j1,i2]] /. 
                            Kronecker[a_,i1]\[Rule]0];
                      	
                      WriteString[sphenoRGE, 
                        FortranLineBreak[String2LoopHead, String2Loop,99] <>
                          "\n"];
                      	WriteString[sphenoRGE,"End If \n"];
                      	];
                    	j1++;];
                  
                  	
                  If[(FreeQ[ListSymmetricParameters,name]\[Equal]False || 
                        FreeQ[ListAntiSymmetricParameters,name]\[Equal]
                          False),
                    	If[FreeQ[ListSymmetricParameters,name]\[Equal]False,
                        	
                        WriteString[sphenoRGE,
                            "beta" <>SPhenoForm[name]<>"2(i2,i1) = beta" <>
                              SPhenoForm[name]<>"2(i1,i2) \n"];,
                        	
                        WriteString[sphenoRGE,
                            "beta" <>SPhenoForm[name]<>"2(i2,i1) = - beta" <>
                              SPhenoForm[name]<>"2(i1,i2) \n"];
                        	];
                    	];
                  	WriteString[sphenoRGE,"End Do\n"];
                  	WriteString[sphenoRGE,"End Do\n"];,
                  1,
                  	
                  WriteString[sphenoRGE,
                    "Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
                  	String2LoopHead = "beta" <>SPhenoForm[name]<>"2(i1)";
                  	String2Loop = SPhenoForm[TwoLoop ];
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String2LoopHead, String2Loop,99] <>
                      "\n"];
                  	WriteString[sphenoRGE,"End Do\n"];,
                  _,
                  	String2LoopHead ="beta" <>SPhenoForm[name]<>"2"; 
                  	String2Loop = SPhenoForm[TwoLoop ];
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String2LoopHead, String2Loop,99] <>
                      "\n"];
                  		];,
                dim = getDimSPheno[name];
                Switch[Length[getDimSPheno[name]],
                  3,
                  	For[j55=1,j55\[LessEqual]dim[[3]],
                      	
                      String2LoopHead = 
                        "beta" <>SPhenoForm[name]<>"2(:,:,"<>ToString[j55]<>
                          ")" ;
                      	
                      String2Loop = 
                        SPhenoForm[
                          Coefficient[TwoLoop,Kronecker[j55,i3]]   /. 
                                Kronecker[a__]\[Rule]
                                  ToExpression[
                                    "id"<>ToString[getDimSPheno[name][[1]]]<>
                                      "R"]/. a_[i1,i2]\[Rule]a /. 
                            a_[i1]\[Rule]a ];
                      	
                      WriteString[sphenoRGE, 
                        FortranLineBreak[String2LoopHead, String2Loop,99] <>
                          "\n"];
                      	j55++;];,
                  2,
                  	
                  String2Loop =   
                    SPhenoForm[
                      TwoLoop   /. 
                            Kronecker[a__]\[Rule]
                              ToExpression[
                                "id"<>ToString[getDimSPheno[name][[1]]]<>"R"]/. 
                          a_[i1,i2]\[Rule]a /. a_[i1]\[Rule]a];
                  	String2LoopHead = "beta" <>SPhenoForm[name]<>"2";
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String2LoopHead,String2Loop,99] <>
                      "\n"];,
                  _,
                  	
                  String2Loop = 
                    SPhenoForm[
                      TwoLoop /. a_[i1,i2]\[Rule]a /. a_[i1]\[Rule]a];
                  	String2LoopHead = "beta" <>SPhenoForm[name]<>"2";
                  	
                  WriteString[sphenoRGE, 
                    FortranLineBreak[String2LoopHead,String2Loop,99] <>"\n"];
                  ];
                
                ];
            ];,
        
        OpenDoName2[name,sphenoRGE];
        MakeSPhenoCoupling[TwoLoop,
          "beta" <>SPhenoForm[name]<>"2" <>IndexString,sphenoRGE];
        CloseDoes2[sphenoRGE];
        
        
        ];
      
      
      
      
      WriteString[sphenoRGE,"\n \n"];
      
      WriteString[sphenoRGE,
        "D"<>SPhenoForm[name] <> " = oo16pi2*( beta" <>SPhenoForm[name]<>
          "1 + oo16pi2 * beta" <>SPhenoForm[name]<>"2 ) \n"]; 
      
      WriteString[sphenoRGE,"\n \n"];
      WriteString[sphenoRGE, "Else \n"];
      WriteString[sphenoRGE,
        "D"<>SPhenoForm[name] <> " = oo16pi2* beta" <>SPhenoForm[name]<>
          "1 \n"]; 
      WriteString[sphenoRGE, "End If \n \n \n"];
      
      If[FreeQ[Transpose[Betam2ij][[1]],name]\[Equal]False && 
          Length[getDimSPheno[name]]\[Equal]2 ,
        WriteString[sphenoRGE,
            "Forall(i1=1:"<>ToString[getDimSPheno[name][[1]]] <>") D"<>
              SPhenoForm[name] <> "(i1,i1) =  Real(D"<>SPhenoForm[name] <> 
              "(i1,i1),dp) \n"]; 
        ];
      
      
      
      ];

GenerateSPhenoAbbr[list1L_,list2L_]:=Block[{i,j,k, temp1L, temp2L},
      
      
      
      If[FreeQ[list1L,MatMul]\[Equal]False || 
              FreeQ[list2L,MatMul]\[Equal]False,
            
            listMatMul={Join[Union[Cases[list1L,MatMul[a__][b___],99]],
                  Union[Cases[list1L,MatMul[a__],99]]], 
                Join[Union[Cases[list2L,MatMul[a__][b___],99]], 
                  Union[Cases[list2L,MatMul[a__],99]]]};
            
            
            listMatMul = 
              DeleteCases[DeleteCases[DeleteCases[listMatMul,i1,3],i2,3],i3,
                    3] /. A_[]\[Rule]A /. MatMul[a__][b__]\[Rule]MatMul[a];
            
            
            listTrace ={Union[Cases[list1L,trace[a__],99]],
                Union[Cases[list2L,trace[a__],99]]};
            
            
            listMatMul[[1]]=
              Join[listMatMul[[1]], 
                MatMul /@ listTrace[[1]] /. 
                  MatMul[trace[a__]]\[Rule]MatMul[a]];
            
            listMatMul[[2]]=
              Join[listMatMul[[2]], 
                MatMul /@ listTrace[[2]] /. 
                  MatMul[trace[a__]]\[Rule]MatMul[a]];
            
            
            
            For[k=1,k\[LessEqual]2,
              listMatMulNew=listMatMul[[k]];
              For[i=1,i\[LessEqual]Length[listMatMul[[k]]],
                newEntry=listMatMul[[k,i]];
                For[j=1,j\[LessEqual] Length[listMatMul[[k,i]]]-2,
                  newEntry = Delete[newEntry,1];
                  listMatMulNew = Join[listMatMulNew,{newEntry}];
                  j++;];
                i++;];
              listMatMul[[k]] = listMatMulNew;
              k++;];
            
            
            
            listMatMul[[1]]=Intersection[listMatMul[[1]]];
            listMatMul[[2]]=Intersection[listMatMul[[2]]];
            
            
            listMatMul[[2]] = Complement[listMatMul[[2]], listMatMul[[1]]];
            listTrace[[2]] = Complement[listTrace[[2]], listTrace[[1]]];,
            
            listMatMul={{},{}};
            listTrace={{},{}};
            
            
            ];
        
        
        listMat2={{},{}};
        listMat3={{},{}};
        listMat4={{},{}};
        listMat5={{},{}};
        
        listTr={{},{}};
        
        listPowers={Intersection[Cases[list1L,x_Power,5]],
              Intersection[Cases[list2L,x_Power,5]]};
        listPowers[[1]] = DeleteCases[listPowers[[1]],x_?NotFreeQj];
        listPowers[[2]] = DeleteCases[listPowers[[2]],x_?NotFreeQj];
        listPowers[[2]] = Complement[listPowers[[2]], listPowers[[1]]];
        
        listPowers= DeleteCases[listPowers,x_MatMul^c_,5];
      
      
      temp1L =Expand[list1L]//. a_[i1,i2]\[Rule]0;
      temp2L = Expand[list2L] //. a_[i1,i2]\[Rule]0;
      listDyade1 = 
        Flatten[{Cases[temp1L,x_[i1] y_[i2],5],
            Cases[temp1L,d_ x_[i1] y_[i2],5],
            Cases[temp1L,x_[i1] conj[y_[i2]],5],
            Cases[temp1L,d_ x_[i1] conj[y_[i2]],5],
            Cases[temp1L,conj[x_[i1]] y_[i2],5],
            Cases[temp1L,d_ conj[x_[i1]] y_[i2],5],
            Cases[temp1L,conj[x_[i1]] conj[y_[i2]],5],
            Cases[temp1L,d_ conj[x_[i1]] conj[y_[i2]],5]}];
      listDyade2 = 
        Flatten[{Cases[temp2L,x_[i1] y_[i2],5],
            Cases[temp2L,d_ x_[i1] y_[i2],5],
            Cases[temp2L,x_[i1] conj[y_[i2]],5],
            Cases[temp2L,d_ x_[i1] conj[y_[i2]],5],
            Cases[temp2L,conj[x_[i1]] y_[i2],5],
            Cases[temp2L,d_ conj[x_[i1]] y_[i2],5],
            Cases[temp2L,conj[x_[i1]] conj[y_[i2]],5],
            Cases[temp2L,d_ conj[x_[i1]] conj[y_[i2]],5]}];
      listDyade = {listDyade1,listDyade2};
      listDyade[[1]]=
        Intersection[(Select[#,(FreeQ[#,i1]\[Equal]False || 
                        FreeQ[#,i2]\[Equal]False)&])&/@listDyade[[1]]];
      listDyade[[2]]=
        Intersection[(Select[#,(FreeQ[#,i1]\[Equal]False || 
                        FreeQ[#,i2]\[Equal]False)&])&/@listDyade[[2]]];
      listDyade[[2]] = Complement[listDyade[[2]], listDyade[[1]]];
      listDy = {{},{}};
      
      listPow={{},{}};
      
      listAbsolute={};
      For[j=1,j\[LessEqual]Length[listAllParameters],
        If[FreeQ[realVar,listAllParameters[[j]]],
          If[FreeQ[list1L,
                  listAllParameters[[j]]*conj[listAllParameters[[j]]]]\[Equal]
                False,
              listAbsolute=Join[listAbsolute,{listAllParameters[[j]]}];
              
              subSPhenoMatTr = 
                Join[subSPhenoMatTr,{listAllParameters[[j]]*
                        conj[listAllParameters[[j]]]\[Rule]
                      ToExpression[
                        "Abs"<>SPhenoForm[listAllParameters[[j]]]]}];,
              
              If[FreeQ[list2L,
                      listAllParameters[[j]]*
                        conj[listAllParameters[[j]]]]\[Equal]False,
                  listAbsolute=Join[listAbsolute,{listAllParameters[[j]]}];
                  
                  subSPhenoMatTr = 
                    Join[subSPhenoMatTr,{listAllParameters[[j]]*
                            conj[listAllParameters[[j]]]\[Rule]ToExpression[
                            "Abs"<>SPhenoForm[listAllParameters[[j]]]]}];
                  ];
              ];
          ];
        j++;];
      
      Clear[k,i,j];
      
      For[k=1,k\[LessEqual]2,
        For[j=1,j\[LessEqual]Length[listMatMul[[k]]],
          NewString="";
          For[i=1,i\[LessEqual]Length[listMatMul[[k,j]]],
            Switch[Head[listMatMul[[k,j,i]]],
              Adj,
              	
              NewString = 
                  NewString <>"adj"<>SPhenoForm[First[listMatMul[[k,j,i]]]];,
              Tp, 
              	
              NewString = 
                  NewString <>"Tp"<>SPhenoForm[First[listMatMul[[k,j,i]]]];,
              conj,
              	
              NewString = 
                  NewString <>"C"<>SPhenoForm[First[listMatMul[[k,j,i]]]];,
              _,
              	NewString = NewString <>SPhenoForm[listMatMul[[k,j,i]]];
              ];
            
            i++;];
          
          subSPhenoMatTr = 
            Join[subSPhenoMatTr,{listMatMul[[k,j]]\[Rule]ToExpression[
                    NewString]}];
          AddToParameters[listMatMul[[k,j]]];
          
          
          If[Reverse[
                Tp/@Conj/@(listMatMul[[k,
                            j]]/.conj\[Rule]Conj)]===(listMatMul[[k,
                      j]]/.conj\[Rule]Conj),
            hermitian=True;,
            hermitian=False;
            ];
          
          
          Switch[Length[listMatMul[[k,j]]],
            2,
            listMat2[[k]] = 
                Join[listMat2[[k]],{{Apply[List,listMatMul[[k,j]]],
                      ToExpression[NewString],hermitian}}];,
            3,
            listMat3[[k]] = 
                Join[listMat3[[k]],{{Apply[List,listMatMul[[k,j]]],
                      ToExpression[NewString],hermitian}}];,
            4,
            listMat4[[k]] = 
                Join[listMat4[[k]],{{Apply[List,listMatMul[[k,j]]],
                      ToExpression[NewString],hermitian}}];,
            5,
            listMat5[[k]] = 
                Join[listMat5[[k]],{{Apply[List,listMatMul[[k,j]]],
                      ToExpression[NewString],hermitian}}];
            ];
          j++;];
        
        
        For[j=1,j\[LessEqual]Length[listTrace[[k]]],
          NewString="Tr";
          For[i=1,i\[LessEqual]Length[listTrace[[k,j]]],
            Switch[Head[listTrace[[k,j,i]]],
              Adj,
              	
              NewString = 
                  NewString <>"adj"<>SPhenoForm[First[listTrace[[k,j,i]]]];,
              Tp, 
              	
              NewString = 
                  NewString <>"Tp"<>SPhenoForm[First[listTrace[[k,j,i]]]];,
              conj,
              	
              NewString = 
                  NewString <>"C"<>SPhenoForm[First[listTrace[[k,j,i]]]];,
              _,
              	NewString = NewString <>SPhenoForm[listTrace[[k,j,i]]];
              ];
            i++;];
          
          subSPhenoMatTr = 
            Join[subSPhenoMatTr,{listTrace[[k,j]]\[Rule]ToExpression[
                    NewString]}];
          
          SPhenoParameters = 
            Join[SPhenoParameters,{{ToExpression[NewString],{},{1}}}];
           
          listTr[[k]] = 
            Join[listTr[[k]],{{Apply[MatMul,listTrace[[k,j]]] //. 
                    subSPhenoMatTr,ToExpression[NewString]}}];
          j++;];
        
        
         For[i=1,i\[LessEqual]Length[listMat3[[k]]],
          
          listMat3[[k,i,
                1]]={listMat3[[k,i,1,
                  1]],(MatMul[listMat3[[k,i,1,2]],listMat3[[k,i,1,3]]] //. 
                  subSPhenoMatTr)};
          i++;];
        For[i=1,i\[LessEqual]Length[listMat4[[k]]],
          
          listMat4[[k,i,
                1]]={listMat4[[k,i,1,
                  1]],(MatMul[listMat4[[k,i,1,2]],listMat4[[k,i,1,3]],
                    listMat4[[k,i,1,4]]] //. subSPhenoMatTr)};
          i++;];
        For[i=1,i\[LessEqual]Length[listMat5[[k]]],
          
          listMat5[[k,i,
                1]]={listMat5[[k,i,1,
                  1]],(MatMul[listMat5[[k,i,1,2]],listMat5[[k,i,1,3]],
                    listMat5[[k,i,1,4]],listMat5[[k,i,1,5]]] //. 
                  subSPhenoMatTr)};
          i++;];
        
        listDyade[[k]] = listDyade[[k]] //. subSPhenoMatTr;
        
        For[j=1,j\[LessEqual]Length[listDyade[[k]]],
          
          NewString=
            "Dy"<>SPhenoForm[Cases[listDyade[[k,j]],x_[i1],5][[1,0]]]<>
              SPhenoForm[Cases[listDyade[[k,j]],x_[i2],5][[1,0]]];
          
          subSPhenoMatTr = 
            Join[subSPhenoMatTr,{listDyade[[k,j]]\[Rule]
                  ToExpression[NewString]}];
          
          SPhenoParameters = 
            Join[SPhenoParameters,{{ToExpression[NewString],{gen,
                    gen},{getDimSPheno[
                        Cases[listDyade[[k,j]],x_[i1],5][[1,0]]][[1]],
                    getDimSPheno[
                        Cases[listDyade[[k,j]],x_[i2],5][[1,0]]][[1]]}}}];
          
          listDy[[k]] =  
            Join[listDy[[k]],{{listDyade[[k,j]] ,
                  Cases[listDyade[[k,j]],x_[i1],5][[1,0]],
                  Cases[listDyade[[k,j]],x_[i2],5][[1,0]],
                  ToExpression[NewString]}}];
          j++;];
        
        
        For[j=1,j\[LessEqual]Length[listPowers[[k]]],
          If[FreeQ[FullForm[listPowers[[k,j]]],Plus],
            If[Head[listPowers[[k,j,1]]]===Rational,
              
              NewString=
                  ToString[Numerator[listPowers[[k,j,1]]]]<>"ov"<>
                    ToString[Denominator[listPowers[[k,j,1]]]];,
              If[Head[listPowers[[k,j,1]]]===conj,
                  NewString="C"<>SPhenoForm[listPowers[[k,j,1,1]]];,
                  NewString=SPhenoForm[listPowers[[k,j,1]]];
                  ];
              ];
            If[Head[listPowers[[k,j,2]]]===Integer,
              NewString = NewString <>"p"<>ToString[listPowers[[k,j,2]]];,
              If[listPowers[[k,j,2]]<0,
                  NewString ="ooSqrt"<>NewString;,
                  NewString ="sqrt"<>NewString;
                  ];
              ];
            
            NewString = 
              StringReplace[
                NewString,{"*"->""," "->"","+"->"p","-"->"m","("->"",
                  ")"->""}];
            
            listPow[[k]] = 
              Join[listPow[[k]],{{listPowers[[k,j]],
                    ToExpression[NewString]}}];
            
            SPhenoParameters = 
              Join[SPhenoParameters,{{ToExpression[NewString],{},{1}}}];
            
            subSPhenoMatTr = 
              Join[subSPhenoMatTr,{listPowers[[k,j]]\[Rule]
                    ToExpression[NewString]}];
            If[FreeQ[realVar,listPowers[[k,j,1]]]\[Equal]False,
              realVar = Join[realVar,{ToExpression[NewString]}];
              ];
            ];
          j++;]; 
        k++;];
      
      ];

NotFreeQj[x_]:=
    If[FreeQ[x,j1]&& FreeQ[x,j2]&& FreeQ[x,j3]&& FreeQ[x,j4]&& FreeQ[x,j5], 
      Return[False];,Return[True]];


AddToParameters[matmul_]:=Block[{i,len,dims},len=Length[matmul];
      dims=(getDimSPhenoRev/@
                matmul//.{MatMul[a___,{x1_,x2_},{y1_,y2_}]\[Rule]
                  MatMul[a,{x1,y2}],
                MatMul[a___,{x1_,x2_},{y1_}]\[Rule]MatMul[a,{x1}],
                MatMul[{x1_},{y1_}]\[Rule]MatMul[{}],
                MatMul[a___,{x1_},{y1_,y2_}]\[Rule]MatMul[a,{y2}]})[[1]];
      
      Switch[Length[dims],
        0,
        SPhenoParameters=
            Join[SPhenoParameters,{{ToExpression[NewString],{},dims}}];,
        1,
        SPhenoParameters=
            Join[SPhenoParameters,{{ToExpression[NewString],{generation},
                  dims}}];,
        2,
        SPhenoParameters=
            Join[SPhenoParameters,{{ToExpression[NewString],{generation,
                    generation},dims}}];
        ];
      ];

getDimSPhenoRev[x_Adj]:=Reverse[getDimSPheno[x]];
getDimSPhenoRev[x_Tp]:=Reverse[getDimSPheno[x]];
getDimSPhenoRev[x_]:=getDimSPheno[x]/;(Head[x]=!=Adj&&Head[x]=!=Tp)

(*
  AddToParameters[matmul_]:=Block[{i,len,dims},
      len=Length[matmul];
      dims=getDimSPheno[matmul[[len]]];
      For[i=1,i \[LessEqual]len-1,
        If[Length[dims]\[Equal]2,
          If[Head[matmul[[len]]] ===Tp|| Head[matmul[[len]]] === Adj ,
              dims={First[dims]};,
              dims={Last[dims]};
              ];,
          dims={};
          ];
        dimsT=getDimSPheno[matmul[[len-i]]];
        If[Length[dimsT]\[Equal]2 ,
          If[Head[matmul[[len-i]]] ===Tp|| Head[matmul[[len-i]]] === Adj ,
              dims=Join[{dimsT[[2]]},dims];,
              dims=Join[{First[dimsT]},dims];
              ];
          ];
        i++;
        ];
      Switch[Length[dims],
        0,
        SPhenoParameters = 
            Join[SPhenoParameters,{{ToExpression[NewString],{},dims}}];,
        1,
        SPhenoParameters = 
            Join[SPhenoParameters,{{ToExpression[NewString],{generation},
                  dims}}];,
        2,
        SPhenoParameters = 
            Join[SPhenoParameters,{{ToExpression[NewString],{generation,
                    generation},dims}}];
        ];
      ];
  
  
  
  AddToParameters[matmul_]:=Block[{i,len,dims},
      len=Length[matmul];
      dims=getDimSPheno[matmul[[len]]];
      If[Length[dims]\[Equal]2,
        If[Head[matmul[[len]]]===Tp||Head[matmul[[len]]]===Adj,
            dims={First[dims]};,
            dims={Last[dims]};];,
        dims={};];
      
      dimsT=getDimSPheno[matmul[[1]]];
      If[Length[dimsT]\[Equal]2,
        If[Head[matmul[[1]]]===Tp||Head[matmul[[1]]]===Adj,
            dims=Join[{dimsT[[2]]},dims];,
            dims=Join[{First[dimsT]},dims];];
        ];
      
      Switch[Length[dims],
        0,
        SPhenoParameters=
            Join[SPhenoParameters,{{ToExpression[NewString],{},dims}}];,
        1,
        SPhenoParameters=
            Join[SPhenoParameters,{{ToExpression[NewString],{generation},
                  dims}}];,
        2,
        SPhenoParameters=
            Join[SPhenoParameters,{{ToExpression[NewString],{generation,
                    generation},dims}}];
        ];
      ];
  *)

WriteKronecker:=Block[{},
      WriteString[sphenoRGE,
        "Real(dp) Function Kronecker(t1,t2) Result(d) \n"];
      WriteString[sphenoRGE,"Implicit None\n"];
      WriteString[sphenoRGE,"Integer,Intent(in)::t1,t2\n"];
      WriteString[sphenoRGE,"If(t1.eq.t2) Then\n"];
      WriteString[sphenoRGE,"d=1.\n"];
      WriteString[sphenoRGE,"Else\n"];
      WriteString[sphenoRGE,"d=0.\n"];
      WriteString[sphenoRGE,"End If\n"];
      WriteString[sphenoRGE,"End Function Kronecker\n \n"];
      ];

AddThresholdsToRGEs[list_]:=Block[{i,j,nr},
      
      For[nr=1,nr<=Length[ThresholdInvolvedCouplings],
          
          WriteString[sphenoRGE, 
            "If (ThresholdCrossed.lt."<>ToString[nr]<>") Then \n"];
          For[i=1,i\[LessEqual]Length[ThresholdInvolvedCouplings[[nr]]],
            If[MemberQ[list,ThresholdInvolvedCouplings[[nr,i,1]]],
              If[ThresholdInvolvedCouplings[[nr,i,2]]===ALL,
                ind="";,
                Switch[ThresholdInvolvedCouplings[[nr,i,3]],
                    3, 
                      Switch[ThresholdInvolvedCouplings[[nr,i,2]],
                        1,
                        ind = "("<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>
                              ",:,:)";,
                        2,
                        ind = "(:,"<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]]<>
                              ",:)";,
                        3,
                        ind = "(:,:,"<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>
                              ")";
                        ];,
                    2, 
                    Switch[ThresholdInvolvedCouplings[[nr,i,2]],
                        1, 
                        ind = "("<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>
                              ",:)";,
                        2, 
                        ind = "(:,"<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>
                              ")";
                        ];,
                    1, 
                    ind = "("<>ToString[
                            ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
                    ];
                ];
              
              WriteString[sphenoRGE,
                SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]]<>ind<>
                  " = 0._dp \n"];
              ];
            i++;];
          WriteString[sphenoRGE,"End if \n\n"];
          nr++;];
      
      ];

AddThresholdsToRGEsD[list_]:=Block[{i,j,nr},
      
      For[nr=1,nr<=Length[ThresholdInvolvedCouplings],
          
          WriteString[sphenoRGE, 
            "If (ThresholdCrossed.lt."<>ToString[nr]<>") Then \n"];
          For[i=1,i\[LessEqual]Length[ThresholdInvolvedCouplings[[nr]]],
            If[MemberQ[list,ThresholdInvolvedCouplings[[nr,i,1]]],
              If[ThresholdInvolvedCouplings[[nr,i,2]]===ALL,
                ind="";,
                Switch[ThresholdInvolvedCouplings[[nr,i,3]],
                    3, 
                      Switch[ThresholdInvolvedCouplings[[nr,i,2]],
                        1,
                        ind = "("<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>
                              ",:,:)";,
                        2,
                        ind = "(:,"<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]]<>
                              ",:)";,
                        3,
                        ind = "(:,:,"<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>
                              ")";
                        ];,
                    2, 
                    Switch[ThresholdInvolvedCouplings[[nr,i,2]],
                        1, 
                        ind = "("<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>
                              ",:)";,
                        2, 
                        ind = "(:,"<>
                              ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>
                              ")";
                        ];,
                    1, 
                    ind = "("<>ToString[
                            ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
                    ];
                ];
              
              WriteString[sphenoRGE,
                "D"<>SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]]<>ind<>
                  " = 0._dp \n"];
              ];
            i++;];
          WriteString[sphenoRGE,"End if \n\n"];
          nr++;];
      
      ];