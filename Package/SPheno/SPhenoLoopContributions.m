(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

(* AddPenguinContributions[list_,resFFVscalar_,resFFVvector_,resSSV_,
      resFFSscalar_,resFFSvector_,resSSS_,resVVV_,initial_,final_,V3Needed_,
      file_]:=Block[{i,j,k},
      prop = External[3] /. list[[1,2]];
      
      
      
      For[j=1,j\[LessEqual]Length[list],
        
        AddPenguinResult[initial,file];
        
        penguin = list[[j]];
        
        c1=getSPhenoCoupling2[penguin[[1,1]],SPhenoCouplingsAll];
        c2=getSPhenoCoupling2[penguin[[1,2]],SPhenoCouplingsAll];
        
        
        ind1 = 
          MakeIndicesCoupling[{External[1],gt1}/.penguin[[2]],{Internal[1],
                i1}/.penguin[[2]],{AntiField[Internal[2]],i2}/.penguin[[2]],
            c1[[2]]];
        ind2 =
          MakeIndicesCoupling[{External[2],
                gt2}/.penguin[[2]],{AntiField[Internal[1]],i1}/.penguin[[2]],
            {Internal[3],i3}/.penguin[[2]],c2[[2]]]; 
        
        If[V3Needed \[Equal]True,
          c3=getSPhenoCoupling2[penguin[[1,3]],SPhenoCouplingsAll];
          
          ind3 = MakeIndicesCoupling[{External[3],
                  gt3}/.penguin[[2]],{Internal[2],
                  i2}/.penguin[[2]],{AntiField[Internal[3]],i3}/.penguin[[2]],
              c3[[2]]];
          ];
        
        
        p1=(Internal[1] /.penguin[[2]]);
        p2 =(Internal[2] /. penguin[[2]]);
        p3 =(Internal[3] /. penguin[[2]]);
        
        If[getGenSPheno[p1]>1,
          WriteString[file,
              "Do i1="<> ToString[getGenSPhenoStart[p1]]<>","<> 
                ToString[getGenSPheno[p1]]<>"\n"];];
        If[getGenSPheno[p2]>1,
          WriteString[file,
              "  Do i2="<> ToString[getGenSPhenoStart[p2]]<>","<> 
                ToString[getGenSPheno[p2]]<>"\n"];];
        If[V3Needed \[Equal]True,
          
          If[getGenSPheno[p3]>1,
              WriteString[file,
                  "   Do i3="<> ToString[getGenSPhenoStart[p3]]<>","<> 
                    ToString[getGenSPheno[p3]]<>"\n"];];,
          If[getGenSPheno[p3]>1,WriteString[file,"   i3 = i2\n"];];
          ];
        
        
        WriteVertexToFile[1,c1,ind1,getVertexType[penguin[[1,1]]],file];
        WriteVertexToFile[2,c2,ind2,getVertexType[penguin[[1,2]]],file];
        
        If[V3Needed \[Equal]True,
          WriteVertexToFile[3,c3,ind3,getVertexType[penguin[[1,3]]],file];
          ];
        
        Switch[getVertexType[penguin[[1,3]]],
          FFS,
          	Switch[getVertexType[penguin[[1,1]]],
              	FFS,
              
              	currentScalar1=p1; IndexScalar1=i1;
              	currentFermion1 =p2; IndexFermion1=i2;
              	currentFermion2 =p3;IndexFermion2=i3;
              	AddPenguinResult[resFFSscalar,file];,
              
              	FFV,
              	currentVector1=p1; IndexVector1=i1;
              	currentFermion1 =p2; IndexFermion1=i2;
              	currentFermion2 =p3;IndexFermion2=i3;	
              	AddPenguinResult[resFFSfermion,file];
              	];,	
          
          SSS,
          	currentFermion1=p1; IndexFermion1=i1;
          	currentScalar1 =p2; IndexScalar1=i2;
          	currentScalar2 =p3;IndexScalar2=i3;
          	AddPenguinResult[resSSS,file];,
          
          
          FFV,
          	Switch[getVertexType[penguin[[1,2]]],
              	FFS,
              	currentScalar1=p1; IndexScalar1=i1;
              	currentFermion1 =p2; IndexFermion1=i2;
              	currentFermion2 =p3;IndexFermion2=i3;
              	AddPenguinResult[resFFVscalar,file];,
              
              	FFV,
              	currentVector1=p1; IndexVector1=i1;
              	currentFermion1 =p2; IndexFermion1=i2;
              	currentFermion2 =p3;IndexFermion2=i3;
              	AddPenguinResult[resFFVvector,file];
              	];,	
          
          
          SSV,
          	currentFermion1=p1; IndexFermion1=i1;
          	currentScalar1 =p2; IndexScalar1=i2;
          	currentScalar2 =p3;IndexScalar2=i3;	
          	AddPenguinResult[resSSV,file];,
          
          VVV,
          	currentFermion1=p1; IndexFermion1=i1;
          	currentVector1 =p2; IndexVector1=i2;
          	currentVector2 =p3;IndexVector2=i3;
          	AddPenguinResult[resVVV,file];
          ];
        
        If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
        If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];
        If[V3Needed\[Equal]True,
          If[getGenSPheno[p3]>1,WriteString[file,"End Do\n"];];
          ];
        WriteString[file,"\n\n"];
        
        AddPenguinResult[final,file];
        
        j++;];
      
      ];
  
  
  AddWaveContributions[list_,resFFS_,resFFV_,initial_,final_,file_]:=
    Block[{i,j,k},
      AddWaveResult[initial,file];
      
      For[j=1,j\[LessEqual]Length[list],
        wave = list[[j]];
        
        c1=getSPhenoCoupling2[wave[[1,1]],SPhenoCouplingsAll];
        ind1 = 
          MakeIndicesCoupling[{External[1],gt1}/.wave[[2]],{Internal[1],
                i1}/.wave[[2]],{AntiField[Internal[2]],i2}/.wave[[2]],
            c1[[2]]];
        ind2=ind1;
        ind2[[1]]= StringReplace[ind2[[1]],{"gt1"->"gt2"}];
        ind2[[2]] = ind2[[2]] /. {True\[Rule]False,False\[Rule]True};
        
        p1=(Internal[1] /.wave[[2]]);
        p2 =(Internal[2] /. wave[[2]]);
        
        If[getGenSPheno[p1]>1,
          WriteString[file,"Do i1=1,"<> ToString[getGenSPheno[p1]]<>"\n"];];
        If[getGenSPheno[p2]>1,
          WriteString[file,
              "  Do i2=1,"<> ToString[getGenSPheno[p2]]<>"\n"];];
        
        WriteVertexToFile[1,c1,ind1,getVertexType[wave[[1,1]]],file];
        WriteVertexToFile[2,c1,ind2,getVertexType[wave[[1,1]]],file];
        
        Switch[getVertexType[wave[[1,1]]],
          	FFS,
          	If[getType[p1]===S,
            	currentScalar1=p1; IndexScalar1=i1;
            	currentFermion1 =p2; IndexFermion1=i2;,
            	currentScalar1=p2; IndexScalar1=i2;
            	currentFermion1 =p1; IndexFermion1=i1;
            	];
          	AddWaveResult[resFFS,file];,
          
          	FFV,
          	If[getType[p1]===V,
            	currentVector1=p1; IndexVector1=i1;
            	currentFermion1 =p2; IndexFermion1=i2;,
            	currentVector1=p2; IndexVector1=i2;
            	currentFermion1 =p1; IndexFermion1=i1;
            	];	
          	AddWaveResult[resFFSfermion,file];
          	];
        
        If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
        If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];
        WriteString[file,"\n\n"];
        AddWaveResult[final,file];
        WriteString[file,"\n\n"];
        j++;];
      
      ];
  
  
  AddVertexContributions[list_,resFFS_,resFFV_,initial_,final_,file_]:=
    Block[{i,j,k},
      AddWaveResult[initial,file];
      
      For[j=1,j\[LessEqual]Length[list],
        wave = list[[j]];
        
        c1=getSPhenoCoupling2[wave[[1,1]],SPhenoCouplingsAll];
        c2=getSPhenoCoupling2[wave[[1,2]],SPhenoCouplingsAll];
        c2=getSPhenoCoupling2[wave[[1,3]],SPhenoCouplingsAll];
        
        
        ind1 = 
          MakeIndicesCoupling[{External[1],gt1}/.wave[[2]],{Internal[1],
                i1}/.wave[[2]],{AntiField[Internal[2]],i2}/.wave[[2]],
            c1[[2]]];
        ind2 =
          MakeIndicesCoupling[{Internal[3],i3}/.wave[[2]],{Internal[2],
                i2}/.wave[[2]],
            {AnitField[Internal[1]],i1}/.wave[[2]],c2[[2]]]; 
        ind3 =
          MakeIndicesCoupling[{External[2],gt2}/.wave[[2]],{External[3],
                gt3}/.wave[[2]],
            {AntiField[Internal[3]],i3}/.wave[[2]],c2[[2]]]; 
        
        p1=(Internal[1] /.wave[[2]]);
        p2 =(Internal[2] /. wave[[2]]);
        p3 =(Internal[3] /. wave[[2]]);
        
        If[getGenSPheno[p1]>1,
          WriteString[file,"Do i1=1,"<> ToString[getGenSPheno[p1]]<>"\n"];];
        If[getGenSPheno[p2]>1,
          WriteString[file,
              "  Do i2=1,"<> ToString[getGenSPheno[p2]]<>"\n"];];
        If[getGenSPheno[p3]>1,
          WriteString[file,
              "   Do i3=1,"<> ToString[getGenSPheno[p3]]<>"\n"];];
        
        WriteVertexToFile[1,c1,ind1,getVertexType[wave[[1,1]]],file];
        WriteVertexToFile[2,c2,ind2,getVertexType[wave[[1,2]]],file];
        WriteVertexToFile[3,c3,ind3,getVertexType[wave[[1,3]]],file];
        
        Switch[getVertexType[wave[[1,1]]],
          	FFS,
          	If[getType[p1]===S,
            	currentScalar1=p1; IndexScalar1=i1;
            	currentFermion1 =p2; IndexFermion1=i2;,
            	currentScalar1=p2; IndexScalar1=i2;
            	currentFermion1 =p1; IndexFermion1=i1;
            	];
          	AddVertexResult[resFFS,file];,
          
          	FFV,
          	If[getType[p1]===V,
            	currentVector1=p1; IndexVector1=i1;
            	currentFermion1 =p2; IndexFermion1=i2;,
            	currentVector1=p2; IndexVector1=i2;
            	currentFermion1 =p1; IndexFermion1=i1;
            	];	
          	AddVertexResult[resFFV,file];
          	];
        
        If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
        If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];
        If[getGenSPheno[p3]>1,WriteString[file,"End Do\n"];];
        
        WriteString[file,"\n\n"];
        AddVertexResult[final,file];
        WriteString[file,"\n\n"];
        j++;];
      
      ];
  
  
  
  
  AddBoxContributions[box_,resFFS_,resFFSFFV_,resFFV_,file_]:=Block[{},
      For[i=1,i\[LessEqual]Length[box],
          p1=(Internal[1] /.box[[i,2]]);
          p2 =(Internal[2] /. box[[i,2]]);
          p3 =(Internal[3] /. box[[i,2]]);
          p4 =(Internal[4] /. box[[i,2]]);
          
          
          WriteString[file,
            "! "<>ToString[p1] <>","<>ToString[p2] <>","<>ToString[p3] <>","<>
              ToString[p4] <>"\n"]; 
          
          CurrentInsertionOrder = InsertionOrder /. box[[i,2]];
          
          c1=getSPhenoCoupling2[box[[i,1,1]],SPhenoCouplingsAll];
          c2=getSPhenoCoupling2[box[[i,1,2]],SPhenoCouplingsAll];
          c3=getSPhenoCoupling2[box[[i,1,3]],SPhenoCouplingsAll];
          c4=getSPhenoCoupling2[box[[i,1,4]],SPhenoCouplingsAll];
          
          
          ind1 = MakeIndicesCoupling[{External[1],
                  Index[1]}/.box[[i,2]],{Internal[1],
                  i1}/.box[[i,2]],{AntiField[Internal[4]],i4}/.box[[i,2]],
              c1[[2]]];
          
          ind2 =MakeIndicesCoupling[{External[2],
                  Index[2]}/.box[[i,2]],{AntiField[Internal[1]],
                  i1}/.box[[i,2]],{Internal[2],i2}/.box[[i,2]],c2[[2]]]; 
          
          ind3 = MakeIndicesCoupling[{External[3],
                  Index[3]}/.box[[i,2]],{AntiField[Internal[2]],
                  i2}/.box[[i,2]],{Internal[3],i3}/.box[[i,2]],c3[[2]]];
          
          ind4 = MakeIndicesCoupling[{External[4],
                  Index[4]}/.box[[i,2]],{Internal[4],
                  i4}/.box[[i,2]],{AntiField[Internal[3]],i3}/.box[[i,2]],
              c4[[2]]];
          
          
          
          If[getGenSPheno[p1]>1,
            WriteString[file,
                "Do i1=1,"<> ToString[getGenSPheno[p1]]<>"\n"];];
          
          If[getGenSPheno[p2]>1,
            WriteString[file,
                "  Do i2=1,"<> ToString[getGenSPheno[p2]]<>"\n"];];
          
          If[getGenSPheno[p3]>1,
            WriteString[file,
                "    Do i3=1,"<> ToString[getGenSPheno[p3]]<>"\n"];];
          
          If[getGenSPheno[p4]>1,
            WriteString[file,
                "      Do i4=1,"<> ToString[getGenSPheno[p4]]<>"\n"];];
          
          WriteVertexToFile[1,c1,ind1,getVertexType[box[[i,1,1]]],file];
          WriteVertexToFile[2,c2,ind2,getVertexType[box[[i,1,2]]],file];
          WriteVertexToFile[3,c3,ind3,getVertexType[box[[i,1,3]]],file];
          WriteVertexToFile[4,c4,ind4,getVertexType[box[[i,1,4]]],file];
          
          Swtich[C[getVertexType[box[[i,1,1]]],getVertexType[box[[i,1,3]]]],
            C[FFS,FFS],
            If[getType[p1]===F,
              currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; 
              IndexFermion2=i3;
              currentScalar1=p2; currentScalar2=p4; IndexScalar1=i2; 
              IndexScalar2=i4;,
              currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; 
              IndexFermion2=i4;
              currentScalar1=p1; currentScalar2=p3; IndexScalar1=i1; 
              IndexScalar2=i3;
              ];
            AddBoxResult[resFFS,file];,
            
            C[FFV,FFS],
            If[getType[p1]===F,
              If[getType[p4]===S,
                  currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; 
                  IndexFermion2=i3;
                  currentVector1=p2; currentScalar1=p4; IndexVector1=i2; 
                  IndexScalar1=i4;,
                  currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; 
                  IndexFermion2=i3;
                  currentVector1=p4; currentScalar1=p2; IndexVector1=i4; 
                  IndexScalar1=i2;
                  ];,
              If[getType[p1]===S,
                  currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; 
                  IndexFermion2=i4;
                  currentVector1=p3; currentScalar1=p1; IndexVector1=i3; 
                  IndexScalar1=i1;,
                  currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; 
                  IndexFermion2=i4;
                  currentVector1=p1; currentScalar1=p3; IndexVector1=i1; 
                  IndexScalar1=i3;
                  ];
              ];
            AddBoxResult[resFFSFFV,file];,
            
            C[FFV,FFV],
            If[getType[p1]===F,
              currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; 
              IndexFermion2=i3;
              currentVector1=p2; currentVector2=p4; IndexVector1=i2; 
              IndexVector2=i4;,
              currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; 
              IndexFermion2=i4;
              currentVector1=p1; currentVector2=p3; IndexVector1=i1; 
              IndexVector2=i3;
              ];
            AddBoxResult[resFFV,file];
            ];
          
          If[getGenSPheno[p1]>1,WriteString[file,"    End Do \n"];];
          If[getGenSPheno[p2]>1,WriteString[file,"   End Do \n"];];
          If[getGenSPheno[p3]>1,WriteString[file,"  End Do \n"];];
          If[getGenSPheno[p4]>1,WriteString[file,"End Do \n"];];
          
          WriteString[file, "\n\n "];
          
          i++;];
      
      
      ];
  
  *)

AddPenguinContributions2[list_,resFFVscalar_,resFFVvector_,resSSV_,
      resFFSscalar_,resFFSvector_,resSSS_,resVVV_,initial_,final_,V3Needed_,
      file_]:=Block[{i,j,k},
      prop = External[3] /. list[[1,2]];
      
      
      
      For[j=1,j\[LessEqual]Length[list],
        
        AddPenguinResult[initial,file];
        
        penguin = list[[j]];
        
        c1=getSPhenoCoupling2[penguin[[1,1]],SPhenoCouplingsAll];
        c2=getSPhenoCoupling2[penguin[[1,2]],SPhenoCouplingsAll];
        
        
        ind1 = 
          MakeIndicesCoupling[{External[1],gt1}/.penguin[[2]],{Internal[1],
                i1}/.penguin[[2]],{AntiField[Internal[2]],i2}/.penguin[[2]],
            c1[[2]]];
        ind2 =
          MakeIndicesCoupling[{External[2],
                gt2}/.penguin[[2]],{AntiField[Internal[1]],i1}/.penguin[[2]],
            {Internal[3],i3}/.penguin[[2]],c2[[2]]]; 
        
        If[V3Needed \[Equal]True,
          c3=getSPhenoCoupling2[penguin[[1,3]],SPhenoCouplingsAll];
          
          ind3 = MakeIndicesCoupling[{External[3],
                  gt3}/.penguin[[2]],{Internal[2],
                  i2}/.penguin[[2]],{AntiField[Internal[3]],i3}/.penguin[[2]],
              c3[[2]]];
          ];
        
        
        p1=(Internal[1] /.penguin[[2]]);
        p2 =(Internal[2] /. penguin[[2]]);
        p3 =(Internal[3] /. penguin[[2]]);
        
        If[getGenSPheno[p1]>1,
          WriteString[file,
              "Do i1="<> ToString[getGenSPhenoStart[p1]]<>","<> 
                ToString[getGenSPheno[p1]]<>"\n"];];
        If[getGenSPheno[p2]>1,
          WriteString[file,
              "  Do i2="<> ToString[getGenSPhenoStart[p2]]<>","<> 
                ToString[getGenSPheno[p2]]<>"\n"];];
        If[V3Needed \[Equal]True,
          If[getGenSPheno[p3]>1,
              WriteString[file,
                  "   Do i3="<> ToString[getGenSPhenoStart[p3]]<>","<> 
                    ToString[getGenSPheno[p3]]<>"\n"];];,
          If[getGenSPheno[p3]>1,WriteString[file,"   i3 = i2\n"];];
          ];
        
        WriteString[file, 
          "If (("<>SPhenoMassSq[p1,i1]<>".gt.mz2).And.("<>SPhenoMassSq[p2,i2]<>
            ".gt.mz2).And.("<>SPhenoMassSq[p3,i3]<>".gt.mz2)) Then\n"];
        
        
        WriteVertexToFile[1,c1,ind1,getVertexType[penguin[[1,1]]],file];
        WriteVertexToFile[2,c2,ind2,getVertexType[penguin[[1,2]]],file];
        
        If[V3Needed \[Equal]True,
          WriteVertexToFile[3,c3,ind3,getVertexType[penguin[[1,3]]],file];
          ];
        
        Switch[getVertexType[penguin[[1,3]]],
          FFS,
          	Switch[getVertexType[penguin[[1,1]]],
              	FFS,
              
              	currentScalar1=p1; IndexScalar1=i1;
              	currentFermion1 =p2; IndexFermion1=i2;
              	currentFermion2 =p3;IndexFermion2=i3;
              	AddPenguinResult[resFFSscalar,file];,
              
              	FFV,
              	currentVector1=p1; IndexVector1=i1;
              	currentFermion1 =p2; IndexFermion1=i2;
              	currentFermion2 =p3;IndexFermion2=i3;	
              	AddPenguinResult[resFFSfermion,file];
              	];,	
          
          SSS,
          	currentFermion1=p1; IndexFermion1=i1;
          	currentScalar1 =p2; IndexScalar1=i2;
          	currentScalar2 =p3;IndexScalar2=i3;
          	AddPenguinResult[resSSS,file];,
          
          
          FFV,
          	Switch[getVertexType[penguin[[1,2]]],
              	FFS,
              	currentScalar1=p1; IndexScalar1=i1;
              	currentFermion1 =p2; IndexFermion1=i2;
              	currentFermion2 =p3;IndexFermion2=i3;
              	AddPenguinResult[resFFVscalar,file];,
              
              	FFV,
              	currentVector1=p1; IndexVector1=i1;
              	currentFermion1 =p2; IndexFermion1=i2;
              	currentFermion2 =p3;IndexFermion2=i3;
              	AddPenguinResult[resFFVvector,file];
              	];,	
          
          
          SSV,
          	currentFermion1=p1; IndexFermion1=i1;
          	currentScalar1 =p2; IndexScalar1=i2;
          	currentScalar2 =p3;IndexScalar2=i3;	
          	AddPenguinResult[resSSV,file];,
          
          VVV,
          	currentFermion1=p1; IndexFermion1=i1;
          	currentVector1 =p2; IndexVector1=i2;
          	currentVector2 =p3;IndexVector2=i3;
          	AddPenguinResult[resVVV,file];
          ];
        
        WriteString[file,"End if \n"];
        
        If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
        If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];
        If[V3Needed\[Equal]True,
          If[getGenSPheno[p3]>1,WriteString[file,"End Do\n"];];
          ];
        WriteString[file,"\n\n"];
        
        AddPenguinResult[final,file];
        
        j++;];
      
      ];


AddWaveContributions2[list_,resFFS_,resFFV_,initial_,final_,file_]:=
    Block[{i,j,k},
      AddWaveResult[initial,file];
      
      For[j=1,j\[LessEqual]Length[list],
        wave = list[[j]];
        
        c1=getSPhenoCoupling2[wave[[1,1]],SPhenoCouplingsAll];
        ind1 = 
          MakeIndicesCoupling[{External[1],gt1}/.wave[[2]],{Internal[1],
                i1}/.wave[[2]],{AntiField[Internal[2]],i2}/.wave[[2]],
            c1[[2]]];
        ind2=ind1;
        ind2[[1]]= StringReplace[ind2[[1]],{"gt1"->"gt2"}];
        ind2[[2]] = ind2[[2]] /. {True\[Rule]False,False\[Rule]True};
        
        p1=(Internal[1] /.wave[[2]]);
        p2 =(Internal[2] /. wave[[2]]);
        
        If[getGenSPheno[p1]>1,
          WriteString[file,"Do i1=1,"<> ToString[getGenSPheno[p1]]<>"\n"];];
        If[getGenSPheno[p2]>1,
          WriteString[file,
              "  Do i2=1,"<> ToString[getGenSPheno[p2]]<>"\n"];];
        
        WriteString[file, 
          "If (("<>SPhenoMassSq[p1,i1]<>".gt.mz2).And.("<>SPhenoMassSq[p2,i2]<>
            ".gt.mz2)) Then\n"];
        
        
        WriteVertexToFile[1,c1,ind1,getVertexType[wave[[1,1]]],file];
        WriteVertexToFile[2,c1,ind2,getVertexType[wave[[1,1]]],file];
        
        Switch[getVertexType[wave[[1,1]]],
          	FFS,
          	If[getType[p1]===S,
            	currentScalar1=p1; IndexScalar1=i1;
            	currentFermion1 =p2; IndexFermion1=i2;,
            	currentScalar1=p2; IndexScalar1=i2;
            	currentFermion1 =p1; IndexFermion1=i1;
            	];
          	AddWaveResult[resFFS,file];,
          
          	FFV,
          	If[getType[p1]===V,
            	currentVector1=p1; IndexVector1=i1;
            	currentFermion1 =p2; IndexFermion1=i2;,
            	currentVector1=p2; IndexVector1=i2;
            	currentFermion1 =p1; IndexFermion1=i1;
            	];	
          	AddWaveResult[resFFSfermion,file];
          	];
        
        WriteString[file,"End if \n"];
        
        If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
        If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];
        WriteString[file,"\n\n"];
        AddWaveResult[final,file];
        WriteString[file,"\n\n"];
        j++;];
      
      ];


AddVertexContributions2[list_,resFFS_,resFFV_,initial_,final_,file_]:=
    Block[{i,j,k},
      AddWaveResult[initial,file];
      
      For[j=1,j\[LessEqual]Length[list],
        wave = list[[j]];
        
        c1=getSPhenoCoupling2[wave[[1,1]],SPhenoCouplingsAll];
        c2=getSPhenoCoupling2[wave[[1,2]],SPhenoCouplingsAll];
        c2=getSPhenoCoupling2[wave[[1,3]],SPhenoCouplingsAll];
        
        
        ind1 = 
          MakeIndicesCoupling[{External[1],gt1}/.wave[[2]],{Internal[1],
                i1}/.wave[[2]],{AntiField[Internal[2]],i2}/.wave[[2]],
            c1[[2]]];
        ind2 =
          MakeIndicesCoupling[{Internal[3],i3}/.wave[[2]],{Internal[2],
                i2}/.wave[[2]],
            {AnitField[Internal[1]],i1}/.wave[[2]],c2[[2]]]; 
        ind3 =
          MakeIndicesCoupling[{External[2],gt2}/.wave[[2]],{External[3],
                gt3}/.wave[[2]],
            {AntiField[Internal[3]],i3}/.wave[[2]],c2[[2]]]; 
        
        p1=(Internal[1] /.wave[[2]]);
        p2 =(Internal[2] /. wave[[2]]);
        p3 =(Internal[3] /. wave[[2]]);
        
        If[getGenSPheno[p1]>1,
          WriteString[file,"Do i1=1,"<> ToString[getGenSPheno[p1]]<>"\n"];];
        If[getGenSPheno[p2]>1,
          WriteString[file,
              "  Do i2=1,"<> ToString[getGenSPheno[p2]]<>"\n"];];
        If[getGenSPheno[p3]>1,
          WriteString[file,
              "   Do i3=1,"<> ToString[getGenSPheno[p3]]<>"\n"];];
        
        
        WriteString[file, 
          "If (("<>SPhenoMassSq[p1,i1]<>".gt.mz2).And.("<>SPhenoMassSq[p2,i2]<>
            ".gt.mz2).And.("<>SPhenoMassSq[p3,i3]<>".gt.mz2)) Then\n"];
        
        
        WriteVertexToFile[1,c1,ind1,getVertexType[wave[[1,1]]],file];
        WriteVertexToFile[2,c2,ind2,getVertexType[wave[[1,2]]],file];
        WriteVertexToFile[3,c3,ind3,getVertexType[wave[[1,3]]],file];
        
        Switch[getVertexType[wave[[1,1]]],
          	FFS,
          	If[getType[p1]===S,
            	currentScalar1=p1; IndexScalar1=i1;
            	currentFermion1 =p2; IndexFermion1=i2;,
            	currentScalar1=p2; IndexScalar1=i2;
            	currentFermion1 =p1; IndexFermion1=i1;
            	];
          	AddVertexResult[resFFS,file];,
          
          	FFV,
          	If[getType[p1]===V,
            	currentVector1=p1; IndexVector1=i1;
            	currentFermion1 =p2; IndexFermion1=i2;,
            	currentVector1=p2; IndexVector1=i2;
            	currentFermion1 =p1; IndexFermion1=i1;
            	];	
          	AddVertexResult[resFFV,file];
          	];
        
        WriteString[file, "End if \n"];
        
        If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
        If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];
        If[getGenSPheno[p3]>1,WriteString[file,"End Do\n"];];
        
        WriteString[file,"\n\n"];
        AddVertexResult[final,file];
        WriteString[file,"\n\n"];
        j++;];
      
      ];




AddBoxContributions2[box_,resFFS_,resFFSFFV_,resFFV_,file_]:=Block[{},
      For[i=1,i\[LessEqual]Length[box],
          p1=(Internal[1] /.box[[i,2]]);
          p2 =(Internal[2] /. box[[i,2]]);
          p3 =(Internal[3] /. box[[i,2]]);
          p4 =(Internal[4] /. box[[i,2]]);
          
          
          WriteString[file,
            "! "<>ToString[p1] <>","<>ToString[p2] <>","<>ToString[p3] <>","<>
              ToString[p4] <>"\n"]; 
          
          CurrentInsertionOrder = InsertionOrder /. box[[i,2]];
          
          c1=getSPhenoCoupling2[box[[i,1,1]],SPhenoCouplingsAll];
          c2=getSPhenoCoupling2[box[[i,1,2]],SPhenoCouplingsAll];
          c3=getSPhenoCoupling2[box[[i,1,3]],SPhenoCouplingsAll];
          c4=getSPhenoCoupling2[box[[i,1,4]],SPhenoCouplingsAll];
          
          
          ind1 = MakeIndicesCoupling[{External[1],
                  Index[1]}/.box[[i,2]],{Internal[1],
                  i1}/.box[[i,2]],{AntiField[Internal[4]],i4}/.box[[i,2]],
              c1[[2]]];
          
          ind2 =MakeIndicesCoupling[{External[2],
                  Index[2]}/.box[[i,2]],{AntiField[Internal[1]],
                  i1}/.box[[i,2]],{Internal[2],i2}/.box[[i,2]],c2[[2]]]; 
          
          ind3 = MakeIndicesCoupling[{External[3],
                  Index[3]}/.box[[i,2]],{AntiField[Internal[2]],
                  i2}/.box[[i,2]],{Internal[3],i3}/.box[[i,2]],c3[[2]]];
          
          ind4 = MakeIndicesCoupling[{External[4],
                  Index[4]}/.box[[i,2]],{Internal[4],
                  i4}/.box[[i,2]],{AntiField[Internal[3]],i3}/.box[[i,2]],
              c4[[2]]];
          
          
          If[getGenSPheno[p1]>1,
            WriteString[file,
                "Do i1=1,"<> ToString[getGenSPheno[p1]]<>"\n"];];
          
          If[getGenSPheno[p2]>1,
            WriteString[file,
                "  Do i2=1,"<> ToString[getGenSPheno[p2]]<>"\n"];];
          
          If[getGenSPheno[p3]>1,
            WriteString[file,
                "    Do i3=1,"<> ToString[getGenSPheno[p3]]<>"\n"];];
          
          If[getGenSPheno[p4]>1,
            WriteString[file,
                "      Do i4=1,"<> ToString[getGenSPheno[p4]]<>"\n"];];
          
          
          WriteString[file, 
            "If (("<>SPhenoMassSq[p1,i1]<>".gt.mz2).And.("<>
              SPhenoMassSq[p2,i2]<>".gt.mz2).And.("<>SPhenoMassSq[p3,i3]<>".gt.mz2).And.("<>
              SPhenoMassSq[p4,i4]<>".gt.mz2)) Then\n"];
          
          WriteVertexToFile[1,c1,ind1,getVertexType[box[[i,1,1]]],file];
          WriteVertexToFile[2,c2,ind2,getVertexType[box[[i,1,2]]],file];
          WriteVertexToFile[3,c3,ind3,getVertexType[box[[i,1,3]]],file];
          WriteVertexToFile[4,c4,ind4,getVertexType[box[[i,1,4]]],file];
          
          Swtich[C[getVertexType[box[[i,1,1]]],getVertexType[box[[i,1,3]]]],
            C[FFS,FFS],
            If[getType[p1]===F,
              currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; 
              IndexFermion2=i3;
              currentScalar1=p2; currentScalar2=p4; IndexScalar1=i2; 
              IndexScalar2=i4;,
              currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; 
              IndexFermion2=i4;
              currentScalar1=p1; currentScalar2=p3; IndexScalar1=i1; 
              IndexScalar2=i3;
              ];
            AddBoxResult[resFFS,file];,
            
            C[FFV,FFS],
            If[getType[p1]===F,
              If[getType[p4]===S,
                  currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; 
                  IndexFermion2=i3;
                  currentVector1=p2; currentScalar1=p4; IndexVector1=i2; 
                  IndexScalar1=i4;,
                  currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; 
                  IndexFermion2=i3;
                  currentVector1=p4; currentScalar1=p2; IndexVector1=i4; 
                  IndexScalar1=i2;
                  ];,
              If[getType[p1]===S,
                  currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; 
                  IndexFermion2=i4;
                  currentVector1=p3; currentScalar1=p1; IndexVector1=i3; 
                  IndexScalar1=i1;,
                  currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; 
                  IndexFermion2=i4;
                  currentVector1=p1; currentScalar1=p3; IndexVector1=i1; 
                  IndexScalar1=i3;
                  ];
              ];
            AddBoxResult[resFFSFFV,file];,
            
            C[FFV,FFV],
            If[getType[p1]===F,
              currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; 
              IndexFermion2=i3;
              currentVector1=p2; currentVector2=p4; IndexVector1=i2; 
              IndexVector2=i4;,
              currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; 
              IndexFermion2=i4;
              currentVector1=p1; currentVector2=p3; IndexVector1=i1; 
              IndexVector2=i3;
              ];
            AddBoxResult[resFFV,file];
            ];
          
          WriteString[file, "End if \n"];
          
          If[getGenSPheno[p1]>1,WriteString[file,"    End Do \n"];];
          If[getGenSPheno[p2]>1,WriteString[file,"   End Do \n"];];
          If[getGenSPheno[p3]>1,WriteString[file,"  End Do \n"];];
          If[getGenSPheno[p4]>1,WriteString[file,"End Do \n"];];
          
          WriteString[file, "\n\n "];
          
          i++;];
      
      
      ];


AddBoxResult[res_,file_]:=Block[{string},
      
      Switch[res,
          DeltaF2FFS,
          
          
          string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>
              SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>
              SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2 ];
          
          WriteString[file,
            "D0m2 = D0_Bagger("<>string<>")*"<>
              SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>
              SPhenoMass[currentFermion2,IndexFermion2 ]<>" \n"];
          WriteString[file,"D27m2 = D27_Bagger("<>string<>")\n"];
          
          Switch[CurrentInsertionOrder,
            1,
            
            If[FreeQ[Gauginos,currentFermion1]===False &&  
                FreeQ[Gauginos,currentFermion2]===False,
              coeff1 = "11._dp/18._dp";coeff2="1._dp/12._dp";coeff3="1._dp";,
              
              If[FreeQ[Gauginos,currentFermion1]===False ||  
                    FreeQ[Gauginos,currentFermion2]===False,
                  coeff1 = "1._dp/6._dp";coeff2="1._dp/3._dp";coeff3="1._dp",
                  coeff1="1._dp";coeff2="1._dp";
                  coeff3="1._dp"
                  ];
              ]; 
            
            
            string1 =
              "BVRR = BVRR - 0.5_dp*"<>coeff1<>
                "*D27m2*coup1L*coup2R*coup3L*coup4R \n";
            string2 ="BSRR1 = BSRR1 + 0._dp \n";
            
            string3 =
              "BSRR2 = BSRR2 - "<>coeff2<>
                "*D0m2*coup1R*coup2R*coup3R*coup4R \n";
            
            string4 =
              "BRL1 = BRL1 + "<>coeff1<>
                "*D27m2*coup1R*coup2R*coup3L*coup4L \n";
            
            string5 =
              "BRL2 = BRL2 - "<>coeff1<>
                "*D0m2*coup1L*coup2R*coup3R*coup4L \n";
            WriteString[file, string1];
            
            WriteString[file, 
              StringReplace[
                string1,{"BVRR"\[Rule]"BVLL","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            WriteString[file, string2];
            WriteString[file, string3];
            WriteString[file, 
              StringReplace[
                string2,{"BSRR1"\[Rule]"BSLL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            
            WriteString[file, 
              StringReplace[
                string3,{"BSRR2"\[Rule]"BSLL2","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            WriteString[file, string4];
            WriteString[file, string5];,
            
            4,
            
            If[FreeQ[Gauginos,currentFermion1]===False &&  
                FreeQ[Gauginos,currentFermion2]===False,
              coeff1 = "1._dp/18._dp";coeff2="17._dp/36._dp";
              coeff3="1._dp/3._dp";,
              
              If[FreeQ[Gauginos,currentFermion1]===False ||  
                    FreeQ[Gauginos,currentFermion2]===False,
                  coeff1 = "1._dp/6._dp";coeff2="1._dp/3._dp";coeff3="1._dp",
                  coeff1="1._dp";coeff2="1._dp";
                  coeff3="1._dp"
                  ];
              ]; 
            
            string1 =
              "BVRR = BVRR - 0.5_dp*D0m2*coup1L*coup2R*coup3L*coup4R \n";
            
            string2 =
              "BSRR1 = BSRR1 + 0.5_dp*D0m2*coup1R*coup2R*coup3R*coup4R \n";
            string3 ="BSRR2 = BSRR2 + D0m2*coup1R*coup2R*coup3R*coup4R \n";
            string4 ="BRL1 = BRL1 + D27m2*coup1R*coup2R*coup3L*coup4L \n";
            
            string5 =
              "BRL2 = BRL2 - 2._dp*D0m2*coup1R*coup2L*coup3R*coup4L \n";
            WriteString[file, string1];
            
            WriteString[file, 
              StringReplace[
                string1,{"BVRR"\[Rule]"BVLL","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            WriteString[file, string2];
            WriteString[file, string3];
            
            WriteString[file, 
              StringReplace[
                string2,{"BSRR1"\[Rule]"BSLL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            
            WriteString[file, 
              StringReplace[
                string3,{"BSRR2"\[Rule]"BSLL2","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            WriteString[file, string4];
            WriteString[file, string5];
            ];,
          
          DeltaF2FFSFFV,
          
          string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>
              SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>
              SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2 ];
          WriteString[file,"D0m2 = D0_Bagger("<>string<>") \n"];
          WriteString[file,"D27m2 = D27_Bagger("<>string<>")\n"];
          
          string1 =
            "BVLL = BVLL - (D27m2*"<>SPhenoMassSq[currenVector1,IndexVector1]<>
              "+0.5_dp*D0m2)*coup1L*coup2R*coup3L*coup4R  \n";
          
          string4 =
            "BRL1 = BRL1 +  (D27m2*"<>SPhenoMass[currenFermion1,
                IndexFermion1]<>"*"<>SPhenoMass[currenFermion2,IndexFermion2]<>
              "/"<>SPhenoMassSq[currenVector1,IndexVector1]<>
              "+0.5_dp*D0m2)*coup1L*coup2R*coup3L*coup4R \n";,
          
          Box1LeptonTo3Leptons,
          
          string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>
              SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>
              SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2 ];
          
          WriteString[file,
            "D0m2 = D0_Bagger("<>string<>")*"<>
              SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>
              SPhenoMass[currentFermion2,IndexFermion2 ]<>" \n"];
          WriteString[file,"D27m2 = D27_Bagger("<>string<>")\n"];
          
          Switch[CurrentInsertionOrder,
            1,
            
            string1 =
              "BVL = BVL + 0.5_dp*D27m2*coup1R*coup2L*coup3R*coup4L \n";
            
            string2 =
              "BSLL1 = BSLL1 + 0.25_dp*D27m2*coup1R*coup2R*coup3L*coup4R - 0.5_dp*D0m2*coup1L*coup2L*coup3R*coup4R \n";\

            string3 ="BSLL2 = BSLL2 + D0m2*coup1L*coup2L*coup3L*coup4L \n";
            string4 = "BLR1 = BLR1 + 0._dp \n";
            
            WriteString[file, string1];
            WriteString[file, string2];
            WriteString[file, string3];
            WriteString[file, string4];
            
            
            WriteString[file, 
              StringReplace[
                string1,{"BVL"\[Rule]"BVR","BSLL1"\[Rule]"BSRR1",
                  "BSLL2"\[Rule]"BSRR2", "BLR1"\[Rule]"BRL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            
            WriteString[file, 
              StringReplace[
                string2,{"BVL"\[Rule]"BVR","BSLL1"\[Rule]"BSRR1",
                  "BSLL2"\[Rule]"BSRR2", "BLR1"\[Rule]"BRL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            
            WriteString[file, 
              StringReplace[
                string3,{"BVL"\[Rule]"BVR","BSLL1"\[Rule]"BSRR1",
                  "BSLL2"\[Rule]"BSRR2", "BLR1"\[Rule]"BRL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            
            WriteString[file, 
              StringReplace[
                string4,{"BVL"\[Rule]"BVR","BSLL1"\[Rule]"BSRR1",
                  "BSLL2"\[Rule]"BSRR2", "BLR1"\[Rule]"BRL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];,
            
            4,
            
            string1= 
              "BVL = BVL +  0.5_dp*D0m2*coup1R*coup2R*coup3L*coup4L \n";
            
            string2= 
              "BSLL1 = BSLL1 - 0.25_dp*D27m2*coup1L*coup2R*coup3L*coup4L + 0.25_dp*D27m2*coup1R*coup2L*coup3L*coup4R \n";\

            
            string3= 
              "BSLL2 = BSLL2  + D0m2/2._dp*coup1L*coup2L*coup3L*coup4L \n";
            
            string4= 
              "BLR1 = BLR1 + D0m2/8._dp*coup1L*coup2L*coup3R*coup4R \n";
            
            WriteString[file, string1];
            WriteString[file, string2];
            WriteString[file, string3];
            WriteString[file, string4];
            
            
            WriteString[file, 
              StringReplace[
                string1,{"BVL"\[Rule]"BVR","BSLL1"\[Rule]"BSRR1",
                  "BSLL2"\[Rule]"BSRR2", "BLR1"\[Rule]"BRL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            
            WriteString[file, 
              StringReplace[
                string2,{"BVL"\[Rule]"BVR","BSLL1"\[Rule]"BSRR1",
                  "BSLL2"\[Rule]"BSRR2", "BLR1"\[Rule]"BRL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            
            WriteString[file, 
              StringReplace[
                string3,{"BVL"\[Rule]"BVR","BSLL1"\[Rule]"BSRR1",
                  "BSLL2"\[Rule]"BSRR2", "BLR1"\[Rule]"BRL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            
            WriteString[file, 
              StringReplace[
                string4,{"BVL"\[Rule]"BVR","BSLL1"\[Rule]"BSRR1",
                  "BSLL2"\[Rule]"BSRR2", "BLR1"\[Rule]"BRL1","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}]];
            ];,
          
          BoxDeltaVB,
          Switch[CurrentInsertionOrder,
              1,
              
              string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>
                  SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>
                  SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2 ];
              WriteString[file,"D27m2 = D27_Bagger("<>string<>")\n"];
              
              WriteString[file, 
                "teil = teil + D27m2*coup1L*coup2R*coup3L*coup4R \n"];,
              
              2,
              
              string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>
                  SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>
                  SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2 ];
              
              WriteString[file,
                "D0m2 = D0_Bagger("<>string<>")*"<>
                  SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>
                  SPhenoMass[currentFermion2,IndexFermion2 ]<>
               
                     " \n"];
              WriteString[file,"D27m2 = D27_Bagger("<>string<>")\n"];
              
              WriteString[file, 
                "teil = teil + 0.5_dp*D27m2*coup1L*coup2R*coup3L*coup4R+D0m2*coup1L*coup2L*coup3R*coup4R \n"]\
;,
              
              3,
              
              string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>
                  SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>
                  SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2 ];
              
              WriteString[file,
                "D0m2 = D0_Bagger("<>string<>")*"<>
                  SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>
                  SPhenoMass[currentFermion2,IndexFermion2 ]<>
               
                     " \n"];
              
              WriteString[file, 
                "teil = teil + D0m2*coup1L*coup2L*coup3R*coup4R \n"];,
              
              4, 
              
              string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>
                  SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>
                  SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2 ];
              
              WriteString[file,
                "D0m2 = D0_Bagger("<>string<>")*"<>
                  SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>
                  SPhenoMass[currentFermion2,IndexFermion2 ]<>
               
                     " \n"];
              
              WriteString[file, 
                "teil = teil + 0.5_dp*D0m2*coup1L*coup2R*coup3R*coup4L \n"];
              
              
              ];
          ];
      ];


AddWaveResult[res_,file_]:=Block[{},
      Switch[res,
          
          Wave1LeptonTo3LeptonsFFSVector,
          If[FreeQ[massless,currentPropagator]\[Equal]False,
              
              WriteString[file,
                "X_ax="<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>
                  SPhenoMassSq[currentScalar1,IndexScalar1] <>"\n"];
              
              If[bar[CurrentFermion1]===CurrentFermion1,
                	
                WriteString[file,
                  "fun1=(2._dp-9._dp*X_ax+18._dp*X_ax**2-11._dp*X_ax**3& \n"];\

                	
                WriteString[file,
                  "   &+6._dp*X_ax**3*Log(X_ax))/(1._dp-X_ax)**4 \n"];
                	WriteString[file,"fun3=2._dp*F2(X_ax) \n"];
                	WriteString[file,"fun2=2._dp*F4(X_ax)\n"];,
                	
                WriteString[file,
                  "fun1=-(16._dp-45._dp*X_ax+36._dp*X_ax**2-7._dp*X_ax**3& \n"]\
;
                	
                WriteString[file,
                  "   &+6._dp*(2._dp-3._dp*X_ax)*Log(X_ax))/(1._dp-X_ax)**4 \n"]\
;
                	WriteString[file,"fun3=-2._dp*F1(X_ax) \n"];
                	WriteString[file,"fun2=-2._dp*F3(X_ax)\n"];
                ];
              	
              	
              string1="tempA1L=tempA1L+coup1R*coup2L*fun1/"<>
                  SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";
              	
              string2="tempA2L=tempA2L+(((coup1L*coup2R+coup1R*coup2L)*"<>
                  SPhenoMass[Electron,out]<>"/"<>SPhenoMass[Electron,in]<>
                  ")*fun3& \n";
              	
              string2 = 
                string2 <>"      &+coup1L*coup2L*"<>
                  SPhenoMass[currentFermion1,IndexFermion1]<>"/"<>
                  SPhenoMass[Electron,out]<>"*fun2)/"<>
                  SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";
              
              WriteString[file,string1];
              WriteString[file,string2];
              
              WriteString[file,
                StringReplace[
                  string1,{"tempA1L"\[Rule]"tempA1R","coup1L"\[Rule]"coup1R",
                    "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                    "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                    "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                    "coup4R"\[Rule]"coup4L"}]];
              WriteString[file,
                StringReplace[
                  string2,{"tempA2L"\[Rule]"tempA2R","coup1L"\[Rule]"coup1R",
                    "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                    "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                    "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                    "coup4R"\[Rule]"coup4L"}]];,
              
              
              WriteString[file,
                "tempFL = tempFL + coup1L*coup2R*B1(0._dp,"<>SPhenoMassSq[
                    currentFermion1,IndexFermion1] <>","<>
                  SPhenoMassSq[currentScalar1,IndexScalar1] <>") \n"];
              
              WriteString[file,
                "tempFR = tempFR + coup1R*coup2L*B1(0._dp,"<>SPhenoMassSq[
                    currentFermion1,IndexFermion1] <>","<>
                  SPhenoMassSq[currentScalar1,IndexScalar1] <>") \n"];
              ];,
          
          Wave1LeptonTo3LeptonsFFSScalar,
          
          string = 
            "(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>")";
          
          
          string1="tempHL = tempHL + vertex1L/("<>SPhenoMassSq[Electron,in]<>"-"<>
              SPhenoMassSq[Electron,out] <>")* & \n    & (-"<>
              SPhenoMassSq[Electron,in]<>"*B1"<>string <>
              "*coup1L*coup2R + & \n";
           
          string1 = 
            string1 <>"&  "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>
              SPhenoMass[Electron,in]<>"*B0"<>string<>"*coup1R*coup2R & \n  &    - "<> 
              SPhenoMass[Electron,out]<>"*"<>SPhenoMass[Electron,in]<>"*B1"<>
              string<>"*coup1R*coup2L + & \n";
          
          string1 = 
            string1 <>"&  "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>
              SPhenoMass[Electron,out]<>"*B0"<>string<>"*coup1L*coup2L)\n";
          
          WriteString[file,string1 <> "\n"];
          
          
          string2 = 
            "tempHL = tempHL + vertex2L/("<>SPhenoMassSq[Electron,out]<>"-"<>
              SPhenoMassSq[Electron,in] <>")*& \n    & (-"<>
              SPhenoMassSq[Electron,in]<>"*B1"<>string <>
              "*coup1R*coup2L + & \n";
          
          string2 = 
            string2 <>"&  "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>
              SPhenoMass[Electron,out]<>"*B0"<>string<>"*coup1L*coup2R & \n    & -"<> 
              SPhenoMass[Electron,out]<>"*"<>SPhenoMass[Electron,in]<>"*B1"<>
              string<>"*coup1L*coup2R + & \n";
          
          string2 = 
            string2 <>"&  "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>
              SPhenoMass[Electron,in]<>"*B0"<>string<>"*coup1L*coup2L)\n";
          
          WriteString[file,string2 <> "\n"];
          
          
          WriteString[file,
            StringReplace[
                string1,{"tempHL"\[Rule]"tempHR","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}] <> "\n\n"];
          
          WriteString[file,
            StringReplace[
                string2,{"tempHL"\[Rule]"tempHR","coup1L"\[Rule]"coup1R",
                  "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                  "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                  "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                  "coup4R"\[Rule]"coup4L"}] <> "\n\n"];,
          
          
          WaveDeltaVB,
          
          WriteString[file,
              "sumI = sumI + 0.5_dp*Abs(coup1L)**2*B1(0._dp,"<>SPhenoMassSq[
                  currentFermion1,IndexFermion1]<>","<>
                SPhenoMassSq[currentScalar1,IndexScalar1]<>")  \n"];
          ];
      
      ];


AddVertexResult[res_,file_]:=Block[{},
      Switch[res,
          DeltaVBVertex,
          	
          WriteString[file,
              "teil = teil + coup1L*coup2R*(coup3L*B0("<>SPhenoMass[
                  currentScalar1,IndexScalar1]<>","<>
                SPhenoMass[currentFermion1,IndexFermion1]<>","<>
                SPhenoMass[currentFermion2,IndexFermion2]<>") \n"];
          ];
      
      ];

AddPenguinResult[res_,file_]:=Block[{},
      Switch[res,
          PenguinScalar1LeptonTo3LeptonsFFS,
          
          WriteString[file,
            "fun1=B0(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
          
          WriteString[file,
            "fun2=C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
              SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
          
          WriteString[file,
            "fun3=vertexC12("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
              SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
          
          WriteString[file,
            "fun4=vertexC11("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
              SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
          
          
          string1= 
            "tempHL = tempHL +(fun1+"<>SPhenoMassSq[currentScalar1,
                IndexScalar1]<>"*fun2 +"<>SPhenoMassSq[Electron,in]<>
              "*fun3 &  \n";
          
          string1 =
            string1 <>"   & + "<>SPhenoMassSq[Electron,out]<>
              "*(fun4-fun3))*coup1L*coup3R*coup2L & \n";
          
          string1 = 
            string1<> "   & + "<>SPhenoMass[Electron,out]<>"*"<>
              SPhenoMass[Electron,in]<>
              "*(fun4+fun2)*coup1R*coup3L*coup2R  & \n";
          
          string1 = 
            string1<> "   & + "<>SPhenoMass[Electron,out]<>"*"<>
              SPhenoMass[currentFermion1,IndexFermion1]<>
              "*(fun4+fun2-fun3)*coup1R*coup3L*coup2L  & \n";
          
          string1=string1<> "   & + "<>SPhenoMass[Electron,in]<>"*"<>
              SPhenoMass[currentFermion1,IndexFermion1]<>
              "*fun3*coup1L*coup3R*coup2R  & \n";
          
          string1=string1<> "   & + "<>SPhenoMass[Electron,out]<>"*"<>
              SPhenoMass[currentFermion2,IndexFermion2]<>
              "*(fun4-fun3)*coup1R*coup3R*coup2L  & \n";
          
          string1=string1<> "   & + "<>SPhenoMass[Electron,out]<>"*"<>
              SPhenoMass[currentFermion1,IndexFermion1]<>
              "*(fun3+fun2)*coup1L*coup3L*coup2L  & \n";
          string1=
            string1<> "   & + "<>SPhenoMass[currentFermion2,IndexFermion2]<>"*"<>
              SPhenoMass[currentFermion1,IndexFermion1]<>
              "*fun2*coup1L*coup3L*coup2L  \n \n";
          
          WriteString[file,string1];
          
          WriteString[file,
            StringReplace[
              string1,{"tempHL"\[Rule]"tempHR","coup1L"\[Rule]"coup1R",
                "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                "coup4R"\[Rule]"coup4L"}]];,
          
          PenguinScalar1LeptonTo3LeptonsSSS,
          
          WriteString[file,
            "C0m = -"<>SPhenoMass[currentFermion1,IndexFermion1]  <>"* C0_3m("<>
              SPhenoMassSq[currentFermion1,IndexFermion1] <>","<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
              SPhenoMassSq[currentScalar2,IndexScalar2] <> ")\n"];
          
          WriteString[file,
            "fun3=C0_3m("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
              SPhenoMassSq[currentScalar2,IndexScalar2]<>") \n"];
          
          WriteString[file,
            "fun2=vertexC12("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
              SPhenoMassSq[currentScalar2,IndexScalar2]<>") \n"];
          
          WriteString[file,
            "fun1=vertexC11("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
              SPhenoMassSq[currentScalar2,IndexScalar2]<>") \n"];
          
          
          string1= 
            "tempHL = tempHL +("<>SPhenoMass[pF1,i1]<>
              "*(fun1-fun2)*coup1R*coup2L + &  \n";
          
          string1 = 
            string1 <> "     &"<>SPhenoMass[Electron,in]<>
              "*fun2*coup1L*coup2R - & \n";
          
          string1 = 
            string1 <> "     &"<>SPhenoMass[pF1,i1]<>
              "*fun3*coup1L*coup2L)*coup3  \n \n";
          WriteString[file,string1];
          
          WriteString[file,
            StringReplace[
              string1,{"tempHL"\[Rule]"tempHR","coup1L"\[Rule]"coup1R",
                "coup2L"\[Rule]"coup2R","coup3L"\[Rule]"coup3R",
                "coup4L"\[Rule]"coup4R","coup1R"\[Rule]"coup1L",
                "coup2R"\[Rule]"coup2L","coup3R"\[Rule]"coup3L",
                "coup4R"\[Rule]"coup4L"}]];,
          
          
          PenguinVector1LeptonTo3LeptonsFFVscalar,
          
          WriteString[file,
            "fun2 = "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>
              SPhenoMass[currentFermion2,IndexFermion2]  <>"* C0_3m("<>
              SPhenoMassSq[currentScalar1,IndexScalar1] <>","<>
              SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2]<> ")\n"];
          
          WriteString[file,
            "fun1=0.5_dp*vertexC0tilde("<>SPhenoMassSq[currentScalar1,
                IndexScalar1] <>","<>
              SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
              SPhenoMassSq[currentFermion2,IndexFermion2]<> ") \n"];
          
          WriteString[file,
            "FL=FL-coup1R*coup2L*(coup3R*fun1-coup3L*fun2) \n"];
          
          WriteString[file,
            "FR=FR-coup1L*coup2R*(coup3L*fun1-coup3R*fun2) \n"];,
          
          PenguinVector1LeptonTo3LeptonsSSV,
          
          WriteString[file,
            "fun1=0.5_dp*vertexC0tilde("<>SPhenoMassSq[currentFermion1,
                IndexFermion1] <>","<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
              SPhenoMassSq[currentScalar2,IndexScalar2]<> ") \n"];
          WriteString[file,"FL=FL-coup1R*coup2L*coup3*fun1 \n"];
          WriteString[file,"FR=FR-coup1L*coup2R*coup3*fun1 \n"];,
          
          
          PenguinC7smFinal,
          	WriteString[file,"res(2) = res(2) + 0.25_dp*temp \n"];,
          
          PenguinC7NonsmFinal,
          	WriteString[file,"res(3) = res(3) + 0.25_dp*temp \n"];,
          
          PenguinC7Start,
          	WriteString[file,"temp = 0._dp \n"];,
          
          PenguinC7FFVvector,
          	
          WriteString[file,
            "xt=("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>
              SPhenoMassSq[currentVector1,IndexVector1]<>") \n"];
          	
          string= "temp = temp - coup1L*coup2L*xt*F2(xt)*& \n &     ("<>
              SPhenoForm[
                RelativeCoupling[CurrentVectorBoson,
                  getBlank[currentFermion1]]]<>")/"<>
              SPhenoMassSq[currentVector1,IndexVector1] <>"\n";
          If[currentC7andC8p\[Equal]False,
            WriteString[file,string];,
            
            WriteString[file,
                StringReplace[
                  string,{"coup1L"\[Rule]"coup1R","coup2L"\[Rule]"coup2R",
                    "coup1R"\[Rule]"coup1L","coup2R"\[Rule]"coup2L"}]];
            ];,
          
          PenguinC7FFVscalar,
          	
          WriteString[file,
            "xt=("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>") \n"];
          	
          string= "temp = temp +("<>
              SPhenoForm[
                RelativeCoupling[CurrentVectorBoson,
                  getBlank[currentFermion1]]]<>")* (F1(xt)*coup1R*coup2L + & \n &    F3(xt)*coup1L*coup2L*"<>
              SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>
              SPhenoMass[BottomQuark,gt1] <>"   )  /"<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";
          
          If[currentC7andC8p\[Equal]False,
            WriteString[file,string];,
            
            WriteString[file,
                StringReplace[
                  string,{"coup1L"\[Rule]"coup1R","coup2L"\[Rule]"coup2R",
                    "coup1R"\[Rule]"coup1L","coup2R"\[Rule]"coup2L"}]];
            ];,
          
          PenguinC7SSV,
          	
          WriteString[file,
            "xt=("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>") \n"];
          	
          string= "temp = temp +("<>
              SPhenoForm[
                RelativeCoupling[CurrentVectorBoson,
                  getBlank[currentScalar1]]]<>")*(F2(xt)*coup1R*coup2L +& \n & F4(xt)*coup1L*coup2L*"<>
              SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>
              SPhenoMass[BottomQuark,gt1] <>"   )  /"<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";
          
          If[currentC7andC8p\[Equal]False,
            WriteString[file,string];,
            
            WriteString[file,
                StringReplace[
                  string,{"coup1L"\[Rule]"coup1R","coup2L"\[Rule]"coup2R",
                    "coup1R"\[Rule]"coup1L","coup2R"\[Rule]"coup2L"}]];
            ];,
          
          PenguinC7VVV,
          	
          WriteString[file,
            "xt=("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>
              SPhenoMassSq[currentVector1,IndexVector1]<>") \n"];
          	
          string= "temp = temp - coup1L*coup2L*xt*F1(xt)*& \n &     ("<>
              SPhenoForm[
                2*RelativeCoupling[CurrentVectorBoson,
                    getBlank[currentVector1]]]<>")/"<>
              SPhenoMassSq[currentVector1,IndexVector1] <>"\n";
          
          If[currentC7andC8p\[Equal]False,
            WriteString[file,string];,
            
            WriteString[file,
                StringReplace[
                  string,{"coup1L"\[Rule]"coup1R","coup2L"\[Rule]"coup2R",
                    "coup1R"\[Rule]"coup1L","coup2R"\[Rule]"coup2L"}]];
            ];,
          
          PenguinGm2SSV,
          	
          WriteString[file,
            "ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>
              SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
          	
          WriteString[file,
            "a_mu = a_mu - Real(coup1L*Conjg(coup1R),dp)*F3gamma(ratio)/"<>
              SPhenoMass[currentFermion1,IndexFermion1] <>"& \n"];
          	
          WriteString[file,
            "      & +2._dp*"<>SPhenoMass[Electron,1]<>
              "*(Abs(coup1L)**2 + Abs(coup1R)**2)*F2(ratio)/" <>
              SPhenoMass[currentFermion1,IndexFermion1] <>" \n"];,
          
          PenguinGm2FFV,
          	
          WriteString[file,
            "ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>
              SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
          	
          WriteString[file,
            "a_mu = a_mu - 2._dp*Real(coup1L*Conjg(coup1R),dp)*F4(ratio)/"<>
              SPhenoMass[currentFermion1,IndexFermion1] <>"& \n"];
          	
          WriteString[file,
            "      & -2._dp*"<>SPhenoMass[Electron,1]<>
              "*(Abs(coup1L)**2 + Abs(coup1R)**2)*F1(ratio)/" <>
              SPhenoMass[currentFermion1,IndexFermion1] <>" \n"];,
          
          
          PenguinEDMFFV,
          If[bar[currentFermion1]===currentFermion1,
            sign="-";
            feynfun="B";,
            sign="+";
            feynfun="A";
            ];
          
          
          WriteString[file,
            "ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>
              SPhenoMassSq[currentScalar1,IndexScalar1]<> "\n "];
          
          WriteString[file,
            "EDM = EDM "<>sign<>" Aimag(coup1L*Conjg(coup1R))*FeynFunction"<>
              feynfun<>"(ratio)*& \n    &"<>
              SPhenoMass[currentFermion1,IndexFermion1]<>"/"<>
              SPhenoMass[currentScalar1,IndexScalar1] <>" \n"];,
          
          
          
          PenguinDeltaVBFFVscalar,
          If[getBlank[currentScalar1]===Sneutrino,
              
              WriteString[file,
                "vertex = vertex - coup1L*coup2R*(-sqrt2*coup3L*"<>SPhenoMass[
                    currentFermion1,IndexFermion1]<>"*"<>
                  SPhenoMass[currentFermion2,IndexFermion2]<>"& \n"];
              
              WriteString[file,
                "& *C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
                  SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2]<>
                  ") + oosqrt2*coup3R* & \n"];
              
              WriteString[file,
                "& (B0(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2]<>")-0.5_dp +"<> 
                  SPhenoMassSq[currentScalar1,IndexScalar1]<>"*C0_3m("<>
                  SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
                  SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2]<>"))) \n"];,
              
              WriteString[file,
                "vertex = vertex + coup1L*coup2R*(-sqrt2*coup3R*"<>SPhenoMass[
                    currentFermion1,IndexFermion1]<>"*"<>
                  SPhenoMass[currentFermion2,IndexFermion2]<>"& \n"];
              
              WriteString[file,
                "& *C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
                  SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2]<>
                  ") + oosqrt2*coup3L* & \n"];
              
              WriteString[file,
                "& (B0(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2]<>")-0.5_dp +"<> 
                  SPhenoMassSq[currentScalar1,IndexScalar1]<>"*C0_3m("<>
                  SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
                  SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
                  SPhenoMassSq[currentFermion2,IndexFermion2]<>"))) \n"];
              ];,
          
          PenguinDeltaVBSSV,
          	
          WriteString[file,
              "vertex = vertex + 0.5_dp*sqrt2*coup1L*coup2R*coup3*("<>
                SPhenoMassSq[currentFermion1,IndexFermion1]<>"*C0_3m("<>
                SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>
                SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
                SPhenoMassSq[currentScalar2,IndexScalar2]<>") + B0(0._dp,"<>
                SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>
                SPhenoMassSq[currentScalar2,IndexScalar2]<>") +0.5_dp) \n"];
          
          
          
          	
          ];
      
      
      
      ];