(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

GenerateSPhenoLoopMasses[Eigenstates_]:=Block[{i},
      Print["--------------------------------------"];
      Print["Writing SPheno Loop Masses "];
      Print["--------------------------------------"];
      
      $sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}];
      (* CreateDirectory[$sarahCurrentSPhenoDir]; *)
      
      sphenoLoop=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,
            "LoopMasses_"<>ModelName<>".f90"]];
      
      subSolution = {};
      InitSPhenoLoopMasses[Eigenstates];
      
      WriteHeaderLoopMasses;
      WriteCalcLoopMasses;
      
      For[i=1,i\[LessEqual]Length[loopContributionTad],
        WriteLoopTadpole[Intersection[listVEVseparated[[i]]],
          ScalarsForTadpoles[[i]],NeededMassesLoopTad[[i]], 
          NeededCouplingsLoopTad[[i]], loopContributionTad[[i]]];
        i++;];
      
      
       For[i=1,i\[LessEqual]Length[ListTree], 
        Switch[ListTree[[i,4]],
          ScalarMass,
          AddTadpoles=False;
          
          WriteLoopMassScalar[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],
            ListTree[[i,5]],NeededMassesLoop[[i]],NeededCouplingsLoop[[i]],
            loopContribution[[i]], ListTree[[i,3]], AddTadpoles,True];
          
          WriteScalarProp[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],
            NeededMassesLoop[[i]],NeededCouplingsLoop[[i]],
            loopContribution[[i]]];,
          FermionMassSymm,
          
          WriteLoopMassFermionSymm[ToString[ListMassES[[i,1]]],
            ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[i]],
            NeededCouplingsLoop[[i]],loopContribution[[i]], ListTree[[i,3]],
            ToString[ListTree[[i,1]]],ToString[ListTree[[i,2]]],True];
          
          WriteFermionProp[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],
            NeededMassesLoop[[i]],NeededCouplingsLoop[[i]],
            loopContribution[[i]]];,
          FermionMassNonSymm,
          
          WriteLoopMassFermionNonSymm[ToString[ListMassES[[i,1]]],
            ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[i]],
            NeededCouplingsLoop[[i]],loopContribution[[i]], ListTree[[i,3]],
            ToString[ListTree[[i,1]]],ToString[ListTree[[i,2,1]]],
            ToString[ListTree[[i,2,2]]],True];
          
          WriteFermionPropNonSymm[ToString[ListMassES[[i,1]]],
            ListMassES[[i,1]],NeededMassesLoop[[i]],NeededCouplingsLoop[[i]],
            loopContribution[[i]],False];
          ];
        i++;];
      
      
       For[i=1,i\[LessEqual]Length[listNotMixedMasses],
        If[listNotMixedMasses[[i,4]]=!=0,
          nameCurrent=ToString[listNotMixedMasses[[i,1]]];
          nameMass=listNotMixedMasses[[i,2]];
          particleCurrent=listNotMixedMasses[[i,1]];
          parametersCurrent=listNotMixedMasses[[i,3]];
          treeMassCurrent=listNotMixedMasses[[i,5]]/. subSolution;
          mixing1="None1";
          mixing2="None2";
          
          If[Length[Dimensions[listNotMixedMasses[[i,5]]]]===2,
            Switch[listNotMixedMasses[[i,6]],
                ScalarMass,
                
                WriteLoopMassScalar[nameCurrent,particleCurrent,
                  parametersCurrent,NeededMassesUnmixed[[i]],
                  NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],
                  treeMassCurrent,False,False];
                
                WriteScalarProp[nameCurrent,particleCurrent,
                  NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],
                  Unmixed1Loop[[i]]];,
                
                FermionMassSymm,
                
                WriteLoopMassFermionSymm[nameCurrent,particleCurrent,
                  parametersCurrent,NeededMassesUnmixed[[i]],
                  NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],
                  treeMassCurrent,nameMass,mixing1,False];
                
                WriteFermionProp[nameCurrent,particleCurrent,
                  NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],
                  Unmixed1Loop[[i]]];,
                
                FermionMassNonSymm,
                
                WriteLoopMassFermionNonSymm[nameCurrent,particleCurrent,
                  parametersCurrent,NeededMassesUnmixed[[i]],
                  NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],
                  treeMassCurrent,nameMass,mixing1,mixing2,False];
                 WriteFermionPropNonSymm[nameCurrent,particleCurrent,
                  NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],
                  Unmixed1Loop[[i]],False];
                ];,
            
            Switch[listNotMixedMasses[[i,6]],
                ScalarMass,
                
                WriteLoopMassSingle[nameCurrent,particleCurrent,
                  parametersCurrent,NeededMassesUnmixed[[i]],
                  NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],
                  treeMassCurrent,False];
                
                WriteScalarPropSingle[nameCurrent,particleCurrent,
                  NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],
                  Unmixed1Loop[[i]]];,
                
                FermionMassSymm,
                
                WriteLoopMassSingle[nameCurrent,particleCurrent,
                  parametersCurrent,NeededMassesUnmixed[[i]],
                  NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],
                  treeMassCurrent,False];
                
                WriteFermionPropSingle[nameCurrent,particleCurrent,
                  NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],
                  Unmixed1Loop[[i]]];,
                
                FermionMassNonSymm,
                
                WriteLoopMassSingle[nameCurrent,particleCurrent,
                  parametersCurrent,NeededMassesUnmixed[[i]],
                  NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],
                  treeMassCurrent,False];
                 
                WriteFermionPropNonSymmSingle[nameCurrent,particleCurrent,
                  NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],
                  Unmixed1Loop[[i]]];,
                
                VectorMass,
                
                WriteLoopMassSingle[nameCurrent,particleCurrent,
                  parametersCurrent,NeededMassesUnmixed[[i]],
                  NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],
                  treeMassCurrent,False];
                
                WriteVectorPropSingle[nameCurrent,particleCurrent,
                  NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],
                  Unmixed1Loop[[i]]];
                ];
            
            
            ];
          ];
        i++;]; 
      
      SMFermion={Electron,BottomQuark,TopQuark};
      WithPhotonGluonQ[x_]:=
        If[FreeQ[x,VectorP]\[Equal]True && FreeQ[x,VectorG]\[Equal]True, 
          Return[False];,Return[True];];
      
      
      For[i=1,i\[LessEqual]Length[SMFermion],
        pos=Position[ListMassES,SMFermion[[i]]][[1,1]];
         WriteFermionPropNonSymm[ToString[ListMassES[[pos,1]]]<>"MZ",
          ListMassES[[pos,1]],NeededMassesLoop[[pos]],
          NeededCouplingsLoop[[pos]],
          DeleteCases[loopContribution[[pos]],x_?WithPhotonGluonQ],True];
        i++;];
      
      
      WriteString[sphenoLoop,"End Module LoopMasses_"<>ModelName<>" \n"];
      
      Close[sphenoLoop];
      
      
      ];

MakeListsLoopContributions[loopContribution_,couplings_]:=
    Block[{i,NeededMassesLoop,NeededCouplingsLoop,CorrectionTypeLoop},
      
      NeededMassesLoop=Table[{},{Length[loopContribution]}];
      NeededCouplingsLoop=Table[{},{Length[loopContribution]}];
      CorrectionTypeLoop=Table[{},{Length[loopContribution]}];
      
      For[i=1,i\[LessEqual]Length[loopContribution],
        For[j=1,j\[LessEqual]Length[loopContribution[[i]]],
          NewMass1=SPhenoMass[loopContribution[[i,j,1]]];
          NewMass1Sq=SPhenoMassSq[loopContribution[[i,j,1]]];
          NewMass2=SPhenoMass[loopContribution[[i,j,2]]];
          NewMass2Sq=SPhenoMassSq[loopContribution[[i,j,2]]];
          
          
          If[FreeQ[NeededMassesLoop[[i]],NewMass1] && 
              FreeQ[massless,getBlank[loopContribution[[i,j,1]]]],
            
            NeededMassesLoop[[i]]=
                Join[NeededMassesLoop[[i]],{NewMass1,NewMass1Sq}];
            ];
          
          If[FreeQ[NeededMassesLoop[[i]],NewMass2] && 
              FreeQ[massless,getBlank[loopContribution[[i,j,2]]]],
            
            NeededMassesLoop[[i]]=
                Join[NeededMassesLoop[[i]],{NewMass2,NewMass2Sq}];
            ];
          
          
          NeededCouplingsLoop[[i]]=
            Join[NeededCouplingsLoop[[i]],
              getSPhenoCoupling[loopContribution[[i,j,3]],couplings][[1]]];
          j++;];
        i++;];
      
      For[i=1,i\[LessEqual]Length[NeededCouplingsLoop],
        NeededCouplingsLoop[[i]]=Flatten[NeededCouplingsLoop[[i]]];
        i++;];
      
      Return[{NeededMassesLoop,NeededCouplingsLoop,CorrectionTypeLoop}];
      
      ];


InitSPhenoLoopMasses[Eigenstates_]:=Block[{i,i1,i2},
      Print["Getting needed Information"];
      
      mixTree=DEFINITION[Eigenstates][MatterSector];
      massesTree=MassMatricesFull[Eigenstates];
      parDef=ParticleDefinitions[Eigenstates];
      paraDef=ParameterDefinitions;
      loopContribution=LoopCorrectionMassMatrices[Eigenstates];
      loopContributionTad=LoopCorrectionTadpoles[Eigenstates];
      Unmixed1Loop=LoopCorrectionUnmixed[Eigenstates];
      
      temp=MakeListsLoopContributions[loopContribution,SPhenoCouplingsLoop];
      
      NeededMassesLoop=temp[[1]];
      NeededCouplingsLoop=temp[[2]];
      CorrectionTypeLoop=temp[[3]]; 
      
      temp=
        MakeListsLoopContributions[loopContributionTad,SPhenoCouplingsLoop];
      
      NeededMassesLoopTad=temp[[1]];
      NeededCouplingsLoopTad=temp[[2]];
      CorrectionTypeLoopTad=temp[[3]];
      
      temp=MakeListsLoopContributions[Unmixed1Loop,SPhenoCouplingsLoop];
      
      NeededMassesUnmixed=temp[[1]];
      NeededCouplingsUnmixed=temp[[2]];
      CorrectionTypeUnmixed=temp[[3]];
      
      
      ];


WriteCalcLoopMasses:=Block[{i},
      
      posZ =Position[listNotMixedMasses,VectorZ][[1,1]];
      massesZ= Extract[NeededMassesUnmixed,posZ];
      couplingsZ= Extract[NeededCouplingsUnmixed,posZ];
      
      
      Print["Subroutine for All Loop Corrections"];
      
      MakeSubroutineTitle["OneLoopMasses",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},
        sphenoLoop];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[listAllParameters,",Intent(inout)",sphenoLoop];
      MakeVariableList[NewMassParameters,",Intent(inout)",sphenoLoop];
      MakeVariableList[listVEVs,",Intent(inout)",sphenoLoop];
      MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",
        sphenoLoop];
      MakeVariableList[NewParametersFromTadpoles,"",sphenoLoop];
      
      
      MakeVariableList[HiggsSoftBreakingMassesTemp,"",sphenoLoop];
      MakeVariableList[
        Union[Flatten[{NeededCouplingsUnmixed,NeededCouplingsLoop}]],"",
        sphenoLoop];
      WriteString[sphenoLoop, "Integer , Intent(inout):: kont \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4,j1, j2, j3, j4, il, i_count, ierr \n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: Tad1Loop("<>ToString[GetNumberParameters[listVEVs]]<>
          "), dmz2  \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: comp("<>ToString[Length[SubSolutionsTadpolesLoop]]<>
          "), tanbQ, vev2\n"];
      
      If[UseHiggs2LoopMSSM\[Equal]True,
        WriteString[sphenoLoop, 
          "Real(dp) :: Pi2A, tadpoles_2L(2), vevs_DR(2) \n"];
        For[i=1,i\[LessEqual]Length[SubSolutionsTadpolesLoop],
          If[FreeQ[realVar,SubSolutionsTadpolesLoop],
            
            WriteString[sphenoLoop, 
                "Complex(dp) :: "<>SPhenoForm[
                    SubSolutionsTadpolesLoop[[i,1]]]<>"1L \n"];,
            
            WriteString[sphenoLoop, 
                "Real(dp) :: "<>SPhenoForm[SubSolutionsTadpolesLoop[[i,1]]]<>
                  "1L \n"];
            ];
          i++;];
        ];
      
      
      WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
      WriteString[sphenoLoop, "NameOfUnit(Iname) = 'OneLoopMasses' \n \n"];
      
      WriteString[sphenoLoop,"kont = 0 \n \n"];
      
      For[i=1,i\[LessEqual]Length[NewNumericalDependences],
        WriteString[sphenoLoop, 
          SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> 
            SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
        i++;];
      
      
      
      WriteString[sphenoLoop,
        "tanbQ="<>SPhenoForm[VEVSM2]<>"/"<>SPhenoForm[VEVSM1]<> "\n"];
      
      MakeCall["TreeMasses",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing",
          "kont"},sphenoLoop];
      
      MakeCall["CouplingsForVectorBosons" , Join[parametersZW,namesZW],{},{},
        sphenoLoop];
      
      
      MakeCall["Pi1Loop"<>ToString[VectorZ],
        Flatten[{massesZ,couplingsZ}],{"mZ2"},{"kont","dmZ2"},sphenoLoop];
      WriteString[sphenoLoop,
        "vev2=4._dp*Real(mZ2+dmz2,dp)/("<>SPhenoForm[hyperchargeCoupling] <>"**2+"<>
          SPhenoForm[leftCoupling] <>"**2)\n"];
      WriteString[sphenoLoop,
        SPhenoForm[VEVSM1]<> "=Sqrt(vev2/(1._dp+tanbQ**2))\n"];
      WriteString[sphenoLoop,
        SPhenoForm[VEVSM2]<> "=tanbQ*"<>SPhenoForm[VEVSM1]<> "\n"];
      
      MakeCall["TreeMassesSM",
        Join[NewMassParametersSM,Join[listVEVs,listAllParameters]],{},{"GenerationMixing",
          "kont"},sphenoLoop];
      For[i=1,i\[LessEqual]Length[GoldstoneGhost],
        WriteString[sphenoLoop,
          SPhenoMass[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>
            SPhenoMass[GoldstoneGhost[[i,1]],i] <>"\n" ];
        WriteString[sphenoLoop,
          SPhenoMassSq[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>
            SPhenoMassSq[GoldstoneGhost[[i,1]],i] <>"\n" ];
        i++;];
      
      MakeCall["CouplingsForLoopMasses" , 
        Join[parametersLoop,namesLoop],{},{},sphenoLoop];
      
      off=1;
      For[i=1,i\[LessEqual]Length[loopContributionTad],
        MakeCall["OneLoopTadpoles"<>ToString[ScalarsForTadpoles[[i]]],
          Flatten[{Intersection[listVEVseparated[[i]]],
              NeededMassesLoopTad[[i]], NeededCouplingsLoopTad[[i]]}],{},{"Tad1Loop("<>
              ToString[off]<>":"<>
              ToString[off-1+getGen[ScalarsForTadpoles[[i]]]]<>")"},
          sphenoLoop];
        off += getGen[ScalarsForTadpoles[[i]]];
        i++;];
      
      subTadpolesHiggs2Loop = {};
      If[UseHiggs2LoopMSSM\[Equal]True,
        WriteString[sphenoLoop,"vevs_DR(1) = vd \n"];
        WriteString[sphenoLoop,"vevs_DR(2) = vu \n"];
        WriteString[sphenoLoop,
          "Call Two_Loop_Tadpoles_MSSM(g3,MGlu,mAH2(2),vevs_DR, &\n"];
        WriteString[sphenoLoop,
          "& Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), & \n"]\
;
        WriteString[sphenoLoop,
          "& Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &  \n"];
        WriteString[sphenoLoop,
          "& Yu(3,3), Ye(3,3), mu, tadpoles_2L,kont ) \n\n"];
        
        WriteShiftTadpoleSolution[sphenoLoop];
        
        For[i=1,i\[LessEqual]Length[SubSolutionsTadpolesLoop],
          
          WriteString[sphenoLoop,
            SPhenoForm[SubSolutionsTadpolesLoop[[i,1]]] <>"1L = " <> 
              SPhenoForm[SubSolutionsTadpolesLoop[[i,1]]] <>"\n"];
          
          subTadpolesHiggs2Loop = 
            Join[subTadpolesHiggs2Loop,{SubSolutionsTadpolesLoop[[i,
                      1]]\[Rule]ToExpression[
                    SPhenoForm[SubSolutionsTadpolesLoop[[i,1]]] <>"1L"]}];
          i++;];
        
        WriteString[sphenoLoop, 
          "Tad1Loop(1) = Tad1Loop(1) -  vd*tadpoles_2L(1) \n"];
        WriteString[sphenoLoop, 
          "Tad1Loop(2) = Tad1Loop(2) -  vu*tadpoles_2L(2) \n"];
        ];
      
      
      
      WriteShiftTadpoleSolution[sphenoLoop];
      
      MakeCall["CouplingsForLoopMasses" , 
        Join[parametersLoop,namesLoop],{},{},sphenoLoop];
      
      WriteString[sphenoLoop," \n \n"];
      
      For[i=1,i\[LessEqual]Length[ListTree],
        If[FreeQ[SMParticles,ListMassES[[i,1]]],
          Switch[ListTree[[i,4]],
              ScalarMass,
              If[FreeQ[ListTree[[i,3]] /. subSolution,Tad1Loop]\[Equal]True,
                  
                  If[ListMassES[[i,1]]===HiggsBoson && 
                        UseHiggs2LoopMSSM===True,
                      
                      MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],
                          Flatten[{ListTree[[i,5]]/. subTadpolesHiggs2Loop,
                              NeededMassesLoop[[i]],
                              NeededCouplingsLoop[[i]]}],{},{"0.000001_dp",
                            ToString[ListTree[[i,1]]]<>"_1L",
                            ToString[ListTree[[i,1]]]<>"2_1L",
                            ToString[ListTree[[i,2]]]<>"_1L","kont"},
                          sphenoLoop];,
                      
                      MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],
                          Flatten[{ListTree[[i,5]],NeededMassesLoop[[i]],
                              NeededCouplingsLoop[[i]]}],{},{"0.000001_dp",
                            ToString[ListTree[[i,1]]]<>"_1L",
                            ToString[ListTree[[i,1]]]<>"2_1L",
                            ToString[ListTree[[i,2]]]<>"_1L","kont"},
                          sphenoLoop];
                      ];,
                  
                  MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],
                      Flatten[{ListTree[[i,5]],NeededMassesLoop[[i]],
                          NeededCouplingsLoop[[i]]}],{},{"Tadpole_1L","0.000001_dp",
                        ToString[ListTree[[i,1]]]<>"_1L",
                        ToString[ListTree[[i,1]]]<>"2_1L",
                        ToString[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];
                  ];,
              FermionMassSymm,
              
              MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],
                  Flatten[{ListTree[[i,5]],NeededMassesLoop[[i]],
                      NeededCouplingsLoop[[i]]}],{},{"0.000001_dp",
                    ToString[ListTree[[i,1]]]<>"_1L",
                    ToString[ListTree[[i,1]]]<>"2_1L",
                    ToString[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];,
              FermionMassNonSymm,
              
              MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],
                  Flatten[{ListTree[[i,5]],NeededMassesLoop[[i]],
                      NeededCouplingsLoop[[i]]}],{},{"0.000001_dp",
                    ToString[ListTree[[i,1]]]<>"_1L",
                    ToString[ListTree[[i,1]]]<>"2_1L",
                    ToString[ListTree[[i,2,1]]]<>"_1L",
                    ToString[ListTree[[i,2,2]]]<>"_1L","kont"},sphenoLoop];
               ];
          ];
        i++;];
      
      
       For[i=1,i\[LessEqual]Length[listNotMixedMasses],
        If[
          listNotMixedMasses[[i,4]]=!=0 && 
            FreeQ[SMParticles,listNotMixedMasses[[i,1]]],
          nameCurrent=listNotMixedMasses[[i,2]];
          particleCurrent=ToString[listNotMixedMasses[[i,1]]];
          parametersCurrent=listNotMixedMasses[[i,3]];
          treeMassCurrent=listNotMixedMasses[[i,5]]/. subSolution;
          mixing1="None1";
          mixing2="None2";
          
          Switch[listNotMixedMasses[[i,6]],
            ScalarMass,
            
            MakeCall["OneLoop"<>particleCurrent,
                Flatten[{parametersCurrent,NeededMassesUnmixed[[i]],
                    NeededCouplingsUnmixed[[i]]}],{},{"0.000001_dp",
                  nameCurrent<>"_1L",nameCurrent<>"2_1L","kont"},
                sphenoLoop];,
            FermionMassSymm,
            
            MakeCall["OneLoop"<>particleCurrent,
                Flatten[{parametersCurrent,NeededMassesUnmixed[[i]],
                    NeededCouplingsUnmixed[[i]]}],{},{"0.000001_dp",
                  nameCurrent<>"_1L",nameCurrent<>"2_1L","kont"},
                sphenoLoop];,
            FermionMassNonSymm,
            
            MakeCall["OneLoop"<>particleCurrent,
                Flatten[{parametersCurrent,NeededMassesUnmixed[[i]],
                    NeededCouplingsUnmixed[[i]]}],{},{"0.000001_dp",
                  nameCurrent<>"_1L",nameCurrent<>"2_1L","kont"},
                sphenoLoop];,
            VectorMass,
            
            MakeCall["OneLoop"<>particleCurrent,
                Flatten[{parametersCurrent,NeededMassesUnmixed[[i]],
                    NeededCouplingsUnmixed[[i]]}],{},{"0.000001_dp",
                  nameCurrent<>"_1L",nameCurrent<>"2_1L","kont"},sphenoLoop];
            ];
          ];
        i++;]; 
      
      
      
      
      
      For[i=1,i\[LessEqual]Length[ListTree],
        If[FreeQ[SMParticles,ListMassES[[i,1]]],
          
          WriteString[sphenoLoop, 
            ToString[ListTree[[i,1]]] <> " = "<> ToString[ListTree[[i,1]]]<>
              "_1L \n"];
          WriteString[sphenoLoop, 
            ToString[ListTree[[i,1]]] <> "2 = "<> ToString[ListTree[[i,1]]]<>
              "2_1L \n"];
          If[Length[ListTree[[i,2]]]\[Equal]0,
            
            WriteString[sphenoLoop, 
                ToString[ListTree[[i,2]]] <> " = "<> 
                  ToString[ListTree[[i,2]]]<>"_1L \n"];,
            
            WriteString[sphenoLoop, 
              ToString[ListTree[[i,2,1]]] <> " = "<> 
                ToString[ListTree[[i,2,1]]]<>"_1L \n"];
            
            WriteString[sphenoLoop, 
              ToString[ListTree[[i,2,2]]] <> " = "<> 
                ToString[ListTree[[i,2,2]]]<>"_1L \n"];
            ];
          ];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[listNotMixedMasses],
        If[
          listNotMixedMasses[[i,4]]=!=0 && 
            FreeQ[SMParticles,listNotMixedMasses[[i,1]]],
          
          WriteString[sphenoLoop,
            listNotMixedMasses[[i,2]] <> " = "<>listNotMixedMasses[[i,2]]<>
              "_1L \n"];
          WriteString[sphenoLoop,
            listNotMixedMasses[[i,2]] <> "2 = "<>listNotMixedMasses[[i,2]]<>
              "2_1L \n"];
          ];
        i++;];
      
      
      
      SetPoleMasses[sphenoLoop];
      
      
      (* For Goldstones *)
      
      WriteString[sphenoLoop,"! Shift Everything to t'Hooft Gauge\n"];
      
      For[i=1,i\[LessEqual]Length[GoldstoneGhost],
        WriteString[sphenoLoop,
          SPhenoMass[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>
            SPhenoMass[GoldstoneGhost[[i,1]],i] <>"\n" ];
        WriteString[sphenoLoop,
          SPhenoMassSq[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>
            SPhenoMassSq[GoldstoneGhost[[i,1]],i] <>"\n" ];
        i++;];
      
      WriteString[sphenoLoop,"\n\n"];
      
      
      
      
      WriteString[sphenoLoop,"Iname = Iname -1 \n"];
      
      WriteString[sphenoLoop,"End Subroutine OneLoopMasses \n \n"];
      
      ];



WriteLoopMassScalar[Name_,particle_,parameters_,masses_,couplings_,
      contributions_, tree_,addTad_,mixed_]:=Block[{i2,i3},
      
      Print["Subroutine for 1 Loop Correction of ", Name];
      
      If[mixed\[Equal]True,
        If[addTad\[Equal]True,
            
            MakeSubroutineTitle["OneLoop"<>Name,
                Flatten[{parameters,masses,couplings}],{},{"Tad1Loop","delta",
                  "mass","mass2","RS","kont"},sphenoLoop];,
            
            MakeSubroutineTitle["OneLoop"<>Name,
                Flatten[{parameters,masses,couplings}],{},{"delta","mass","mass2",
                  "RS","kont"},sphenoLoop];
            ];,
        If[addTad\[Equal]True,
            
            MakeSubroutineTitle["OneLoop"<>Name,
                Flatten[{parameters,masses,couplings}],{},{"Tad1Loop","delta",
                  "mass","mass2","kont"},sphenoLoop];,
            
            MakeSubroutineTitle["OneLoop"<>Name,
                Flatten[{parameters,masses,couplings}],{},{"delta","mass","mass2",
                  "kont"},sphenoLoop];
            ];
        ];
      
      
      dimMatrix = ToString[getGenSPheno[particle]];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[parameters,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      
      WriteString[sphenoLoop, 
        "Complex(dp) :: mat2a"<>"("<>dimMatrix<>","<>dimMatrix<>"), mat2"<>"("<>
          dimMatrix<>","<>dimMatrix<>"),  PiSf("<>dimMatrix<>","<>dimMatrix<>","<>
          dimMatrix<>")\n"];
      WriteString[sphenoLoop, "Integer , Intent(inout):: kont \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4,j1,j2,j3,j4,il,i_count, ierr \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: delta \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: mi2("<>dimMatrix<>"), test_m2("<>dimMatrix<>"),p2, test("<>
          dimMatrix<>") \n"];
      WriteString[sphenoLoop, 
        "Real(dp), Intent(out) :: mass("<>dimMatrix<>"), mass2("<>dimMatrix<>
          ") \n"];
      If[mixed\[Equal]True,
        WriteString[sphenoLoop, 
            "Complex(dp), Intent(out) ::  RS"<>"("<>dimMatrix<>","<>dimMatrix<>
              ") \n"];,
        WriteString[sphenoLoop, 
            "Complex(dp) ::  RS"<>"("<>dimMatrix<>","<>dimMatrix<>") \n"];
        ];
      
      If[addTad\[Equal]True,
        WriteString[sphenoLoop, 
            "Complex(dp), Intent(in) ::  Tad1Loop("<>ToString[Length[TEqu]]<>
              ") \n"];
        ];
      
      If[UseHiggs2LoopMSSM\[Equal]True,
        If[particle === PseudoScalar,
            WriteString[sphenoLoop, "Real(dp) :: Pi2A0, vevs_DR(2) \n"];,
            If[particle===HiggsBoson,
                
                WriteString[sphenoLoop, 
                    "Real(dp) :: Pi2S(2,2), Q2, vevs_DR(2) \n"];
                ];
            ];
        ];
      
      
      WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
      WriteString[sphenoLoop, 
        "NameOfUnit(Iname) = '"<>"OneLoop"<> Name<>"'\n \n"];
      
      
      For[i2=1,i2\[LessEqual]ToExpression[dimMatrix],
        For[i3=i2,i3\[LessEqual]ToExpression[dimMatrix],
          
          MakeSPhenoCoupling[tree[[i2,i3]],
            "mat2a("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoLoop];
          i3++;];
        i2++;];
      
      WriteString[sphenoLoop, "\n \n "];
      
      WriteString[sphenoLoop,"Do i1=2,"<>dimMatrix <>"\n"];
      WriteString[sphenoLoop, "  Do i2 = 1, i1-1 \n"];
      WriteString[sphenoLoop, "  mat2a(i1,i2) = Conjg(mat2a(i2,i1)) \n"];
      WriteString[sphenoLoop, "  End do \n"];
      WriteString[sphenoLoop, "End do \n"]; 
      
      WriteString[sphenoLoop, "\n \n"];
      
      If[UseHiggs2LoopMSSM\[Equal]True,
        If[particle === PseudoScalar,
            WriteString[sphenoLoop,"vevs_DR(1) = vd \n"];
            WriteString[sphenoLoop,"vevs_DR(2) = vu \n"];
            
            WriteString[sphenoLoop,
              "Call PiPseudoScalar2(g3,MGlu,mAH2(2),vevs_DR, & \n"];
            
            WriteString[sphenoLoop,
              "& Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), & \n"]\
;
            
            WriteString[sphenoLoop,
              "& Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &  \n"]\
;
            
            WriteString[sphenoLoop,
              "& Yu(3,3), Ye(3,3), mu, Pi2A0,kont ) \n\n"];,
            
            If[particle===HiggsBoson,
                WriteString[sphenoLoop,"Q2 = GetRenormalizationScale() \n"];
                WriteString[sphenoLoop,"vevs_DR(1) = vd \n"];
                WriteString[sphenoLoop,"vevs_DR(2) = vu \n"];
                
                WriteString[sphenoLoop,
                  "Call PiScalar2(Q2,g3,MGlu,mAH2(2),vevs_DR, & \n"];
                
                WriteString[sphenoLoop,
                  " Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), & \n"]\
;
                
                WriteString[sphenoLoop,
                  " Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &  \n"]\
;
                
                WriteString[sphenoLoop,
                  " Yu(3,3), Ye(3,3), mu,0, Pi2S,kont ) \n\n"];
                ];
            ];
        ];
      
      
      
      WriteString[sphenoLoop,"Do i1=1,"<>dimMatrix <>"\n"];
      WriteString[sphenoLoop, "PiSf(i1,:,:) = ZeroC \n"];
      WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,i1]<> "\n"];
      If[FreeQ[Transpose[GoldstoneGhost][[2]],particle]\[Equal]False,
        WriteString[sphenoLoop, "If (i1.eq.1) p2 = 0._dp \n"];
        ];
      
      
      MakeCall["Pi1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"kont","PiSf(i1,:,:)"},
        sphenoLoop];
      WriteString[sphenoLoop,"End Do \n"];
      
      WriteString[sphenoLoop,
        "Do i1="<>dimMatrix <>","<>ToString[getGenSPhenoStart[particle]]<>
          ",-1 \n"];
      If[UseHiggs2LoopMSSM===True && particle === HiggsBoson,
        WriteString[sphenoLoop,
            "mat2 = mat2a - Real(PiSf(i1,:,:),dp) + Pi2S \n"];,
        WriteString[sphenoLoop,"mat2 = mat2a - Real(PiSf(i1,:,:),dp) \n"];
        ];
      
      WriteString[sphenoLoop,"Call Chop(mat2) \n"];
      WriteString[sphenoLoop,"Call Eigensystem(mat2,mi2,RS,kont,test) \n"];
      
      If[UseHiggs2LoopMSSM===True && particle === PseudoScalar,
        WriteString [sphenoLoop, "mi2(2) = mi2(2) + Pi2A0 \n"]
        ];
      
      WriteString[sphenoLoop,"If ((kont.Eq.-8).Or.(kont.Eq.-9)) Then \n"];
      WriteString[sphenoLoop,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoLoop,"  kont = 0 \n"];
      WriteString[sphenoLoop,"End If \n"];
      WriteString[sphenoLoop,
        "If ((kont.Ne.0).And.(ErrorLevel.Ge.0)) Then \n"];
      WriteString[sphenoLoop,
        "  Write(ErrCan,*) \"Diagonalization did not work in routine \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoLoop,"End If \n"];
      
      
      WriteString[sphenoLoop,"mass2(i1) = mi2(i1) \n"];
      WriteString[sphenoLoop, "End do \n \n"]; 
      
      
      WriteString[sphenoLoop,"Do i1=1," <> dimMatrix <>"\n"];
      WriteString[sphenoLoop, 
        "  If (Abs(mass2(i1)).Le.1.E-10_dp) mass2(i1) = 0._dp \n"]; 
      WriteString[sphenoLoop,"  If (mass2(i1).Ge.0._dp) Then \n"];
      WriteString[sphenoLoop,"    mass(i1) = Sqrt(mass2(i1)) \n"];
      WriteString[sphenoLoop,"  Else \n"];
      WriteString[sphenoLoop,"   If (ErrorLevel.Ge.0) Then \n"];
      If[FreeQ[GoldstoneGhost,particle]\[Equal]False, 
        WriteString[sphenoLoop,
            "   If ((i1.Gt.1).or.(Abs(mass2(i1)).gt.MaxVal(Abs(mass2)))) Then \n"]\
;
        ]; 
      WriteString[sphenoLoop,
        "     Write(*,*) 'Warning from routine '//NameOfUnit(Iname) \n"];
      WriteString[sphenoLoop,
        "     Write(*,*) 'in the calculation of the masses' \n"];
      WriteString[sphenoLoop,
        "     Write(*,*) 'occurred a negative mass squared!' \n"];
      WriteString[sphenoLoop,"   Call TerminateProgram \n"];
      If[FreeQ[GoldstoneGhost,particle]\[Equal]False,
        WriteString[sphenoLoop,"   End If \n"];
        ];
      WriteString[sphenoLoop,"   End If \n"];
      WriteString[sphenoLoop,"   kont = -301 \n"];
      WriteString[sphenoLoop,"   mass(i1) = 0._dp \n"];
      WriteString[sphenoLoop,"  End If \n"];
      WriteString[sphenoLoop,"End Do \n \n"];
      
      
      WriteString[sphenoLoop,"i_count = 0 \n"];
      WriteString[sphenoLoop,"Do  \n"];
      WriteString[sphenoLoop,"i_count = i_count + 1 \n"];
      WriteString[sphenoLoop,"test_m2 = mass2 \n"];
      
      WriteString[sphenoLoop,"Do i1=1,"<>dimMatrix <>"\n"];
      WriteString[sphenoLoop, "PiSf(i1,:,:) = ZeroC \n"];
      WriteString[sphenoLoop, "p2 =  mass2(i1) \n"];
      
      If[FreeQ[Transpose[GoldstoneGhost][[2]],particle]\[Equal]False,
        WriteString[sphenoLoop, "If (i1.eq.1) p2 = 0._dp \n"];
        ];
      
      MakeCall["Pi1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"kont","PiSf(i1,:,:)"},
        sphenoLoop];
      WriteString[sphenoLoop,"End Do \n"];
      
      WriteString[sphenoLoop,
        "Do i1="<>dimMatrix <>","<>ToString[getGenSPhenoStart[particle]]<>
          ",-1 \n"];
      If[UseHiggs2LoopMSSM===True && particle === HiggsBoson,
        WriteString[sphenoLoop,
            "mat2 = mat2a - Real(PiSf(i1,:,:),dp) + Pi2S \n"];,
        WriteString[sphenoLoop,"mat2 = mat2a - Real(PiSf(i1,:,:),dp) \n"];
        ];
      WriteString[sphenoLoop,"Call Chop(mat2) \n"];
      WriteString[sphenoLoop,"Call Eigensystem(mat2,mi2,RS,kont,test) \n"];
      
      If[UseHiggs2LoopMSSM\[Equal]True && particle === PseudoScalar,
        WriteString [sphenoLoop, "mi2(2) = mi2(2) + Pi2A0 \n"]
        ];
      
      WriteString[sphenoLoop,"If ((kont.Eq.-8).Or.(kont.Eq.-9)) Then \n"];
      WriteString[sphenoLoop,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoLoop,"  kont = 0 \n"];
      WriteString[sphenoLoop,"End If \n"];
      WriteString[sphenoLoop,
        "If ((kont.Ne.0).And.(ErrorLevel.Ge.0)) Then \n"];
      WriteString[sphenoLoop,
        "  Write(ErrCan,*) \"Diagonalization did not work in routine \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoLoop,"End If \n"];
      WriteString[sphenoLoop,"mass2(i1) = mi2(i1) \n"];
      WriteString[sphenoLoop, "End do \n"]; 
      
      
      WriteString[sphenoLoop,"Do i1=1,"<>dimMatrix <>"\n"];
      WriteString[sphenoLoop,
        " If (Abs(mass2(i1)).Le.1.E-10_dp) mass2(i1) = 0._dp \n"]; 
      WriteString[sphenoLoop," If (test_m2(i1).Ne.0._dp) Then \n"];
      WriteString[sphenoLoop,
        "    test_m2(i1) = Abs(test_m2(i1) - mass2(i1)) / test_m2(i1) \n"];
      WriteString[sphenoLoop," Else \n"];
      WriteString[sphenoLoop,"    test_m2(i1) = Abs(mass2(i1)) \n"];
      WriteString[sphenoLoop," End If \n"];
      WriteString[sphenoLoop," If (mass2(i1).Ge.0._dp) Then \n"];
      WriteString[sphenoLoop,"    mass(i1) = sqrt(mass2(i1)) \n"];
      WriteString[sphenoLoop,"  Else \n"];
      (* WriteString[sphenoLoop,"   If (ErrorLevel.Ge.0) Then \n"]; 
        If[FreeQ[GoldstoneGhost,particle]\[Equal]False,
          
          WriteString[sphenoLoop,
              "   If ((i1.Gt.1).or.(Abs(mass2(i1)).gt.MaxVal(Abs(mass2)))) Then \n"]\
;
          ]; *)
      
      WriteString[sphenoLoop,
        "     Write(*,*) 'Warning from routine '//NameOfUnit(Iname) \n"];
      WriteString[sphenoLoop,
        "     Write(*,*) 'in the calculation of the masses occurred a negative mass squared!' \n"]\
;
      WriteString[sphenoLoop,"     Write(*,*) 'generation: ',i1 \n"];
      WriteString[sphenoLoop,"     Write(*,*) 'mass: ',mass2(i1) \n"];
      WriteString[sphenoLoop,"   SignOfMassChanged = .True. \n"];
      (* WriteString[sphenoLoop,"   Call TerminateProgram \n"]; 
        If[FreeQ[GoldstoneGhost,particle]\[Equal]False,
          WriteString[sphenoLoop,"   End If \n"];
          ]; *)
      (* WriteString[sphenoLoop,"   End If \n"];
        WriteString[sphenoLoop,"   kont = -301 \n"]; *)
      
      WriteString[sphenoLoop,"   mass(i1) = 0._dp \n"];
      WriteString[sphenoLoop,"  End If \n"];
      WriteString[sphenoLoop,"End Do \n \n"];
      
      WriteString[sphenoLoop,"If (Maxval(test_m2).LT.0.1_dp*delta) Exit \n"];
      WriteString[sphenoLoop,"If (i_count.Gt.30) Then \n"];
      WriteString[sphenoLoop,
        "  Write(*,*) \"Problem in \"//NameOfUnit(Iname), test_m2, mass2 \n"];\

      WriteString[sphenoLoop,"  kont = -510 \n"];
      WriteString[sphenoLoop,"  Call AddError(510) \n"];
      WriteString[sphenoLoop," Exit \n"];
      WriteString[sphenoLoop,"End If \n"];
      WriteString[sphenoLoop,"End Do \n \n \n"];
      
      WriteString[sphenoLoop,"Iname = Iname -1 \n"];
      
      WriteString[sphenoLoop,"End Subroutine OneLoop"<>Name <> "\n \n \n"];
      
      
      
      
      ];

WriteLoopMassFermionSymm[NameP_,particle_,parameters_,masses_,couplings_,
      contributions_, tree_, Name_,MixingName_,mixed_]:=Block[{i2,i3},
      
      Print["Subroutine for 1 Loop Correction of ", Name];
      
      If[mixed\[Equal]True,
        MakeSubroutineTitle["OneLoop"<>NameP,
            Flatten[{parameters,masses,couplings}],{},{"delta",Name<>"_1L",
              Name<>"2_1L",MixingName<>"_1L","ierr"},sphenoLoop];,
        MakeSubroutineTitle["OneLoop"<>NameP,
            Flatten[{parameters,masses,couplings}],{},{"delta",Name<>"_1L",
              Name<>"2_1L","ierr"},sphenoLoop];
        ];
      
      dimMatrix = ToString[getGenSPheno[particle]];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[parameters,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      
      WriteString[sphenoLoop, 
        "Complex(dp) :: mat1a"<>"("<>dimMatrix<>","<>dimMatrix<>"), mat1"<>"("<>
          dimMatrix<>","<>dimMatrix<>"), mat2"<>"("<>dimMatrix<>","<>
          dimMatrix<>") \n"];
      WriteString[sphenoLoop, "Integer , Intent(inout):: ierr \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4,j1, j2,j3,j4,il,i_count \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: delta \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: mi2("<>dimMatrix<>"), test_m2("<>dimMatrix<>"),p2 \n"];
      WriteString[sphenoLoop, 
        "Real(dp), Intent(out) :: "<> Name <>"_1L("<>dimMatrix <>"),"<> Name <>
          "2_1L("<>dimMatrix <>") \n" ];
      If[mixed\[Equal]True,
        WriteString[sphenoLoop, 
            "Complex(dp), Intent(out) :: " MixingName<>"_1L("<>dimMatrix <>","<>
                dimMatrix <>") \n" ];,
        WriteString[sphenoLoop, 
            "Complex(dp) :: " MixingName<>"_1L("<>dimMatrix <>","<>dimMatrix <>
                ") \n" ];
        ];
      WriteString[sphenoLoop, 
        "Real(dp) :: "<> Name <>"_t("<>dimMatrix <>"),"<> Name <>"2_t("<>
          dimMatrix <>") \n" ];
      WriteString[sphenoLoop, 
        "Complex(dp) :: " MixingName<>"_t("<>dimMatrix <>","<>dimMatrix <>
            ") \n" ];
      WriteString[sphenoLoop, 
        "Complex(dp) ::  phaseM, E"<>dimMatrix<>"("<>dimMatrix<>"), sigL("<>
          dimMatrix <>","<>dimMatrix <>"), sigR("<>dimMatrix <>","<>
          dimMatrix <>"), sigS("<>dimMatrix <>","<>dimMatrix <>") \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: "<>MixingName<>"a("<>dimMatrix<>","<>dimMatrix<>"), test(2), eig("<>
          dimMatrix<>") \n\n"];
      
      
      WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
      WriteString[sphenoLoop, 
        "NameOfUnit(Iname) = '"<>"OneLoop"<> Name<>"'\n \n"];
      
      
      For[i2=1,i2\[LessEqual]ToExpression[dimMatrix],
        For[i3=1,i3\[LessEqual]ToExpression[dimMatrix],
          
          MakeSPhenoCoupling[tree[[i2,i3]],
            "mat1a("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoLoop];
          i3++;];
        i2++;];
      
      WriteString[sphenoLoop, "\n \n "];
      
      
      WriteString[sphenoLoop,"Do il="<>dimMatrix <>",1,-1\n"];
      
      WriteString[sphenoLoop,"sigL=0._dp \n"];
      WriteString[sphenoLoop,"sigR=0._dp \n"];
      WriteString[sphenoLoop,"sigS=0._dp \n"];
      WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,il]<> "\n"];
      
      MakeCall["Sigma1Loop"<>NameP,
        Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},
        sphenoLoop];
      
      AddLoopCorrectionRoutineSymmFermions[Name,MixingName,dimMatrix];
      
      WriteString[sphenoLoop, 
        "!---------------------------------------- \n"];
      WriteString[sphenoLoop, "! Redoing Calculation using redefined p2 \n"];
      WriteString[sphenoLoop, 
        "!----------------------------------------- \n \n"];
      
      WriteString[sphenoLoop,"i_count = 0 \n"];
      WriteString[sphenoLoop,"p2_loop: Do  \n"];
      WriteString[sphenoLoop,"i_count = i_count + 1 \n"];
      
      WriteString[sphenoLoop,"sigL=0._dp \n"];
      WriteString[sphenoLoop,"sigR=0._dp \n"];
      WriteString[sphenoLoop,"sigS=0._dp \n"];
      WriteString[sphenoLoop, "p2 = "<>Name<> "2_1L(iL)\n"];
      
      MakeCall["Sigma1Loop"<>NameP,
        Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},
        sphenoLoop];
      
      AddLoopCorrectionRoutineSymmFermions[Name,MixingName,dimMatrix];
      
      WriteString[sphenoLoop,"If (p2.Ne.0._dp) Then \n"];
      WriteString[sphenoLoop,"  test(1) = Abs("<>Name<>"2_1L(il)-p2)/p2\n"];
      WriteString[sphenoLoop,"Else \n"];
      WriteString[sphenoLoop,"  test(2) = Abs("<>Name<>"2_1L(il))\n"];
      WriteString[sphenoLoop,"End If \n"];
      WriteString[sphenoLoop,"If (test(1).lt.0.1_dp*delta) Exit p2_loop \n"];
      WriteString[sphenoLoop,"If(i_count.gt.30) then \n"];
      WriteString[sphenoTree,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,"  Exit p2_loop \n"];
      WriteString[sphenoLoop,"End if\n"];
      WriteString[sphenoLoop,"End Do p2_loop \n"];
      WriteString[sphenoLoop,"End Do \n \n"];
      
      
      WriteString[sphenoLoop,"Iname = Iname -1 \n"];
      
      WriteString[sphenoLoop,"End Subroutine OneLoop"<>NameP <> "\n \n \n"];
      
      
      ];

AddLoopCorrectionRoutineSymmFermions[Name_,MixingName_,dimMatrix_]:=Block[{},
      WriteString[sphenoLoop,
        "mat1 = mat1a - 0.5_dp*(SigS + Transpose(SigS) + & \n"];
      WriteString[sphenoLoop,
        "      & MatMul(Transpose(SigL),mat1a) + MatMul(SigR,mat1a) + & \n"];
      WriteString[sphenoLoop,
        "      & MatMul(mat1a,Transpose(SigR)) + MatMul(mat1a,SigL)) \n \n"];
      
      WriteString[sphenoLoop, 
        "If (Maxval(Abs(Aimag(mat1))).Eq.0._dp) Then \n"];
      WriteString[sphenoLoop, 
        "Call EigenSystem(Real(mat1,dp),Eig,"<>  MixingName <>
          "a,ierr,test) \n \n "];
      
      WriteString[sphenoLoop, "  Do i1=1,"<>dimMatrix <>"\n"];
      WriteString[sphenoLoop, 
        "   If (Eig(i1).Lt.0._dp.And.(RotateNegativeFermionMasses)) Then \n"];\

      WriteString[sphenoLoop, "    "<>Name<>"_t(i1) = - Eig(i1) \n"];
      WriteString[sphenoLoop, 
        "    "<>MixingName<>"_1L(i1,:) = (0._dp,1._dp)*" <>MixingName <>
          "a(i1,:) \n"];
      WriteString[sphenoLoop, "   Else \n"];
      WriteString[sphenoLoop, "    "<>Name<>"_t(i1) = Eig(i1) \n"];
      WriteString[sphenoLoop, 
        "    "<>MixingName<>"_1L(i1,:) = "<>MixingName<>"a(i1,:)\n"];
      WriteString[sphenoLoop, "    End If \n"];
      WriteString[sphenoLoop, "   End Do \n \n"];
      
      WriteString[sphenoLoop, 
        "Do i1=1,"<>ToString[ToExpression[dimMatrix]-1]<>"\n"];
      WriteString[sphenoLoop, "  Do i2=i1+1,"<>dimMatrix <>"\n"];
      WriteString[sphenoLoop, 
        "    If (Abs("<>Name<>"_t(i1)).Gt.Abs("<>Name<>"_t(i2))) Then \n"];
      WriteString[sphenoLoop, "      Eig(1) = "<>Name<>"_t(i1) \n"];
      WriteString[sphenoLoop, 
        "      "<>Name<>"_t(i1) = "<>Name <>"_t(i2) \n"];
      WriteString[sphenoLoop, "      "<>Name<>"_t(i2) = Eig(1) \n"];
      WriteString[sphenoLoop, 
        "      E"<>dimMatrix<>" = " <>MixingName<>"_1L(i1,:) \n"];
      WriteString[sphenoLoop, 
        "      "<>MixingName<>"_1L(i1,:) = "<>MixingName<>"_1L(i2,:) \n"];
      WriteString[sphenoLoop, 
        "      "<>MixingName<>"_1L(i2,:) = E"<>dimMatrix <>"\n"];
      WriteString[sphenoLoop, "    End If \n"];
      WriteString[sphenoLoop, "   End Do \n"];
      WriteString[sphenoLoop, "End Do \n \n"];
      
      WriteString[sphenoLoop, Name<>"_1L(iL) = "<>Name<>"_t(iL) \n"];
      WriteString[sphenoLoop, Name<>"2_1L(iL) = "<>Name<>"_t(iL)**2 \n"];
      
      WriteString[sphenoLoop, "Else \n \n"];
      
      WriteString[sphenoLoop, 
        "mat2 = Matmul( Transpose(Conjg( mat1) ), mat1 ) \n"];
      WriteString[sphenoLoop, 
        "Call Eigensystem(mat2, Eig, "<>MixingName<>"_1L, ierr, test) \n"];
      WriteString[sphenoLoop, 
        "mat2 = Matmul( Conjg("<>MixingName<>"_1L), Matmul( mat1, Transpose( Conjg("<>
          MixingName<>"_1L)))) \n"];
      WriteString[sphenoLoop, "Do i1=1,"<>dimMatrix<>"\n"];
      WriteString[sphenoLoop, 
        "  phaseM = Sqrt( mat2(i1,i1) / Abs(mat2(i1,i1))) \n"];
      WriteString[sphenoLoop, 
        "  "<>MixingName<>"_1L(i1,:)= phaseM * "<>MixingName<>
          "_1L(i1,:) \n"];
      WriteString[sphenoLoop, "End Do \n"];
      WriteString[sphenoLoop, Name <> "_1L = Sqrt( Eig ) \n \n"];
      WriteString[sphenoLoop, Name <> "2_1L = Eig \n \n"];
      WriteString[sphenoLoop, "End If \n \n"]; 
      
      
      
      WriteString[sphenoLoop,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
      WriteString[sphenoLoop,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoLoop, "  ierr = 0 \n"];
      WriteString[sphenoLoop, "End If \n \n"];
      
      
      
      
      ];

WriteLoopMassFermionNonSymm[NameP_,particle_,parameters_,masses_,couplings_,
      contributions_, tree_, Name_,MixingName1_,MixingName2_, mixed_]:=
    Block[{i2,i3},
      
      Print["Subroutine for 1 Loop Correction of ", NameP];
      
      If[mixed\[Equal]True,
        MakeSubroutineTitle["OneLoop"<>NameP,
            Flatten[{parameters,masses,couplings}],{},{"delta",Name<>"_1L",
              Name<>"2_1L",MixingName1<>"_1L",MixingName2<>"_1L","ierr"},
            sphenoLoop];,
        MakeSubroutineTitle["OneLoop"<>NameP,
            Flatten[{parameters,masses,couplings}],{},{"delta",Name<>"_1L",
              Name<>"2_1L","ierr"},sphenoLoop];
        ];
      
      dimMatrix = ToString[getGenSPheno[particle]];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[parameters,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      
      WriteString[sphenoLoop, 
        "Complex(dp) :: mat1a"<>"("<>dimMatrix<>","<>dimMatrix<>"), mat1"<>"("<>
          dimMatrix<>","<>dimMatrix<>") \n"];
      WriteString[sphenoLoop, "Integer , Intent(inout):: ierr \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4,j1,j2,j3,j4,il,i_count \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: delta \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: mi2("<>dimMatrix<>"), test_m2("<>dimMatrix<>"), p2 \n"];
      WriteString[sphenoLoop, 
        "Real(dp), Intent(out) :: "<> Name <>"_1L("<>dimMatrix <>"),"<> Name <>
          "2_1L("<>dimMatrix <>") \n " ];
      If[mixed\[Equal]True,
        WriteString[sphenoLoop,  
            "Complex(dp), Intent(out) :: "<>MixingName1<>"_1L("<>dimMatrix <>","<>
              dimMatrix <>"), "<>MixingName2<>"_1L("<>dimMatrix <>","<>
              dimMatrix <>") \n \n " ];,
        WriteString[sphenoLoop,  
            "Complex(dp) :: "<>MixingName1<>"_1L("<>dimMatrix <>","<>
              dimMatrix <>"), "<>MixingName2<>"_1L("<>dimMatrix <>","<>
              dimMatrix <>") \n \n " ];
        ];
      WriteString[sphenoLoop, 
        "Real(dp) :: "<> Name <>"_t("<>dimMatrix <>"),"<> Name <>"2_t("<>
          dimMatrix <>") \n " ];
      WriteString[sphenoLoop,  
        "Complex(dp) :: "<>MixingName1<>"_t("<>dimMatrix <>","<>dimMatrix <>"), "<>
          MixingName2<>"_t("<>dimMatrix <>","<>dimMatrix <>"), sigL("<>
          dimMatrix <>","<>dimMatrix <>"), sigR("<>dimMatrix <>","<>
          dimMatrix <>"), sigS("<>dimMatrix <>","<>dimMatrix <>") \n \n " ];
      WriteString[sphenoLoop, 
        "Complex(dp) :: mat"<>"("<>dimMatrix<>","<>dimMatrix<>")=0._dp, mat2"<>
          "("<>dimMatrix<>","<>dimMatrix<>")=0._dp, phaseM \n\n"];
      WriteString[sphenoLoop,  
        "Complex(dp) :: "<>MixingName1<>"2("<>dimMatrix <>","<>dimMatrix <>"), "<>
          MixingName2<>"2("<>dimMatrix <>","<>dimMatrix <>") \n \n " ];
      WriteString[sphenoLoop,  
        "Real(dp) :: "<>MixingName1<>"1("<>dimMatrix <>","<>dimMatrix <>"), "<>
          MixingName2<>"1("<>dimMatrix <>","<>dimMatrix <>
          "), test(2) \n \n " ];
      
      
      WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
      WriteString[sphenoLoop, 
        "NameOfUnit(Iname) = '"<>"OneLoop"<> Name<>"'\n \n"];
      
      
      For[i2=1,i2\[LessEqual]ToExpression[dimMatrix],
        For[i3=1,i3\[LessEqual]ToExpression[dimMatrix],
          
          MakeSPhenoCoupling[tree[[i2,i3]],
            "mat1a("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoLoop];
          i3++;];
        i2++;];
      
      WriteString[sphenoLoop, "\n \n "];
      
      
      WriteString[sphenoLoop,"Do il="<>dimMatrix <>",1,-1\n"];
      
      WriteString[sphenoLoop,"sigL=0._dp \n"];
      WriteString[sphenoLoop,"sigR=0._dp \n"];
      WriteString[sphenoLoop,"sigS=0._dp \n"];
      WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,il]<> " \n"];
      
      MakeCall["Sigma1Loop"<>NameP,
        Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},
        sphenoLoop];
      
      WriteString[sphenoLoop,
        "mat1 = mat1a - SigS - MatMul(SigR,mat1a) - MatMul(mat1a,SigL) \n \n"]\
;
      
      WriteString[sphenoLoop, 
        "mat2 = Matmul(Transpose(Conjg(mat1)),mat1) \n"];
      WriteString[sphenoLoop, 
        "If (Maxval(Abs(Aimag(mat2))).Eq.0._dp) Then \n"];
      WriteString[sphenoLoop, 
        "Call EigenSystem(Real(mat2,dp),"<>Name<>"2_t,"<>  MixingName2 <>
          "1,ierr,test) \n"];
      WriteString[sphenoLoop, MixingName2<>"2 = "<>MixingName2<>"1 \n"];
      WriteString[sphenoLoop, "Else \n"];
      WriteString[sphenoLoop, 
        "Call EigenSystem(mat2,"<>Name<>"2_t,"<>  MixingName2 <>
          "2,ierr,test) \n "];
      WriteString[sphenoLoop, "End If \n \n"];
      
      WriteString[sphenoLoop,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
      WriteString[sphenoLoop,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoLoop, "  ierr = 0 \n"];
      WriteString[sphenoLoop, "End If \n \n"];
      
      
      
      WriteString[sphenoLoop, 
        "!---------------------------------------- \n"];
      WriteString[sphenoLoop, "! Redoing Calculation using redefined p2 \n"];
      WriteString[sphenoLoop, 
        "!----------------------------------------- \n \n"];
      
      WriteString[sphenoLoop,"i_count = 0 \n"];
      WriteString[sphenoLoop,"p2_loop: Do  \n"];
      WriteString[sphenoLoop,"i_count = i_count + 1 \n"];
      
      WriteString[sphenoLoop,"sigL=0._dp \n"];
      WriteString[sphenoLoop,"sigR=0._dp \n"];
      WriteString[sphenoLoop,"sigS=0._dp \n"];
      WriteString[sphenoLoop, "p2 = "<>Name<> "2_t(iL)\n"];
      
      MakeCall["Sigma1Loop"<>NameP,
        Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},
        sphenoLoop];
      
      WriteString[sphenoLoop,
        "mat1 = mat1a - SigS - MatMul(SigR,mat1a) - MatMul(mat1a,SigL) \n \n"]\
;
      
      WriteString[sphenoLoop, 
        "mat2 = Matmul(Transpose(Conjg(mat1)),mat1) \n"];
      WriteString[sphenoLoop, 
        "If (Maxval(Abs(Aimag(mat2))).Eq.0._dp) Then \n"];
      WriteString[sphenoLoop, 
        "Call EigenSystem(Real(mat2,dp),"<>Name<>"2_t,"<>  MixingName2 <>
          "1,ierr,test) \n"];
      WriteString[sphenoLoop, MixingName2<>"2 = "<>MixingName2<>"1 \n"];
      WriteString[sphenoLoop, "Else \n"];
      WriteString[sphenoLoop, 
        "Call EigenSystem(mat2,"<>Name<>"2_t,"<>  MixingName2 <>
          "2,ierr,test) \n "];
      WriteString[sphenoLoop, "End If \n \n"];
      
      WriteString[sphenoLoop,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
      WriteString[sphenoLoop,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoLoop, "  ierr = 0 \n"];
      WriteString[sphenoLoop, "End If \n \n"];
      
      
      WriteString[sphenoLoop,Name<>"2_1L(il) = "<>Name<>"2_t(il) \n"];
      WriteString[sphenoLoop,
        Name<>"_1L(il) = Sqrt("<>Name<>"2_1L(il)) \n \n"];
      
      WriteString[sphenoLoop,"If (p2.Ne.0._dp) Then \n"];
      WriteString[sphenoLoop,"  test(1) = Abs("<>Name<>"2_1L(il)-p2)/p2\n"];
      WriteString[sphenoLoop,"Else \n"];
      WriteString[sphenoLoop,"  test(2) = Abs("<>Name<>"2_1L(il))\n"];
      WriteString[sphenoLoop,"End If \n"];
      WriteString[sphenoLoop,"If (test(1).lt.0.1_dp*delta) Exit p2_loop \n"];
      WriteString[sphenoLoop,"If(i_count.gt.30) then \n"];
      WriteString[sphenoTree,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,"  Exit p2_loop \n"];
      WriteString[sphenoLoop,"End if\n"];
      WriteString[sphenoLoop,"End Do p2_loop \n"];
      
      
      
      WriteString[sphenoLoop, 
        "mat2 = Matmul(mat1,Transpose(Conjg(mat1))) \n"];
      WriteString[sphenoLoop, 
        "If (Maxval(Abs(Aimag(mat2))).Eq.0._dp) Then \n"];
      WriteString[sphenoLoop, 
        "Call EigenSystem(Real(mat2,dp),"<>Name<>"2_t,"<>  MixingName1 <>
          "1,ierr,test) \n \n \n"];
      WriteString[sphenoLoop, MixingName1<>"2 = "<>MixingName1<>"1 \n"];
      WriteString[sphenoLoop, "Else \n"];
      WriteString[sphenoLoop, 
        "Call EigenSystem(mat2,"<>Name<>"2_t,"<>  MixingName1 <>
          "2,ierr,test) \n \n \n"];
      WriteString[sphenoLoop, "End If \n"];
      WriteString[sphenoLoop, 
        MixingName1 <>"2 = Conjg("<>MixingName1<>"2) \n \n"];
      
      WriteString[sphenoLoop,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
      WriteString[sphenoLoop,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoLoop,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoLoop, "  ierr = 0 \n"];
      WriteString[sphenoLoop, "End If \n \n"];
      
      WriteString[sphenoLoop, 
        "mat2 = Matmul(Matmul( Conjg("<>MixingName1<>"2),mat1),Transpose( Conjg("<>
          MixingName2<>"2))) \n"];
      WriteString[sphenoLoop, "Do i1=1,"<>dimMatrix <>"\n"];
      WriteString[sphenoLoop, "phaseM = mat2(i1,i1) / Abs(mat2(i1,i1)) \n"];
      WriteString[sphenoLoop, 
        MixingName2<>"2(i1,:) = phaseM *"<>MixingName2<>"2(i1,:) \n "];
      WriteString[sphenoLoop, "End Do \n \n"];
      
      WriteString[sphenoLoop, MixingName1<>"_1L = "<>MixingName1<>"2 \n "];
      WriteString[sphenoLoop, MixingName2<>"_1L = "<>MixingName2<>"2 \n "];
      
      
      WriteString[sphenoLoop,"End Do  \n \n"];
      
      
      WriteString[sphenoLoop,"Iname = Iname -1 \n"];
      
      WriteString[sphenoLoop,"End Subroutine OneLoop"<>NameP <> "\n \n \n"];
      
      
      ];

WriteScalarProp[Name_,particle_,masses_,couplings_,contributions_]:=
    Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      MakeSubroutineTitle["Pi1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"kont","res"},sphenoLoop];
      
      dimString = ToString[getGenSPheno[particle]];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      WriteString[sphenoLoop, "Integer, Intent(inout) :: kont \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
      WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
      WriteString[sphenoLoop, 
        "Complex(dp), Intent(inout) :: res("<>dimString<>","<>dimString<>
          ") \n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumI("<>
          dimString<>","<>dimString<>") \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4,j1,j2,j3,j4, gO1, gO2, ierr \n \n \n"];
      WriteString[sphenoLoop,"res = 0._dp \n \n"];
      
      
      For[i=1,i\[LessEqual]Length[contributions],
        
        WriteString[sphenoLoop,"!------------------------ \n"];
        WriteString[sphenoLoop,
          "! "<> ToString[contributions[[i,1]]]<>", "<>  
            ToString[contributions[[i,2]]]<>" \n"];
        WriteString[sphenoLoop,"!------------------------ \n"];
        
        
        WriteString[sphenoLoop,"sumI = 0._dp \n \n"];
        
        
        type=contributions[[i,4]];
        If[type =!= SSVV && type =!= SSSS,
          dim1=getGenSPheno[contributions[[i,1]]];
          dim2=getGenSPheno[contributions[[i,2]]];
          
          
          If[dim1 > 1, 
            WriteString[sphenoLoop,
                "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
          
          If[dim2 > 1, 
            WriteString[sphenoLoop,
                "      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
          ind1=
            MakeIndicesCoupling[{AntiField[particle],
                  gO1},{contributions[[i,1]],i1},{contributions[[i,2]],
                  i2},(getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[2]]/. 
                    ToExpression[
                        "U"<>ToString[particle]]\[Rule]particle)][[1]];
          ind2=StringReplace[ind1,"gO1"->"gO2"];
          
          If[type===FFS || type===FFV,
            If[getType[contributions[[i,1]]]===F,
              m1 = SPhenoMass[contributions[[i,1]],i1];
              m12 = SPhenoMassSq[contributions[[i,1]],i1];
              m2 = SPhenoMass[contributions[[i,2]],i2];
              m22 = SPhenoMassSq[contributions[[i,2]],i2];,
              m2 = SPhenoMass[contributions[[i,1]],i1];
              m22 = SPhenoMassSq[contributions[[i,1]],i1];
              m1 = SPhenoMass[contributions[[i,2]],i2];
              m12 = SPhenoMassSq[contributions[[i,2]],i2];
              ];
            
            
            
            WriteString[sphenoLoop, 
              "G0m2 = Gloop(p2,"<>m12<>","<>m22<>") \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = -2._dp*"<>m1<>"*"<>m2<>"*B0(p2,"<>m12<>","<>m22<>
                ") \n"];
            WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
            WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
            
            WriteString[sphenoLoop,
              "coupL1 = " <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
            
            WriteString[sphenoLoop,
              "coupR1 = " <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
            
            WriteString[sphenoLoop,
              "coupL2 =  Conjg(" <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
            
            WriteString[sphenoLoop,
              "coupR2 =  Conjg(" <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
            
            WriteString[sphenoLoop,
              "    SumI(gO1,gO2) = (coupL1*coupL2+coupR1*coupR2)*G0m2 & \n"];
            WriteString[sphenoLoop,
              "                & + (coupL1*coupR2+coupR1*coupL2)*B0m2 \n"];
            WriteString[sphenoLoop,"   End Do \n"];
            WriteString[sphenoLoop,"End Do \n"];
            
            
            
            If[AntiField[particle]===particle,
              factor = 2 contributions[[i,6]]*contributions[[i,5]];,
              factor = contributions[[i,6]]*contributions[[i,5]];
              ];,
            
            
            ind1=MakeIndicesCoupling[{AntiField[particle],
                    gO1},{contributions[[i,1]],i1},{contributions[[i,2]],
                    i2},(getSPhenoCoupling[contributions[[i,3]],
                          SPhenoCouplingsLoop][[2]]/. 
                      ToExpression[
                          "U"<>ToString[particle]]\[Rule]particle)][[1]];
            ind2=StringReplace[ind1,"gO1"->"gO2"];
            
            
            If[getType[contributions[[i,1]]]===S,
              m1 = SPhenoMass[contributions[[i,1]],i1];
              m12 = SPhenoMassSq[contributions[[i,1]],i1];
              m2 = SPhenoMass[contributions[[i,2]],i2];
              m22 = SPhenoMassSq[contributions[[i,2]],i2];
              scalarpart=getBlank[contributions[[i,1]]];
              indexScalar=i1;,
              scalarpart=getBlank[contributions[[i,2]]];
              m2 = SPhenoMass[contributions[[i,1]],i1];
              m22 = SPhenoMassSq[contributions[[i,1]],i1];
              m1 = SPhenoMass[contributions[[i,2]],i2];
              m12 = SPhenoMassSq[contributions[[i,2]],i2];
              indexScalar=i2;
              ];
            
            
            Switch[type,
              SSV,
              
              If[FreeQ[GoldstoneGhost,particle]\[Equal]True ||  
                  FreeQ[GoldstoneGhost,scalarpart]\[Equal]True,
                	
                WriteString[sphenoLoop, 
                    "F0m2 = Floop(p2,"<>m12<>","<>m22<>") \n"];,
                	
                WriteString[sphenoLoop, 
                  "If ("<>ToString[indexScalar]<>".eq.1) Then \n"];
                	
                WriteString[sphenoLoop, 
                  "F0m2 = Floop(p2,0._dp,"<>m22<>") \n"];
                	WriteString[sphenoLoop, "Else \n"];
                	
                WriteString[sphenoLoop, 
                  "F0m2 = Floop(p2,"<>m12<>","<>m22<>") \n"];
                			WriteString[sphenoLoop, "End If \n"];
                ];
                 WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
                 
              WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
                 
              WriteString[sphenoLoop,
                "coup1 = " <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                 
              WriteString[sphenoLoop,
                "coup2 =  Conjg(" <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
                 
              WriteString[sphenoLoop,
                "    SumI(gO1,gO2) = coup1*coup2*F0m2 \n"];
                 WriteString[sphenoLoop,"   End Do \n"];
                 WriteString[sphenoLoop,"End Do \n"];
              If[conj[particle]===particle,
                factor =2*contributions[[i,6]]*contributions[[i,5]];,
                factor =contributions[[i,6]]*contributions[[i,5]];
                ];,
              SSS,
                 
              WriteString[sphenoLoop, 
                "B0m2 = B0(p2,"<>m12<>","<>m22<>") \n"];
                 WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
                 
              WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
                 
              WriteString[sphenoLoop,
                "coup1 = " <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                 
              WriteString[sphenoLoop,
                "coup2 = Conjg(" <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
                 
              WriteString[sphenoLoop,
                "    SumI(gO1,gO2) = coup1*coup2*B0m2 \n"];
                 WriteString[sphenoLoop,"   End Do \n"];
                 WriteString[sphenoLoop,"End Do \n"];
              If[conj[particle]===particle,
                factor =2*contributions[[i,6]]*contributions[[i,5]];,
                factor = contributions[[i,6]]*contributions[[i,5]];
                ];,
              SVV, 
                 
              WriteString[sphenoLoop, 
                "F0m2 = 7._dp/2._dp*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];
                 WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
                 
              WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
                 
              WriteString[sphenoLoop,
                "coup1 = " <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                
              WriteString[sphenoLoop,
                "coup2 =  Conjg(" <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
                 
              WriteString[sphenoLoop,
                "    SumI(gO1,gO2) = coup1*coup2*F0m2 \n"];
                 WriteString[sphenoLoop,"   End Do \n"];
                 WriteString[sphenoLoop,"End Do \n"];
              If[conj[particle]===particle,
                factor =2*contributions[[i,6]]*contributions[[i,5]];,
                factor = contributions[[i,6]]*contributions[[i,5]];
                ];
              ];
            ];
          
          If[Head[factor]===Integer,factor=1. factor;];
          factor = SPhenoForm[factor];
          
          WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
          If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
          If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];,
          
          
          If[FreeQ[massless,contributions[[i,1]]],
              dim1=getGenSPheno[contributions[[i,1]]];
              
              If[dim1 > 1, 
                WriteString[sphenoLoop,
                    "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
              
              m12 = SPhenoMassSq[contributions[[i,1]],i1] ;
              
              ind1=
                MakeIndicesCoupling[{particle,gO1},{particle,
                    gO2},{contributions[[i,1]],i1},{contributions[[i,2]],
                    i1},(getSPhenoCoupling[contributions[[i,3]],
                          SPhenoCouplingsLoop][[2]]/. 
                      ToExpression["U"<>ToString[particle]]\[Rule]particle)];
              
              Switch[type,
                SSVV,
                	  WriteString[sphenoLoop, "A0m2 = A0("<>m12<>")\n"];
                   
                WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
                  
                WriteString[sphenoLoop, 
                  "  Do gO2 = gO1, "<> dimString <>"\n"];
                
                WriteString[sphenoLoop,
                  "coup1 = " <>
                    ToString[
                      getSPhenoCoupling[contributions[[i,3]],
                          SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                   
                WriteString[sphenoLoop,"    SumI(gO1,gO2) = coup1*A0m2 \n"];
                WriteString[sphenoLoop,"   End Do \n"]; 
                   WriteString[sphenoLoop,"End Do \n"];
                factor = 4contributions[[i,6]]*contributions[[i,5]];,
                SSSS,
                	
                   WriteString[sphenoLoop, "A0m2 = A0("<>m12<>") \n"];
                   
                WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
                  
                WriteString[sphenoLoop, 
                  "  Do gO2 = gO1, "<> dimString <>"\n"]; 
                
                WriteString[sphenoLoop,
                  "coup1 = " <>
                    ToString[
                      getSPhenoCoupling[contributions[[i,3]],
                          SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                   
                WriteString[sphenoLoop,"    SumI(gO1,gO2) = -coup1*A0m2 \n"];
                  WriteString[sphenoLoop,"   End Do \n"];
                   WriteString[sphenoLoop,"End Do \n"];
                factor=contributions[[i,6]];
                ];
              
              
              If[Head[factor]===Integer,factor=1. factor;];
              
              factor = SPhenoForm[factor];
              
              
              
              WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
              If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
              ];
          ];
        
        i++;];
      
      WriteString[sphenoLoop,"\n\n"];
      
      WriteString[sphenoLoop, "Do gO2 = 1, "<> dimString <>"\n"];
      WriteString[sphenoLoop, "  Do gO1 = gO2+1, "<> dimString <>"\n"];
      WriteString[sphenoLoop,"     res(gO1,gO2) = Conjg(res(gO2,gO1))  \n"];
      WriteString[sphenoLoop,"   End Do \n"];
      WriteString[sphenoLoop,"End Do \n \n"];
      
      
      WriteString[sphenoLoop,"res = oo16pi2*res \n \n"];
      
      
      WriteString[sphenoLoop, "End Subroutine Pi1Loop"<>Name  <>" \n \n"];
      
      ];


WriteScalarPropSingle[Name_,particle_,masses_,couplings_,contributions_]:=
    Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      MakeSubroutineTitle["Pi1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"kont","res"},sphenoLoop];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      WriteString[sphenoLoop, "Integer, Intent(inout) :: kont \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
      WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
      WriteString[sphenoLoop, "Complex(dp), Intent(inout) :: res\n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumI \n"]\
;
      WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4,ierr \n \n \n"];
      WriteString[sphenoLoop,"res = 0._dp \n \n"];
      
      
      For[i=1,i\[LessEqual]Length[contributions],
        WriteString[sphenoLoop,"!------------------------ \n"];
        WriteString[sphenoLoop,
          "! "<> ToString[contributions[[i,1]]]<>", "<>  
            ToString[contributions[[i,2]]]<>" \n"];
        WriteString[sphenoLoop,"!------------------------ \n"];
        
        
        WriteString[sphenoLoop,"sumI = 0._dp \n \n"];
        
        
        type=contributions[[i,4]];
        If[type =!= SSVV && type =!= SSSS,
          dim1=getGenSPheno[contributions[[i,1]]];
          dim2=getGenSPheno[contributions[[i,2]]];
          
          
          If[dim1 > 1, 
            WriteString[sphenoLoop,
                "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
          
          If[dim2 > 1, 
            WriteString[sphenoLoop,
                "      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
          
          ind1=MakeIndicesCoupling[{AntiField[particle],
                  gO1},{contributions[[i,1]],i1},{contributions[[i,2]],
                  i2},(getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[2]]/. 
                    ToExpression["U"<>ToString[particle]]\[Rule]
                      particle)][[1]];
          ind2=StringReplace[ind1,"gO1"->"gO2"];
          
          If[type===FFS || type===FFV,
            If[getType[contributions[[i,1]]]===F,
              m1 = SPhenoMass[contributions[[i,1]],i1];
              m12 = SPhenoMassSq[contributions[[i,1]],i1];
              m2 = SPhenoMass[contributions[[i,2]],i2];
              m22 = SPhenoMassSq[contributions[[i,2]],i2];,
              m2 = SPhenoMass[contributions[[i,1]],i1];
              m22 = SPhenoMassSq[contributions[[i,1]],i1];
              m1 = SPhenoMass[contributions[[i,2]],i2];
              m12 = SPhenoMassSq[contributions[[i,2]],i2];
              ];
            
            
            
            WriteString[sphenoLoop, 
              "G0m2 = Gloop(p2,"<>m12<>","<>m22<>") \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = -2._dp*"<>m1<>"*"<>m2<>"*B0(p2,"<>m12<>","<>m22<>
                ") \n"];
            
            WriteString[sphenoLoop,
              "coupL1 = " <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
            
            WriteString[sphenoLoop,
              "coupR1 = " <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
            WriteString[sphenoLoop,
              "coupL2 =  Conjg(" <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
            
            WriteString[sphenoLoop,
              "coupR2 =  Conjg(" <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
            
            WriteString[sphenoLoop,
              "    SumI = (coupL1*coupL2+coupR1*coupR2)*G0m2 & \n"];
            
            WriteString[sphenoLoop,
              "                & + (coupL1*coupR2+coupR1*coupL2)*B0m2 \n"];
            If[conj[particle]===particle,
              factor =2*contributions[[i,6]]*contributions[[i,5]];,
              factor =contributions[[i,6]]*contributions[[i,5]];
              ];,
            
            
            ind1=MakeIndicesCoupling[{AntiField[particle],
                    gO1},{contributions[[i,1]],i1},{contributions[[i,2]],
                    i2},(getSPhenoCoupling[contributions[[i,3]],
                          SPhenoCouplingsLoop][[2]]/. 
                      ToExpression["U"<>ToString[particle]]\[Rule]
                        particle)][[1]];
            ind2=StringReplace[ind1,"gO1"->"gO2"];
            
            
            If[getType[contributions[[i,1]]]===S,
              m1 = SPhenoMass[contributions[[i,1]],i1];
              m12 = SPhenoMassSq[contributions[[i,1]],i1];
              m2 = SPhenoMass[contributions[[i,2]],i2];
              m22 = SPhenoMassSq[contributions[[i,2]],i2];,
              m2 = SPhenoMass[contributions[[i,1]],i1];
              m22 = SPhenoMassSq[contributions[[i,1]],i1];
              m1 = SPhenoMass[contributions[[i,2]],i2];
              m12 = SPhenoMassSq[contributions[[i,2]],i2];
              ];
            
            
            Switch[type,
              SSV,
                 
              WriteString[sphenoLoop, 
                "F0m2 = Floop(p2,"<>m12<>","<>m22<>") \n"];
                 
              WriteString[sphenoLoop,
                "coup1 = " <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                 
              WriteString[sphenoLoop,
                "coup2 =  Conjg(" <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
                 WriteString[sphenoLoop,"    SumI = coup1*coup2*F0m2 \n"];
              If[conj[particle]===particle,
                factor =2*contributions[[i,6]]*contributions[[i,5]];,
                factor =contributions[[i,6]]*contributions[[i,5]];
                ];,
              SSS,
                 
              WriteString[sphenoLoop, 
                "B0m2 = B0(p2,"<>m12<>","<>m22<>") \n"];
                 
              WriteString[sphenoLoop,
                "coup1 = " <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                 
              WriteString[sphenoLoop,
                "coup2 = Conjg(" <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
                 WriteString[sphenoLoop,"    SumI = coup1*coup2*B0m2 \n"];
              If[conj[particle]===particle,
                factor =2*contributions[[i,6]]*contributions[[i,5]];,
                factor =contributions[[i,6]]*contributions[[i,5]];
                ];,
              SVV, 
                 
              WriteString[sphenoLoop, 
                "F0m2 = 7._dp/2._dp*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];
                 
              WriteString[sphenoLoop,
                "coup1 = " <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                
              WriteString[sphenoLoop,
                "coup2 =  Conjg(" <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
                 WriteString[sphenoLoop,"    SumI = coup1*coup2*F0m2 \n"];
               If[conj[particle]===particle,
                factor =2*contributions[[i,6]]*contributions[[i,5]];,
                factor =contributions[[i,6]]*contributions[[i,5]];
                ];
              ];
            ];
          
          If[Head[factor]===Integer,factor=1. factor;];
          factor = SPhenoForm[factor];
          
          WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
          If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
          If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];,
          
          
          
          dim1=getGenSPheno[contributions[[i,1]]];
          
          If[dim1 > 1, 
            WriteString[sphenoLoop,
                "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
          
          
          m12 = SPhenoMassSq[contributions[[i,1]],i1] ;
          
          
          ind1=MakeIndicesCoupling[{particle,gO1},{particle,
                gO2},{contributions[[i,1]],i1},{contributions[[i,2]],
                i1},(getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[2]]/. 
                  ToExpression["U"<>ToString[particle]]\[Rule]particle)];
          
          Switch[type,
            SSVV,
            	  WriteString[sphenoLoop, "A0m2 = A0("<>m12<>")\n"];
            
            WriteString[sphenoLoop,
              "coup1 = " <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
               WriteString[sphenoLoop,"    SumI = coup1*A0m2 \n"];
            factor = 4contributions[[i,6]]*contributions[[i,5]];,
            SSSS,
            	
               WriteString[sphenoLoop, "A0m2 = A0("<>m12<>") \n"];
            
            WriteString[sphenoLoop,
              "coup1 = " <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
               WriteString[sphenoLoop,"    SumI = -coup1*A0m2 \n"];
            factor=1;
            ];
          
          
          If[Head[factor]===Integer,factor=1. factor;];
          
          factor = SPhenoForm[factor];
          
          
          
          WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
          If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
          
          ];
        
        i++;];
      
      WriteString[sphenoLoop,"\n\n"];
      
      WriteString[sphenoLoop,"res = oo16pi2*res \n \n"];
      
      
      WriteString[sphenoLoop, "End Subroutine Pi1Loop"<>Name  <>" \n \n"];
      
      ];




WriteFermionProp[Name_,particle_,masses_,couplings_,contributions_]:=
    Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      MakeSubroutineTitle["Sigma1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},
        sphenoLoop];
      
      dimString = ToString[getGenSPheno[particle]];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      WriteString[sphenoLoop, 
        "Complex(dp), Intent(out) :: SigL("<>dimString<>","<>dimString<>"),SigR("<>
          dimString<>","<>dimString<>"), SigS("<>dimString<>","<>dimString<>
          ") \n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumL("<>
          dimString<>","<>dimString<>"), sumR("<>dimString<>","<>dimString<>"), sumS("<>
          dimString<>","<>dimString<>") \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
      WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];
      
      WriteString[sphenoLoop,"SigL = Cmplx(0._dp,0._dp,dp) \n"];
      WriteString[sphenoLoop,"SigR = Cmplx(0._dp,0._dp,dp) \n"];
      WriteString[sphenoLoop,"SigS = Cmplx(0._dp,0._dp,dp) \n \n"];
      
      For[i=1,i\[LessEqual]Length[contributions],
        WriteString[sphenoLoop,"!------------------------ \n"];
        WriteString[sphenoLoop,
          "! "<> ToString[contributions[[i,1]]]<>", "<>  
            ToString[contributions[[i,2]]]<>" \n"];
        WriteString[sphenoLoop,"!------------------------ \n"];
        
        
        
        type=contributions[[i,4]];
        
        dim1=getGenSPheno[contributions[[i,1]]];
        dim2=getGenSPheno[contributions[[i,2]]];
        
        
        
        If[dim1 > 1, 
          WriteString[sphenoLoop,
              "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
        If[dim2 > 1, 
          WriteString[sphenoLoop,
              "      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
        WriteString[sphenoLoop,"SumS = 0._dp \n"];
        WriteString[sphenoLoop,"sumR = 0._dp \n"];
        WriteString[sphenoLoop,"sumL = 0._dp \n"];
        
        
        
        
        
        ind1=
          MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],
                i1},{contributions[[i,2]],
                i2},(getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[2]]/. 
                  ToExpression[
                      "U"<>ToString[particle]]\[Rule]particle)][[1]];
        ind2=StringReplace[ind1,"gO1"->"gO2"];
        
        
        If[getType[contributions[[i,1]]]===F,
          m1 = SPhenoMass[contributions[[i,1]],i1];
          m12 = SPhenoMassSq[contributions[[i,1]],i1];
          m2 = SPhenoMass[contributions[[i,2]],i2];
          m22 = SPhenoMassSq[contributions[[i,2]],i2];,
          m2 = SPhenoMass[contributions[[i,1]],i1];
          m22 = SPhenoMassSq[contributions[[i,1]],i1];
          m1 = SPhenoMass[contributions[[i,2]],i2];
          m12 = SPhenoMassSq[contributions[[i,2]],i2];
          ];
        
        
        WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
        WriteString[sphenoLoop, "  Do gO2 = 1, "<> dimString <>"\n"];
        
        If[type ===FFS,
          
          WriteString[sphenoLoop, 
            "B1m2 = -1._dp*B1(p2,"<>m12<>","<>m22<>") \n"];
          
          WriteString[sphenoLoop, 
            "B0m2 = 2._dp*"<>m1<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
          
          WriteString[sphenoLoop,
            "coupL1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupR1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupL2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
          
          WriteString[sphenoLoop,
            "coupR2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
          WriteString[sphenoLoop,"SumS(gO1,gO2) = coupR1*coupL2*B0m2 \n"];
          WriteString[sphenoLoop,"sumR(gO1,gO2) = coupR1*coupR2*B1m2 \n"];
          WriteString[sphenoLoop,"sumL(gO1,gO2) = coupL1*coupL2*B1m2 \n"];,
          
          WriteString[sphenoLoop, 
            "B1m2 = -2._dp*B1(p2,"<>m12<>","<>m22<>") \n"];
          
          WriteString[sphenoLoop, 
            "B0m2 = -8._dp*"<>m1<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
          
          WriteString[sphenoLoop,
            "coupL1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupR1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupL2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
          
          WriteString[sphenoLoop,
            "coupR2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
          WriteString[sphenoLoop,"SumS(gO1,gO2) = coupL1*coupR2*B0m2 \n"];
          WriteString[sphenoLoop,"sumR(gO1,gO2) = coupL1*coupL2*B1m2 \n"];
          WriteString[sphenoLoop,"sumL(gO1,gO2) = coupR1*coupR2*B1m2 \n"];
          ];
        
        WriteString[sphenoLoop,"   End Do \n"];
        WriteString[sphenoLoop,"End Do \n"];
        
        factor = contributions[[i,6]]*contributions[[i,5]];
        
        If[Head[factor]===Integer, factor=1. factor;];
        
        factor=SPhenoForm[factor];
        
        WriteString[sphenoLoop,"SigL = SigL +"<>factor<>"* sumL\n"];
        WriteString[sphenoLoop,"SigR = SigR +"<>factor<>"* sumR \n"];
        WriteString[sphenoLoop,"SigS = SigS +"<>factor<>"* sumS \n"];
        
        If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
        If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];
        
        
        i++;];
      
      WriteString[sphenoLoop,"\n\n"];
      
      WriteString[sphenoLoop,"SigL = oo16pi2*SigL \n \n"];
      WriteString[sphenoLoop,"SigR = oo16pi2*SigR \n \n"];
      WriteString[sphenoLoop,"SigS = oo16pi2*SigS \n \n"];
      
      
      
      
      WriteString[sphenoLoop, "End Subroutine Sigma1Loop"<>Name  <>" \n \n"];
      
      ];

WriteFermionPropSingle[Name_,particle_,masses_,couplings_,contributions_]:=
    Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      MakeSubroutineTitle["Sigma1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"sig"},sphenoLoop];
      
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      WriteString[sphenoLoop, "Complex(dp), Intent(out) :: Sig \n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumS,sumR,sumL \n"]\
;
      WriteString[sphenoLoop, 
        "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
      WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];
      
      WriteString[sphenoLoop,"Sig = Cmplx(0._dp,0._dp,dp) \n"];
      
      For[i=1,i\[LessEqual]Length[contributions],
        WriteString[sphenoLoop,"!------------------------ \n"];
        WriteString[sphenoLoop,
          "! "<> ToString[contributions[[i,1]]]<>", "<>  
            ToString[contributions[[i,2]]]<>" \n"];
        WriteString[sphenoLoop,"!------------------------ \n"];
        
        
        
        type=contributions[[i,4]];
        
        dim1=getGenSPheno[contributions[[i,1]]];
        dim2=getGenSPheno[contributions[[i,2]]];
        
        
        
        If[dim1 > 1, 
          WriteString[sphenoLoop,
              "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
        If[dim2 > 1, 
          WriteString[sphenoLoop,
              "      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
        WriteString[sphenoLoop,"SumR = 0._dp \n"];
        WriteString[sphenoLoop,"SumL = 0._dp \n"];
        WriteString[sphenoLoop,"SumS = 0._dp \n"];
        
        
        ind1=
          MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],
                i1},{contributions[[i,2]],
                i2},(getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[2]]/. 
                  ToExpression["U"<>ToString[particle]]\[Rule]
                    particle)][[1]];
        ind2=StringReplace[ind1,"gO1"->"gO2"];
        
        If[getType[contributions[[i,1]]]===F,
          m1 = SPhenoMass[contributions[[i,1]],i1];
          m12 = SPhenoMassSq[contributions[[i,1]],i1];
          m2 = SPhenoMass[contributions[[i,2]],i2];
          m22 = SPhenoMassSq[contributions[[i,2]],i2];,
          m2 = SPhenoMass[contributions[[i,1]],i1];
          m22 = SPhenoMassSq[contributions[[i,1]],i1];
          m1 = SPhenoMass[contributions[[i,2]],i2];
          m12 = SPhenoMassSq[contributions[[i,2]],i2];
          ];
        
        
        If[type ===FFS,
          
          WriteString[sphenoLoop, 
            "B1m2 = -1._dp*B1(p2,"<>m12<>","<>m22<>") \n"];
          
          WriteString[sphenoLoop, 
            "B0m2 = -2._dp*"<>m1<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
          
          WriteString[sphenoLoop,
            "coupL1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupR1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupL2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
          
          WriteString[sphenoLoop,
            "coupR2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
          WriteString[sphenoLoop,"SumS = coupR1*coupL2*B0m2 \n"];
          WriteString[sphenoLoop,"sumR = coupR1*coupR2*B1m2 \n"];
          WriteString[sphenoLoop,"sumL = coupL1*coupL2*B1m2 \n"];,
          
          WriteString[sphenoLoop, 
            "B1m2 = -2._dp*B1(p2,"<>m12<>","<>m22<>") \n"];
          
          WriteString[sphenoLoop, 
            "B0m2 = -8._dp*"<>m1<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
          WriteString[sphenoLoop,
            "coupL1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupR1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupL2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
          
          WriteString[sphenoLoop,
            "coupR2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
          WriteString[sphenoLoop,"SumS = coupL1*coupR2*B0m2 \n"];
          WriteString[sphenoLoop,"sumR = coupL1*coupL2*B1m2 \n"];
          WriteString[sphenoLoop,"sumL = coupR1*coupR2*B1m2 \n"];
          ];
        
        
        factor = contributions[[i,6]]*contributions[[i,5]];
        
        If[Head[factor]===Integer, factor=1. factor;];
        
        factor=SPhenoForm[factor];
        
        WriteString[sphenoLoop,
          "Sig = Sig +"<>factor<>"*(sumS + "<>ToString[SPhenoMass[particle]]<>
            "*(sumL+sumR))\n"];
        
        If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
        If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];
        
        
        i++;];
      
      WriteString[sphenoLoop,"\n\n"];
      
      WriteString[sphenoLoop,"Sig = oo16pi2*Sig \n \n"];
      
      WriteString[sphenoLoop, "End Subroutine Sigma1Loop"<>Name  <>" \n \n"];
      
      ];

WriteFermionPropNonSymm[Name_,particle_,masses_,couplings_,contributions_,
      setOnShell_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      MakeSubroutineTitle["Sigma1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},
        sphenoLoop];
      
      dimString = ToString[getGenSPheno[particle]];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      WriteString[sphenoLoop, 
        "Complex(dp), Intent(out) :: SigL("<>dimString<>","<>dimString<>"),SigR("<>
          dimString<>","<>dimString<>"), SigS("<>dimString<>","<>dimString<>
          ") \n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumL("<>
          dimString<>","<>dimString<>"), sumR("<>dimString<>","<>dimString<>"), sumS("<>
          dimString<>","<>dimString<>") \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
      WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];
      
      WriteString[sphenoLoop,"SigL = Cmplx(0._dp,0._dp,dp) \n"];
      WriteString[sphenoLoop,"SigR = Cmplx(0._dp,0._dp,dp) \n"];
      WriteString[sphenoLoop,"SigS = Cmplx(0._dp,0._dp,dp) \n \n"];
      
      For[i=1,i\[LessEqual]Length[contributions],
        WriteString[sphenoLoop,"!------------------------ \n"];
        WriteString[sphenoLoop,
          "! "<> ToString[contributions[[i,1]]]<>", "<>  
            ToString[contributions[[i,2]]]<>" \n"];
        WriteString[sphenoLoop,"!------------------------ \n"];
        
        
        
        type=contributions[[i,4]];
        
        dim1=getGenSPheno[contributions[[i,1]]];
        dim2=getGenSPheno[contributions[[i,2]]];
        
        
        
        If[dim1 > 1, 
          WriteString[sphenoLoop,
              "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
        If[dim2 > 1, 
          WriteString[sphenoLoop,
              "      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
        WriteString[sphenoLoop,"SumS = 0._dp \n"];
        WriteString[sphenoLoop,"sumR = 0._dp \n"];
        WriteString[sphenoLoop,"sumL = 0._dp \n"];
        
        
        
        
        
        ind1=
          MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],
                i1},{contributions[[i,2]],
                i2},(getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[2]]/. 
                  ToExpression[
                      "U"<>ToString[particle]]\[Rule]particle)][[1]];
        ind2=StringReplace[ind1,"gO1"->"gO2"];
        
        If[getType[contributions[[i,1]]]===F,
          m1 = SPhenoMass[contributions[[i,1]],i1];
          m12 = SPhenoMassSq[contributions[[i,1]],i1];
          m2 = SPhenoMass[contributions[[i,2]],i2];
          m22 = SPhenoMassSq[contributions[[i,2]],i2];,
          m2 = SPhenoMass[contributions[[i,1]],i1];
          m22 = SPhenoMassSq[contributions[[i,1]],i1];
          m1 = SPhenoMass[contributions[[i,2]],i2];
          m12 = SPhenoMassSq[contributions[[i,2]],i2];
          ];
        
        WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
        WriteString[sphenoLoop, "  Do gO2 = 1, "<> dimString <>"\n"];
        
        If[type ===FFS,
          If[setOnShell\[Equal]False,
            
            WriteString[sphenoLoop, 
              "B1m2 = -0.5_dp*Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = "<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];,
            WriteString[sphenoLoop, "If(gO1.eq.gO2) Then \n"];
            
            WriteString[sphenoLoop, 
              "B1m2 = -0.5_dp*Real(B1("<>SPhenoMassSq[particle,gO1]<>","<>m12<>
                ","<>m22<>"),dp) \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = "<>m1<>"*Real(B0("<>SPhenoMassSq[particle,gO1]<>","<>
                m12<>","<>m22<>"),dp) \n"];
            WriteString[sphenoLoop, "Else \n"];
            
            WriteString[sphenoLoop, 
              "B1m2 = -0.5_dp*Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = "<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];
            WriteString[sphenoLoop, "End If \n"];
            ];
          
          WriteString[sphenoLoop,
            "coupL1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupR1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupL2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
          
          WriteString[sphenoLoop,
            "coupR2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
          WriteString[sphenoLoop,"SumS(gO1,gO2) = coupR1*coupL2*B0m2 \n"];
          WriteString[sphenoLoop,"sumR(gO1,gO2) = coupR1*coupR2*B1m2 \n"];
          WriteString[sphenoLoop,"sumL(gO1,gO2) = coupL1*coupL2*B1m2 \n"];,
          
          If[setOnShell\[Equal]False,
            
            WriteString[sphenoLoop, 
              "B1m2 = - Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = -4._dp*"<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>
                "),dp) \n"];,
            WriteString[sphenoLoop, "If(gO1.eq.gO2) Then \n"];
            
            WriteString[sphenoLoop, 
              "B1m2 = - Real(B1("<>SPhenoMassSq[particle,gO1]<>","<>m12<>","<>
                m22<>"),dp) \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = -4._dp*"<>m1<>"*Real(B0("<>SPhenoMassSq[particle,gO1]<>","<>
                m12<>","<>m22<>"),dp) \n"];
            WriteString[sphenoLoop, "Else \n"];
            
            WriteString[sphenoLoop, 
              "B1m2 = - Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = -4._dp*"<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>
                "),dp) \n"];
            WriteString[sphenoLoop, "End If \n"];
            ];
          
          WriteString[sphenoLoop,
            "coupL1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupR1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupL2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
          
          WriteString[sphenoLoop,
            "coupR2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
          WriteString[sphenoLoop,"SumS(gO1,gO2) = coupL1*coupR2*B0m2 \n"];
          WriteString[sphenoLoop,"sumR(gO1,gO2) = coupL1*coupL2*B1m2 \n"];
          WriteString[sphenoLoop,"sumL(gO1,gO2) = coupR1*coupR2*B1m2 \n"];
          ];
        
        WriteString[sphenoLoop,"   End Do \n"];
        WriteString[sphenoLoop,"End Do \n"];
        
        factor = contributions[[i,6]]*contributions[[i,5]];
        If[Head[factor]===Integer,factor=1. factor;];
        factor = SPhenoForm[factor];
        
        WriteString[sphenoLoop,"SigL = SigL +"<>factor<>"* sumL\n"];
        WriteString[sphenoLoop,"SigR = SigR +"<>factor<>"* sumR \n"];
        WriteString[sphenoLoop,"SigS = SigS +"<>factor<>"* sumS \n"];
        
        If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
        If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];
        
        
        i++;];
      
      WriteString[sphenoLoop,"SigL = oo16pi2*SigL \n \n"];
      WriteString[sphenoLoop,"SigR = oo16pi2*SigR \n \n"];
      WriteString[sphenoLoop,"SigS = oo16pi2*SigS \n \n"];
      
      
      
      
      WriteString[sphenoLoop, "End Subroutine Sigma1Loop"<>Name  <>" \n \n"];
      
      ];

WriteFermionPropNonSymmSingle[Name_,particle_,masses_,couplings_,
      contributions_]:=
    Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      MakeSubroutineTitle["Sigma1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"sig"},sphenoLoop];
      
      dimString = ToString[getGenSPheno[particle]];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      WriteString[sphenoLoop, "Complex(dp), Intent(out) :: Sig \n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumL, sumR, sumS \n"]\
;
      WriteString[sphenoLoop, 
        "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
      WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];
      
      WriteString[sphenoLoop,"Sig = Cmplx(0._dp,0._dp,dp) \n"];
      
      For[i=1,i\[LessEqual]Length[contributions],
        WriteString[sphenoLoop,"!------------------------ \n"];
        WriteString[sphenoLoop,
          "! "<> ToString[contributions[[i,1]]]<>", "<>  
            ToString[contributions[[i,2]]]<>" \n"];
        WriteString[sphenoLoop,"!------------------------ \n"];
        
        
        
        type=contributions[[i,4]];
        
        dim1=getGenSPheno[contributions[[i,1]]];
        dim2=getGenSPheno[contributions[[i,2]]];
        
        
        
        If[dim1 > 1, 
          WriteString[sphenoLoop,
              "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
        If[dim2 > 1, 
          WriteString[sphenoLoop,
              "      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
        WriteString[sphenoLoop,"SumS = 0._dp \n"];
        WriteString[sphenoLoop,"sumR = 0._dp \n"];
        WriteString[sphenoLoop,"sumL = 0._dp \n"];
        
        
        
        
        
        ind1=
          MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],
                i1},{contributions[[i,2]],
                i2},(getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[2]]/. 
                  ToExpression[
                      "U"<>ToString[particle]]\[Rule]particle)][[1]];
        ind2=StringReplace[ind1,"gO1"->"gO2"];
        
        
        If[getType[contributions[[i,1]]]===F,
          m1 = SPhenoMass[contributions[[i,1]],i1];
          m12 = SPhenoMassSq[contributions[[i,1]],i1];
          m2 = SPhenoMass[contributions[[i,2]],i2];
          m22 = SPhenoMassSq[contributions[[i,2]],i2];,
          m2 = SPhenoMass[contributions[[i,1]],i1];
          m22 = SPhenoMassSq[contributions[[i,1]],i1];
          m1 = SPhenoMass[contributions[[i,2]],i2];
          m12 = SPhenoMassSq[contributions[[i,2]],i2];
          ];
        
        
        If[type ===FFS,
          
          WriteString[sphenoLoop, 
            "B1m2 = -0.5_dp*Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
          
          WriteString[sphenoLoop, 
            "B0m2 = "<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];
          
          WriteString[sphenoLoop,
            "coupL1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupR1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupL2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
          
          WriteString[sphenoLoop,
            "coupR2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
          WriteString[sphenoLoop,"SumS = coupR1*coupL2*B0m2 \n"];
          WriteString[sphenoLoop,"sumR = coupR1*coupR2*B1m2 \n"];
          WriteString[sphenoLoop,"sumL = coupL1*coupL2*B1m2 \n"];,
          
          WriteString[sphenoLoop, 
            "B1m2 = - Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
          
          WriteString[sphenoLoop, 
            "B0m2 = -4._dp*"<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];
          
          WriteString[sphenoLoop,
            "coupL1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupR1 = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
          
          WriteString[sphenoLoop,
            "coupL2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
          
          WriteString[sphenoLoop,
            "coupR2 =  Conjg(" <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
          WriteString[sphenoLoop,"SumS = coupL1*coupR2*B0m2 \n"];
          WriteString[sphenoLoop,"sumR = coupL1*coupL2*B1m2 \n"];
          WriteString[sphenoLoop,"sumL = coupR1*coupR2*B1m2 \n"];
          ];
        
        
        factor =SPhenoForm[1. contributions[[i,6]]*contributions[[i,5]]];
        
        WriteString[sphenoLoop,
          "Sig = Sig +"<>factor<>"*(sumS + "<>ToString[SPhenoMass[particle]]<>
            "*(sumL+sumR))\n"];
        
        If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
        If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];
        
        
        i++;];
      
      WriteString[sphenoLoop,"\n\n"];
      
      WriteString[sphenoLoop,"Sig = oo16pi2*Sig \n \n"];
      
      
      
      
      WriteString[sphenoLoop, "End Subroutine Sigma1Loop"<>Name  <>" \n \n"];
      
      ];

WriteHeaderLoopMasses:=Block[{i,dim,dim2},
      WriteString[sphenoLoop,"Module LoopMasses_"<>ModelName<>" \n \n"];
      WriteString[sphenoLoop,"Use Control \n"];
      WriteString[sphenoLoop,"Use Couplings_"<>ModelName<>" \n"];
      WriteString[sphenoLoop,"Use LoopFunctions \n"];
      WriteString[sphenoLoop,"Use Mathematics \n"];
      WriteString[sphenoLoop,"Use MathematicsQP \n"];
      WriteString[sphenoLoop,"Use Model_Data_"<>ModelName<>" \n"];
      WriteString[sphenoLoop,"Use StandardModel \n"];
      WriteString[sphenoLoop,"Use SusyMasses_"<>ModelName<>" \n \n"];
      
      If[UseHiggs2LoopMSSM\[Equal]True,
        WriteString[sphenoLoop,"Use TwoLoopHiggsMass_SARAH \n \n"];
        ];
      
      For[i=1,i\[LessEqual]Length[ListTree],
        dim="("<>ToString[Length[ListTree[[i,3]]]]<>")";
        dim2=
          "("<>ToString[Length[ListTree[[i,3]]]]<>","<>
            ToString[Length[ListTree[[i,3]]]]<>")";
        If[Length[ListTree[[i,2]]]\[Equal]0,
          
          WriteString[sphenoLoop,
            "Real(dp), Private :: "<>ToString[ListTree[[i,1]]] <>"_1L"<>dim<>", "<>
              ToString[ListTree[[i,1]]] <>"2_1L"<>dim<>"  \n"];
          
          WriteString[sphenoLoop,
            "Complex(dp), Private :: "<>ToString[ListTree[[i,2]]] <>"_1L"<>
              dim2<>"  \n"];,
          
          WriteString[sphenoLoop,
            "Real(dp), Private :: "<>ToString[ListTree[[i,1]]] <>"_1L"<>dim<>", "<>
              ToString[ListTree[[i,1]]] <>"2_1L"<>dim<>"  \n"];
          
          WriteString[sphenoLoop,
            "Complex(dp), Private :: "<>ToString[ListTree[[i,2,1]]] <>"_1L"<>
              dim2<>","<>ToString[ListTree[[i,2,2]]] <>"_1L"<>dim2<>"\n"];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listNotMixedMasses],
        If[listNotMixedMasses[[i,4]]=!=0,
          If[Length[Dimensions[listNotMixedMasses[[i,5]]]]\[Equal]2,
            dim="("<>ToString[Length[listNotMixedMasses[[i,5]]]]<>")";,
            dim="";
            ];
          
          WriteString[sphenoLoop,
            "Real(dp), Private :: "<>listNotMixedMasses[[i,2]] <>"_1L"<>dim<>", "<>
              listNotMixedMasses[[i,2]]  <>"2_1L"<>dim<>"  \n"];
          ];
        i++;];
      
      
      WriteString[sphenoLoop,"Logical::SPA_Convention \n"];
      
      WriteString[sphenoLoop,"Contains \n \n"];
      
      ];

WriteLoopTadpole[Lvevs_,particle_,masses_,couplings_,contributions_]:=
    Block[{i,jj,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      
      Print["Subroutien for 1 Loop Tadpoles: ", Lvevs];
      
      
      MakeSubroutineTitle["OneLoopTadpoles"<>ToString[particle],
        Flatten[{Lvevs,masses,couplings}],{},{"tadpoles"},sphenoLoop];
      
      dimString=ToString[Length[Lvevs]];
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      MakeVariableList[Lvevs,", Intent(in)",sphenoLoop];
      WriteString[sphenoLoop, "Integer :: i1,i2, gO1, gO2 \n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: coupL, coupR, coup, temp, res, A0m, sumI("<>dimString<> 
          ")  \n"];
      WriteString[sphenoLoop, "Real(dp) :: m1 \n"];
      WriteString[sphenoLoop, 
        "Complex(dp), Intent(out) :: tadpoles("<>dimString<> ") \n"];
      
      WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
      WriteString[sphenoLoop, 
        "NameOfUnit(Iname) = 'OneLoopTadpoles"<>ToString[particle]<>
          "'\n \n"];
      
      WriteString[sphenoLoop,"tadpoles = 0._dp \n \n"];
      
      For[i=1,i\[LessEqual]Length[contributions],
        WriteString[sphenoLoop,"!------------------------ \n"];
        WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>" \n"];
        WriteString[sphenoLoop,"!------------------------ \n"];
        
        
        type=contributions[[i,4]];
        dim=getGenSPheno[contributions[[i,1]]];
        
        If[dim > 1, 
          WriteString[sphenoLoop,"Do i1 = 1, "<> ToString[dim] <> "\n "];];
        
        ind1=
          MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],
                i1},{contributions[[i,2]],
                i1},(getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[2]]/. 
                  ToExpression["U"<>ToString[particle]]\[Rule]
                    particle)][[1]];
        
        m1 = SPhenoMass[contributions[[i,1]],i1];
        m12=SPhenoMassSq[contributions[[i,1]],i1];
        
        Switch[type,
          SVV,
          	WriteString[sphenoLoop, "A0m = 3._dp*A0("<>m12<>") \n"];
          	WriteString[sphenoLoop, "  Do gO1 = 1, "<> dimString <>"\n"];
          	
          WriteString[sphenoLoop,
            "    coup = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          	WriteString[sphenoLoop,"    sumI(gO1) = coup*A0m \n"];
          	WriteString[sphenoLoop,"  End Do \n \n"];,
          SSS,
          	WriteString[sphenoLoop, "A0m = A0("<>m12<>") \n"];
          	WriteString[sphenoLoop, "  Do gO1 = 1, "<> dimString <>"\n"];
          	
          WriteString[sphenoLoop,
            "   coup = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          	WriteString[sphenoLoop,"   sumI(gO1) = -coup*A0m \n"];
          	WriteString[sphenoLoop,"  End Do \n \n"];,
          FFS,
          	WriteString[sphenoLoop, "A0m = 4._dp*"<>m1<>"*A0("<>m12<>") \n"];
          	WriteString[sphenoLoop, "  Do gO1 = 1, "<> dimString <>"\n"];
          	
          WriteString[sphenoLoop,
            "   coup = " <>
              ToString[
                getSPhenoCoupling[contributions[[i,3]],
                    SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
          	WriteString[sphenoLoop,"   sumI(gO1) = coup*A0m \n"];
          	WriteString[sphenoLoop,"  End Do \n \n"];
          ];
        
        factor = 2*contributions[[i,6]]*contributions[[i,5]];
        
        If[Head[factor]===Integer,factor=1. factor;];
        factor = SPhenoForm[factor];
        
        WriteString[sphenoLoop,
          "tadpoles =  tadpoles + "<>factor<>"*sumI \n"];
        
        If[dim > 1, WriteString[sphenoLoop,"End Do \n "];];
        i++;];
      
      
      WriteString[sphenoLoop,"\n\n\n"];
      
      For[i=1,i\[LessEqual]Length[Lvevs],
         WriteString[sphenoLoop,
          "tadpoles("<>ToString[i] <>") = oo16pi2*tadpoles("<>ToString[i] <>
            ") \n"]; 
        i++;];
      
      
      WriteString[sphenoLoop, "Iname = Iname - 1 \n"];
      WriteString[sphenoLoop,
        "End Subroutine OneLoopTadpoles"<>ToString[particle]<>" \n \n"];
      
      
      ];

WriteVectorPropSingle[Name_,particle_,masses_,couplings_,contributions_]:=
    Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      MakeSubroutineTitle["Pi1Loop"<>Name,
        Flatten[{masses,couplings}],{"p2"},{"kont","res"},sphenoLoop];
      
      WriteString[sphenoLoop, "Implicit None \n"];
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      WriteString[sphenoLoop, "Integer, Intent(inout) :: kont \n"];
      WriteString[sphenoLoop, 
        "Real(dp) :: B0m2, F0m2, G0m2, B1m2, H0m2, B22m2, m1, m2 \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
      WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
      WriteString[sphenoLoop, "Complex(dp), Intent(inout) :: res \n"];
      WriteString[sphenoLoop, 
        "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumI \n"]\
;
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];
      WriteString[sphenoLoop,"res = 0._dp \n \n"];
      
      For[i=1,i\[LessEqual]Length[contributions],
        If[type =!= VVVV && type =!= SSVV,
          WriteString[sphenoLoop,"!------------------------ \n"];
          
          WriteString[sphenoLoop,
            "! "<> ToString[contributions[[i,1]]]<>", "<>  
              ToString[contributions[[i,2]]]<>" \n"];
          WriteString[sphenoLoop,"!------------------------ \n"];
          
          
          WriteString[sphenoLoop,"sumI = 0._dp \n \n"];
          ];
        
        type=contributions[[i,4]];
        If[type =!= VVVV && type =!= SSVV,
          dim1=getGenSPheno[contributions[[i,1]]];
          dim2=getGenSPheno[contributions[[i,2]]];
          
          
          If[dim1 > 1, 
            WriteString[sphenoLoop,
                "    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
          
          If[dim2 > 1, 
            WriteString[sphenoLoop,
                "      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
          
          ind1=MakeIndicesCoupling[{AntiField[particle],
                  gO1},{contributions[[i,1]],i1},{contributions[[i,2]],
                  i2},(getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[2]]/. 
                    ToExpression[
                        "U"<>ToString[particle]]\[Rule]particle)][[1]];
          ind2=StringReplace[ind1,"gO1"->"gO2"];
          
          If[type===FFV,
            
            If[getType[contributions[[i,1]]]===F,
              m1 = SPhenoMass[contributions[[i,1]],i1];
              m12 = SPhenoMassSq[contributions[[i,1]],i1];
              m2 = SPhenoMass[contributions[[i,2]],i2];
              m22 = SPhenoMassSq[contributions[[i,2]],i2];,
              m2 = SPhenoMass[contributions[[i,1]],i1];
              m22 = SPhenoMassSq[contributions[[i,1]],i1];
              m1 = SPhenoMass[contributions[[i,2]],i2];
              m12 = SPhenoMassSq[contributions[[i,2]],i2];
              ];
            
            
            
            WriteString[sphenoLoop, 
              "H0m2 = Hloop(p2,"<>m12<>","<>m22<>") \n"];
            
            WriteString[sphenoLoop, 
              "B0m2 = 4._dp*"<>m1<>"*"<>m2<>"*B0(p2,"<>m12<>","<>m22<>
                ") \n"];
            
            WriteString[sphenoLoop,
              "coupL1 = " <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
            
            WriteString[sphenoLoop,
              "coupR1 = " <>
                ToString[
                  getSPhenoCoupling[contributions[[i,3]],
                      SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
            
            WriteString[sphenoLoop,
              "    SumI = (Abs(coupL1)**2+Abs(coupR1)**2)*H0m2 & \n"];
            
            WriteString[sphenoLoop,
              "                & + (Real(Conjg(coupL1)*coupR1,dp))*B0m2 \n"];
            If[conj[particle]===particle,
              
              factor = 
                  SPhenoForm[2.*contributions[[i,6]]*contributions[[i,5]]];,
              
              factor = 
                  SPhenoForm[1.*contributions[[i,6]]*contributions[[i,5]]];
              ];,
            
            
            ind1=MakeIndicesCoupling[{AntiField[particle],
                    gO1},{contributions[[i,1]],i1},{contributions[[i,2]],
                    i2},(getSPhenoCoupling[contributions[[i,3]],
                          SPhenoCouplingsLoop][[2]]/. 
                      ToExpression["U"<>ToString[particle]]\[Rule]
                        particle)][[1]];
            ind2=StringReplace[ind1,"gO1"->"gO2"];
            
            If[getType[contributions[[i,1]]]===V,
              m1 = SPhenoMass[contributions[[i,1]],i1];
              m12 = SPhenoMassSq[contributions[[i,1]],i1];
              m2 = SPhenoMass[contributions[[i,2]],i2];
              m22 = SPhenoMassSq[contributions[[i,2]],i2];,
              m2 = SPhenoMass[contributions[[i,1]],i1];
              m22 = SPhenoMassSq[contributions[[i,1]],i1];
              m1 = SPhenoMass[contributions[[i,2]],i2];
              m12 = SPhenoMassSq[contributions[[i,2]],i2];
              ];
            
            
            Switch[type,
              SSV,
                 
              WriteString[sphenoLoop, 
                "B22m2 = -4._dp*B22(p2,"<>m12<>","<>m22<>") \n"];
                 
              WriteString[sphenoLoop,
                "coup1 = " <>
                  ToString[
                    getSPhenoCoupling[contributions[[i,3]],
                        SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                 WriteString[sphenoLoop,"    SumI = Abs(coup1)**2*B22m2 \n"];
                 If[conj[particle]===particle,
                
                factor = 
                    SPhenoForm[
                      2.*contributions[[i,6]]*contributions[[i,5]]];,
                
                factor = 
                    SPhenoForm[1.*contributions[[i,6]]*contributions[[i,5]]];
                ];,
              VVV,
              
              If[FreeQ[massless,contributions[[i,1]]]\[Equal]True && 
                  FreeQ[massless,contributions[[i,2]]]\[Equal]True,
                
                WriteString[sphenoLoop, 
                  "B0m2 = - (4._dp*p2+"<>m12<>" +"<>m22<>" )*B0(p2,"<>m12<>","<>
                    m22<>") - 8._dp*B22(p2,"<>m12<>","<>m22<>") \n"];
                
                WriteString[sphenoLoop,
                  "coup1 = " <>
                    ToString[
                      getSPhenoCoupling[contributions[[i,3]],
                          SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                WriteString[sphenoLoop,"    SumI = Abs(coup1)**2*B0m2 \n"];,
                
                WriteString[sphenoLoop, 
                  "B0m2 = - 4._dp*p2*B0(p2,"<>m12<>","<>m22<>") - 8._dp*B22(p2,"<>
                    m12<>","<>m22<>") \n"];
                
                WriteString[sphenoLoop,
                  "coup1 = " <>
                    ToString[
                      getSPhenoCoupling[contributions[[i,3]],
                          SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                WriteString[sphenoLoop,"    SumI = Abs(coup1)**2*B0m2 \n"];
                ];
              If[conj[particle]===particle,
                
                factor = 
                    SPhenoForm[
                      2.*contributions[[i,6]]*contributions[[i,5]]];,
                
                factor = 
                    SPhenoForm[1.*contributions[[i,6]]*contributions[[i,5]]];
                ];,
              SVV, 
              
              If[FreeQ[massless,contributions[[i,1]]]\[Equal]True && 
                    FreeQ[massless,contributions[[i,2]]]\[Equal]True,
                     
                  WriteString[sphenoLoop, 
                    "B0m2 = B0(p2,"<>m12<>","<>m22<>") \n"];
                     
                  WriteString[sphenoLoop,
                    "coup1 = " <>
                      ToString[
                        getSPhenoCoupling[contributions[[i,3]],
                            SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                     
                  WriteString[sphenoLoop,"    SumI = Abs(coup1)**2*B0m2 \n"];
                   If[conj[particle]===particle,
                    
                    factor = 
                        SPhenoForm[
                          2.*contributions[[i,6]]*contributions[[i,5]]];,
                    
                    factor = 
                        SPhenoForm[
                          1.*contributions[[i,6]]*contributions[[i,5]]];
                    ]; 
                  ];
              ];
            ];
          
          
          WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
          If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
          If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];,
          
          
          
          dim1=getGenSPheno[contributions[[i,1]]];
          ];
        
        i++;];
      
      WriteString[sphenoLoop,"res = oo16pi2*res \n \n"];
      
      
      WriteString[sphenoLoop, "End Subroutine Pi1Loop"<>Name  <>" \n \n"];
      
      ];

WriteLoopMassSingle[Name_,particle_,parameters_,masses_,couplings_,
      contributions_, tree_,addTad_]:=
    Block[{i2,i3,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
      
      Print["Subroutine for 1 Loop Correction of ", Name];
      
      If[addTad\[Equal]True,
        MakeSubroutineTitle["OneLoop"<>Name,
            Flatten[{parameters,masses,couplings}],{},{"Tad1Loop","delta","mass",
              "mass2","kont"},sphenoLoop];,
        MakeSubroutineTitle["OneLoop"<>Name,
            Flatten[{parameters,masses,couplings}],{},{"delta","mass","mass2",
              "kont"},sphenoLoop];
        ];
      
      MakeVariableList[masses,", Intent(in)",sphenoLoop];
      MakeVariableList[parameters,", Intent(in)",sphenoLoop];
      MakeVariableList[couplings,", Intent(in)",sphenoLoop];
      
      WriteString[sphenoLoop, "Integer , Intent(inout):: kont \n"];
      WriteString[sphenoLoop, 
        "Integer :: i1,i2,i3,i4,j1,j2,j3,j4,il,i_count, ierr \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(in) :: delta \n"];
      WriteString[sphenoLoop, "Real(dp) :: mi, mi2, p2, test_m2 \n"];
      WriteString[sphenoLoop, "Complex(dp) :: PiSf, sig \n"];
      WriteString[sphenoLoop, "Real(dp), Intent(out) :: mass, mass2 \n"];
      
      If[addTad\[Equal]True,
        WriteString[sphenoLoop, 
            "Complex(dp), Intent(in) ::  Tad1Loop("<>ToString[Length[TEqu]]<>
              ") \n"];
        ];
      
      WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
      WriteString[sphenoLoop, 
        "NameOfUnit(Iname) = '"<>"OneLoop"<> Name<>"'\n \n"];
      
      If[getType[particle]===F,
        WriteString[sphenoLoop, 
            "mi = "<>ToString[SPhenoMass[particle]] <>" \n"];,
        WriteString[sphenoLoop, 
            "mi2 = "<>ToString[SPhenoMassSq[particle]] <>" \n"];
        ];
      
      WriteString[sphenoLoop, "\n \n"];
      
      WriteString[sphenoLoop, 
        "p2 = "<>ToString[SPhenoMassSq[particle]]<> "\n"];
      
      If[getType[particle]===F,
        WriteString[sphenoLoop, "sig = ZeroC \n"];
        MakeCall["Sigma1Loop"<>Name,
          Flatten[{masses,couplings}],{"p2"},{"sig"},sphenoLoop];
        WriteString[sphenoLoop,"mass = mi - sig \n"];
        WriteString[sphenoLoop,"mass2= mass**2 \n"];,
        WriteString[sphenoLoop, "PiSf = ZeroC \n"];
        MakeCall["Pi1Loop"<>Name,
          Flatten[{masses,couplings}],{"p2"},{"kont","PiSf"},sphenoLoop];
        If[getType[particle]===S,
          WriteString[sphenoLoop,"mass2 = mi2 - Real(PiSf,dp) \n"];,
          WriteString[sphenoLoop,"mass2 = mi2 + Real(PiSf,dp) \n"];
          ];
        WriteString[sphenoLoop,"mass = sqrt(mass2) \n"];
        ];
      
      WriteString[sphenoLoop,"i_count = 0 \n"];
      WriteString[sphenoLoop,"Do  \n"];
      WriteString[sphenoLoop,"i_count = i_count + 1 \n"];
      WriteString[sphenoLoop,"test_m2 = mass2 \n"];
      
      WriteString[sphenoLoop, "p2 =  mass2 \n"];
      
      If[getType[particle]===F,
        WriteString[sphenoLoop, "sig = ZeroC \n"];
        MakeCall["Sigma1Loop"<>Name,
          Flatten[{masses,couplings}],{"p2"},{"sig"},sphenoLoop];
        WriteString[sphenoLoop,"mass = mi - sig \n"];
        WriteString[sphenoLoop,"mass2= mass**2 \n"];,
        WriteString[sphenoLoop, "PiSf = ZeroC \n"];
        MakeCall["Pi1Loop"<>Name,
          Flatten[{masses,couplings}],{"p2"},{"kont","PiSf"},sphenoLoop];
        If[getType[particle]===S,
          WriteString[sphenoLoop,"mass2 = mi2 - Real(PiSf,dp) \n"];,
          WriteString[sphenoLoop,"mass2 = mi2 + Real(PiSf,dp) \n"];
          ];
        WriteString[sphenoLoop,"mass = sqrt(mass2) \n"];
        ];
      
      
      
      WriteString[sphenoLoop," If (test_m2.Ne.0._dp) Then \n"];
      WriteString[sphenoLoop,
        "    test_m2 = Abs(test_m2 - mass2) / test_m2 \n"];
      WriteString[sphenoLoop," Else \n"];
      WriteString[sphenoLoop,"    test_m2 = Abs(mass2) \n"];
      WriteString[sphenoLoop," End If \n"];
      WriteString[sphenoLoop," If (mass2.Ge.0._dp) Then \n"];
      WriteString[sphenoLoop,"    mass = sqrt(mass2) \n"];
      WriteString[sphenoLoop,"  Else \n"];
      (* WriteString[sphenoLoop,"   If (ErrorLevel.Ge.0) Then \n"]; *)
      
      WriteString[sphenoLoop,
        "     Write(ErrCan,*) 'Warning from routine'//NameOfUnit(Iname) \n"];
      WriteString[sphenoLoop,
        "     Write(ErrCan,*) 'in the calculation of the masses' \n"];
      WriteString[sphenoLoop,
        "     Write(ErrCan,*) 'occurred a negative mass squared!' \n"];
      (* WriteString[sphenoLoop,
            "     If (ErrorLevel.Eq.2) Call TerminateProgram \n"]; *)
      
      WriteString[sphenoLoop,"   SignOfMassChanged = .True. \n"];
      (* WriteString[sphenoLoop,"   End If \n"];
        WriteString[sphenoLoop,"   kont = -301 \n"]; *)
      
      WriteString[sphenoLoop,"   mass = 0._dp \n"];
      WriteString[sphenoLoop,"  End If \n"];
      
      WriteString[sphenoLoop,"If (test_m2.LT.0.1_dp*delta) Exit \n"];
      WriteString[sphenoLoop,"If (i_count.Gt.30) Then \n"];
      WriteString[sphenoLoop,
        "  Write(*,*) \"Problem in \"//NameOfUnit(Iname), test_m2, mass2 \n"];\

      WriteString[sphenoLoop,"  kont = -510 \n"];
      WriteString[sphenoLoop,"  Call AddError(510) \n"];
      WriteString[sphenoLoop," Exit \n"];
      WriteString[sphenoLoop,"End If \n"];
      WriteString[sphenoLoop,"End Do \n \n \n"];
      
      
      WriteString[sphenoLoop,"Iname = Iname -1 \n"];
      
      WriteString[sphenoLoop,"End Subroutine OneLoop"<>Name <> "\n \n \n"];
      
      
      
      
      ];



WriteShiftTadpoleSolution[file_]:=Block[{i},
      For[i=1,i\[LessEqual]Length[SubSolutionsTadpolesLoop],
        WriteString[file,
          FortranLineBreak[
              SPhenoForm[SubSolutionsTadpolesLoop[[i,1]]]<>" = " <> 
                SPhenoForm[SubSolutionsTadpolesLoop[[i,2]]],5]  <> "\n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[SquaredParametersTadpoles],
        WriteString[file,
          "If ("<>ToString[SquaredParametersTadpoles[[i,1]]]<>
            ".Lt.0._dp) Then \n"];
        WriteString[file,     
          SPhenoForm[SquaredParametersTadpoles[[i,1]]]<>" = 10000._dp  \n"];
        WriteString[file,      
          SPhenoForm[SquaredParametersTadpoles[[i,2]]]<>" = "<>
            SPhenoForm[SquaredParametersTadpoles[[i,3]]] <>"* 100._dp  \n"];
        WriteString[file,      "SignOfMassChanged = .True.  \n"];
        WriteString[file,"End If \n"];
        i++;];
      
      ];


WriteTadpoleSolution[file_]:=Block[{i},
      For[i=1,i\[LessEqual]Length[SubSolutionsTadpolesTree],
        WriteString[file,
          FortranLineBreak[
              SPhenoForm[SubSolutionsTadpolesTree[[i,1]]]<>" = " <> 
                SPhenoForm[SubSolutionsTadpolesTree[[i,2]]],5]  <> "\n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[SquaredParametersTadpoles],
        WriteString[file,
          "If ("<>ToString[SquaredParametersTadpoles[[i,1]]]<>
            ".Lt.0._dp) Then \n"];
        WriteString[file,      
          "Write(*,*) \"No consisten solution found for tadpoles: \" \n"];
        WriteString[file,      
          "Write(*,*) \"Negative absolute squared: ,"<>ToString[
              SquaredParametersTadpoles[[i,1]]]<>" \"   \n"];
        WriteString[file,      
          "Write(*,*) \"Result: \","<>ToString[
              SquaredParametersTadpoles[[i,1]]]<>" \n"];
        WriteString[file,     
          SPhenoForm[SquaredParametersTadpoles[[i,1]]]<>" = 10000._dp  \n"];
        WriteString[file,      
          SPhenoForm[SquaredParametersTadpoles[[i,2]]]<>" = "<>
            SPhenoForm[SquaredParametersTadpoles[[i,3]]] <>"* 100._dp  \n"];
        WriteString[file,      "SignOfMassChanged = .True.  \n"];
        WriteString[file,"End If \n"];
        i++;];
      
      ];

WriteTadpoleSolutionZero[file_]:=Block[{i},
      For[i=1,i\[LessEqual]Length[SubSolutionsTadpolesTree],
          
          WriteString[file,
            FortranLineBreak[
              SPhenoForm[SubSolutionsTadpolesTree[[i,1]]]<>" = 0._dp \n"]];
          i++;];
      
      ];


SetGoldstoneMasses[file_]:=Block[{i},
      For[i=1,i\[LessEqual]Length[GoldstoneGhost],
          
          WriteString[file,
            SPhenoMass[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>
              SPhenoMass[GoldstoneGhost[[i,1]],i] <>"\n" ];
          
          WriteString[file,
            SPhenoMassSq[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>
              SPhenoMassSq[GoldstoneGhost[[i,1]],i] <>"\n" ];
          i++;];
      ];

