(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

GenerateSPhenoTreeMasses[Eigenstates_]:=Block[{i, currentRegime, readRegime},
      Print["----------------------------------------------"];
      Print["Writing Routines for Tree Level-Masses"];
      Print["----------------------------------------------"];
      
       
      $sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}];
      (* CreateDirectory[$sarahCurrentSPhenoDir]; *)
      
      sphenoTree=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,
            "SusyMasses_"<>ModelName<>".f90"]];
      
      listRGEparameters = listAllParameters;
      
      If[IntermediateScale ===True && Head[HeavyFields]=!=List,
        WriteCalcTreeMassesDummy;,
        
        InitSPhenoTreeMasses[Eigenstates];
        
        If[IntermediateScale =!=True,
          WriteSusyMassesHeader;
          ];
        
        WriteCalcAllTreeMasses;
        
        If[IntermediateScale =!=True,
          WriteMassRoutines; 
          WriteCalcAllTreeMassesSM;
          ];
        
        If[IntermediateScale =!= True && Head[RegimeNr]===Integer,
          currentRegime = "Regime-"<>ToString[RegimeNr];
          For[i=1,i<RegimeNr,
            readRegime = "Regime-"<>ToString[i];
            
            AppendSourceCode[
              ToFileName[
                StringReplace[$sarahCurrentSPhenoDir,{currentRegime\[Rule]
                      readRegime,
                    ToString[EigenstateName]\[Rule]
                      ToString[ListOfRegimeEigenstates[[i]]]}],
                "SusyMasses_"<>ModelName<>".f90"],sphenoTree];
            i++;];
          ];
        
        If[IntermediateScale =!= True,
          
          WriteString[sphenoTree, 
              "End Module SusyMasses_"<>ModelName<>" \n \n"];
          ];
        ];
      
      Close[sphenoTree];
      
      ];

InitSPhenoTreeMasses[Eigenstates_]:=Block[{i, type,massMatrixTemp},
      
      Print["Getting needed Information"]; 
      
      mixTree=DEFINITION[Eigenstates][MatterSector];
      massesTree = MassMatricesFull[Eigenstates];
      parDef=ParticleDefinitions[Eigenstates];
      paraDef=ParameterDefinitions;
      listNotMixedMasses=ListUnmixed[Eigenstates];
      
      NewMassParameters={};
      NewMassParametersSM={};
      NewMasses = {};
      ExistingParameters = Transpose[parameters][[1]];
      ListTree = Table[{},{Length[massesTree]}];
      ListMassES={};
      ListMixingMat={};
      
      For[i=1,i\[LessEqual]Length[massesTree],
        If[Length[mixTree[[i,2,1]]]== 2,
          currentName =  mixTree[[i,2,1,1]] /.diracSubBack1 /.diracSubBack2;,
          currentName = mixTree[[i,2,1]] /.diracSubBack1 /.diracSubBack2;
          ];
        
        If[
          IntermediateScale=!=True || 
            FreeQ[HeavyFields,currentName]\[Equal]False,
          If[Length[mixTree[[i,2,1]]]== 2,
            CurrentMass = ToExpression[SPhenoMass[mixTree[[i,2,1,1]]]];
            CurrentMass2 = ToExpression[SPhenoMassSq[mixTree[[i,2,1,1]]]];
            
            CurrentNameSP = {ToExpression[SPhenoForm[mixTree[[i,2,1,2]]]],
                ToExpression[SPhenoForm[mixTree[[i,2,2,2]]]]};
            currentName= mixTree[[i,2,1,1]] /.diracSubBack1 /.diracSubBack2;
            typeMass=FermionMassNonSymm;
            mixParameter1=mixTree[[i,2,1,2]];
            mixParameter2=mixTree[[i,2,2,2]];,
            
            CurrentMass=ToExpression[SPhenoMass[mixTree[[i,2,1]]]];
            CurrentMass2=ToExpression[SPhenoMassSq[mixTree[[i,2,1]]]];
            CurrentNameSP = mixTree[[i,2,2]];
            currentName = mixTree[[i,2,1]] /.diracSubBack1 /.diracSubBack2;
            mixParameter1=mixTree[[i,2,2]];
            mixParameter2 = None;
            If[getTypeOld[mixTree[[i,1,1]]]===S,
              typeMass=ScalarMass;,
              typeMass=FermionMassSymm;
              ];
            
            ];
          
          
          ListTree[[i]]=
            Join[ListTree[[i]],{ToString[CurrentMass],CurrentNameSP,
                massesTree[[i]],typeMass}];
          pos=Position[parDef,currentName ];
          If[pos=!={},
            
            ListMassES=
                Join[ListMassES,{{currentName ,ToString[CurrentMass],
                      PDG /. Extract[parDef,pos[[1,1]]][[2]]}}];,
            
            ListMassES=
                Join[ListMassES,{{currentName ,ToString[CurrentMass],PDG}}];
            ];
          
          pos=Position[paraDef,mixParameter1];
          If[pos=!={},
            
            ListMixingMat=
                Join[ListMixingMat,{{mixParameter1,
                      LesHouches /. Extract[paraDef,pos[[1,1]]][[2]] }}];
            ];
          
          If[mixParameter2=!=None,
            pos=Position[paraDef,mixParameter2];
            If[pos=!={},
              
              ListMixingMat=
                  Join[ListMixingMat,{{mixParameter2,
                        LesHouches /. Extract[paraDef,pos[[1,1]]][[2]] }}];
              ];
            ];
          
          
          SPhenoParameters = 
            Join[SPhenoParameters,{{CurrentMass,{generation},{Length[
                      massesTree[[i]]]}},{CurrentMass2,{generation},{Length[
                      massesTree[[i]]]}}}];
          
          parameters = 
            Join[parameters,{{CurrentMass,{generation},{Length[
                      massesTree[[i]]]}},{CurrentMass2,{generation},{Length[
                      massesTree[[i]]]}}}];
          If[mixParameter2=!=None,
            
            NewMassParameters = 
              Join[NewMassParameters,{CurrentMass,CurrentMass2,mixParameter1,
                  mixParameter2}];
            
            NewMasses = 
              Join[NewMasses,{{CurrentMass,Length[massesTree[[i]]]}}];
            If[FreeQ[SMParticles,currentName]\[Equal]False,
              
              NewMassParametersSM = 
                  Join[NewMassParametersSM,{CurrentMass,CurrentMass2,
                      mixParameter1,mixParameter2}];
              ];,
            
            NewMassParameters = 
              Join[NewMassParameters,{CurrentMass,CurrentMass2,
                  mixParameter1}];
            If[FreeQ[SMParticles,currentName]\[Equal]False,
              
              NewMassParametersSM = 
                  Join[NewMassParametersSM,{CurrentMass,CurrentMass2,
                      mixParameter1}];
              ];
            
            NewMasses = 
              Join[NewMasses,{{CurrentMass,Length[massesTree[[i]]]}}];
            ];
          realVar=Join[realVar,{CurrentMass,CurrentMass2}];
          
          
          invP={};
          For[j=1,j\[LessEqual]Length[parameters],
            If[FreeQ[massesTree[[i]],parameters[[j,1]]]\[Equal]False,
              invP=Join[invP,{parameters[[j,1]]}];
              ];
            j++;];
          ListTree[[i]]=Join[ListTree[[i]],{invP,CurrentMass,CurrentMass2}];
          ];
        i++;];
      
      
      ListTree = DeleteCases[ListTree,{}];
      
      For[i=1,i\[LessEqual]Length[listNotMixedMasses],
        If[listNotMixedMasses[[i,4]]=!=0,
          CurrentMass= SPhenoMass[listNotMixedMasses[[i,1]]];
          CurrentMass2= SPhenoMassSq[listNotMixedMasses[[i,1]]];
          
          
          NewMassParameters = 
            Join[NewMassParameters,{CurrentMass,CurrentMass2}];
          
          NewMasses = 
            Join[NewMasses,{{CurrentMass,
                  getGenSPheno[listNotMixedMasses[[i,1]]]}}];
          realVar = Join[realVar,{CurrentMass,CurrentMass2}];
          
          SPhenoParameters = 
            Join[SPhenoParameters,{{CurrentMass,{generation},{getGenSPheno[
                      listNotMixedMasses[[i,
                          1]]]}},{CurrentMass2,{generation},{getGenSPheno[
                      listNotMixedMasses[[i,1]]]}}}];
          
          parameters = 
            Join[parameters,{{CurrentMass,{generation},{getGenSPheno[
                      listNotMixedMasses[[i,
                          1]]]}},{CurrentMass2,{generation},{getGenSPheno[
                      listNotMixedMasses[[i,1]]]}}}];
          ];
        i++;];
      
      If[Head[Head[DEFINITION[Eigenstates][Phases]]]=!=DEFINITION,
        For[i=1,i\[LessEqual]Length[DEFINITION[Eigenstates][Phases]],
            
            NewMassParameters = 
              Join[NewMassParameters,{DEFINITION[Eigenstates][Phases][[i,
                      2]]}];
            i++;];
        ];
      
      ExistingParameters = Complement[ExistingParameters,NewMassParameters];
      ];


WriteSusyMassesHeader :=Block[{},
      
      Print["Writing Header"];
      
      
      WriteString[sphenoTree, "Module SusyMasses_"<>ModelName<>" \n \n"];
      WriteString[sphenoTree, "Use Control \n"];
      WriteString[sphenoTree, "Use Mathematics \n"];
      WriteString[sphenoTree, "Use MathematicsQP \n"];
      WriteString[sphenoTree, "Use Model_Data_"<>ModelName<>" \n"];
      WriteString[sphenoTree, "!Use StandardModel \n \n \n"];
      
      WriteString[sphenoTree, "Logical :: SignOfMassChanged =.False.  \n"];
      WriteString[sphenoTree, 
        "Logical :: RotateNegativeFermionMasses =.True. \n \n \n"];
      
      WriteString[sphenoTree, "Contains \n \n"];
      
      
      
      ];

WriteCalcAllTreeMasses:=Block[{i2},
      
      Print["Writing Routine for Calculating all Masses"];
      
      subCouplingsSPheno={};
      For[i2=1,i2\[LessEqual]4,
        subCouplingsSPheno=
          Join[subCouplingsSPheno,(subValue[i2,1] /. subIndFinal[i2,i2])];
        i2++;];
      
      If[IntermediateScale === True,
        MakeSubroutineTitle["TreeMassesRegime"<>ToString[RegimeNr],
            Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing",
              "kont"},sphenoTree];,
        MakeSubroutineTitle["TreeMasses",
            Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing",
              "kont"},sphenoTree];
        ];
      
      WriteString[sphenoTree, "Implicit None \n \n"];
      
      
      MakeVariableList[listAllParameters,",Intent(in)",sphenoTree];
      MakeVariableList[NewMassParameters,",Intent(inout)",sphenoTree];
      MakeVariableList[listVEVs,",Intent(in)",sphenoTree];
      If[NewNumericalDependences=!={},
        MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",
            sphenoTree];
        ];
      
      WriteString[sphenoTree,"Logical, Intent(in) :: GenerationMixing \n"];
      WriteString[sphenoTree,"Integer, Intent(inout) :: kont \n"];
      
      WriteString[sphenoTree,"Integer :: i1,i2,i3,i4,j1,j2,j3,kontSave \n"];
      
      
      WriteString[sphenoTree, "Iname = Iname + 1 \n"];
      WriteString[sphenoTree, "NameOfUnit(Iname) = 'TreeMasses" <>Modelname,
        "'\n \n"];
      WriteString[sphenoTree, "kont = 0 \n"];
      
      For[i=1,i\[LessEqual]Length[NewNumericalDependences],
        WriteString[sphenoTree, 
          SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> 
            SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
        i++;];
      
       For[i=1,i\[LessEqual]Length[ListTree],
        If[FreeQ[GoldstoneGhost,ListMassES[[i,1]]]\[Equal]False,
          WriteString[sphenoTree, "kontSave = kont \n"];
          ];
        Switch[ListTree[[i,4]],
          ScalarMass,
          
          MakeCall["Calculate"<>ListTree[[i,1]],
              Flatten[{ListTree[[i,5]],ListTree[[i,2]],ListTree[[i,6]],
                  ListTree[[i,7]]}],{},{"kont"},sphenoTree];,
          FermionMassSymm,
          MakeCall["Calculate"<>ListTree[[i,1]],
            Flatten[{ListTree[[i,5]],ListTree[[i,2]],
                ListTree[[i,6]]}],{},{"kont"},sphenoTree];
          
          WriteString[sphenoTree,
            ToString[ListTree[[i,7]]] <>" = "<>ToString[ListTree[[i,6]]]  <>
              "**2 \n"];,
          FermionMassNonSymm,
          MakeCall["Calculate"<>ListTree[[i,1]],
            Flatten[{ListTree[[i,5]],ListTree[[i,2,1]],ListTree[[i,2,2]],
                ListTree[[i,6]]}],{},{"kont"},sphenoTree]; 
          
          WriteString[sphenoTree,
            ToString[ListTree[[i,7]]] <>" = "<>ToString[ListTree[[i,6]]]  <>
              "**2 \n"];
          ];
        
        If[FreeQ[GoldstoneGhost,ListMassES[[i,1]]]\[Equal]False,
          WriteString[sphenoTree, "kont = kontSave \n"];
          ];
        i++;];
      
      WriteString[sphenoTree, "\n \n "];
      
      Print["Write other Tree-Level Masses"];
      
      For[i=1,i\[LessEqual]Length[listNotMixedMasses],
        If[getType[listNotMixedMasses[[i,1]]]===F,
          If[Length[Dimensions[listNotMixedMasses[[i,5]]]]\[Equal]2,
              
              WriteString[sphenoTree,
                "Do i1=1,"<>ToString[
                    getGenSPheno[listNotMixedMasses[[i,1]]]] <>"\n"];
              If[FreeQ[listNotMixedMasses[[i,4]],sum],
                
                WriteString[sphenoTree,
                    SPhenoMass[listNotMixedMasses[[i,1]],i1] <>"= "<>
                      SPhenoForm[
                        listNotMixedMasses[[i,4]] /. {gt1\[Rule]i1, 
                            gt2\[Rule]i1} ]  <>" \n"];,
                
                MakeSPhenoCoupling[
                    listNotMixedMasses[[i,4]] /. {gt1\[Rule]i1, 
                        gt2\[Rule]i1} ,
                    SPhenoMass[listNotMixedMasses[[i,1]],i1],sphenoTree];
                ];
              
              WriteString[sphenoTree,
                SPhenoMassSq[listNotMixedMasses[[i,1]],i1] <>"= "<>
                  SPhenoMass[listNotMixedMasses[[i,1]],i1] <>"**2 \n"];
              WriteString[sphenoTree,"End Do \n \n"];,
              If[listNotMixedMasses[[i,4]]=!=0,
                  If[FreeQ[listNotMixedMasses[[i,4]],sum],
                    
                    WriteString[sphenoTree,
                        ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]<>" = "<>
                          SPhenoForm[
                            listNotMixedMasses[[i,
                                    4]] /.NewNumericalDependencesSub /. 
                              subCouplingsSPheno]  <>" \n"];,
                    
                    MakeSPhenoCoupling[
                        listNotMixedMasses[[i,
                                4]]  /.NewNumericalDependencesSub /. 
                          subCouplingsSPheno ,
                        ToString[SPhenoMass[listNotMixedMasses[[i,1]]]],
                        sphenoTree];
                    ];
                  
                  
                  If[FreeQ[ParticlePhases,
                        listNotMixedMasses[[i,1]]]\[Equal]False,
                    
                    pos = Position[ParticlePhases,
                          listNotMixedMasses[[i,1]]][[1,1]];
                    
                    WriteString[sphenoTree,
                      SPhenoForm[ParticlePhases[[pos,2]]] <> " = Abs("<>
                        ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]  <>")/"<>
                        ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]  <>
                        "\n"];
                    ];
                  
                  
                  
                  WriteString[sphenoTree,
                    ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]<>" = Abs("<>
                      ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]  <>
                      ") \n"];
                  
                  WriteString[sphenoTree,
                    ToString[SPhenoMassSq[listNotMixedMasses[[i,1]]]]<>" = "<>
                      ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]  <>
                      "**2 \n"];
                  ];
              ];,
          If[Length[Dimensions[listNotMixedMasses[[i,5]]]]\[Equal]2,
              
              WriteString[sphenoTree,
                "Do i1=1,"<>ToString[
                    getGenSPheno[listNotMixedMasses[[i,1]]]] <>"\n"];
              If[FreeQ[listNotMixedMasses[[i,4]],sum],
                
                WriteString[sphenoTree,
                    SPhenoMassSq[listNotMixedMasses[[i,1]],i1] <>"= "<>
                      SPhenoForm[
                        listNotMixedMasses[[i,4]] /. {gt1\[Rule]i1, 
                            gt2\[Rule]i1} ]  <>" \n"];,
                
                MakeSPhenoCoupling[
                    listNotMixedMasses[[i,4]] /. {gt1\[Rule]i1, 
                        gt2\[Rule]i1} ,
                    SPhenoMassSq[listNotMixedMasses[[i,1]],i1],sphenoTree];
                ];
              
              WriteString[sphenoTree,
                SPhenoMass[listNotMixedMasses[[i,1]],i1] <>"= sqrt("<>
                  SPhenoMassSq[listNotMixedMasses[[i,1]],i1] <>") \n"];
              WriteString[sphenoTree,"End Do \n \n"];,
              If[listNotMixedMasses[[i,4]]=!=0,
                  If[FreeQ[listNotMixedMasses[[i,4]],sum],
                    
                    WriteString[sphenoTree,
                        ToString[SPhenoMassSq[listNotMixedMasses[[i,1]]]]<>" = "<>
                          SPhenoForm[
                            listNotMixedMasses[[i,
                                    4]] /.NewNumericalDependencesSub \
/.subCouplingsSPheno]  <>" \n"];,
                    
                    MakeSPhenoCoupling[
                        listNotMixedMasses[[i,
                                4]]  /.NewNumericalDependencesSub /. 
                          subCouplingsSPheno ,
                        ToString[SPhenoMassSq[listNotMixedMasses[[i,1]]]],
                        sphenoTree];
                    ];
                  
                  WriteString[sphenoTree,
                    ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]<>" = sqrt("<>
                      ToString[SPhenoMassSq[listNotMixedMasses[[i,1]]]]  <>
                      ") \n"];
                  ];
              ];
          ];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[GoldstoneGhost],
        WriteString[sphenoTree,
          SPhenoMass[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>
            SPhenoMass[GoldstoneGhost[[i,1]],i] <>"\n" ];
        WriteString[sphenoTree,
          SPhenoMassSq[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>
            SPhenoMassSq[GoldstoneGhost[[i,1]],i] <>"\n" ];
        i++;];
      
      
      WriteString[sphenoTree, "Iname = Iname - 1 \n \n"];
      If[IntermediateScale === True,
        
        WriteString[sphenoTree, "Contains \n \n"];
        WriteMassRoutines; 
        WriteString[sphenoTree, 
          "End Subroutine  TreeMassesRegime"<>ToString[RegimeNr]<>
            " \n \n \n"];,
        WriteString[sphenoTree, "End Subroutine  TreeMasses \n \n \n"];
        ];
      
      
      ];



WriteCalcAllTreeMassesDummy:=Block[{i2},
      
      Print["Writing Routine for Calculating all Masses"];
      
      
      MakeSubroutineTitle[
        "TreeMassesRegime"<>ToString[RegimeNr],{},{},{"GenerationMixing",
          "kont"},sphenoTree];
      
      WriteString[sphenoTree, "Implicit None \n \n"];
      WriteString[sphenoTree, "! Nothing to do\n \n"];
      
      WriteString[sphenoTree, 
        "End Subroutine  TreeMassesRegime"<>ToString[RegimeNr]<>" \n \n \n"];
      
      ];

WriteMassRoutines :=Block[{},
      For[i=1,i\[LessEqual]Length[ListTree],
          Print["Writing Subroutine for Calculating ",ListTree[[i,1]]];
          Switch[ListTree[[i,4]],
            ScalarMass,
            WriteTreeMassFunctionScalar[ListTree[[i,1]],ListMassES[[i,1]], 
                ToString[ListTree[[i,2]]], ListTree[[i,3]],ListTree[[i,5]]];,
            FermionMassSymm,
            WriteTreeMassFunctionFermionSymm[ListTree[[i,1]], 
                ToString[ListTree[[i,2]]], ListTree[[i,3]],ListTree[[i,5]]];,
            FermionMassNonSymm,
            WriteTreeMassFunctionFermionNonSymm[ListTree[[i,1]], 
                ToString[ListTree[[i,2,1]]],ToString[ListTree[[i,2,2]]], 
                ListTree[[i,3]],ListTree[[i,5]]];
            ];
          i++;];
      
      ];

WriteTreeMassFunctionScalar[Name_,particle_,MixingName_,MatrixFunction_,
      Parameters_]:=Block[{i2,i3,pos},
      
      MakeSubroutineTitle["Calculate"<>Name,
        Parameters,{},{MixingName,Name,Name<>"2","kont"},sphenoTree];
      
      MakeVariableList[Parameters,", Intent(in)",sphenoTree];
      WriteString[sphenoTree, "Integer, Intent(inout) :: kont \n"];
      WriteString[sphenoTree, "Integer :: i1,i2,i3,i4, ierr \n"];
      WriteString[sphenoTree,"Integer :: j1,j2,j3,j4 \n"];
      
      dimMatrix = ToString[Dimensions[MatrixFunction][[1]]];
      WriteString[sphenoTree, 
        "Real(dp), Intent(out) :: "<> Name <>"("<>dimMatrix <>"), " ];
      WriteString[sphenoTree,  Name <>"2("<>dimMatrix <>") \n" ];
      
      If[FreeQ[realVar,ToExpression[MixingName]],
        WriteString[sphenoTree, 
          "Complex(dp), Intent(out) :: "<> MixingName<>"("<>dimMatrix <>","<>
            dimMatrix <>") \n \n"];
        WriteString[sphenoTree, 
          "Complex(dp) :: mat"<>"("<>dimMatrix<>","<>dimMatrix<>")  \n\n"];,
        WriteString[sphenoTree, 
          "Real(dp), Intent(out) :: "<> MixingName<>"("<>dimMatrix <>","<>
            dimMatrix <>") \n \n"];
        WriteString[sphenoTree, 
          "Real(dp) :: mat"<>"("<>dimMatrix<>","<>dimMatrix<>")  \n\n"];
        ];
      
      WriteString[sphenoTree, "Real(dp) ::  test(2) \n\n"];
      
      If[FreeQ[ConditionForMassOrdering,particle]\[Equal]False,
        WriteString[sphenoTree, 
          "Real(dp) :: "<> Name <>"2temp("<>dimMatrix <>") \n" ];
        WriteString[sphenoTree, 
          "Complex(dp) :: "<> MixingName<>"temp("<>dimMatrix <>","<>
            dimMatrix <>") \n \n"];
        ];
      
      
      WriteString[sphenoTree, "Iname = Iname + 1 \n"];
      WriteString[sphenoTree, 
        "NameOfUnit(Iname) = '"<>"Calculate"<> Name<>"'\n \n"];
      
      For[i2=1,i2\[LessEqual]ToExpression[dimMatrix],
        For[i3=i2,i3\[LessEqual]ToExpression[dimMatrix],
          
          MakeSPhenoCoupling[MatrixFunction[[i2,i3]],
            "mat("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoTree];
          i3++;];
        i2++;];
      
      WriteString[sphenoTree, "\n \n "];
      
      WriteString[sphenoTree,"Do i1=2,"<>dimMatrix <>"\n"];
      WriteString[sphenoTree, "  Do i2 = 1, i1-1 \n"];
      If[FreeQ[realVar,ToExpression[MixingName]],
        WriteString[sphenoTree, "  mat(i1,i2) = Conjg(mat(i2,i1)) \n"];,
        WriteString[sphenoTree, "  mat(i1,i2) = mat(i2,i1) \n"];
        ];
      WriteString[sphenoTree, "  End do \n"];
      WriteString[sphenoTree, "End do \n"]; 
      
      WriteString[sphenoTree, "\n \n"];
      
       WriteString[sphenoTree, 
        "Call EigenSystem(mat,"<> Name <>"2,"<>  MixingName <>
          ",ierr,test) \n \n \n"]; 
      
      WriteString[sphenoTree,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
      WriteString[sphenoTree,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoTree,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoTree, "  ierr = 0 \n"];
      WriteString[sphenoTree, "End If \n \n"];
      
      WriteString[sphenoTree, 
        "If ((ierr.Ne.0.).And.(ErrorLevel.Ge.-1)) Then \n"];
      WriteString[sphenoTree, 
        "  Write(10,*) 'Warning from Subroutine '//NameOfUnit(Iname) \n"];
      WriteString[sphenoTree, 
        "  Write(10,*) 'Diagonalization failed, ierr : ',ierr \n"];
      WriteString[sphenoTree, "  kont = ierr \n"];
      WriteString[sphenoTree, "  Iname = Iname - 1 \n"];
      WriteString[sphenoTree, "  Return \n"];
      WriteString[sphenoTree, "End If \n\n\n"];
      
      If[FreeQ[ConditionForMassOrdering,particle]\[Equal]False,
        pos =Position[ConditionForMassOrdering,particle][[1,1]];
        WriteString[sphenoTree,ConditionForMassOrdering[[pos,2]]];
        ];
      
      WriteString[sphenoTree, "Do i1=1,"<>dimMatrix<> "\n"];
      WriteString[sphenoTree, 
        "  If (Abs("<>Name<>"2(i1)).Le.1.E-8_dp) "<>Name<>
          "2(i1) = 1.E-10_dp \n"]; 
      WriteString[sphenoTree, "  If ("<>Name<>"2(i1).Ge.0._dp) Then \n"];
      WriteString[sphenoTree, 
        "  "<>Name <>"(i1)=Sqrt("<>Name <> "2(i1) ) \n"];
      WriteString[sphenoTree, "  Else \n"];
      WriteString[sphenoTree, "    If (ErrorLevel.Ge.0) Then \n"];
      WriteString[sphenoTree, 
        "      Write(10,*) 'Warning from Subroutine '//NameOfUnit(Iname) \n"];\

      WriteString[sphenoTree, 
        "      Write(10,*) 'a mass squarred is negative: ',i1,"<>Name<>
          "2(i1) \n"];
      WriteString[sphenoTree, "    End If \n"];
      WriteString[sphenoTree, "  "<>Name <>" = 1._dp \n"];
      WriteString[sphenoTree,
        "     Write(ErrCan,*) 'Warning from routine '//NameOfUnit(Iname) \n"];\

      WriteString[sphenoTree,
        "     Write(ErrCan,*) 'in the calculation of the masses' \n"];
      WriteString[sphenoTree,
        "     Write(ErrCan,*) 'occurred a negative mass squared!' \n"];
      WriteString[sphenoTree,"     Write(ErrCan,*) i1,"<>Name<>"2(i1) \n"];
      WriteString[sphenoTree, "  "<>Name<>"2(i1) = 1._dp \n"];
      WriteString[sphenoTree,"   SignOfMassChanged = .True. \n"];
      WriteString[sphenoTree, " kont = -104 \n"];
      WriteString[sphenoTree, " End if \n"];
      WriteString[sphenoTree, "End Do \n"];
      
      
      WriteString[sphenoTree, "Iname = Iname - 1 \n \n"];
      WriteString[sphenoTree, 
        "End Subroutine " <> "Calculate"<>Name <> " \n\n"];
      
      
      ];

WriteTreeMassFunctionFermionSymm[Name_,MixingName_,MatrixFunction_,
      Parameters_]:=Block[{i2,i3},
      
      MakeSubroutineTitle["Calculate"<>Name,
        Parameters,{},{MixingName,Name,"kont"},sphenoTree];
      
      MakeVariableList[Parameters," ,Intent(in)",sphenoTree];
      
      WriteString[sphenoTree, "Integer, Intent(inout) :: kont \n"];
      WriteString[sphenoTree, "Integer :: i1,i2,i3,i4, ierr \n"];
      WriteString[sphenoTree,"Integer :: j1,j2,j3,j4 \n"];
      
      dimMatrix = ToString[Dimensions[MatrixFunction][[1]]];
      WriteString[sphenoTree, 
        "Real(dp), Intent(out) :: "<> Name <>"("<>dimMatrix <>") \n" ];
      WriteString[sphenoTree, 
        "Complex(dp), Intent(out) :: " MixingName<>"("<>dimMatrix <>","<>
            dimMatrix <>") \n \n" ];
      WriteString[sphenoTree, 
        "Complex(dp) :: mat"<>"("<>dimMatrix<>","<>dimMatrix<>"), mat2"<>"("<>
          dimMatrix<>","<>dimMatrix<>"), phaseM, E"<>dimMatrix<>"("<>
          dimMatrix<>") \n\n"];
      WriteString[sphenoTree, 
        "Real(dp) :: "<>MixingName<>"a("<>dimMatrix<>","<>dimMatrix<>"), test(2), eig("<>
          dimMatrix<>") \n\n"];
      
      WriteString[sphenoTree, "Iname = Iname + 1 \n"];
      WriteString[sphenoTree, 
        "NameOfUnit(Iname) = '"<>"Calculate"<> Name<>"'\n \n"];
      
      
      For[i2=1,i2\[LessEqual]ToExpression[dimMatrix],
        For[i3=i2,i3\[LessEqual]ToExpression[dimMatrix],
          
          MakeSPhenoCoupling[MatrixFunction[[i2,i3]],
            "mat("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoTree];
          i3++;];
        i2++;];
      
      WriteString[sphenoTree, "\n \n "];
      
      WriteString[sphenoTree,"Do i1=2,"<>dimMatrix <>"\n"];
      WriteString[sphenoTree, "  Do i2 = 1, i1-1 \n"];
      WriteString[sphenoTree, "  mat(i1,i2) = mat(i2,i1) \n"];
      WriteString[sphenoTree, "  End do \n"];
      WriteString[sphenoTree, "End do \n"]; 
      
      
      WriteString[sphenoTree, "\n \n"];
      
      
      WriteString[sphenoTree, 
        "If (Maxval(Abs(Aimag(mat))).Eq.0._dp) Then \n"];
      WriteString[sphenoTree, 
        "Call EigenSystem(Real(mat,dp),Eig,"<>  MixingName <>
          "a,ierr,test) \n \n "];
      
      WriteString[sphenoTree, "  Do i1=1,"<>dimMatrix <>"\n"];
      WriteString[sphenoTree, 
        "   If (Eig(i1).Lt.0._dp.And.(RotateNegativeFermionMasses)) Then \n"];\

      WriteString[sphenoTree, "    "<>Name<>"(i1) = - Eig(i1) \n"];
      WriteString[sphenoTree, 
        "    "<>MixingName<>"(i1,:) = (0._dp,1._dp)*" <>MixingName <>
          "a(i1,:) \n"];
      WriteString[sphenoTree, "   Else \n"];
      WriteString[sphenoTree, "    "<>Name<>"(i1) = Eig(i1) \n"];
      WriteString[sphenoTree, 
        "    "<>MixingName<>"(i1,:) = "<>MixingName<>"a(i1,:)\n"];
      WriteString[sphenoTree, "    End If \n"];
      WriteString[sphenoTree, "   End Do \n \n"];
      
      WriteString[sphenoTree, 
        "Do i1=1,"<>ToString[ToExpression[dimMatrix]-1]<>"\n"];
      WriteString[sphenoTree, "  Do i2=i1+1,"<>dimMatrix <>"\n"];
      WriteString[sphenoTree, 
        "    If ("<>Name<>"(i1).Gt."<>Name<>"(i2)) Then \n"];
      WriteString[sphenoTree, "      Eig(1) = "<>Name<>"(i1) \n"];
      WriteString[sphenoTree, "      "<>Name<>"(i1) = "<>Name <>"(i2) \n"];
      WriteString[sphenoTree, "      "<>Name<>"(i2) =  Eig(1) \n"];
      WriteString[sphenoTree, 
        "      E"<>dimMatrix<>" = " <>MixingName<>"(i1,:) \n"];
      WriteString[sphenoTree, 
        "      "<>MixingName<>"(i1,:) = "<>MixingName<>"(i2,:) \n"];
      WriteString[sphenoTree, 
        "      "<>MixingName<>"(i2,:) = E"<>dimMatrix <>"\n"];
      WriteString[sphenoTree, "    End If \n"];
      WriteString[sphenoTree, "   End Do \n"];
      WriteString[sphenoTree, "End Do \n \n"];
      
      WriteString[sphenoTree, "Else \n \n"];
      
      WriteString[sphenoTree, 
        "mat2 = Matmul( Transpose(Conjg( mat) ), mat ) \n"];
      WriteString[sphenoTree, 
        "Call Eigensystem(mat2, Eig, "<>MixingName<>", ierr, test) \n"];
      WriteString[sphenoTree, 
        "mat2 = Matmul( Conjg("<>MixingName<>"), Matmul( mat, Transpose( Conjg("<>
          MixingName<>")))) \n"];
      WriteString[sphenoTree, "Do i1=1,"<>dimMatrix<>"\n"];
      WriteString[sphenoTree, 
        "  phaseM = Sqrt( mat2(i1,i1) / Abs(mat2(i1,i1))) \n"];
      WriteString[sphenoTree, 
        "  "<>MixingName<>"(i1,:)= phaseM * "<>MixingName<>"(i1,:) \n"];
      WriteString[sphenoTree, "End Do \n"];
      WriteString[sphenoTree, Name <> " = Sqrt( Eig ) \n \n"];
      WriteString[sphenoTree, "End If \n \n"]; 
      
      
      
      WriteString[sphenoTree,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
      WriteString[sphenoTree,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoTree,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoTree, "  ierr = 0 \n"];
      WriteString[sphenoTree, "End If \n \n"];
      
      WriteString[sphenoTree, "If (ierr.Ne.0.) Then \n"];
      WriteString[sphenoTree, 
        "  Write(ErrCan,*) 'Warning from Subroutine Calculate"<>Name<>
          ", ierr =',ierr \n"];
      WriteString[sphenoTree, "  kont = ierr \n"];
      WriteString[sphenoTree, "  Iname = Iname - 1 \n"];
      WriteString[sphenoTree, "  Return \n"];
      WriteString[sphenoTree, "End If \n\n\n"];
      
      WriteString[sphenoTree, "Iname = Iname - 1 \n \n"];
      WriteString[sphenoTree, 
        "End Subroutine " <> "Calculate"<>Name <> " \n\n"];
      
      
      ];

WriteTreeMassFunctionFermionNonSymm[Name_,MixingName1_,MixingName2_,
      MatrixFunction_,Parameters_]:=Block[{i2,i3},
      
      MakeSubroutineTitle["Calculate"<>Name,
        Parameters,{},{MixingName1,MixingName2,Name,"kont"},sphenoTree];
      
      
      MakeVariableList[Parameters,",Intent(in)",sphenoTree];
      
      WriteString[sphenoTree, "Integer, Intent(inout) :: kont \n"];
      WriteString[sphenoTree, "Integer :: i1,i2,i3,i4, ierr \n"];
      WriteString[sphenoTree,"Integer :: j1,j2,j3,j4 \n"];
      
      dimMatrix = ToString[Dimensions[MatrixFunction][[1]]];
      WriteString[sphenoTree, 
        "Real(dp), Intent(out) :: "<> Name <>"("<>dimMatrix <>") \n " ];
      WriteString[sphenoTree,  
        "Complex(dp), Intent(out) :: "<>MixingName1<>"("<>dimMatrix <>","<>
          dimMatrix <>"), "<>MixingName2<>"("<>dimMatrix <>","<>dimMatrix <>
          ") \n \n " ];
      
      
      WriteString[sphenoTree, 
        "Complex(dp) :: mat"<>"("<>dimMatrix<>","<>dimMatrix<>")=0._dp, mat2"<>
          "("<>dimMatrix<>","<>dimMatrix<>")=0._dp, phaseM \n\n"];
      WriteString[sphenoTree,  
        "Complex(dp) :: "<>MixingName1<>"2("<>dimMatrix <>","<>dimMatrix <>"), "<>
          MixingName2<>"2("<>dimMatrix <>","<>dimMatrix <>") \n \n " ];
      WriteString[sphenoTree,  
        "Real(dp) :: "<>MixingName1<>"1("<>dimMatrix <>","<>dimMatrix <>"), "<>
          MixingName2<>"1("<>dimMatrix <>","<>dimMatrix <>"), test(2), " <> 
          Name <>"2("<>dimMatrix <>") \n \n " ];
      
      
      
      WriteString[sphenoTree, "Iname = Iname + 1 \n"];
      WriteString[sphenoTree, 
        "NameOfUnit(Iname) = '"<>"Calculate"<> Name<>"'\n \n"];
      
      
      WriteString[sphenoTree, Name <>" = 0._dp \n"];
      WriteString[sphenoTree, MixingName1 <>" = 0._dp \n"];
      WriteString[sphenoTree, MixingName2 <>" = 0._dp \n"]; 
      
      For[i2=1,i2\[LessEqual]ToExpression[dimMatrix],
        For[i3=1,i3\[LessEqual]ToExpression[dimMatrix],
          MakeSPhenoCoupling[MatrixFunction[[i2,i3]],
            "mat("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoTree];
          i3++;];
        i2++;];
      
      WriteString[sphenoTree, "\n \n"];
      
      
      WriteString[sphenoTree, "mat2 = Matmul(Transpose(Conjg(mat)),mat) \n"];
      WriteString[sphenoTree, 
        "If (Maxval(Abs(Aimag(mat2))).Eq.0._dp) Then \n"];
      WriteString[sphenoTree, 
        "Call EigenSystem(Real(mat2,dp),"<>Name<>"2,"<>  MixingName2 <>
          "1,ierr,test) \n"];
      WriteString[sphenoTree, MixingName2<>"2 = "<>MixingName2<>"1 \n"];
      WriteString[sphenoTree, "Else \n"];
      WriteString[sphenoTree, 
        "Call EigenSystem(mat2,"<>Name<>"2,"<>  MixingName2 <>
          "2,ierr,test) \n "];
      WriteString[sphenoTree, "End If \n \n"];
      
      WriteString[sphenoTree,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
      WriteString[sphenoTree,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoTree,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoTree, "  ierr = 0 \n"];
      WriteString[sphenoTree, "End If \n \n"];
      
      
      WriteString[sphenoTree, "mat2 = Matmul(mat,Transpose(Conjg(mat))) \n"];
      WriteString[sphenoTree, 
        "If (Maxval(Abs(Aimag(mat2))).Eq.0._dp) Then \n"];
      WriteString[sphenoTree, 
        "Call EigenSystem(Real(mat2,dp),"<>Name<>"2,"<>  MixingName1 <>
          "1,ierr,test) \n \n \n"];
      WriteString[sphenoTree, MixingName1<>"2 = "<>MixingName1<>"1 \n"];
      WriteString[sphenoTree, "Else \n"];
      WriteString[sphenoTree, 
        "Call EigenSystem(mat2,"<>Name<>"2,"<>  MixingName1 <>
          "2,ierr,test) \n \n \n"];
      WriteString[sphenoTree, "End If \n"];
      WriteString[sphenoTree, 
        MixingName1 <>"2 = Conjg("<>MixingName1<>"2) \n \n"];
      
      
      WriteString[sphenoTree,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
      WriteString[sphenoTree,
        "  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"]\
;
      WriteString[sphenoTree,
        "  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
      WriteString[sphenoTree, "  ierr = 0 \n"];
      WriteString[sphenoTree, "End If \n \n"];
      
      
      WriteString[sphenoTree, 
        "mat2 = Matmul(Matmul( Conjg("<>MixingName1<>"2),mat),Transpose( Conjg("<>
          MixingName2<>"2))) \n"];
      WriteString[sphenoTree, "Do i1=1,"<>dimMatrix <>"\n"];
      WriteString[sphenoTree, "phaseM = mat2(i1,i1) / Abs(mat2(i1,i1)) \n"];
      WriteString[sphenoTree, 
        MixingName2<>"2(i1,:) = phaseM *"<>MixingName2<>"2(i1,:) \n "];
      WriteString[sphenoTree, "End Do \n \n"];
      
      
      WriteString[sphenoTree, "Do i1=1,"<>dimMatrix <>"\n"];
      WriteString[sphenoTree, 
        "phaseM = "<>MixingName2<>"2(i1,i1) / Abs("<>MixingName2<>
          "2(i1,i1)) \n"];
      WriteString[sphenoTree, 
        MixingName2<>"2(i1,:) = Conjg(phaseM) *"<>MixingName2<>
          "2(i1,:) \n "];
      WriteString[sphenoTree, 
        MixingName1<>"2(i1,:) = phaseM *"<>MixingName1<>"2(i1,:) \n "];
      WriteString[sphenoTree, "End Do \n \n"];
      
      WriteString[sphenoTree, "If (ierr.Ne.0.) Then \n"];
      WriteString[sphenoTree, 
        "  Write(ErrCan,*) 'Warning from Subroutine Calculate"<>Name<>
          ", ierr =',ierr \n"];
      WriteString[sphenoTree, "  kont = ierr \n"];
      WriteString[sphenoTree, "  Iname = Iname - 1 \n"];
      WriteString[sphenoTree, "  Return \n"];
      WriteString[sphenoTree, "End If \n\n\n"];
      
      
      WriteString[sphenoTree, Name <>" = Sqrt( "<>Name <>"2 ) \n"];
      WriteString[sphenoTree, MixingName1 <> " = "<>MixingName1<>"2 \n"];
      WriteString[sphenoTree, MixingName2 <> " = "<>MixingName2<>"2 \n"]; 
      
      
      WriteString[sphenoTree, "Iname = Iname - 1 \n \n"];
      WriteString[sphenoTree, 
        "End Subroutine " <> "Calculate"<>Name <> " \n\n"];
      
      
      ];


SetPoleMasses[file_]:=Block[{},
      WriteString[file,SPhenoForm[SPhenoMass[VectorW]] <> " = mW \n"];
      WriteString[file,SPhenoForm[SPhenoMassSq[VectorW]] <> " = mW2 \n"];
      WriteString[file,SPhenoForm[SPhenoMass[VectorZ]] <> " = mZ \n"];
      WriteString[file,SPhenoForm[SPhenoMassSq[VectorZ]] <> " = mZ2 \n"];
      
      WriteString[file,
        SPhenoForm[SPhenoMass[Electron]] <> "(1:3) = mf_l \n"];
      WriteString[file,
        SPhenoForm[SPhenoMassSq[Electron]] <> "(1:3) = mf_l**2 \n"];
      WriteString[file,
        SPhenoForm[SPhenoMass[TopQuark]] <> "(1:3) = mf_u \n"];
      WriteString[file,
        SPhenoForm[SPhenoMassSq[TopQuark]] <> "(1:3) = mf_u**2 \n"];
      WriteString[file,
        SPhenoForm[SPhenoMass[BottomQuark]] <> "(1:3) = mf_d \n"];
      WriteString[file,
        SPhenoForm[SPhenoMassSq[BottomQuark]] <> "(1:3) = mf_d**2 \n"];
      ];


WriteCalcAllTreeMassesSM:=Block[{i2},
      
      Print["Writing Routine for Calculating all Masses"];
      
      subCouplingsSPheno={};
      For[i2=1,i2\[LessEqual]4,
        subCouplingsSPheno=
          Join[subCouplingsSPheno,(subValue[i2,1] /. subIndFinal[i2,i2])];
        i2++;];
      
      MakeSubroutineTitle["TreeMassesSM",
        Join[NewMassParametersSM,Join[listVEVs,listAllParameters]],{},{"GenerationMixing",
          "kont"},sphenoTree];
      
      
      WriteString[sphenoTree, "Implicit None \n \n"];
      
      
      MakeVariableList[listAllParameters,",Intent(in)",sphenoTree];
      MakeVariableList[NewMassParametersSM,",Intent(inout)",sphenoTree];
      MakeVariableList[listVEVs,",Intent(in)",sphenoTree];
      If[NewNumericalDependences=!={},
        MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",
            sphenoTree];
        ];
      
      WriteString[sphenoTree,"Logical, Intent(in) :: GenerationMixing \n"];
      WriteString[sphenoTree,"Integer, Intent(inout) :: kont \n"];
      
      WriteString[sphenoTree,"Integer :: i1,i2,i3,i4,j1,j2,j3,kontSave \n"];
      
      
      WriteString[sphenoTree, "Iname = Iname + 1 \n"];
      WriteString[sphenoTree, "NameOfUnit(Iname) = 'TreeMasses" <>Modelname,
        "'\n \n"];
      WriteString[sphenoTree, "kont = 0 \n"];
      
      For[i=1,i\[LessEqual]Length[NewNumericalDependences],
        WriteString[sphenoTree, 
          SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> 
            SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
        i++;];
      
       For[i=1,i\[LessEqual]Length[ListTree],
        If[FreeQ[SMParticles,ListMassES[[i,1]]]\[Equal]False,
          If[FreeQ[GoldstoneGhost,ListMassES[[i,1]]]\[Equal]False,
            WriteString[sphenoTree, "kontSave = kont \n"];
            ];
          Switch[ListTree[[i,4]],
            ScalarMass,
            
            MakeCall["Calculate"<>ListTree[[i,1]],
                Flatten[{ListTree[[i,5]],ListTree[[i,2]],ListTree[[i,6]],
                    ListTree[[i,7]]}],{},{"kont"},sphenoTree];,
            FermionMassSymm,
            MakeCall["Calculate"<>ListTree[[i,1]],
              Flatten[{ListTree[[i,5]],ListTree[[i,2]],
                  ListTree[[i,6]]}],{},{"kont"},sphenoTree];
            
            WriteString[sphenoTree,
              ToString[ListTree[[i,7]]] <>" = "<>ToString[ListTree[[i,6]]]  <>
                "**2 \n"];,
            FermionMassNonSymm,
            MakeCall["Calculate"<>ListTree[[i,1]],
              Flatten[{ListTree[[i,5]],ListTree[[i,2,1]],ListTree[[i,2,2]],
                  ListTree[[i,6]]}],{},{"kont"},sphenoTree]; 
            
            WriteString[sphenoTree,
              ToString[ListTree[[i,7]]] <>" = "<>ToString[ListTree[[i,6]]]  <>
                "**2 \n"];
            ];
          
          If[FreeQ[GoldstoneGhost,ListMassES[[i,1]]]\[Equal]False,
            WriteString[sphenoTree, "kont = kontSave \n"];
            ];
          ];
        i++;];
      
      WriteString[sphenoTree, "\n \n "];
      
      Print["Write other Tree-Level Masses"];
      
      For[i=1,i\[LessEqual]Length[listNotMixedMasses],
        If[FreeQ[SMParticles, listNotMixedMasses[[i,1]]]\[Equal]False,
          If[getType[listNotMixedMasses[[i,1]]]===F,
              If[Length[Dimensions[listNotMixedMasses[[i,5]]]]\[Equal]2,
                  
                  WriteString[sphenoTree,
                    "Do i1=1,"<>ToString[
                        getGenSPheno[listNotMixedMasses[[i,1]]]] <>"\n"];
                  If[FreeQ[listNotMixedMasses[[i,4]],sum],
                    
                    WriteString[sphenoTree,
                        SPhenoMass[listNotMixedMasses[[i,1]],i1] <>"= "<>
                          SPhenoForm[
                            listNotMixedMasses[[i,4]] /. {gt1\[Rule]i1, 
                                gt2\[Rule]i1} ]  <>" \n"];,
                    
                    MakeSPhenoCoupling[
                        listNotMixedMasses[[i,4]] /. {gt1\[Rule]i1, 
                            gt2\[Rule]i1} ,
                        SPhenoMass[listNotMixedMasses[[i,1]],i1],sphenoTree];
                    ];
                  
                  WriteString[sphenoTree,
                    SPhenoMassSq[listNotMixedMasses[[i,1]],i1] <>"= "<>
                      SPhenoMass[listNotMixedMasses[[i,1]],i1] <>"**2 \n"];
                  WriteString[sphenoTree,"End Do \n \n"];,
                  If[listNotMixedMasses[[i,4]]=!=0,
                      If[FreeQ[listNotMixedMasses[[i,4]],sum],
                        
                        WriteString[sphenoTree,
                            ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]<>" = "<>
                              SPhenoForm[
                                listNotMixedMasses[[i,
                                        4]] /.NewNumericalDependencesSub /. 
                                  subCouplingsSPheno]  <>" \n"];,
                        
                        MakeSPhenoCoupling[
                            listNotMixedMasses[[i,
                                    4]]  /.NewNumericalDependencesSub /. 
                              subCouplingsSPheno ,
                            ToString[SPhenoMass[listNotMixedMasses[[i,1]]]],
                            sphenoTree];
                        ];
                      
                      
                      If[FreeQ[ParticlePhases,
                            listNotMixedMasses[[i,1]]]\[Equal]False,
                        
                        pos = Position[ParticlePhases,
                              listNotMixedMasses[[i,1]]][[1,1]];
                        
                        WriteString[sphenoTree,
                          SPhenoForm[ParticlePhases[[pos,2]]] <> " = Abs("<>
                            ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]  <>
                            ")/"<>ToString[
                              SPhenoMass[listNotMixedMasses[[i,1]]]]  <>
                            "\n"];
                        ];
                      
                      
                      
                      WriteString[sphenoTree,
                        ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]<>" = Abs("<>
                          ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]  <>
                          ") \n"];
                      
                      WriteString[sphenoTree,
                        ToString[SPhenoMassSq[listNotMixedMasses[[i,1]]]]<>" = "<>
                          ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]  <>
                          "**2 \n"];
                      ];
                  ];,
              If[Length[Dimensions[listNotMixedMasses[[i,5]]]]\[Equal]2,
                  
                  WriteString[sphenoTree,
                    "Do i1=1,"<>ToString[
                        getGenSPheno[listNotMixedMasses[[i,1]]]] <>"\n"];
                  If[FreeQ[listNotMixedMasses[[i,4]],sum],
                    
                    WriteString[sphenoTree,
                        SPhenoMassSq[listNotMixedMasses[[i,1]],i1] <>"= "<>
                          SPhenoForm[
                            listNotMixedMasses[[i,4]] /. {gt1\[Rule]i1, 
                                gt2\[Rule]i1} ]  <>" \n"];,
                    
                    MakeSPhenoCoupling[
                        listNotMixedMasses[[i,4]] /. {gt1\[Rule]i1, 
                            gt2\[Rule]i1} ,
                        SPhenoMassSq[listNotMixedMasses[[i,1]],i1],
                        sphenoTree];
                    ];
                  
                  WriteString[sphenoTree,
                    SPhenoMass[listNotMixedMasses[[i,1]],i1] <>"= sqrt("<>
                      SPhenoMassSq[listNotMixedMasses[[i,1]],i1] <>") \n"];
                  WriteString[sphenoTree,"End Do \n \n"];,
                  If[listNotMixedMasses[[i,4]]=!=0,
                      If[FreeQ[listNotMixedMasses[[i,4]],sum],
                        
                        WriteString[sphenoTree,
                            ToString[SPhenoMassSq[listNotMixedMasses[[i,1]]]]<>
                              " = "<>SPhenoForm[
                                listNotMixedMasses[[i,
                                        4]] /.NewNumericalDependencesSub \
/.subCouplingsSPheno]  <>" \n"];,
                        
                        MakeSPhenoCoupling[
                            listNotMixedMasses[[i,
                                    4]]  /.NewNumericalDependencesSub /. 
                              subCouplingsSPheno ,
                            ToString[SPhenoMassSq[listNotMixedMasses[[i,1]]]],
                            sphenoTree];
                        ];
                      
                      WriteString[sphenoTree,
                        ToString[SPhenoMass[listNotMixedMasses[[i,1]]]]<>" = sqrt("<>
                          ToString[SPhenoMassSq[listNotMixedMasses[[i,1]]]]  <>
                          ") \n"];
                      ];
                  ];
              ];
          ];
        i++;];
      
      
      WriteString[sphenoTree, "Iname = Iname - 1 \n \n"];
      
      WriteString[sphenoTree, "End Subroutine  TreeMassesSM \n \n \n"];
      
      ];


