(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

GenerateSPhenoSusyDecays[Eigenstates_]:=Block[{i},
      Print["--------------------------------------"];
      Print["Writing Two Body Decays for SPheno "];
      Print["--------------------------------------"];
      
      Particles[Current]=Particles[Eigenstates];
      
      MakeCouplingLists;
      
      
      $sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}];
      (* CreateDirectory[$sarahCurrentSPhenoDir]; *)
      
      sphenoDecay=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,
            "SusyDecays_"<>ModelName<>".f90"]];
      
      WriteHeaderDecays;
      
      
      savedDecayInfos={};
      savedDecayInfos3Body={};
      BR2and3={};
      All3BodyWidths ={};
      
      MakeWidthList;
      
      For[i=1,i\[LessEqual]Length[ListDecayParticles],
        MakeDecayLists[ListDecayParticles[[i]]];
        i++;];
      
      NeededIntegralsComplete={};
      
      Print["--------------------------------------"];
      Print["Writing Three Body Decays for SPheno "];
      Print["--------------------------------------"];
      
      If[Length[ListDecayParticles3B]>0,
        MakeListPhaseSpaceIntegrals[500,10000,8,12,10,12,16];
         For[i=1,i\[LessEqual]Length[ListDecayParticles3B],
          
          MakeDecayLists3Body[ListDecayParticles3B[[i,1]],
            ListDecayParticles3B[[i,2]]];
          i++;];
        
        
        ];
      
      
      WriteString[sphenoDecay, 
        "End Module SusyDecays_"<>ModelName<>" \n \n"];
      
      Close[sphenoDecay];
      
      ];

MakeWidthList :=Block[{i,particle,type},
      SPhenoWidthBR = {};
      
      For[i=1,i\[LessEqual]Length[ListDecayParticles],
        SPhenoWidthBR = 
          Join[SPhenoWidthBR,{ToExpression[
                "gP"<>ToString[ListDecayParticles[[i]]]],
              ToExpression["gT"<>ToString[ListDecayParticles[[i]]]],
              ToExpression["BR"<>ToString[ListDecayParticles[[i]]]]}];
        realVar= 
          Join[realVar,{ToExpression["gP"<>ToString[ListDecayParticles[[i]]]],
              ToExpression["gT"<>ToString[ListDecayParticles[[i]]]],
              ToExpression["BR"<>ToString[ListDecayParticles[[i]]]]}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[Particles[Current]],
        particle=Particles[Current][[i,1]];
        If[
          FreeQ[ListDecayParticles,particle]\[Equal]True &&  
            FreeQ[ListDecayParticles,
              particle /. diracSubBack1 /. diracSubBack2],
          type=getType[particle];
          
          If[(type===S || type ===V || type === F) && 
              FreeQ[massless,particle]\[Equal]True && 
              FreeQ[SPhenoParameters,SPhenoWidth[particle]]\[Equal]True,
            realVar=Join[realVar,{SPhenoWidth[particle]}];
             If[getGenSPheno[particle]>1,
              
              SPhenoParameters=
                  Join[SPhenoParameters,{{SPhenoWidth[
                          particle],{generation},{getGenSPheno[
                            particle]}}}];,
              
              SPhenoParameters=
                  Join[SPhenoParameters,{{SPhenoWidth[particle],{},{}}}];
              ]; 
            ];
          ];
        i++;];
      
      SPhenoWidthVP={};
      
      For[i=1,i\[LessEqual]Length[Particles[Current]],
        If[
          getType[Particles[Current][[i,1]]]\[Equal]V && 
            FreeQ[massless,Particles[Current][[i,1]]],
          
          SPhenoWidthVP = 
            Join[SPhenoWidthVP,{SPhenoWidth[Particles[Current][[i,1]]]}];
          realVar=Join[realVar,{SPhenoWidth[SPhenoWidthVP]}];
          ];
        i++;];
      
      ];


WriteHeaderDecays:=Block[{},
      WriteString[sphenoDecay, "Module SusyDecays_"<>ModelName<>"\n \n"];
      WriteString[sphenoDecay, "Use Control \n"];
      WriteString[sphenoDecay, "Use DecayFunctions \n"];
      WriteString[sphenoDecay, "Use LoopCouplings_"<>ModelName<>" \n"];
      WriteString[sphenoDecay, "Use Model_Data_"<>ModelName<>" \n"];
      WriteString[sphenoDecay, "Use Mathematics, Only: Li2 \n \n "];
      WriteString[sphenoDecay, "Contains \n \n  \n"];
      ];


MakeDecayLists[particle_]:=Block[{i},
      Print["Decay of ", particle];
      
      ProcessList = TwoBodyDecay[particle];
      NeededMasses={SPhenoMass[particle]};
      
      If[particle=!=HiggsBoson,
        NeededCouplings={};
        NeededCouplingsInsert={};
        FullInformation = {};,
        NeededCouplings={{cplHiggsPP},{cplHiggsGG},{cplHiggsZZvirt},{\
cplHiggsWWvirt}};
        NeededCouplingsInsert={};
        FullInformation = {{VectorP,
              VectorP,{{{cplHiggsPP},{HiggsBoson,VectorP,VectorP}}},1,
              1},{VectorG,
              VectorG,{{{cplHiggsGG},{HiggsBoson,VectorG,VectorG}}},1,
              1},{VectorZ,
              VectorZ,{{{cplHiggsZZvirt},{HiggsBoson,VectorZ,VectorZ}}},1,
              1},{VectorW,
              VectorW,{{{cplHiggsWWvirt},{HiggsBoson,VectorW,VectorW}}},1,
              1}};
        ];
      
      
      For[i=1,i\[LessEqual]Length[ProcessList],
        If[
          FreeQ[NeededMasses, SPhenoMass[ProcessList[[i,1]]]]\[Equal]True && 
            FreeQ[massless,getBlank[ProcessList[[i,1]]]]\[Equal]True,
          NeededMasses=Join[NeededMasses,{SPhenoMass[ProcessList[[i,1]]]}];
          ];
        If[
          FreeQ[NeededMasses, SPhenoMass[ProcessList[[i,2]]]]\[Equal]True && 
            FreeQ[massless,getBlank[ProcessList[[i,2]]]]\[Equal]True,
          NeededMasses=Join[NeededMasses,{SPhenoMass[ProcessList[[i,2]]]}];
          ];
        
        If[FreeQ[NeededCouplingsInsert, ProcessList[[i,3]]]\[Equal]True,
          
          NeededCouplingsInsert=
            Join[NeededCouplingsInsert,{{ProcessList[[i,3]]}}];
          
          NeededCouplings=
            Join[NeededCouplings,{getSPhenoCoupling[
                    ProcessList[[i,3]]][[1]]}];
          ];
        
        FullInformation = 
          Join[FullInformation,{{ProcessList[[i,1]],
                ProcessList[[i,2]],{getSPhenoCoupling[ProcessList[[i,3]]]},
                ProcessList[[i,4]],ProcessList[[i,5]]}}];
        
        i++;];
      
      If[particle===HiggsBoson || particle===PseudoScalar,
        NeededMasses = 
            Intersection[
              Join[NeededMasses,
                SPhenoMass/@Transpose[coupAlphaStrong][[1]]]];
        ];
      
      savedDecayInfos = 
        Join[savedDecayInfos,{{particle,NeededCouplings,NeededMasses,
              FullInformation}}];
      
      channels=0;
      For[i=1,i\[LessEqual]Length[FullInformation],
        channels += (1+getGenSPheno[FullInformation[[i,1]]]-
                getGenSPhenoStart[FullInformation[[i,1]]])*(1+
                getGenSPheno[FullInformation[[i,2]]]-
                getGenSPhenoStart[FullInformation[[i,2]]]);
        i++;];
      
      SPhenoParameters= 
        Join[SPhenoParameters,{{ToExpression[
                "gP"<>ToString[particle]],{generation,
                generation},{getGenSPheno[particle],channels}}}];
      SPhenoParameters= 
        Join[SPhenoParameters,{{ToExpression[
                "gT"<>ToString[particle]],{generation},{getGenSPheno[
                  particle]}}}];
      SPhenoParameters = 
        Join[SPhenoParameters,{{ToExpression[
                "BR"<>ToString[particle]],{generation,
                generation},{getGenSPheno[particle],channels}}}];
      
      WriteTwoBodyDecay[particle,NeededCouplings,NeededMasses,
        FullInformation];
      
      ];




WriteTwoBodyDecay[particle_, couplings_,masses_,processes_]:=
    Block[{i,n2, factor,temp,ind},
      MakeSubroutineTitle[ToString[particle]<>"TwoBodyDecay",
          Flatten[{couplings,masses}],{"i_in"},{"gP","gT","BR"},sphenoDecay];
      
      WriteString[sphenoDecay, "Implicit None \n \n"];
      MakeVariableList[Flatten[{couplings,masses}],",Intent(in)",
          sphenoDecay];
      WriteString[sphenoDecay,"Integer, Intent(in) :: i_in \n"];
      If[getGenSPheno[particle]>1,
          
          WriteString[sphenoDecay, 
              "Real(dp), Intent(inout) :: gp(:,:), gT(:) \n"];,
          
          WriteString[sphenoDecay, 
              "Real(dp), Intent(inout) :: gp(:,:), gT \n"];
          ];
      WriteString[sphenoDecay, 
          "Real(dp), Optional, Intent(inout) :: BR(:,:) \n"];
      WriteString[sphenoDecay, 
          "Integer :: i1, i2, i3, i4, i_start, i_end, i_count, gt1, gt2, gt3, gt4 \n"]\
;
      WriteString[sphenoDecay, "Real(dp) :: gam, m_in, m1, m2, coupReal \n"];
      WriteString[sphenoDecay, 
          "Complex(dp) :: coupC, coupR, coupL, coup \n \n"];
      
      If[particle === HiggsBoson || particle === PseudoScalar,
          WriteString[sphenoDecay, "Real(dp) :: alpha3 \n"];
          ];
      
      
      
      
      WriteString[sphenoDecay, "Iname = Iname + 1 \n"];
      WriteString[sphenoDecay, 
          "NameOfUnit(Iname) = '"<>ToString[particle]<>"TwoBodyDecay'\n \n"];
      
      
      
      
      
      genIN = ToString[getGenSPheno[particle]];
      
      
      If[getGenSPheno[particle]>1,
          WriteString[sphenoDecay, "If (i_in.Lt.0) Then \n"];
          
          WriteString[sphenoDecay, 
            "  i_start = "<>ToString[getGenSPhenoStart[particle]]<>" \n"];
          WriteString[sphenoDecay, "  i_end = "<>genIN <> "\n"];
          WriteString[sphenoDecay, "  gT = 0._dp \n"];
          WriteString[sphenoDecay, "  gP = 0._dp \n"];
          
          WriteString[sphenoDecay, 
            "Else If ( (i_in.Ge.1).And.(i_in.Le."<>genIN<>") ) Then \n"];
          WriteString[sphenoDecay, "  i_start = i_in \n"];
          WriteString[sphenoDecay, "  i_end = i_in \n"];
          WriteString[sphenoDecay, "  gT(i_in) = 0._dp \n"];
          WriteString[sphenoDecay, "  gP(i_in,:) = 0._dp \n"];
          WriteString[sphenoDecay, "Else \n"];
          WriteString[sphenoDecay, "  If (ErrorLevel.Ge.-1) Then \n"];
          
          WriteString[sphenoDecay, 
            "     Write(ErrCan,*) 'Problem in subroutine '//NameOfUnit(Iname) \n"]\
;
          
          WriteString[sphenoDecay,  
            "     Write(ErrCan,*) 'Value of i_in out of range, (i_in,i_max) = ', i_in,"<>
              genIN<>"\n\n"];
          WriteString[sphenoDecay, "  End If \n"];
          
          WriteString[sphenoDecay, 
            "  If (ErrorLevel.Gt.0) Call TerminateProgram \n"];
          WriteString[sphenoDecay, "  If (Present(BR)) BR = 0._dp \n"];
          WriteString[sphenoDecay, "  Iname = Iname -1 \n"];
          WriteString[sphenoDecay, "  Return \n"];
          WriteString[sphenoDecay, "End If \n \n"];,
          
          WriteString[sphenoDecay, "If (i_in.Lt.0) Then \n"];
          WriteString[sphenoDecay, "  i_start = 1 \n"];
          WriteString[sphenoDecay, "  i_end = 1 \n"];
          WriteString[sphenoDecay, "  gT = 0._dp \n"];
          WriteString[sphenoDecay, "  gP = 0._dp \n"];
          WriteString[sphenoDecay, "Else \n"];
          WriteString[sphenoDecay, "  If (ErrorLevel.Ge.-1) Then \n"];
          
          WriteString[sphenoDecay, 
            "     Write(ErrCan,*) 'Problem in subroutine '//NameOfUnit(Iname) \n"]\
;
          
          WriteString[sphenoDecay,  
            "     Write(ErrCan,*) 'Value of i_in out of range, (i_in,i_max) = ', i_in,"<>
              genIN<>"\n\n"];
          WriteString[sphenoDecay, "  End If \n"];
          
          WriteString[sphenoDecay, 
            "  If (ErrorLevel.Gt.0) Call TerminateProgram \n"];
          WriteString[sphenoDecay, "  If (Present(BR)) BR = 0._dp \n"];
          WriteString[sphenoDecay, "  Iname = Iname -1 \n"];
          WriteString[sphenoDecay, "  Return \n"];
          WriteString[sphenoDecay, "End If \n \n"];
          
          
          
          ];
      
      
       If[getGenSPheno[particle]>1,
          WriteString[sphenoDecay, "Do i1=i_start,i_end \n"];
          
          WriteString[sphenoDecay,
            "m_in = "<> SPhenoMass[particle,i1]<>" \n"];
          WriteString[sphenoDecay, "If (m_in.Eq.0._dp) Cycle \n"];,
          
          WriteString[sphenoDecay,
              "m_in = "<> SPhenoMass[particle,i1]<>" \n"];
          ]; 
      
      If[particle === HiggsBoson || particle === PseudoScalar,
          WriteString[sphenoDecay,"alpha3 = AlphaSDR(m_in,"];
          
          For[i=1,i\[LessEqual]Length[coupAlphaStrong],
            
            WriteString[sphenoDecay,
              ToString[SPhenoMass[coupAlphaStrong[[i,1]]]]];
            If[i\[NotEqual] Length[coupAlphaStrong],
              WriteString[sphenoDecay,","];
              ];
            i++;];
          WriteString[sphenoDecay,") \n"];
          ];
      
      
      
      WriteString[sphenoDecay, "i_count = 1 \n"];
      
      
      
      For[i=1,i\[LessEqual]Length[processes],
          pt1=processes[[i,1]];
          pt2=processes[[i,2]];
          t1=getType[pt1];
          t2=getType[pt2];
          Which[
            t1=== F && t2=== F,p1=pt1;p2=pt2;,
            t1=== S && t2=== S,p1=pt1;p2=pt2;,
            t1=== F && t2=== S,p1=pt1;p2=pt2;,
            t1=== S && t2=== F,p1=pt2;p2=pt1;,
            t1=== F && t2=== V,p1=pt1;p2=pt2;,
            t1=== V && t2=== F,p1=pt2;p2=pt1;,
            t1=== V && t2=== S,p1=pt2;p2=pt1;,
            t1=== S && t2=== V,p1=pt1;p2=pt2;,
            t1=== V && t2=== V,p1=pt2;p2=pt1;
            ];
          
          WriteString[sphenoDecay,"\n \n"];
          
          WriteString[sphenoDecay,
            "! ----------------------------------------------\n"];
          
          WriteString[sphenoDecay,
            "! " <> ToString[p1] <>", " <>ToString[p2] <>"\n"];
          
          WriteString[sphenoDecay,
            "! ----------------------------------------------\n"];
          WriteString[sphenoDecay,"\n \n"];
          
          
          If[getGenSPheno[p1]>1,
            
            WriteString[sphenoDecay,
                "Do gt1= "<>ToString[getGenSPhenoStart[p1]] <> ", "<>
                  ToString[getGenSPheno[p1]] <> "\n"];
            ];
          If[getGenSPheno[p2]>1,
            
            WriteString[sphenoDecay,
                "  Do gt2="<>ToString[getGenSPhenoStart[p2]] <> ", "<>
                  ToString[getGenSPheno[p2]] <> "\n"];
            ];
          
          WriteString[sphenoDecay,"m1 = "<>SPhenoMass[p1,gt1] <>"\n"];
          WriteString[sphenoDecay,"m2 = "<>SPhenoMass[p2,gt2] <>"\n"];
          
          
          temp=MakeIndicesCoupling[{AntiField[particle],i1},{p1,gt1},{p2,gt2},
              processes[[i,3,1,2]]];
          ind = temp[[1]];
          checkHC=temp[[2]];
          
           Switch[getType[particle],
            S,
            Switch[VType[getType[particle], getType[p1],getType[p2]],
              FFS,
              	
              WriteString[sphenoDecay, 
                "coupL = "<>ToString[processes[[i,3,1,1,1]]]<>ind <> "\n"];
              	
              WriteString[sphenoDecay, 
                "coupR = "<>ToString[processes[[i,3,1,1,2]]]<>ind <> "\n"];
              	
              WriteString[sphenoDecay,
                "Call ScalarToTwoFermions(m_in,m1,m2,coupL,coupR,gam) \n"];
              	
              If[(particle === HiggsBoson || 
                      particle === PseudoScalar) &&  (getBlank[p1]===
                        TopQuark || getBlank[p1]===BottomQuark),
                	
                WriteString[sphenoDecay,
                    "gam = gam * FFqcd(m1,m_in,alpha3) \n"];
                	];,
              SSS,
              	
              WriteString[sphenoDecay, 
                "coup = "<>ToString[processes[[i,3,1,1,1]]] <>ind <> "\n"];
              	
              WriteString[sphenoDecay,
                "Call ScalarToTwoScalars(m_in,m1,m2,coup,gam) \n"];,
              SSV,
              	
              WriteString[sphenoDecay, 
                "coup = "<>ToString[processes[[i,3,1,1,1]]]<>ind <> "\n"];
              	
              WriteString[sphenoDecay,
                "Call ScalarToScalarVectorBoson(m_in,m1,m2,coup,gam) \n"];,
              SVV,
              	Switch[processes[[i,3,1,1,1]],
                  	cplHiggsPP,
                  		
                  WriteString[sphenoDecay,
                      "gam = G_F * m_in**3 * oosqrt2 * oo128pi3 * Abs(cplHiggsPP(i1))**2 \n"]\
;,
                  	cplHiggsGG,
                  		
                  WriteString[sphenoDecay,
                      "gam = G_F * m_in**3 * oosqrt2 * oo36pi3 * Abs(cplHiggsGG(i1))**2 \n"]\
;,
                  	cplHiggsZZvirt,
                  		
                  WriteString[sphenoDecay, 
                    "coupReal = "<>ToString[processes[[i,3,1,1,1]]]<>ind <> 
                      "\n"];
                  		
                  WriteString[sphenoDecay,
                    "Call ScalarToVectorBosonsVR(m_in,m1,coupReal,gam) \n"];,
                  	cplHiggsWWvirt,
                  		
                  WriteString[sphenoDecay, 
                    "coupReal = "<>ToString[processes[[i,3,1,1,1]]]<>ind <> 
                      "\n"];
                  		
                  WriteString[sphenoDecay,
                    "Call ScalarToVectorBosonsVR(m_in,m1,coupReal,gam) \n"];,
                  	_,
                  		
                  WriteString[sphenoDecay, 
                    "coup = "<>ToString[processes[[i,3,1,1,1]]]<>ind <> 
                      "\n"];
                  		
                  WriteString[sphenoDecay,
                    "Call ScalarToTwoVectorBosons(m_in,m1,coup,gam) \n"];
                  	];
              ];
            
            factor = processes[[i,4]]*processes[[i,5]];
            
            If[AntiField[particle]===particle &&  
                processes[[i,3,1,1,1]]=!= cplHiggsWWvirt,
              
              If[(AntiField[p1]=!=p1 || AntiField[p2]=!=p2) && 
                    AntiField[p1]=!=p2,
                  factor = 2*factor;
                  ];
              ];,
            F,
            Switch[VType[getType[particle], getType[p1],getType[p2]],
              FFS,
              	
              WriteString[sphenoDecay, 
                "coupL = "<>ToString[processes[[i,3,1,1,1]]]<>ind <> "\n"];
              	
              WriteString[sphenoDecay, 
                "coupR = "<>ToString[processes[[i,3,1,1,2]]] <>ind <> "\n"];
              	
              WriteString[sphenoDecay,
                "Call FermionToFermionScalar(m_in,m1,m2,coupL,coupR,gam) \n"];\
,
              FFV,
              	
              WriteString[sphenoDecay, 
                "coupL = "<>ToString[processes[[i,3,1,1,1]]] <>ind <> "\n"];
              	
              WriteString[sphenoDecay, 
                "coupR = "<>ToString[processes[[i,3,1,1,2]]] <>ind <> "\n"];
              	
              WriteString[sphenoDecay,
                "Call FermionToFermionVectorBoson(m_in,m1,m2,coupL,coupR,gam) \n"]\
;
              ];
            (* factor = 2*processes[[i,4]]*processes[[i,5]]; *)
            
            factor = processes[[i,4]]*processes[[i,5]];
            
            If[AntiField[particle]===particle,
              factor = 2*factor;
              ];
            
            ];
          
          (*
            factor = processes[[i,4]]*processes[[i,5]];
            
            
            If[AntiField[particle]===particle,
              If[(AntiField[p1]=!=p1 || AntiField[p2]=!=p2) && 
                    AntiField[p1]=!=p2,
                  factor = 2*factor;
                  ];
              ];
            *)
          
          
          (* 
            If[Head[factor]===Integer,factor=SPhenoForm[1* factor];,
                factor=SPhenoForm[factor];]; *)
          
          factor=SPhenoForm[factor];
          
          If[getGenSPheno[particle]>1,
            
            WriteString[sphenoDecay, 
              "gP(i1,i_count) = "<> factor <> "*gam \n"];
            WriteString[sphenoDecay, "gT(i1) = gT(i1) + gP(i1,i_count) \n"];,
            
            WriteString[sphenoDecay, 
              "gP(1,i_count) = "<> factor <> "*gam \n"];
            WriteString[sphenoDecay, "gT = gT + gP(1,i_count) \n"];
            ];
          
          Switch[particle,
            HiggsBoson,
            	If[p1===HiggsBoson && p2===HiggsBoson,
                	WriteString[sphenoDecay,"If (gt1.eq.gt2) Then \n"];
                	
                WriteString[sphenoDecay, 
                  "  BRHHH(i1,gt1) = gP(i1,i_count) \n"];
                	WriteString[sphenoDecay, "End if \n"];,
                	If[p1===PseudoScalar && p2===PseudoScalar,
                    	WriteString[sphenoDecay,"If (gt1.eq.gt2) Then \n"];
                    	
                    WriteString[sphenoDecay, 
                      "  BRHAA(i1,gt1) = gP(i1,i_count) \n"];
                    	WriteString[sphenoDecay, "End if \n"];
                    	];,
                	If[AntiField[p1]===p1 && AntiField[p2]===p2,
                    	
                    WriteString[sphenoDecay, 
                        "  BRinvH(i1) = BRinvH(i1)+gP(i1,i_count) \n"];
                    	];
                	];,
            PseudoScalar,
            	If[p1===HiggsBoson && p2===HiggsBoson,
                	WriteString[sphenoDecay,"If (gt1.eq.gt2) Then \n"];
                	
                WriteString[sphenoDecay, 
                  "  BRAHH(i1,gt1) = gP(i1,i_count) \n"];
                	WriteString[sphenoDecay, "End if \n"];,
                	If[p1===PseudoScalar && p2===PseudoScalar,
                    	WriteString[sphenoDecay,"If (gt1.eq.gt2) Then \n"];
                    	
                    WriteString[sphenoDecay, 
                      "  BRAAA(i1,gt1) = gP(i1,i_count) \n"];
                    	WriteString[sphenoDecay, "End if \n"];
                    	];,
                	If[AntiField[p1]===p1 && AntiField[p2]===p2,
                    	
                    WriteString[sphenoDecay, 
                        "  BRinvA(i1) = BRinvA(i1)+gP(i1,i_count) \n"];
                    	];
                	];,
            ChargedHiggs,
            	Switch[RE[p1],
                		Neutrino,
                			
                WriteString[sphenoDecay,
                  "If ((gt1.eq.gt2).and.(gt1.eq.3)) Then \n"];
                			
                WriteString[sphenoDecay, "  BR_Htaunu = gP(i1,i_count) \n"];
                			WriteString[sphenoDecay, "End if \n"];,
                		Lepton,
                			
                WriteString[sphenoDecay,
                  "If ((gt1.eq.gt2).and.(gt1.eq.3)) Then \n"];
                			
                WriteString[sphenoDecay, "  BR_Htaunu = gP(i1,i_count) \n"];
                			WriteString[sphenoDecay, "End if \n"];,
                		BottomQuark,
                			If[RE[p2]===TopQuark,
                    			
                    WriteString[sphenoDecay,
                      "If ((gt1.eq.3).and.(gt2.eq.2)) Then \n"];
                    			
                    WriteString[sphenoDecay, "  BR_Hcb = gP(i1,i_count) \n"];
                    			WriteString[sphenoDecay, "End if \n"];
                    			
                    WriteString[sphenoDecay,
                      "If ((gt1.eq.2).and.(gt2.eq.2)) Then \n"];
                    			
                    WriteString[sphenoDecay, "  BR_Hcs = gP(i1,i_count) \n"];
                    			WriteString[sphenoDecay, "End if \n"];
                    			];,
                		TopQuark,
                			If[RE[p2]===BottomQuark,
                    			
                    WriteString[sphenoDecay,
                      "If ((gt1.eq.2).and.(gt2.eq.3)) Then \n"];
                    			
                    WriteString[sphenoDecay, "  BR_Hcb = gP(i1,i_count) \n"];
                    			WriteString[sphenoDecay, "End if \n"];
                    			
                    WriteString[sphenoDecay,
                      "If ((gt1.eq.2).and.(gt2.eq.2)) Then \n"];
                    			
                    WriteString[sphenoDecay, "  BR_Hcs = gP(i1,i_count) \n"];
                    			WriteString[sphenoDecay, "End if \n"];
                    			];
                		];,
            TopQuark,
            	Switch[RE[p1],
                	VectorW,
                		If[RE[p2]===BottomQuark,
                    			WriteString[sphenoDecay,"If (gt2.eq.3) Then \n"];
                    			
                    WriteString[sphenoDecay, "  BR_tWb = gP(i1,i_count) \n"];
                    			WriteString[sphenoDecay, "End if \n"];
                    				];,
                	BottomQuark,
                		If[RE[p2]===VectorW,
                    			WriteString[sphenoDecay,"If (gt1.eq.3) Then \n"];
                    			
                    WriteString[sphenoDecay, "  BR_tWb = gP(i1,i_count) \n"];
                    			WriteString[sphenoDecay, "End if \n"];,
                        	If[RE[p2]===ChargedHiggs,
                        		WriteString[sphenoDecay,"If (gt1.eq.3) Then \n"];
                        		
                        WriteString[sphenoDecay, 
                          "  BR_tHb = gP(i1,i_count) \n"];
                        		WriteString[sphenoDecay, "End if \n"];
                        		];
                    		];,
                	ChargedHiggs,
                		If[RE[p2]===BottomQuark,
                    		WriteString[sphenoDecay,"If (gt2.eq.3) Then \n"];
                    		
                    WriteString[sphenoDecay, "  BR_tHb = gP(i1,i_count) \n"];
                    		WriteString[sphenoDecay, "End if \n"];
                    				];
                	];
            ];
          
          
          
          WriteString[sphenoDecay, "i_count = i_count +1 \n"];
          
          If[getGenSPheno[p1]>1,
            WriteString[sphenoDecay,"  End Do \n"];
            ];
          If[getGenSPheno[p2]>1,
            WriteString[sphenoDecay,"End Do \n \n"];
            ];
          
          
          i++;];
      If[getGenSPheno[particle]>1,
          
          WriteString[sphenoDecay, 
            "If ((Present(BR)).And.(gT(i1).Eq.0)) Then \n"];
          WriteString[sphenoDecay, "  BR(i1,:) = 0._dp \n"];
          WriteString[sphenoDecay, "Else If (Present(BR)) Then \n"];
          WriteString[sphenoDecay, "  BR(i1,:) = gP(i1,:)/gT(i1) \n"];
          WriteString[sphenoDecay, "End if \n \n"];
          WriteString[sphenoDecay, "End Do \n \n"];,
          
          
          WriteString[sphenoDecay, 
            "If ((Present(BR)).And.(gT.Eq.0)) Then \n"];
          WriteString[sphenoDecay, "  BR(1,:) = 0._dp \n"];
          WriteString[sphenoDecay, "Else If (Present(BR)) Then \n"];
          WriteString[sphenoDecay, "  BR(1,:) = gP(1,:)/gT \n"];
          WriteString[sphenoDecay, "End if \n \n"];
          
          
          
          ]; 
      
      
      WriteString[sphenoDecay, "Iname = Iname - 1 \n \n"];
      
      
      If[particle === HiggsBoson || particle === PseudoScalar,
          WriteString[sphenoDecay, "Contains \n \n"];
          
          If[particle === HiggsBoson ,
            AppendSourceCode["FFqcdScalar.f90",sphenoDecay];,
            AppendSourceCode["FFqcdPseudoScalar.f90",sphenoDecay];
            ];
          
          ];
      
      
      
      WriteString[sphenoDecay, 
          "End Subroutine "<>ToString[particle]<>"TwoBodyDecay"<>"\n \n \n"];
      
      ];

CountNumberEntries[FullInformation_]:=Block[{i,channels},
      channels=0;
      For[i=1,i\[LessEqual]Length[FullInformation],
        channels += (1+getGenSPheno[FullInformation[[i,1]]]-
                getGenSPhenoStart[FullInformation[[i,1]]])*(1+
                getGenSPheno[FullInformation[[i,2]]]-
                getGenSPhenoStart[FullInformation[[i,2]]]);
        i++;];
      Return[channels];
      ];








 

