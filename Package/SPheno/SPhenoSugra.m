(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

GenerateSugraRuns:=Block[{currentRegime,readRegime},
      sphenoSugra=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,
            "SugraRuns_"<>ModelName<>".f90"]];
      
      WriteHeadSugraRuns;
      GenerateBoundarySUSY;
      GenerateBoundaryHS;
      
      If[getGen[Electron]\[Equal]3 && getGen[Electron]\[Equal]3 && 
          getGen[Electron]\[Equal]3,
        GenerateBoundaryEW;,
        GenerateBoundaryEW2;
        ]; 
      
      
      
      GenerateSugra;
      GenerateRunRGE;
      GenerateFirstGuess;
      
      GenerateSetFunctions ;
      
      WriteString[sphenoSugra, "End Module SugraRuns_"<>ModelName<>" \n"];
      
      
      Close[sphenoSugra];
      ];

WriteHeadSugraRuns:=Block[{i},
      
      
      Print["-----------------------------------"];
      Print["Write SugraRuns"];
      Print["-----------------------------------"];
      
      
      WriteString[sphenoSugra,"Module SugraRuns_"<>ModelName<>" \n \n"];
      WriteString[sphenoSugra, "Use Control \n"];
      WriteString[sphenoSugra, "Use LoopCouplings_"<>ModelName<>" \n"];
      WriteString[sphenoSugra, "Use LoopMasses_"<>ModelName<>" \n"];
      WriteString[sphenoSugra, "Use LoopFunctions \n"];
      WriteString[sphenoSugra, "Use Mathematics \n"];
      WriteString[sphenoSugra, "Use Model_Data_"<>ModelName<>" \n"];
      WriteString[sphenoSugra, "Use RGEs_"<>ModelName<>" \n"];
      If[Head[RegimeNr]===Integer,
        WriteString[sphenoSugra, "Use ShiftParameters_"<>ModelName<>" \n"];
        ];
      WriteString[sphenoSugra, "Use StandardModel \n \n"];
      
      WriteString[sphenoSugra, "Real(dp), save :: n5plets \n"];
      WriteString[sphenoSugra, "Integer, save :: n10plets, YukScen \n"];
      WriteString[sphenoSugra, 
        "Real(dp), save :: Lambda, MlambdaS,F_GMSB \n"];
      WriteString[sphenoSugra, "Real(dp),save::mGUT_save,sinW2_DR_mZ&\n"];
      WriteString[sphenoSugra, 
        "&,mf_l_DR_SM(3),mf_d_DR_SM(3),mf_u_DR_SM(3)\n"];
      WriteString[sphenoSugra, 
        "Complex(dp),save::Yl_mZ(3,3),Yu_mZ(3,3),Yd_mZ(3,3)\n"];
      WriteString[sphenoSugra, "Real(dp),Save::vevs_DR_save(2)\n"];
      
      WriteString[sphenoSugra, "Integer,Private,save::YukawaScheme=1\n"];
      WriteString[sphenoSugra, 
        "Logical, Private, save :: CheckSugraDetails(10) =.False. & \n"];
      WriteString[sphenoSugra, 
        "                        &, SugraErrors(10) =.False. &\n"];
      WriteString[sphenoSugra, 
        "                        &, StrictUnification =.False. &\n"];
      WriteString[sphenoSugra, 
        "                        &, UseFixedScale =.False. &\n"];
      WriteString[sphenoSugra, 
        "                        &, UseFixedGUTScale =.False. \n"];
      WriteString[sphenoSugra, "Real(dp), Private, save :: GUT_scale \n"];
      WriteString[sphenoSugra, 
        "Logical, save :: IgnoreNegativeMasses = .False.\n"];
      WriteString[sphenoSugra, 
        "Logical, save :: IgnoreNegativeMassesMZ = .False.\n"];
      WriteString[sphenoSugra, "Logical, save :: Write_WHIZARD = .True.\n"];
      
      
      WriteString[sphenoSugra, "Integer,save::BoundaryCondition=1\n"];
      
      If[Head[RegimeNr]===Integer,
        WriteString[sphenoSugra, 
            "Logical, save :: ThresholdMassesCalculated = .False.\n"];
        ];
      For[i=1,i\[LessEqual]Length[ListAllInputParameters],
        WriteString[sphenoSugra, 
          "Logical, save :: InputValuefor"<>SPhenoForm[
              ListAllInputParameters[[i,1]]]  <>" =.False. \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listParametersOtherRegimes],
        WriteString[sphenoSugra, 
          "Logical, save :: InputValuefor"<>SPhenoForm[
              listParametersOtherRegimes[[i]]]  <>" =.False. \n"];
        i++;];
      
      
      
      WriteString[sphenoSugra, "Contains \n \n"];
      ];




GenerateSugra:=Block[{i,j,NumberNewMasses},
      
      Print["Write Sugra"];
      
      MakeSubroutine[];
      
      MakeSubroutineTitle["Sugra",
        Join[NewMassParameters,listAllParameters], {"delta0"},{"mGut","kont","WriteComment",
          "niter"},sphenoSugra];
      
      WriteString[sphenoSugra,"Implicit None\n"];
      
      WriteString[sphenoSugra,"Logical,Intent(in) :: WriteComment\n"];
      WriteString[sphenoSugra,"Integer,Intent(inout) :: kont\n"];
      WriteString[sphenoSugra,"Integer,Intent(in) :: niter\n"];
      If[FreeQ[BoundarySUSYScale,TADPOLES],
        WriteString[sphenoSugra,
            "Real(dp) :: delta0,deltaG0, gA("<>ToString[numberAll]<>"), gB("<>
              ToString[numberLow] <>")\n"];,
        WriteString[sphenoSugra,
            "Real(dp) :: delta0,deltaG0, gA("<>ToString[numberAllwithVEVs]<>"), gB("<>
              ToString[numberAllwithVEVs]<>")\n"];
        ];
      WriteString[sphenoSugra,
        "Real(dp) :: gC("<>ToString[numberAllwithVEVs]<>"),  gD("<>
          ToString[numberAllwithVEVs]<>") \n"];
      WriteString[sphenoSugra,"Real(dp),Intent(out) :: mGUT\n"];
      MakeVariableList[NewParametersFromTadpoles,"",sphenoSugra];
      WriteString[sphenoSugra, 
        "Complex(dp) :: Tad1Loop("<>ToString[Length[TEqu]]<>") \n"];
      MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",
        sphenoSugra];
      WriteString[sphenoSugra, 
        "Real(dp) :: comp("<>ToString[Length[SubSolutionsTadpolesLoop]]<>
          "), tanbQ, vev2 \n"];
      MakeVariableList[HiggsSoftBreakingMassesTemp,"",sphenoSugra];
      MakeVariableList[namesTadpoles,"",sphenoSugra];
      
      MakeVariableList[NewMassParameters,",Intent(inout)",sphenoSugra];
      MakeVariableList[listAllParameters,",Intent(inout)",sphenoSugra];
      NumberNewMasses = ToString[Plus@@Transpose[NewMasses][[2]]];
      WriteString[sphenoSugra,
        "Real(dp) ::mass_new("<>NumberNewMasses<>"),mass_old("<>
          NumberNewMasses<>"),diff_m("<>NumberNewMasses<>")\n"];
      WriteString[sphenoSugra, 
        "Real(dp) :: tz,dt,q,q2,mudim, vev, sinW2 \n"];
      WriteString[sphenoSugra,
        "Logical::FoundResult, SignMassChangedSave \n"];
      WriteString[sphenoSugra,"Integer::j,n_tot, i_count\n"];
      WriteString[sphenoSugra,"Iname=Iname+1\n"];
      WriteString[sphenoSugra,"NameOfUnit(Iname)='Sugra'\n"];
      
      WriteString[sphenoSugra,"kont=0\n"];
      WriteString[sphenoSugra,"FoundResult= .False.\n"];
      
      WriteString[sphenoSugra,"n_tot =1\n"];
      For[i=1,i\[LessEqual]Length[NewMasses],
        WriteString[sphenoSugra,
          "mass_old(n_tot:n_tot+"<>ToString[NewMasses[[i,2]]]<>") = " <>
            ToString[NewMasses[[i,1]]]<> "\n"];
        WriteString[sphenoSugra,
          "n_tot = n_tot + " <>ToString[NewMasses[[i,2]]] <>" \n"];
        i++;
        ];
      
      WriteString[sphenoSugra,"If (.Not.UseFixedScale) Then \n"];
      WriteString[sphenoSugra,
        "mudim=Max(mZ**2,"<> SPhenoMass[TopSquark,1]<>"*"<> 
          SPhenoMass[TopSquark,2]<>") \n"];
      WriteString[sphenoSugra,"Call SetRGEScale(mudim) \n"];
      WriteString[sphenoSugra,"UseFixedScale= .False. \n"];
      WriteString[sphenoSugra,"End If \n"];
      
      
      
      WriteString[sphenoSugra,"Do j=1,niter \n"];
      
      WriteString[sphenoSugra,"Write(*,*) \"sugra \", j,\".-iteration\" \n"];
      WriteString[sphenoSugra,
        "Write(ErrCan,*) \"sugra \", j,\".-iteration\" \n"];
      
      MakeCall["BoundaryEW",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{"j"},{"delta0",
          "gB","kont"},sphenoSugra];
      
      
      WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
      WriteString[sphenoSugra,"Iname=Iname-1\n"];
      WriteString[sphenoSugra,
        "    Write(*,*) \" Problem with boundary conditions at EW scale\" \n"]\
;
      WriteString[sphenoSugra,"    Call TerminateProgram\n"];
      WriteString[sphenoSugra,"End If\n \n"];
      
      WriteString[sphenoSugra,
        "Call RunRGE(kont,0.1_dp*delta0,gB,gA,mGUT)\n \n"];
      
      If[FreeQ[BoundarySUSYScale,TADPOLES],
        MakeCall["GToParameters"<>ToString[numberAll],
            listAllParameters,{"gA"},{},sphenoSugra];,
        MakeCall["GToParameters"<>ToString[numberAllwithVEVs],
            listAllParametersAndVEVs,{"gA"},{},sphenoSugra];
        ];
      
      WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
      WriteString[sphenoSugra,"Iname=Iname-1\n"];
      WriteString[sphenoSugra,
        "    Write(*,*) \" RGE running not possible\" \n"];
      WriteString[sphenoSugra,"    Call TerminateProgram\n"];
      WriteString[sphenoSugra,"End If\n"];
      
      WriteString[sphenoSugra,"mudim=GetRenormalizationScale() \n"];
      WriteString[sphenoSugra,"Q=Sqrt(mudim) \n"];
      WriteString[sphenoSugra,"Q2=mudim \n"];
      WriteString[sphenoSugra,"tz=Log(Q/mZ)\n"];
      WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
      WriteString[sphenoSugra,ToString[VEVSM1]<>"=1._dp\n"];
      WriteString[sphenoSugra,ToString[VEVSM2]<>"=tanbeta \n"];
      
      If[SeveralBoundaryConditions\[Equal]False,
        For[i=1,i\[LessEqual]Length[BoundarySUSYScale],
            
            If[(BoundarySUSYScale[[i,2]]=!= 
                    RUNNING) &&  (BoundarySUSYScale[[i,2]]=!= TADPOLES),
              If[FreeQ[BoundarySUSYScale[[i,2]],DIAGONAL]\[Equal]True,
                  
                  WriteString[sphenoSugra,
                      SPhenoForm[BoundarySUSYScale[[i,1]]]<>" = " <> 
                        SPhenoForm[BoundarySUSYScale[[i,2]]]<>"\n"];,
                  
                  WriteString[sphenoSugra,
                    "Do i1=1,"<>ToString[
                        getDimSPheno[BoundarySUSYScale[[i,1]]][[1]]]<>"\n"];
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundarySUSYScale[[i,1]]]<>"(i1,i1) = " <> 
                      SPhenoForm[
                        BoundarySUSYScale[[i,2]] /. DIAGONAL\[Rule]1]<>"\n"];
                  WriteString[sphenoSugra,"End Do\n"];
                  ];
              ];
            i++;];,
        
        WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
        For[j=1,j\[LessEqual]Length[BoundarySUSYScale],
          WriteString[sphenoSugra,"Case ("<>ToString[j]<>") \n"];
          For[i=1,i\[LessEqual]Length[BoundarySUSYScale[[j]]],
            
            If[(BoundarySUSYScale[[j,i,2]]=!= 
                    RUNNING) &&  (BoundarySUSYScale[[j,i,2]]=!= TADPOLES),
              If[FreeQ[BoundarySUSYScale[[j,i,2]],DIAGONAL]\[Equal]True,
                  
                  WriteString[sphenoSugra,
                      SPhenoForm[BoundarySUSYScale[[j,i,1]]]<>" = " <> 
                        SPhenoForm[BoundarySUSYScale[[j,i,2]]]<>"\n"];,
                  
                  WriteString[sphenoSugra,
                    "Do i1=1,"<>ToString[
                        getDimSPheno[BoundarySUSYScale[[j,i,1]]][[1]]]<>
                      "\n"];
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundarySUSYScale[[j,i,1]]]<>"(i1,i1) = " <> 
                      SPhenoForm[
                        BoundarySUSYScale[[j,i,2]] /. DIAGONAL\[Rule]1]<>
                      "\n"];
                  WriteString[sphenoSugra,"End Do\n"];
                  ];
              ];
            i++;];
          j++;];
        WriteString[sphenoSugra,"End Select \n\n"];
        
        ];
      
      MakeCall["ParametersToG"<>ToString[ numberAllwithVEVs],
        listAllParametersAndVEVs,{},{"gC"},sphenoSugra];
      
      WriteString[sphenoSugra,
        "Call odeint(gC,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,0.1_dp*delta0,dt,0._dp,rge"<>
          ToString[numberAllwithVEVs]<>",kont)\n"];
      
      MakeCall["GToParameters"<>ToString[numberAllwithVEVs],
        listAllParametersAndVEVs,{"gC"},{},sphenoSugra];
      
      WriteString[sphenoSugra,"If(SPA_Convention) Then \n"];
      WriteString[sphenoSugra,
        "  tanbetaMZ = "<>ToString[VEVSM2]<>"/"<>ToString[VEVSM1] <>" \n"];
      WriteString[sphenoSugra,"Else \n"];
      WriteString[sphenoSugra,"  tanbetaMZ = tanbeta \n"];
      WriteString[sphenoSugra,"End If \n"];
      
      WriteString[sphenoSugra,
        ToString[VEVSM1]<>" = "<>ToString[VEVSM1]<>"MZ\n"];
      WriteString[sphenoSugra,
        ToString[VEVSM2]<>" = "<>ToString[VEVSM2]<>"MZ\n"];
      
      If[SeveralBoundaryConditions\[Equal]False,
        For[i=1,i\[LessEqual]Length[BoundaryEWSBScale],
            
            WriteString[sphenoSugra,
              SPhenoForm[BoundaryEWSBScale[[i,1]]]<>" = " <> 
                SPhenoForm[BoundaryEWSBScale[[i,2]]]  <> "\n"];
            i++;];,
        WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
        For[j=1,j\[LessEqual]Length[BoundaryEWSBScale],
          WriteString[sphenoSugra,"Case ("<>ToString[j]<>") \n"];
          For[i=1,i\[LessEqual]Length[BoundaryEWSBScale[[j]]],
            
            WriteString[sphenoSugra,
              SPhenoForm[BoundaryEWSBScale[[j,i,1]]]<>" = " <> 
                SPhenoForm[BoundaryEWSBScale[[j,i,2]]]  <> "\n"];
            i++;];
          j++;];
        WriteString[sphenoSugra,"End Select \n\n"];
        ];
      
      MakeCall["ParametersToG"<>ToString[ numberAllwithVEVs],
        listAllParametersAndVEVs,{},{"gD"},sphenoSugra];
      
      WriteString[sphenoSugra,"tz=Log(mZ/Q)\n"];
      WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
      WriteString[sphenoSugra,
        "Call odeint(gD,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,0.1_dp*delta0,dt,0._dp,rge"<>
          ToString[numberAllwithVEVs]<>",kont)\n"];
      MakeCall["GToParameters"<>ToString[numberAllwithVEVs],
        listAllParametersAndVEVs,{"gD"},{},sphenoSugra];
      
      For[i=1,i\[LessEqual]Length[Gauge],
        If[Gauge[[i,2,1]]\[Equal]1,
          
          WriteString[sphenoSugra,
              SPhenoForm[Gauge[[i,4]]]<> " = "<>SPhenoForm[GUTren[i]]<>"*" <> 
                SPhenoForm[Gauge[[i,4]]]<>" \n\n"]; 
          ];
        i++;
        ];
      
      WriteString[sphenoSugra,"If(SPA_Convention) Then \n"];
      WriteString[sphenoSugra,"  tanbQ = tanbeta \n"];
      WriteString[sphenoSugra,"Else \n"];
      WriteString[sphenoSugra,
        "  tanbQ = "<>ToString[VEVSM2]<>"/"<>ToString[VEVSM1] <>" \n"];
      WriteString[sphenoSugra,"End If \n"];
      
      WriteString[sphenoSugra,
        "vev2=4._dp*Real(mZ2,dp)/("<>SPhenoForm[hyperchargeCoupling] <>"**2+"<>
          SPhenoForm[leftCoupling] <>"**2)\n"];
      WriteString[sphenoSugra,
        SPhenoForm[VEVSM1]<> "=Sqrt(vev2/(1._dp+tanbQ**2))\n"];
      WriteString[sphenoSugra,
        SPhenoForm[VEVSM2]<> "=tanbQ*"<>SPhenoForm[VEVSM1]<> "\n"];
      
      
      
      If[SeveralBoundaryConditions===False,
        For[i=1,i\[LessEqual]Length[BoundarySUSYScale],
            
            If[(BoundarySUSYScale[[i,2]]=!= 
                    RUNNING) &&  (BoundarySUSYScale[[i,2]]=!= TADPOLES),
              If[FreeQ[BoundarySUSYScale[[i,2]],DIAGONAL]\[Equal]True,
                  
                  WriteString[sphenoSugra,
                      SPhenoForm[BoundarySUSYScale[[i,1]]]<>" = " <> 
                        SPhenoForm[BoundarySUSYScale[[i,2]]]<>"\n"];,
                  
                  WriteString[sphenoSugra,
                    "Do i1=1,"<>ToString[
                        getDimSPheno[BoundarySUSYScale[[i,1]]][[1]]]<>"\n"];
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundarySUSYScale[[i,1]]]<>"(i1,i1) = " <> 
                      SPhenoForm[
                        BoundarySUSYScale[[i,2]] /. DIAGONAL\[Rule]1]<>"\n"];
                  WriteString[sphenoSugra,"End Do\n"];
                  ];
              ];
            i++;];,
        WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
        For[j=1,j\[LessEqual]Length[BoundarySUSYScale],
          WriteString[sphenoSugra,"Case ("<>ToString[j]<>") \n"];
          For[i=1,i\[LessEqual]Length[BoundarySUSYScale[[j]]],
            
            If[(BoundarySUSYScale[[j,i,2]]=!= 
                    RUNNING) &&  (BoundarySUSYScale[[j,i,2]]=!= TADPOLES),
              If[FreeQ[BoundarySUSYScale[[j,i,2]],DIAGONAL]\[Equal]True,
                  
                  WriteString[sphenoSugra,
                      SPhenoForm[BoundarySUSYScale[[j,i,1]]]<>" = " <> 
                        SPhenoForm[BoundarySUSYScale[[j,i,2]]]<>"\n"];,
                  
                  WriteString[sphenoSugra,
                    "Do i1=1,"<>ToString[
                        getDimSPheno[BoundarySUSYScale[[j,i,1]]][[1]]]<>
                      "\n"];
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundarySUSYScale[[j,i,1]]]<>"(i1,i1) = " <> 
                      SPhenoForm[
                        BoundarySUSYScale[[j,i,2]] /. DIAGONAL\[Rule]1]<>
                      "\n"];
                  WriteString[sphenoSugra,"End Do\n"];
                  ];
              ];
            i++;];
          j++;];
        WriteString[sphenoSugra,"End Select \n\n"];
        ];
      
      
      
      (* WriteString[sphenoSugra, 
            ToString[hyperchargeCoupling] <> " = Sqrt(3._dp/5._dp)*" <>  
              ToString[hyperchargeCoupling] <> " \n\n"]; *)
      
      WriteTadpoleSolution[sphenoSugra];
      MakeCall["OneLoopMasses",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},
        sphenoSugra];
      
      
      WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
      WriteString[sphenoSugra,"Iname=Iname-1\n"];
      WriteString[sphenoSugra,
        "    Write(*,*) \" Problem in FirstGuess\" \n"];
      WriteString[sphenoSugra,"    Call TerminateProgram\n"];
      WriteString[sphenoSugra,"End If\n"];
      
      
      
      WriteString[sphenoSugra,"n_tot =1\n"];
      
      For[i=1,i\[LessEqual]Length[NewMasses],
        WriteString[sphenoSugra,
          "mass_new(n_tot:n_tot+"<>ToString[NewMasses[[i,2]]-1]<>") = " <>
            ToString[NewMasses[[i,1]]]<> "\n"];
        If[i<Length[NewMasses],
          
          WriteString[sphenoSugra,
              "n_tot = n_tot + " <>ToString[NewMasses[[i,2]]] <>" \n"];
          ];
        i++;
        ];
      
      
      WriteString[sphenoSugra,"diff_m=Abs(mass_new-mass_old)\n"];
      WriteString[sphenoSugra,
        "Where (Abs(mass_old).Gt.0._dp) diff_m=diff_m/Abs(mass_old)\n"];
      WriteString[sphenoSugra,"deltag0=Maxval(diff_m)\n"];
      
      WriteString[sphenoSugra,
        "If (WriteComment) Write(*,*) \"Sugra,Comparing\",deltag0\n"];
      
      WriteString[sphenoSugra,
        "If ((deltag0.Lt.delta0).And.(j.Gt.1)) Then! require at least two iterations\n"]\
;
      WriteString[sphenoSugra,"   FoundResult= .True.\n"];
      WriteString[sphenoSugra,"If (SignOfMassChanged) Then\n"];
      WriteString[sphenoSugra,"  If (.Not.IgnoreNegativeMasses) Then\n"];
      WriteString[sphenoSugra,"   Call TerminateProgram \n"];
      WriteString[sphenoSugra,"  Else \n"];
      WriteString[sphenoSugra,"   SignOfMassChanged = .False. \n"];
      WriteString[sphenoSugra,"  End If\n"];
      WriteString[sphenoSugra,"End If\n"];
      WriteString[sphenoSugra,"Exit\n"];
      WriteString[sphenoSugra,"Else\n"];
      
      WriteString[sphenoSugra,"If (SignOfMassChanged) Then\n"];
      WriteString[sphenoSugra,
        "  If ((j.gt.4).And.(.Not.IgnoreNegativeMasses)) Then\n"];
      WriteString[sphenoSugra,"   Call TerminateProgram \n"];
      WriteString[sphenoSugra,"  Else \n"];
      WriteString[sphenoSugra,"   SignOfMassChanged = .False. \n"];
      WriteString[sphenoSugra,"  End If\n"];
      WriteString[sphenoSugra,"End If\n"];
      
      WriteString[sphenoSugra,"mass_old=mass_new \n"];
      
      
      MakeCall["GToParameters"<>ToString[numberAllwithVEVs],
        listAllParametersAndVEVs,{"gC"},{},sphenoSugra];
      WriteString[sphenoSugra,
        ToString[VEVSM1]<>" = "<>ToString[VEVSM1]<>"MZ \n"];
      WriteString[sphenoSugra,
        ToString[VEVSM2]<>" = "<>ToString[VEVSM2]<>"MZ \n"];
      
      For[i=1,i\[LessEqual]Length[Gauge],
        If[Gauge[[i,2,1]]\[Equal]1,
          
          WriteString[sphenoSugra,
              SPhenoForm[Gauge[[i,4]]]<> " = "<>SPhenoForm[GUTren[i]]<>"*" <> 
                SPhenoForm[Gauge[[i,4]]]<>" \n\n"]; 
          ];
        i++;
        ];
      
      (* WriteString[sphenoSugra, 
            ToString[hyperchargeCoupling] <> " = Sqrt(3._dp/5._dp)*" <>  
              ToString[hyperchargeCoupling]<>" \n\n"]; *)
      
      If[SeveralBoundaryConditions===False,
        For[i=1,i\[LessEqual]Length[BoundaryEWSBScale],
            
            WriteString[sphenoSugra,
              SPhenoForm[BoundaryEWSBScale[[i,1]]]<>" = " <> 
                SPhenoForm[BoundaryEWSBScale[[i,2]]]  <> "\n"];
            i++;];,
        
        WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
        For[j=1,j\[LessEqual]Length[BoundaryEWSBScale],
          WriteString[sphenoSugra,"Case ("<>ToString[j]<>") \n"];
          For[i=1,i\[LessEqual]Length[BoundaryEWSBScale[[j]]],
            
            WriteString[sphenoSugra,
              SPhenoForm[BoundaryEWSBScale[[j,i,1]]]<>" = " <> 
                SPhenoForm[BoundaryEWSBScale[[j,i,2]]]  <> "\n"];
            i++;];
          j++;];
        WriteString[sphenoSugra,"End Select \n\n"];
        
        ];
      
      (* For[i=1,i\[LessEqual]Length[SubSolutionsTadpolesTree],
            
            WriteString[sphenoSugra,
              FortranLineBreak[
                  SPhenoForm[SubSolutionsTadpolesTree[[i,1]]]<>" = " <> 
                    SPhenoForm[SubSolutionsTadpolesTree[[i,2]]]]  <> "\n"];
            i++;]; *)
      
      WriteTadpoleSolution[sphenoSugra];
      
      WriteString[sphenoSugra,"If (IgnoreNegativeMassesMZ) Then \n"];
      WriteString[sphenoSugra,
        "  SignMassChangedSave = SignOfMassChanged \n"];
      WriteString[sphenoSugra,"End if \n"];
      
      MakeCall["TreeMasses",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing",
          "kont"},sphenoSugra];
      
      WriteString[sphenoSugra,"If (IgnoreNegativeMassesMZ) Then \n"];
      WriteString[sphenoSugra,
        "  SignOfMassChanged = SignMassChangedSave  \n"];
      WriteString[sphenoSugra,"End if \n"];
      
      WriteString[sphenoSugra,"If (.Not.UseFixedScale) Then \n"];
      WriteString[sphenoSugra,
        "mudim=Max(mZ**2,"<> SPhenoForm[RenormalizationScale]<>") \n"];
      WriteString[sphenoSugra,"Call SetRGEScale(mudim) \n"];
      WriteString[sphenoSugra,"UseFixedScale= .False. \n"];
      WriteString[sphenoSugra,"End If \n"];
      
      
      WriteString[sphenoSugra,"End If\n"];
      WriteString[sphenoSugra,"End Do\n"];
      
      
      WriteString[sphenoSugra,"Iname=Iname-1\n \n"];
      
      WriteString[sphenoSugra,"End Subroutine Sugra\n \n"];
      
      ];

GenerateBoundaryHS:=Block[{i,j},
      
      Print["Write BoundaryHS"];
      
      WriteString[sphenoSugra,"Subroutine BoundaryHS(gA,gB) \n"];
      
      WriteString[sphenoSugra,"Implicit None \n"];
      WriteString[sphenoSugra,"Real(dp),Intent(in)::gA(:)\n"];
      WriteString[sphenoSugra,"Real(dp),Intent(out)::gB(:)\n"];
      WriteString[sphenoSugra,"Integer::i1,i2\n"];
      MakeVariableList[Transpose[LowScaleList][[1]],"",sphenoSugra];
      If[Length[HighScaleList]>1,
        MakeVariableList[Transpose[HighScaleList][[1]],"",sphenoSugra];
        ];
      If[FreeQ[BoundarySUSYScale,TADPOLES]\[Equal]False,
        MakeVariableList[listVEVs,"",sphenoSugra];
        ];
      
      WriteString[sphenoSugra,"Iname=Iname+1\n"];
      WriteString[sphenoSugra,"NameOfUnit(Iname)='BoundaryHS'\n"];
      
      If[Head[RegimeNr]===Integer,
        MakeCall["GToParameters"<>ToString[NumberLowAllRegimes[[1]]]<>"R1",
            LowScaleParametersAllRegimes[[1]],{"gA"},{},sphenoSugra];,
        If[FreeQ[BoundarySUSYScale,TADPOLES],
            
            MakeCall["GToParameters"<>ToString[numberLow],
                lowScaleNames,{"gA"},{},sphenoSugra];,
            
            MakeCall["GToParameters"<>ToString[numberAllwithVEVs],
                listAllParametersAndVEVs,{"gA"},{},sphenoSugra];
            ];
        ];
      
      If[SeveralBoundaryConditions===False,
        For[i=1,i\[LessEqual]Length[BoundaryHighScale],
            
            If[FreeQ[Transpose[ListAllInputParameters][[1]],
                    BoundaryHighScale[[i,1]]]\[Equal]False || 
                FreeQ[listParametersOtherRegimes,
                    BoundaryHighScale[[i,1]]]\[Equal]False,
              
              WriteString[sphenoSugra,
                "If (InputValuefor"<>SPhenoForm[BoundaryHighScale[[i,1]]] <>
                  ") Then \n"];
              
              WriteString[sphenoSugra,
                SPhenoForm[BoundaryHighScale[[i,1]]]<>" = " <> 
                  SPhenoForm[BoundaryHighScale[[i,1]]]<>"IN \n"];
              WriteString[sphenoSugra,"Else \n"];
              ];
            If[BoundaryHighScale[[i,2]]=!= RUNNING,
              If[FreeQ[BoundaryHighScale[[i,2]],DIAGONAL]\[Equal]True,
                  
                  WriteString[sphenoSugra,
                      SPhenoForm[BoundaryHighScale[[i,1]]]<>" = " <> 
                        SPhenoForm[BoundaryHighScale[[i,2]]]<>"\n"];,
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundaryHighScale[[i,1]]]<>" = 0._dp \n"];
                  
                  WriteString[sphenoSugra,
                    "Do i1=1,"<>ToString[
                        getDimSPheno[BoundaryHighScale[[i,1]]][[1]]]<>"\n"];
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundaryHighScale[[i,1]]]<>"(i1,i1) = " <> 
                      SPhenoForm[
                        BoundaryHighScale[[i,2]] /. DIAGONAL\[Rule]1]<>"\n"];
                  WriteString[sphenoSugra,"End Do\n"];
                  ];
              ];
            
            If[FreeQ[Transpose[ListAllInputParameters][[1]],
                    BoundaryHighScale[[i,1]]]\[Equal]False || 
                FreeQ[listParametersOtherRegimes,
                    BoundaryHighScale[[i,1]]]\[Equal]False,
              WriteString[sphenoSugra,"End If \n"]
              ];
            i++;];,
        
        
        WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
        For[j=1,j\[LessEqual]Length[BoundaryHighScale],
          WriteString[sphenoSugra,"Case ("<>ToString[j]<>") \n"];
          For[i=1,i\[LessEqual]Length[BoundaryHighScale[[j]]],
            
            If[FreeQ[Transpose[ListAllInputParameters][[1]],
                    BoundaryHighScale[[j,i,1]]]\[Equal]False || 
                FreeQ[listParametersOtherRegimes,
                    BoundaryHighScale[[j,i,1]]]\[Equal]False,
              
              WriteString[sphenoSugra,
                "If (InputValuefor"<>SPhenoForm[BoundaryHighScale[[j,i,1]]] <>
                  ") Then \n"];
              
              WriteString[sphenoSugra,
                SPhenoForm[BoundaryHighScale[[j,i,1]]]<>" = " <> 
                  SPhenoForm[BoundaryHighScale[[j,i,1]]]<>"IN \n"];
              WriteString[sphenoSugra,"Else \n"]
              ];
            If[BoundaryHighScale[[j,i,2]]=!= RUNNING,
              If[FreeQ[BoundaryHighScale[[j,i,2]],DIAGONAL]\[Equal]True,
                  WriteString[sphenoSugra,
                      SPhenoForm[BoundaryHighScale[[j,i,1]]]<>" = " <> 
                        SPhenoForm[BoundaryHighScale[[j,i,2]]]<>"\n"];,
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundaryHighScale[[j,i,1]]]<>" = 0._dp \n"];
                  
                  WriteString[sphenoSugra,
                    "Do i1=1,"<>ToString[
                        getDimSPheno[BoundaryHighScale[[j,i,1]]][[1]]]<>
                      "\n"];
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundaryHighScale[[j,i,1]]]<>"(i1,i1) = " <> 
                      SPhenoForm[
                        BoundaryHighScale[[j,i,2]] /. DIAGONAL\[Rule]1]<>
                      "\n"];
                  WriteString[sphenoSugra,"End Do\n"];
                  ];
              ];
            
            If[FreeQ[Transpose[ListAllInputParameters][[1]],
                    BoundaryHighScale[[j,i,1]]]\[Equal]False || 
                FreeQ[listParametersOtherRegimes,
                    BoundaryHighScale[[j,i,1]]]\[Equal]False,
              WriteString[sphenoSugra,"End If \n"]
              ];
            i++;];
          j++;];
        WriteString[sphenoSugra,"End Select \n"];
        ];
      
      If[Head[RegimeNr]=!=Integer,
        For[i=1,i\[LessEqual]Length[highScaleNames],
          
          WriteString[sphenoSugra, 
            SPhenoForm[highScaleNames[[i]]]<>"GUT =" <> 
              SPhenoForm[highScaleNames[[i]]]<>"\n"];
          i++;];
        
        For[i=1,i\[LessEqual]Length[lowScaleNames],
          
          WriteString[sphenoSugra, 
            SPhenoForm[lowScaleNames[[i]]]<>"GUT =" <> 
              SPhenoForm[lowScaleNames[[i]]]<>"\n"];
          i++;];,
        
        For[i=1,i\[LessEqual]Length[DimensionsOtherRegimes[[1]]],
            
            WriteString[sphenoSugra,
              SPhenoForm[DimensionsOtherRegimes[[1,i,1]]]<>"GUT = "<>
                SPhenoForm[DimensionsOtherRegimes[[1,i,1]]]<>"\n"];
            i++;
            ];
        ];
      
      If[Head[RegimeNr]===Integer,
        For[j=1,j<RegimeNr,
            For[i=1,i\[LessEqual]Length[YukawaCouplingsAllRegimes],
              
              If[Length[getDimSPheno[YukawaCouplingsAllRegimes[[j,i]]]]>0 &&
                  getDimSPheno[YukawaCouplingsAllRegimes[[j,i]]]=!={1},
                WriteString[sphenoSugra,
                    "If (Maxval(Abs("<>SPhenoForm[
                        YukawaCouplingsAllRegimes[[j,i]] /. 
                          a_[i1,b___]\[Rule]a]<>")).gt.3_dp) Then \n"];,
                
                WriteString[sphenoSugra,
                    "If (Abs("<>SPhenoForm[
                        YukawaCouplingsAllRegimes[[j,i]] /. 
                          a_[i1,b___]\[Rule]a]<>").gt.3_dp) Then \n"];
                ];
              
              WriteString[sphenoSugra,
                "Write(*,*) \"Non pertubative coupling at GUT scale "<>
                  SPhenoForm[
                    YukawaCouplingsAllRegimes[[j,i]]/. a_[i1,b___]\[Rule]a] <>
                  "\" \n"];
              
              WriteString[sphenoSugra,
                "If (ErrorLevel.gt.0) Call TerminateProgram \n"];
              WriteString[sphenoSugra,"End if \n"];
              i++;];
            For[i=1,i\[LessEqual]Length[GaugeCouplingsAllRegimes],
              
              If[Length[getDimSPheno[GaugeCouplingsAllRegimes[[j,i]]]]>0 &&
                  getDimSPheno[GaugeCouplingsAllRegimes[[j,i]]]=!={1},
                
                WriteString[sphenoSugra,
                    "If (Maxval(Abs("<>SPhenoForm[
                        GaugeCouplingsAllRegimes[[j,i]] /. 
                          a_[i1,b___]\[Rule]a]<>")).gt.3_dp) Then \n"];,
                
                WriteString[sphenoSugra,
                    "If (Abs("<>SPhenoForm[
                        GaugeCouplingsAllRegimes[[j,i]] /. 
                          a_[i1,b___]\[Rule]a]<>").gt.3_dp) Then \n"];
                ];
              
              WriteString[sphenoSugra,
                "Write(*,*) \"Non pertubative coupling at GUT scale "<>
                  SPhenoForm[
                    GaugeCouplingsAllRegimes[[j,i]]/. a_[i1,b___]\[Rule]a] <>
                  "\" \n"];
              
              WriteString[sphenoSugra,
                "If (ErrorLevel.gt.0) Call TerminateProgram \n"];
              WriteString[sphenoSugra,"End if \n"];
              i++;];
            j++;];
        ];
      
      
      For[i=1,i\[LessEqual]Length[BetaYijk],
        If[
          Length[getDimSPheno[BetaYijk[[i,1]]]]>0 &&
            getDimSPheno[BetaYijk[[i,1]]]=!={1},
          
          WriteString[sphenoSugra,
              "If (Maxval(Abs("<>SPhenoForm[
                  BetaYijk[[i,1]] /. a_[i1,b___]\[Rule]a]<>
                ")).gt.3_dp) Then \n"];,
          
          WriteString[sphenoSugra,
              "If (Abs("<>SPhenoForm[BetaYijk[[i,1]] /. a_[i1,b___]\[Rule]a]<>
                ").gt.3_dp) Then \n"];
          ];
        WriteString[sphenoSugra,
          "Write(*,*) \"Non pertubative coupling at GUT scale "<>SPhenoForm[
              BetaYijk[[i,1]]/. a_[i1,b___]\[Rule]a] <>"\" \n"];
        WriteString[sphenoSugra,
          "If (ErrorLevel.gt.0) Call TerminateProgram \n"];
        WriteString[sphenoSugra,"End if \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[BetaGauge],
        If[
          Length[getDimSPheno[BetaGauge[[i,1]]]]>0 &&
            getDimSPheno[BetaGauge[[i,1]]]=!={1},
          
          WriteString[sphenoSugra,
              "If (Maxval(Abs("<>SPhenoForm[BetaGauge[[i,1]]]<>
                ")).gt.3_dp) Then \n"];,
          
          WriteString[sphenoSugra,
              "If (Abs("<>SPhenoForm[BetaGauge[[i,1]]]<>
                ").gt.3_dp) Then \n"];
          ];
        WriteString[sphenoSugra,
          "Write(*,*) \"Non pertubative coupling at GUT scale "<>SPhenoForm[
              BetaGauge[[i,1]]] <>"\" \n"];
        WriteString[sphenoSugra,
          "If (ErrorLevel.gt.0) Call TerminateProgram \n"];
        WriteString[sphenoSugra,"End if \n"];
        i++;];
      
      
      If[Head[RegimeNr]===Integer,
        MakeCall["ParametersToG"<>ToString[NumberHighAllRegimes[[1]]]<>"R1",
            HighScaleParametersAllRegimes[[1]],{},{"gB"},sphenoSugra];,
        MakeCall["ParametersToG"<>ToString[numberAll],
            listAllParameters,{},{"gB"},sphenoSugra];
        ];
      WriteString[sphenoSugra,"Iname=Iname-1\n"];
      
      WriteString[sphenoSugra,"Contains \n"];
      
      
      WriteString[sphenoSugra,"Real(dp) Function gGMSB(ratio) \n"];
      WriteString[sphenoSugra,"Implicit None \n"];
      WriteString[sphenoSugra,"Real(dp),Intent(in)::ratio \n"];
      WriteString[sphenoSugra,
        "gGMSB=(1._dp+ratio)/ratio**2*Log(1._dp+ratio)& \n"];
      WriteString[sphenoSugra,
        "&+(1._dp-ratio)/ratio**2*Log(1._dp-ratio) \n"];
      WriteString[sphenoSugra,"End Function gGMSB \n"];
      
      
      WriteString[sphenoSugra,"Real(dp) Function fGMSB(ratio) \n"];
      WriteString[sphenoSugra,"Implicit None \n"];
      WriteString[sphenoSugra,"Real(dp),Intent(in)::ratio \n"];
      WriteString[sphenoSugra,
        "fGMSB=(1._dp+ratio)/ratio**2*(Log(1._dp+ratio)&\n"];
      WriteString[sphenoSugra,"&-2._dp*Li2(ratio/(1._dp+ratio))&\n"];
      WriteString[sphenoSugra,"&+0.5_dp*Li2(2._dp*ratio/(1._dp+ratio)))&\n"];
      WriteString[sphenoSugra,
        "&+(1._dp-ratio)/ratio**2*(Log(1._dp-ratio)&\n"];
      WriteString[sphenoSugra,"&-2._dp*Li2(ratio/(ratio-1._dp))&\n"];
      WriteString[sphenoSugra,"&+0.5_dp*Li2(2._dp*ratio/(ratio-1._dp)))\n"];
      WriteString[sphenoSugra,"End Function fGMSB \n"];
      
      
      
      WriteString[sphenoSugra,"End Subroutine BoundaryHS \n \n"];
      ];



GenerateBoundarySUSY:=Block[{i,j},
      Print["Write BoundarySUSY"];
      
      WriteString[sphenoSugra,"Subroutine BoundarySUSY(gA,gB) \n"];
      
      WriteString[sphenoSugra,"Implicit None \n"];
      WriteString[sphenoSugra,"Real(dp),Intent(in)::gA(:)\n"];
      WriteString[sphenoSugra,"Real(dp),Intent(out)::gB(:)\n"];
      WriteString[sphenoSugra,"Integer::i1,i2,i_count,kont\n"];
      MakeVariableList[NewParametersFromTadpoles,"",sphenoSugra];
      WriteString[sphenoSugra, 
        "Complex(dp) :: Tad1Loop("<>ToString[Length[TEqu]]<>") \n"];
      MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",
        sphenoSugra];
      WriteString[sphenoSugra, 
        "Real(dp) :: comp("<>ToString[Length[SubSolutionsTadpolesLoop]]<>
          ") \n"];
      MakeVariableList[HiggsSoftBreakingMassesTemp,"",sphenoSugra];
      MakeVariableList[namesTadpoles,"",sphenoSugra];
      MakeVariableList[Transpose[LowScaleList][[1]],"",sphenoSugra];
      If[Length[HighScaleList]>1,
        MakeVariableList[Transpose[HighScaleList][[1]],"",sphenoSugra];
        ];
      If[FreeQ[BoundarySUSYScale,TADPOLES]\[Equal]False,
        MakeVariableList[listVEVs,"",sphenoSugra];
        ];
      
      
      WriteString[sphenoSugra,"Iname=Iname+1\n"];
      WriteString[sphenoSugra,"NameOfUnit(Iname)='BoundarySUSY'\n"];
      
      If[FreeQ[BoundarySUSYScale,TADPOLES],
        MakeCall["GToParameters"<>ToString[numberLow],lowScaleNames,{"gA"},{},
            sphenoSugra];,
        MakeCall["GToParameters"<>ToString[numberAllwithVEVs],
            listAllParametersAndVEVs,{"gA"},{},sphenoSugra];
        ];
      
      For[i=1,i\[LessEqual]Length[NewNumericalDependences],
        WriteString[sphenoSugra, 
          SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> 
            SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
        i++;];
      For[i=1,i\[LessEqual]Length[HiggsSoftBreakingMasses],
        WriteString[sphenoSugra,
          SPhenoForm[HiggsSoftBreakingMasses[[i]]] <>"temp = "<>
            SPhenoForm[HiggsSoftBreakingMasses[[i]]] <> "\n"]; 
        i++;];
      
      If[SeveralBoundaryConditions===False,
        For[i=1,i\[LessEqual]Length[BoundarySUSYScale],
            
            If[(BoundarySUSYScale[[i,2]]=!= 
                    RUNNING) &&  (BoundarySUSYScale[[i,2]]=!= TADPOLES),
              If[FreeQ[BoundarySUSYScale[[i,2]],DIAGONAL]\[Equal]True,
                  
                  WriteString[sphenoSugra,
                      SPhenoForm[BoundarySUSYScale[[i,1]]]<>" = " <> 
                        SPhenoForm[BoundarySUSYScale[[i,2]]]<>"\n"];,
                  
                  WriteString[sphenoSugra,
                    "Do i1=1,"<>ToString[
                        getDimSPheno[BoundarySUSYScale[[i,1]]][[1]]]<>"\n"];
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundarySUSYScale[[i,1]]]<>"(i1,i1) = " <> 
                      SPhenoForm[
                        BoundarySUSYScale[[i,2]] /. DIAGONAL\[Rule]1]<>"\n"];
                  WriteString[sphenoSugra,"End Do\n"];
                  ];
              ];
            i++;];,
        
        WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
        For[j=1,j\[LessEqual]Length[BoundarySUSYScale],
          WriteString[sphenoSugra,"Case ("<>ToString[j]<>") \n"];
          For[i=1,i\[LessEqual]Length[BoundarySUSYScale[[j]]],
            
            If[(BoundarySUSYScale[[j,i,2]]=!= 
                    RUNNING) &&  (BoundarySUSYScale[[j,i,2]]=!= TADPOLES),
              If[FreeQ[BoundarySUSYScale[[j,i,2]],DIAGONAL]\[Equal]True,
                  
                  WriteString[sphenoSugra,
                      SPhenoForm[BoundarySUSYScale[[j,i,1]]]<>" = " <> 
                        SPhenoForm[BoundarySUSYScale[[j,i,2]]]<>"\n"];,
                  
                  WriteString[sphenoSugra,
                    "Do i1=1,"<>ToString[
                        getDimSPheno[BoundarySUSYScale[[j,i,1]]][[1]]]<>
                      "\n"];
                  
                  WriteString[sphenoSugra,
                    SPhenoForm[BoundarySUSYScale[[j,i,1]]]<>"(i1,i1) = " <> 
                      SPhenoForm[
                        BoundarySUSYScale[[j,i,2]] /. DIAGONAL\[Rule]1]<>
                      "\n"];
                  WriteString[sphenoSugra,"End Do\n"];
                  ];
              ];
            i++;];
          j++;];
        WriteString[sphenoSugra,"End Select \n\n"];
        ];
      
      
      If[FreeQ[BoundarySUSYScale,TADPOLES]\[Equal]False,
        
        WriteTadpoleSolution[sphenoSugra];
        
        ];
      
      If[FreeQ[BoundarySUSYScale,TADPOLES],
        MakeCall["ParametersToG"<>ToString[numberLow],lowScaleNames,{},{"gB"},
            sphenoSugra];,
        MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],
            listAllParametersAndVEVs,{},{"gB"},sphenoSugra];
        ];
      
      WriteString[sphenoSugra,"Iname=Iname-1\n"];
      WriteString[sphenoSugra,"End Subroutine BoundarySUSY \n \n"];
      
      
      ];












GenerateFirstGuess:=Block[{i,j,k}, 
      
      Print["Write First Guess"];
      
      MakeSubroutineTitle["FirstGuess",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},
        sphenoSugra];
      
      WriteString[sphenoSugra,"Implicit None \n"];
      MakeVariableList[listAllParameters,",Intent(out)",sphenoSugra];
      MakeVariableList[NewMassParameters,",Intent(out)",sphenoSugra];
      WriteString[sphenoSugra,"Integer,Intent(inout)::kont\n"];
      WriteString[sphenoSugra,"Integer :: i1, i2\n"];
      MakeVariableList[listVEVs,",Intent(inout)",sphenoSugra];
      WriteString[sphenoSugra,
        "Real(dp):: gauge(3),vev,vevs(2),mgut,mudim,sigma(2),mt,mb,cosW,cosW2,sinW2 \n"]\
;
      MakeVariableList[HiggsSoftBreakingMassesTemp,"",sphenoSugra];
      WriteString[sphenoSugra,
        "Complex(dp):: Y_l(3,3), Y_d(3,3), Y_u(3,3) \n"];
      If[FreeQ[BoundarySUSYScale,TADPOLES],
        WriteString[sphenoSugra,
            "Real(dp):: gA("<>ToString[numberLow]<>"), gB("<>
              ToString[numberAll]<>"), Scale_Save \n"];,
        WriteString[sphenoSugra,
            "Real(dp):: gA("<>ToString[numberAllwithVEVs]<>"), gB("<>
              ToString[numberAll]<>"), Scale_Save \n"];
        ];
      WriteString[sphenoSugra,
        "Logical::TwoLoopRGE_save, UseFixedScale_save \n"];
      MakeVariableList[NewParametersFromTadpoles,"",sphenoSugra];
      
      (*If[LoopTadpolesForTreeMasses \[Equal] True,
            MakeVariableList[namesTadpoles,"",sphenoSugra];
            
            WriteString[sphenoSugra, 
              "Complex(dp) :: Tad1Loop("<>ToString[Length[TEqu]]<>") \n"];
            
            MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",
              sphenoSugra];
            ];*)
      
      
      WriteString[sphenoSugra,"Iname=Iname+1 \n"];
      WriteString[sphenoSugra,"NameOfUnit(Iname)=\"FirstGuess\" \n"];
      
      For[i=1,i\[LessEqual]Length[InitializationValues],
        WriteString[sphenoSugra,
          SPhenoForm[InitializationValues[[i,1]]] <>" = "<> 
            SPhenoForm[InitializationValues[[i,2]]]<>" \n"];
        i++;];
      
      WriteString[sphenoSugra,"tanb = tanbeta \n"];
      WriteString[sphenoSugra,"tanbetaMZ = tanbeta \n"];
      WriteString[sphenoSugra,
        "mW2=mZ2*(0.5_dp+Sqrt(0.25_dp-Alpha_Mz*pi/(sqrt2*G_F*mZ2)))/0.985_dp\n"]\
;
      
      WriteString[sphenoSugra,"mW=Sqrt(mW2) \n"];
      WriteString[sphenoSugra,"cosW2=mw2/mZ2 \n"];
      WriteString[sphenoSugra,"sinW2=1._dp-cosW2 \n"];
      WriteString[sphenoSugra,"cosW=Sqrt(cosW2) \n"];
      
      WriteString[sphenoSugra,
        "gauge(1)=Sqrt(20._dp*pi*alpha_mZ/(3._dp*(1._dp-sinW2))) \n"];
      WriteString[sphenoSugra,"gauge(2)=Sqrt(4._dp*pi*alpha_mZ/sinW2) \n"];
      WriteString[sphenoSugra,"gauge(3)=Sqrt(4._dp*pi*alphas_mZ) \n"];
      WriteString[sphenoSugra,"vev=2._dp*mW/gauge(2) \n"];
      WriteString[sphenoSugra,"vevs(1)=vev/Sqrt(1._dp+tanb**2) \n"];
      WriteString[sphenoSugra,"vevs(2)=tanb*vevs(1) \n"];
      WriteString[sphenoSugra,"vevSM=vevs \n"];
      
      WriteString[sphenoSugra, ToString[VEVSM1] <> " = vevs(1) \n"];
      WriteString[sphenoSugra, ToString[VEVSM2] <> " = vevs(2) \n"];
      
      WriteString[sphenoSugra,"Y_l=0._dp \n"];
      WriteString[sphenoSugra,"Y_d=0._dp \n"];
      WriteString[sphenoSugra,"Y_u=0._dp \n"];
      WriteString[sphenoSugra,"Do i1=1,3 \n"];
      WriteString[sphenoSugra,"  y_l(i1,i1)=sqrt2*mf_L_mZ(i1)/vevS(1) \n"];
      WriteString[sphenoSugra,
        "  If (i1.Eq.3) Then! top and bottom are special: \n"];
      WriteString[sphenoSugra,"  ! TanBeta Aufsummierung fehlt bei Yd!! \n"];
      WriteString[sphenoSugra,"  y_u(i1,i1)=sqrt2*mf_U(i1)/vevS(2)& \n"];
      WriteString[sphenoSugra,
        "    &*(1._dp-oo3pi*alphas_mZ*(5._dp+3._dp*Log(mZ2/mf_u2(3)))) \n"];
      (* WriteString[sphenoSugra,
            "  y_d(i1,i1)=sqrt2*mf_D_mZ(i1)/(vevS(1) * (1._dp + 0.015*tanb*"<>
              SPhenoForm[PhaseMuForYb] <>")) \n"]; *)
      
      WriteString[sphenoSugra,
        "  y_d(i1,i1)=sqrt2*mf_D_mZ(i1)/(vevS(1) * (1._dp + 0.015*tanb)) \n"];\

      WriteString[sphenoSugra,"Else \n"];
      WriteString[sphenoSugra,"  y_u(i1,i1)=sqrt2*mf_U_mZ(i1)/vevS(2) \n"];
      WriteString[sphenoSugra,"  y_d(i1,i1)=sqrt2*mf_D_mZ(i1)/vevS(1) \n"];
      WriteString[sphenoSugra,"End If  \n"];
      WriteString[sphenoSugra,"End Do \n"];
      
      WriteString[sphenoSugra,"If (GenerationMixing) Then \n"];
      WriteString[sphenoSugra,"  If (YukawaScheme.Eq.1) Then \n"];
      WriteString[sphenoSugra,"    Y_u=Matmul(Transpose(CKM),Y_u) \n"];
      WriteString[sphenoSugra,"    Y_u=Transpose(Y_u) \n"];
      WriteString[sphenoSugra,"  Else \n"];
      WriteString[sphenoSugra,"    Y_d=Matmul(Conjg(CKM),Y_d) \n"];
      WriteString[sphenoSugra,"    Y_d=Transpose(Y_d) \n"];
      WriteString[sphenoSugra,"  End If \n"];
      WriteString[sphenoSugra,"End If \n"];
      
      
      WriteString[sphenoSugra,"TwoLoopRGE_save=TwoLoopRGE \n"];
      WriteString[sphenoSugra,"UseFixedScale_save = UseFixedScale \n"];
      WriteString[sphenoSugra,"Scale_save=GetRenormalizationScale() \n"];
      
      WriteString[sphenoSugra,"UseFixedScale = .True. \n"];
      WriteString[sphenoSugra,"Call SetRGEScale(mZ2) \n"];
      
      Clear[j,i,k];
      
      For[j=1,j\[LessEqual]3,
        
        WriteString[sphenoSugra, 
          ToString[hyperchargeCoupling] <> " = gauge(1) \n"];
        WriteString[sphenoSugra, ToString[leftCoupling] <> " = gauge(2) \n"];
        WriteString[sphenoSugra, 
          ToString[strongCoupling] <> " = gauge(3) \n"];
        WriteString[sphenoSugra, ToString[UpYukawa] <>" = Y_u \n"];
        WriteString[sphenoSugra, ToString[DownYukawa] <>" = Y_d \n"];
        WriteString[sphenoSugra, ToString[ElectronYukawa] <>" = Y_l \n"]; 
        
        
        WriteString[sphenoSugra, " \n ! "<>ToString[j]<>". Run \n \n"];
        
        If[SeveralBoundaryConditions===False,
          For[i=1,i\[LessEqual]Length[BoundaryEWSBScale],
              
              WriteString[sphenoSugra,
                SPhenoForm[BoundaryEWSBScale[[i,1]]]<>" = " <> 
                  SPhenoForm[BoundaryEWSBScale[[i,2]]]  <> "\n"];
              i++;];,
          WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
          For[k=1,k\[LessEqual]Length[BoundaryEWSBScale],
            WriteString[sphenoSugra,"Case ("<>ToString[k]<>") \n"];
            For[i=1,i\[LessEqual]Length[BoundaryEWSBScale[[k]]],
              
              WriteString[sphenoSugra,
                SPhenoForm[BoundaryEWSBScale[[k,i,1]]]<>" = " <> 
                  SPhenoForm[BoundaryEWSBScale[[k,i,2]]]  <> "\n"];
              i++;];
            k++;];
          WriteString[sphenoSugra,"End Select \n\n"];
          ];
        
        
        
        If[SeveralBoundaryConditions===False,
          For[i=1,i\[LessEqual]Length[BoundarySUSYScale],
              If[FreeQ[listVEVs,BoundarySUSYScale[[i,1]]]\[Equal]False,
                
                WriteString[sphenoSugra,
                    SPhenoForm[BoundarySUSYScale[[i,1]]]<>" = " <> 
                      SPhenoForm[BoundarySUSYScale[[i,2]]]  <> "\n"];
                ];
              i++;];,
          
          WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
          For[k=1,k\[LessEqual]Length[BoundarySUSYScale],
            WriteString[sphenoSugra,"Case ("<>ToString[k]<>") \n"];
            For[i=1,i\[LessEqual]Length[BoundarySUSYScale[[k]]],
              If[FreeQ[listVEVs,BoundarySUSYScale[[k,i,1]]]\[Equal]False,
                
                WriteString[sphenoSugra,
                    SPhenoForm[BoundarySUSYScale[[k,i,1]]]<>" = " <> 
                      SPhenoForm[BoundarySUSYScale[[k,i,2]]]  <> "\n"];
                ];
              i++;];
            k++;];
          WriteString[sphenoSugra,"End Select \n \n"];
          ];
        
        If[j>1,
          WriteTadpoleSolution[sphenoSugra];,
          WriteTadpoleSolutionZero[sphenoSugra];
          ];
        
        
        
        If[FreeQ[BoundarySUSYScale,TADPOLES],
          
          MakeCall["ParametersToG"<>ToString[numberLow],
              lowScaleNames,{},{"gA"},sphenoSugra];,
          
          MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],
              listAllParametersAndVEVs,{},{"gA"},sphenoSugra];
          ];
        
        
        If[j===3,
          WriteString[sphenoSugra,"Call SetRGEScale(Scale_save) \n"];
          WriteString[sphenoSugra,"UseFixedScale = UseFixedScale_save \n"];
          ];
        
        
        WriteString[sphenoSugra,"If (.Not.UseFixedScale) Then \n"];
        WriteString[sphenoSugra,
          "   mudim= Real("<>SPhenoForm[RenormalizationScaleFirstGuess]<> 
            ", dp) \n"]; 
        WriteString[sphenoSugra,"   mudim=Max(mf_u2(3),mudim) \n"];
        WriteString[sphenoSugra,"   Call SetRGEScale(mudim) \n"];
        WriteString[sphenoSugra,"   UseFixedScale= .False. \n"];
        WriteString[sphenoSugra,"Else \n"];
        WriteString[sphenoSugra,"  mudim=GetRenormalizationScale() \n"];
        WriteString[sphenoSugra,"End If \n"];
        
        WriteString[sphenoSugra,"TwoLoopRGE= .False. \n"];
        WriteString[sphenoSugra,"kont=0 \n"];
        WriteString[sphenoSugra,"Call RunRGE(kont,0.001_dp,gA,gB,mGUT) \n"];
        
        WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
        WriteString[sphenoSugra,"Iname=Iname-1 \n"];
        WriteString[sphenoSugra,
          "    Write(*,*) \" Problem with RGE running\" \n"];
        WriteString[sphenoSugra,"    Call TerminateProgram\n"];
        WriteString[sphenoSugra,"End if \n"];
        
        MakeCall["GToParameters"<>ToString[numberAll],
          listAllParameters,{"gB"},{},sphenoSugra];
        
        
        
        
        
        j++;];
      
      WriteString[sphenoSugra,"TwoLoopRGE = TwoLoopRGE_save \n"];
      
      For[i=1,i\[LessEqual]Length[highScaleNames],
        WriteString[sphenoSugra,
          SPhenoForm[highScaleNames[[i]]] <> "MZ = " <> 
            SPhenoForm[highScaleNames[[i]]] <>" \n"];
        i++;];
      
      WriteString[sphenoSugra,ToString[VEVSM1]<>" = vevs(1) \n"];
      WriteString[sphenoSugra,ToString[VEVSM2]<>" = vevs(2) \n"];
      
      For[i=1,i\[LessEqual]Length[Gauge],
        If[Gauge[[i,2,1]]\[Equal]1,
          
          WriteString[sphenoSugra,
              SPhenoForm[Gauge[[i,4]]]<> " = "<>SPhenoForm[GUTren[i]]<>"*" <> 
                SPhenoForm[Gauge[[i,4]]]<>" \n\n"]; 
          ];
        i++;
        ];
      
      
      If[SeveralBoundaryConditions===False,
        For[i=1,i\[LessEqual]Length[BoundaryEWSBScale],
            
            WriteString[sphenoSugra,
              SPhenoForm[BoundaryEWSBScale[[i,1]]]<>" = " <> 
                SPhenoForm[BoundaryEWSBScale[[i,2]]]  <> "\n"];
            i++;];,
        WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
        For[j=1,j\[LessEqual]Length[BoundaryEWSBScale],
          WriteString[sphenoSugra,"Case ("<>ToString[j]<>") \n"];
          For[i=1,i\[LessEqual]Length[BoundaryEWSBScale[[j]]],
            
            WriteString[sphenoSugra,
              SPhenoForm[BoundaryEWSBScale[[j,i,1]]]<>" = " <> 
                SPhenoForm[BoundaryEWSBScale[[j,i,2]]]  <> "\n"];
            i++;];
          j++;];
        WriteString[sphenoSugra,"End Select \n\n"];
        ];
      
      (* WriteString[sphenoSugra, 
            ToString[hyperchargeCoupling] <> " =sqrt(3._dp/5._dp)*"<> 
              ToString[hyperchargeCoupling]<>" \n"]; *)
      
      
      WriteTadpoleSolution[sphenoSugra];
      
      MakeCall["TreeMasses",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing",
          "kont"},sphenoSugra];
      
      
      SetPoleMasses[sphenoSugra];
      
      WriteString[sphenoSugra,"Iname=Iname-1 \n"];
      WriteString[sphenoSugra,"End subroutine FirstGuess \n"]; 
      
      ];

GenerateSetFunctions :=Block[{},
      
      WriteString[sphenoSugra,
        "Logical Function SetCheckSugraDetails(V1,V2,V3,V4,V5)\n"];
      WriteString[sphenoSugra,"Implicit None\n"];
      WriteString[sphenoSugra,"Logical,Intent(in)::V1,V2,V3,V4,V5\n"]; 
      WriteString[sphenoSugra,"SetCheckSugraDetails= .False. \n"];
      WriteString[sphenoSugra,"CheckSugraDetails(1)=V1\n"];
      WriteString[sphenoSugra,"CheckSugraDetails(2)=V2\n"];
      WriteString[sphenoSugra,"CheckSugraDetails(3)=V3\n"];
      WriteString[sphenoSugra,"CheckSugraDetails(4)=V4\n"];
      WriteString[sphenoSugra,"CheckSugraDetails(5)=V5\n"];
      WriteString[sphenoSugra,"SetCheckSugraDetails= .True.\n"];
      WriteString[sphenoSugra,"End Function SetCheckSugraDetails\n \n\n"];
      
      
      WriteString[sphenoSugra,"Subroutine SetGUTScale(scale)\n"];
      WriteString[sphenoSugra,"Implicit None\n"];
      WriteString[sphenoSugra,"Real(dp),Intent(in)::scale\n"];
      WriteString[sphenoSugra,"If (scale.Lt.0._dp) Then\n"];
      WriteString[sphenoSugra,"UseFixedGUTScale= .False.\n"];
      WriteString[sphenoSugra,"Else\n"];
      WriteString[sphenoSugra,"UseFixedGUTScale= .True.\n"];
      WriteString[sphenoSugra,"GUT_scale=scale\n"];
      WriteString[sphenoSugra,"End If\n"];
      WriteString[sphenoSugra,"End Subroutine SetGUTScale\n \n\n"];
      
      WriteString[sphenoSugra,"Subroutine SetRGEScale(scale)\n"];
      WriteString[sphenoSugra,"Implicit None\n"];
      WriteString[sphenoSugra,"Real(dp),Intent(in)::scale\n"];
      WriteString[sphenoSugra,"Real(dp)::old_scale\n"];
      WriteString[sphenoSugra,"If (scale.Lt.0._dp) Then\n"];
      WriteString[sphenoSugra,"UseFixedScale= .False.\n"];
      WriteString[sphenoSugra,"Else\n"];
      WriteString[sphenoSugra,"UseFixedScale= .True.\n"];
      WriteString[sphenoSugra,"old_scale=SetRenormalizationScale(scale)\n"];
      WriteString[sphenoSugra,"End If\n"];
      WriteString[sphenoSugra,"End Subroutine SetRGEScale\n\n\n"];
      
      WriteString[sphenoSugra,"Logical Function SetStrictUnification(V1)\n"];
      WriteString[sphenoSugra,"Implicit None\n"];
      WriteString[sphenoSugra,"Logical,Intent(in)::V1\n"];
      WriteString[sphenoSugra,"SetStrictUnification= .False.\n"];
      WriteString[sphenoSugra,"StrictUnification=V1\n"];
      WriteString[sphenoSugra,"SetStrictUnification= .True.\n"];
      WriteString[sphenoSugra,"End Function SetStrictUnification\n\n\n"];
      
      
      WriteString[sphenoSugra,"Integer Function SetYukawaScheme(V1)\n"];
      WriteString[sphenoSugra,"Implicit None\n"];
      WriteString[sphenoSugra,"Integer,Intent(in)::V1\n"];
      WriteString[sphenoSugra,"SetYukawaScheme=YukawaScheme\n"];
      WriteString[sphenoSugra,"YukawaScheme=V1\n"];
      WriteString[sphenoSugra,"End Function SetYukawaScheme\n\n\n"];
      
      
      ];

