(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

GenerateSPhenoMain[NameForModel_]:=Block[{},
      
      Print["-----------------------------------"];
      Print["Write SPheno Main File"];
      Print["-----------------------------------"];
      
      
      spheno=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,"SPheno"<>NameForModel<>".f90"]];
      
      WriteString[spheno,"Program SPheno"<>NameForModel<>" \n \n"];
      
      WriteString[spheno,"Use Control\n"];
      WriteString[spheno,"Use InputOutput_"<>ModelName<>"\n"];
      WriteString[spheno,"Use LoopFunctions\n"];
      If[AddLowEnergyConstraint ===True, (* NonPublic *)
        
        WriteString[spheno,"Use LowEnergy\n"]; (* NonPublic *)
        ]; (* 
        NonPublic *)
      WriteString[spheno,"Use Mathematics\n"];
      WriteString[spheno,"Use Model_Data_"<>ModelName<>"\n"];
      WriteString[spheno,"Use RGEs_"<>ModelName<>"\n"];
      WriteString[spheno,"!Use StandardModel\n"];
      WriteString[spheno,"Use SugraRuns_"<>ModelName<>"\n "];
      WriteString[spheno,"Use BranchingRatios_"<>ModelName<>"\n \n"];
      
      WriteString[spheno,"Implicit None\n \n"];
      
      WriteString[spheno,
        "Real(dp) :: epsI=0.00001_dp, deltaM = 0.000001_dp \n"];
      WriteString[spheno, "Real(dp) :: mGut, ratioWoM = 0._dp\n"];
      WriteString[spheno, "Integer :: kont \n \n"];
      WriteString[spheno, "Integer,Parameter :: p_max=100\n"];
      WriteString[spheno, "Real(dp) :: Ecms(p_max),Pm(p_max),Pp(p_max)\n"];
      WriteString[spheno, "Logical :: ISR(p_max)=.False.\n"];
      WriteString[spheno, "Logical :: CalcTBD\n"];
      MakeVariableList[NewParametersFromTadpoles,"",spheno];
      MakeVariableList[ListOfLowEnergyNames,"",spheno]; (* 
        NonPublic *)
      
      
      WriteString[spheno, "Call get_command_argument(1,inputFileName)\n"];
      WriteString[spheno, "If (len_trim(inputFileName)\[Equal]0) Then\n"];
      WriteString[spheno, 
        "  inputFileName=\"LesHouches.in."<>NameForModel<>"\"\n"];
      WriteString[spheno, "Else\n"];
      WriteString[spheno, "  inputFileName=trim(inputFileName)\n"];
      WriteString[spheno, "End if\n"];
      
      WriteString[spheno, "Call get_command_argument(2,outputFileName)\n"];
      WriteString[spheno, "If (len_trim(outputFileName)\[Equal]0) Then\n"];
      WriteString[spheno, 
        "  outputFileName=\"SPheno.spc."<>NameForModel<>"\"\n"];
      WriteString[spheno, "Else\n"];
      WriteString[spheno, "  outputFileName=trim(outputFileName)\n"];
      WriteString[spheno, "End if \n"];
      
      
      
      
      WriteString[spheno,"Call Set_All_Parameters_0() \n \n"];
      WriteString[spheno,"kont = 0 \n"];
      WriteString[spheno,"delta_Mass = 0.0001_dp \n"];
      WriteString[spheno, "Call ReadingData(kont) \n \n"];
      
      
      subLowEnergyParameters={
          
          ToExpression[SPhenoForm[hyperchargeCoupling]]\[Rule] 
            ToExpression[SPhenoForm[hyperchargeCoupling]<>"MZ" ],
          
          ToExpression[SPhenoForm[leftCoupling]]\[Rule] 
            ToExpression[SPhenoForm[leftCoupling]<>"MZ" ],
          
          ToExpression[SPhenoForm[VEVSM1]]\[Rule] 
            ToExpression[SPhenoForm[VEVSM1]<>"MZ" ],
          
          ToExpression[SPhenoForm[VEVSM2]]\[Rule] 
            ToExpression[SPhenoForm[VEVSM2]<>"MZ" ],
          
          ToExpression[SPhenoForm[UpYukawa]]\[Rule] 
            ToExpression[SPhenoForm[UpYukawa]<>"MZ" ],
          
          ToExpression[SPhenoForm[DownYukawa]]\[Rule] 
            ToExpression[SPhenoForm[DownYukawa]<>"MZ" ],
          
          ToExpression[SPhenoForm[ElectronYukawa]]\[Rule] 
            ToExpression[SPhenoForm[ElectronYukawa]<>"MZ" ]
          };
      
      temp1=
        Join[listVEVs,
          Complement[listAllParameters,ParametersToSolveTadpoles]];
      temp2={};
      For[i=1,i\[LessEqual]Length[temp1],
        If[FreeQ[subLowEnergyParameters,temp1[[i]]],
          temp2=Join[temp2,{temp1[[i]]}];,
          temp2=Join[temp2,{temp1[[i]]/. subLowEnergyParameters}];
          ];
        i++;];
      
      WriteString[spheno,"If (HighScaleModel.Eq.\"LOW\") Then \n "];
      For[i=1,i\[LessEqual]Length[listVEVsIN],
        WriteString[spheno,
          StringDrop[SPhenoForm[listVEVsIN[[i]]],-2] <>" = " <>
            SPhenoForm[listVEVsIN[[i]]]<>" \n "];
        i++;];
      For[i=1,i\[LessEqual]Length[highScaleIn],
        WriteString[spheno,
          StringDrop[SPhenoForm[highScaleIn[[i]]],-2] <>" = " <>
            SPhenoForm[highScaleIn[[i]]]<>" \n "];
        i++;];
      For[i=1,i\[LessEqual]Length[lowScaleIn],
        WriteString[spheno,
          StringDrop[SPhenoForm[lowScaleIn[[i]]],-2] <>" = " <>
            SPhenoForm[lowScaleIn[[i]]]<>" \n "];
        i++;];
      
      For[i=1,i\[LessEqual]Length[SignumsTadpoles],
        WriteString[spheno,
          SPhenoForm[SignumsTadpoles[[i,2]]] <>" = " <>
            SPhenoForm[SignumsTadpoles[[i,1]]]<>"/Abs("<>
            SPhenoForm[SignumsTadpoles[[i,1]]] <>") \n "];
        i++;]; 
      
      WriteTadpoleSolution[spheno];
      MakeCall["OneLoopMasses",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},
        spheno];
      
      WriteString[spheno,"Else \n "];
      MakeCall["CalculateSpectrum",
        Join[NewMassParameters,Join[listVEVs,listAllParameters ]],{"n_run","delta_mass",
          "WriteOut","kont"},{"mGUT"},spheno];
      WriteString[spheno,"End If \n "];
      
      WriteString[spheno,"If ((L_BR).And.(kont.Eq.0)) Then \n "];
      MakeCall["CalculateBR",
        Join[Join[NewMassParameters,Join[listVEVs,listAllParameters]],
          SPhenoWidthBR],{"CalcTBD","ratioWoM","epsI","deltaM","kont"},{},
        spheno];
      WriteString[spheno,"End If \n \n "];
      
      If[AddLowEnergyConstraint ===True, (* NonPublic *)
        
        MakeCall["CalculateLowEnergyConstraints",
          Join[temp2,ListOfLowEnergyNames],{},{},spheno]; (* 
          NonPublic *)
        ]; (* NonPublic *)
      
      MakeCall["LesHouches_Out",
        ListOfLowEnergyNames,{"67","11","kont","HighScaleModel",
          "MGUT"},{"GenerationMixing"},spheno];
      
      
      WriteString[spheno, "Contains \n \n"];
      
      GenerateCalculateSpectrum;
      GenerateReadingData;
      
      If[AddLowEnergyConstraint ===True, (* NonPublic *)
        
        GenerateCalcLowEnergy; (* NonPublic *)
        ]; (* 
        NonPublic *)
      
      WriteString[spheno,"End Program SPheno"<>NameForModel<>" \n"];
      
      Close[spheno];
      ];

GenerateReadingData:=Block[{},
      
      Print["Write ReadingData"];
      
      WriteString[spheno,"Subroutine ReadingData(kont)\n"];
      WriteString[spheno,"Implicit None\n"];
      WriteString[spheno,"Integer,Intent(out)::kont\n"];
      
      WriteString[spheno,"Logical::file_exists\n"];
      
      WriteString[spheno,"kont=-123456\n"];
      
      WriteString[spheno,
        "Inquire(file=\"LesHouches.in."<>NameForModel<>
          "\",exist=file_exists)\n"];
      WriteString[spheno,"If (file_exists) Then\n"];
      WriteString[spheno,"kont=1\n"];
      
       WriteString[spheno,
        "Call LesHouches_Input(kont,HighScaleModel,Ecms,Pm,Pp,ISR,F_GMSB)\n"];\
 
      (* WriteString[spheno,"Call LesHouches_Input(kont)\n"]; *)
      
      WriteString[spheno,"LesHouches_Format= .True.\n"];
      WriteString[spheno,"Else\n"];
      WriteString[spheno,"Write(*,*)&\n"];
      WriteString[spheno,
        "& \"File 'LesHouches.in."<>NameForModel<>"' does not exist\"\n"];
      WriteString[spheno,"Call TerminateProgram\n"];
      WriteString[spheno,"End If\n"];
      
      WriteString[spheno,"End Subroutine ReadingData\n"];
      
      
      ];



GenerateCalculateSpectrum:=Block[{},
      
      Print["Write Calculate Spectrum"];
      
      
       MakeSubroutineTitle["CalculateSpectrum",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{"n_run","delta",
          "WriteOut","kont"},{"mGUT"},spheno]; 
      
      WriteString[spheno,"Implicit None \n"];
      WriteString[spheno, "Integer, Intent(in) :: n_run \n"]; 
      WriteString[spheno, "Integer, Intent(inout) :: kont \n"];
      WriteString[spheno, "Logical, Intent(in) :: WriteOut \n"];
      WriteString[spheno, "Real(dp), Intent(in) :: delta \n"]; 
      WriteString[spheno, "Real(dp), Intent(inout) :: mGUT \n"]; 
      
      MakeVariableList[listAllParameters,",Intent(inout)",spheno];
      MakeVariableList[NewMassParameters,",Intent(inout)",spheno];
      MakeVariableList[listVEVs,",Intent(inout)",spheno];
      
      WriteString[spheno,"kont = 0 \n"];
      
      MakeCall["FirstGuess",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},
        spheno];
      WriteString[spheno,"!If (kont.ne.0) Call TerminateProgram \n \n"];
      
      WriteString[spheno,
        "If (SPA_Convention) Call SetRGEScale(1.e3_dp**2) \n \n"];
      
      MakeCall["Sugra",
        Join[NewMassParameters,listAllParameters], {"delta"},{"mGut","kont","WriteOut",
          "n_run"},spheno];
      WriteString[spheno,"If (kont.ne.0) Call TerminateProgram \n \n"];
      
      WriteString[spheno,"End Subroutine CalculateSpectrum \n \n"];
      
      
      ];

GenerateCalcLowEnergy:=Block[{},
      
      Print["Write Calculate Low Energy"];
      
      MakeSubroutineTitle["CalculateLowEnergyConstraints",
        Join[Join[listVEVs,
            Complement[listAllParameters,ParametersToSolveTadpoles]],
          ListOfLowEnergyNames],{},{},spheno];
      
      MakeVariableList[
        Complement[listAllParameters,ParametersToSolveTadpoles],",Intent(inout)",
        spheno];
      MakeVariableList[NewMassParameters,"",spheno];
      MakeVariableList[listVEVs,",Intent(in)",spheno];
      MakeVariableList[ParametersToSolveTadpoles,"",spheno];
      MakeVariableList[NewParametersFromTadpoles,"",spheno];
      
      
      MakeVariableList[Intersection[Flatten[{namesAll,namesZW}]],"",spheno];
      MakeVariableList[ListOfLowEnergyNames,",Intent(out)",spheno];
      WriteString[spheno,"Complex(dp) :: c7,c7p,c8,c8p \n"];
      MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",spheno];
      If[UseStandardLowEnergy\[Equal]True,
        WriteString[spheno,
          "Complex(dp) :: cplFdcFdhhLeff(3,3,"<>ToString[
              getGenSPheno[HiggsBoson]]<>"), cplFdcFdhhReff(3,3,"<>
            ToString[getGenSPheno[HiggsBoson]]<>") \n"];
        WriteString[spheno,
          "Complex(dp) ::  cplFdcFdAhLeff(3,3,"<>ToString[
              getGenSPheno[PseudoScalar]]<>"), cplFdcFdAhReff(3,3,"<>
            ToString[getGenSPheno[PseudoScalar]]<>
            "), cpl_CDSu_L(2,3,6), cpl_CDSu_R(2,3,6), mueEff  \n"];
        WriteString[spheno,
          "Complex(dp) :: cplcHpmcFuFdL("<>ToString[
              getGenSPheno[ChargedHiggs]]<>",3,3), cplcHpmcFuFdR("<>
            ToString[getGenSPheno[ChargedHiggs]]<>
            ",3,3),cpl_CNuSl_R(2,3,6),cpl_CNuSl_L(2,3,6) \n"];
        WriteString[spheno,"Real(dp) :: vevSM(2), gauge(3) \n"];
        WriteString[spheno,"Integer :: i1, i2, i3 \n"];
        
        WriteString[spheno,"mueEff="<>SPhenoForm[mueEff]<>" \n\n"];
        ];
      
      
      WriteString[spheno,"If (.Not.GenerationMixing) Then \n"];
      WriteString[spheno,"Yu=Matmul(Transpose(CKM),Transpose(Yu)) \n"];
      WriteString[spheno,"End If\n"];
      
      
      
      For[i=1,i\[LessEqual]Length[NewNumericalDependences],
        WriteString[spheno, 
          SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> 
            SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
        i++;];
      
      
      
      WriteTadpoleSolution[spheno];
      
      
      MakeCall["TreeMasses",
        Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing",
          "kont"},spheno];
      WriteString[spheno,
        "mZ2 = 1._dp/4._dp*("<>SPhenoForm[hyperchargeCoupling]<>"**2 + "<>
            SPhenoForm[leftCoupling]<> "**2)*("SPhenoForm[VEVSM1]<>"**2 + "<>
            SPhenoForm[VEVSM2]<>"**2) \n"];
      WriteString[spheno,"mZ = sqrt(mZ2) \n"];
      SetPoleMasses[spheno];
      
      
      MakeCall["AllCouplings" , Join[parametersAll,namesAll],{},{},spheno];
      
      
      If[UseStandardLowEnergy\[Equal]True,
        WriteString[spheno,"vevSM(1) = "<>ToString[VEVSM1]<>" \n"];
        WriteString[spheno,"vevSM(2) = "<>ToString[VEVSM2]<>" \n"];
        WriteString[spheno,
          "gauge(1) = "<>ToString[hyperchargeCoupling]<>" \n"];
        WriteString[spheno,"gauge(2) = "<>ToString[leftCoupling]<>" \n"];
        WriteString[spheno,
          "gauge(3) = "<>ToString[strongCoupling]<>" \n \n\n"];
        
        
        pos = 
          Position[ParametersEffCouplings,
              ToExpression[
                "EffC"<>ToString[HiggsBoson]<>"To"<>
                  ToString[BottomQuark]]][[1,1]];
        massesEffHiggs=Extract[ParametersEffCouplings,pos][[2]];
        couplingsEffHiggs = Extract[ParametersEffCouplings,pos][[3]];
        
        pos = 
          Position[ParametersEffCouplings,
              ToExpression[
                "EffC"<>ToString[PseudoScalar]<>"To"<>
                  ToString[BottomQuark]]][[1,1]];
        massesEffPseudo=Extract[ParametersEffCouplings,pos][[2]];
        couplingsEffPseudo = Extract[ParametersEffCouplings,pos][[3]];
        
        
        
        WriteString[spheno,
          "Do i1=1,"<>ToString[getGenSPheno[HiggsBoson]] <>"\n"];
        WriteString[spheno,"  Do i2=1,3 \n"];
        WriteString[spheno,"    Do i3=1,3 \n"];
        MakeCall["Coup"<>ToString[BottomQuark]<>"To"<>ToString[HiggsBoson],
          Flatten[{massesEffHiggs,couplingsEffHiggs, DownYukawa,DownMatrixL ,
              DownMatrixR,VEVSM1,HiggsMixingMatrix}],{"i2","i3","i1"},{"cplFdcFdhhLeff(i2,i3,i1)",
            "cplFdcFdhhReff(i2,i3,i1)"},spheno];
        WriteString[spheno,"    End Do \n"];
        WriteString[spheno,"  End Do \n"];
        WriteString[spheno,"End Do \n"];
        
        WriteString[spheno,
          "Do i1=1,"<>ToString[getGenSPheno[PseudoScalar]] <>"\n"];
        WriteString[spheno,"  Do i2=1,3 \n"];
        WriteString[spheno,"    Do i3=1,3 \n"];
        MakeCall["Coup"<>ToString[BottomQuark]<>"To"<>ToString[PseudoScalar],
          Flatten[{massesEffHiggs,couplingsEffHiggs, DownYukawa,DownMatrixL ,
              DownMatrixR,VEVSM1,PseudoScalarMixingMatrix}],{"i2","i3",
            "i1"},{"cplFdcFdAhLeff(i2,i3,i1)","cplFdcFdAhReff(i2,i3,i1)"},
          spheno];
        WriteString[spheno,"    End Do \n"];
        WriteString[spheno,"  End Do \n"];
        WriteString[spheno,"End Do \n"];
        
        
        
        
        
        AppendSourceCode["CallLowEnergySPheno.f90",spheno];,
        
        (* B \[Rule] S Gamma *)
        
        pos=Position[LowEnergyConstraintsParameterList,BToQGamma];
        masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
        couplings = 
          Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];
        
        MakeCall["BToQGamma",
          Flatten[{masses,couplings}],{"2",ToString[leftCoupling],
            ToString[DownMatrixL],ToString[UpMatrixL]},{"BRBtoSGamma"},
          spheno];
        WriteString[spheno,"BRBtoSGamma = BRBtoSGamma*1.e-4 \n\n"];
        
        (* Delta MB *)
        
        pos=Position[LowEnergyConstraintsParameterList,DeltaMB];
        masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
        couplings = 
          Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];
        
        MakeCall["Delta_MB",
          Flatten[{masses,couplings}],{"1",ToString[DownYukawa],
            ToString[HiggsMixingMatrix],ToString[DownMatrixL],
            ToString[DownMatrixR],ToString[PseudoScalarMixingMatrix],
            ToString[VEVSM1],ToString[VEVSM2]},{"DeltaMBd"},spheno];
        
        MakeCall["Delta_MB",
          Flatten[{masses,couplings}],{"2",ToString[DownYukawa],
            ToString[HiggsMixingMatrix],ToString[DownMatrixL],
            ToString[DownMatrixR],ToString[PseudoScalarMixingMatrix],
            ToString[VEVSM1],ToString[VEVSM2]},{"DeltaMBs"},spheno];
        
        WriteString[spheno,"DeltaMBd = 1.e-12_dp*DeltaMBd/hbar \n"];
        WriteString[spheno,"DeltaMBs = 1.e-12_dp*DeltaMBs/hbar \n"];
        
        ];
      
      (* G minus 2 *)
      
      pos=Position[LowEnergyConstraintsParameterList,Gminus2];
      masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
      couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];
      
      MakeCall["Gminus2",Flatten[{masses,couplings}],{"1"},{"ae"},spheno];
      MakeCall["Gminus2",Flatten[{masses,couplings}],{"2"},{"amu"},spheno];
      MakeCall["Gminus2",Flatten[{masses,couplings}],{"3"},{"atau"},spheno];
      
      (* Delta Rho *)
      
      MakeCall["CouplingsForVectorBosons" , Join[parametersZW,namesZW],{},{},
        spheno];
      
      pos=Position[LowEnergyConstraintsParameterList,DeltaRho];
      masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
      couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];
      
      MakeCall["DeltaRho",Flatten[{masses,couplings}],{},{"dRho"},spheno];
      
      
      (* Lepton EDM *)
      
      
      pos=Position[LowEnergyConstraintsParameterList,Gminus2];
      masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
      couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];
      
      MakeCall["LeptonEDM",Flatten[{masses,couplings}],{"1"},{"EDMe"},
        spheno];
      MakeCall["LeptonEDM",Flatten[{masses,couplings}],{"2"},{"EDMmu"},
        spheno];
      MakeCall["LeptonEDM",Flatten[{masses,couplings}],{"3"},{"EDMtau"},
        spheno];
      
      
      (* 1 Lepton \[Rule] 3 Leptons *)
      
      pos=
        Position[LowEnergyConstraintsParameterList,OneLeptonToThreeLeptons];
      masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
      couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];
      
      MakeCall["BR1LeptonTo3Leptons",
        Flatten[{masses,couplings}],{"2","1"},{"BRMu3e","BRMuEgamma"},
        spheno];
      MakeCall["BR1LeptonTo3Leptons",
        Flatten[{masses,couplings}],{"3","1"},{"BRTau3e","BRTauEgamma"},
        spheno];
      MakeCall["BR1LeptonTo3Leptons",
        Flatten[{masses,couplings}],{"3","2"},{"BRTau3Mu","BRTauMugamma"},
        spheno];
      
      
      WriteString[spheno,
        "End subroutine CalculateLowEnergyConstraints \n \n"];
      
      ];