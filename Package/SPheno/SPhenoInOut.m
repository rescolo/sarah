(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

InitInputOutput:=Block[{i},
      LowScaleList={};
      HighScaleList={};
      MakePDGList;
      tempList = Transpose[BetaGauge][[1]];
      AddParametersToList[tempList];
      
      If[Length[listWtriOne]\[NotEqual] 0, 
        tempList=
          Transpose[
              Transpose[
                  listWtriOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. 
                    RM[a__][b__]\[Rule]1][[2]]][[2]]; 
        AddParametersToList[tempList]; ];
      If[Length[listWbiOne]\[NotEqual] 0,
        tempList=
          Transpose[
              Transpose[
                  listWbiOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. 
                    RM[a__][b__]\[Rule]1][[2]]][[2]];
        AddParametersToList[tempList];];
      If[Length[listAtriOne]\[NotEqual] 0,
        tempList=
          Transpose[
              Transpose[
                  listAtriOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. 
                    RM[a__][b__]\[Rule]1][[2]]][[2]];
        AddParametersToList[tempList];];
      If[Length[listAbiOne]\[NotEqual] 0,
        tempList=
          Transpose[
              Transpose[
                  listAbiOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. 
                    RM[a__][b__]\[Rule]1][[2]]][[2]];
        AddParametersToList[tempList];];
      If[Length[listAone]\[NotEqual] 0,
        tempList=
          Transpose[
              Transpose[
                  listAone/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. 
                    RM[a__][b__]\[Rule]1][[2]]][[2]];
        AddParametersToList[tempList];];
      If[Length[listWone]\[NotEqual] 0,
        tempList=
          Transpose[
              Transpose[
                  listWone/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. 
                    RM[a__][b__]\[Rule]1][[2]]][[2]];
        AddParametersToList[tempList];];
      If[Length[listSM]\[NotEqual] 0,
        tempList=
          Transpose[listSM][[2]] /. Delta[a__]\[Rule]1 /. 
              epsTensor[a__]\[Rule]1 /. RM[a__][b__]\[Rule]1;
        AddParametersToList[tempList];];
      If[Length[listGM]\[NotEqual] 0,
        tempList=
          Transpose[listGM][[2]] /. Delta[a__]\[Rule]1 /. 
              epsTensor[a__]\[Rule]1 /. RM[a__][b__]\[Rule]1;
        AddParametersToList[tempList];];
      If[Length[listW4]\[NotEqual] 0,
        tempList=
          Transpose[
              Transpose[
                  listW4One/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. 
                    RM[a__][b__]\[Rule]1][[2]]][[2]];
        AddParametersToList[tempList];];
      
      ListAllInputParameters=Join[LowScaleList,HighScaleList];
      
      lowScaleNames={};
      lowScaleIn={};
      lowScaleMZ={};
      lowScaleGUT={};
      highScaleNames={};
      highScaleIn={};
      highScaleMZ={};
      highScaleGUT={};
      
      
       For[i=1,i\[LessEqual]Length[LowScaleList],
        lowScaleNames = Join[lowScaleNames,{LowScaleList[[i,1]]}];
        newEntry=
          Extract[SPhenoParameters,
            Position[SPhenoParameters,LowScaleList[[i,1]]][[1,1]]];
        lowScaleIn = 
          Join[lowScaleIn,{ToExpression[
                SPhenoForm[LowScaleList[[i,1]]]<>"IN"]}];
        lowScaleMZ = 
          Join[lowScaleMZ,{ToExpression[
                SPhenoForm[LowScaleList[[i,1]]]<>"MZ"]}];
        lowScaleGUT = 
          Join[lowScaleGUT,{ToExpression[
                SPhenoForm[LowScaleList[[i,1]]]<>"GUT"]}];
        
        SPhenoParameters=
          Join[SPhenoParameters,{newEntry /. {lowScaleNames[[i]] \[Rule] 
                    lowScaleIn[[i]]}}];
        SPhenoParameters=
          Join[SPhenoParameters,{newEntry /. {lowScaleNames[[i]] \[Rule] 
                    lowScaleMZ[[i]]}}];
        SPhenoParameters=
          Join[SPhenoParameters,{newEntry /. {lowScaleNames[[i]] \[Rule] 
                    lowScaleGUT[[i]]}}];
        
        If[conj[lowScaleNames[[i]]]===lowScaleNames[[i]],
          
          realVar=Join[
                realVar,{lowScaleIn[[i]], lowScaleMZ[[i]], 
                  lowScaleGUT[[i]]}];
          ];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[HighScaleList],
        highScaleNames = Join[highScaleNames,{HighScaleList[[i,1]]}];
        newEntry=
          Extract[SPhenoParameters,
            Position[SPhenoParameters,HighScaleList[[i,1]]][[1,1]]];
        highScaleIn = 
          Join[highScaleIn,{ToExpression[
                SPhenoForm[HighScaleList[[i,1]]]<>"IN"]}];
        highScaleMZ = 
          Join[highScaleMZ,{ToExpression[
                SPhenoForm[HighScaleList[[i,1]]]<>"MZ"]}];
        highScaleGUT = 
          Join[highScaleGUT,{ToExpression[
                SPhenoForm[HighScaleList[[i,1]]]<>"GUT"]}];
        
        SPhenoParameters=
          Join[SPhenoParameters,{newEntry /. {highScaleNames[[i]] \[Rule] 
                    highScaleIn[[i]]}}];
        SPhenoParameters=
          Join[SPhenoParameters,{newEntry /. {highScaleNames[[i]] \[Rule] 
                    highScaleMZ[[i]]}}];
        SPhenoParameters=
          Join[SPhenoParameters,{newEntry /. {highScaleNames[[i]] \[Rule] 
                    highScaleGUT[[i]]}}];
        
        If[conj[highScaleNames[[i]]]===highScaleNames[[i]],
          
          realVar=Join[
                realVar,{highScaleIn[[i]], highScaleMZ[[i]], 
                  highScaleGUT[[i]]}];
          ];
        i++;]; 
      
      nrLowScale=GetNumberParameters[lowScaleNames];
      nrHighScale=GetNumberParameters[highScaleNames];
      
      nrComplete = nrLowScale + nrHighScale;
      
      listVEVs={};
      
      For[i=1,i\[LessEqual]Length[Particles[Current]],
        If[Particles[Current][[i,4]]===VEV,
          listVEVs=Join[listVEVs,{Particles[Current][[i,1]]}];
          ];
        i++;];
      
      listVEVsIN={};
      For[i=1,i\[LessEqual]Length[listVEVs],
        newEntry=
          Extract[SPhenoParameters,
            Position[SPhenoParameters,listVEVs[[i]]][[1,1]]];
        listVEVsIN = 
          Join[listVEVsIN,{ToExpression[SPhenoForm[listVEVs[[i]]]<>"IN"]}];
        SPhenoParameters=
          Join[SPhenoParameters,{newEntry /. {listVEVs[[i]] \[Rule] 
                    listVEVsIN[[i]]}}];
        realVar = 
          Join[realVar,{ToExpression[SPhenoForm[listVEVs[[i]]]<>"IN"]}];
        i++;];
      
      ];

AddParametersToList[list_]:=Block[{i},
      
      For[i=1,i\[LessEqual]Length[list],
          
          par=DeleteCases[
                DeleteCases[DeleteCases[DeleteCases[list[[i]],gen1,3],gen2,3],
                  gen3,3],gen4,3] /. XX_[]\[Rule]XX;
          dim = getDimParameters[par];
          If[FreeQ[LowScaleParameter,par]\[Equal]True,
            If[FreeQ[HighScaleParameter,par]\[Equal]True,
                Print[par, " not definded in SPheno File"];
                Interrupt[];,
                pos=Position[HighScaleParameter,par][[1]];
                HighScaleList = 
                  Join[HighScaleList,{{par,dim,
                        Extract[HighScaleParameter,pos],
                        TrueQ[conj[par]\[Equal]par]}}];
                ];,
            pos=Position[LowScaleParameter,par][[1]];
            
            LowScaleList = 
              Join[LowScaleList,{{par,dim,Extract[LowScaleParameter,pos],
                    TrueQ[conj[par]\[Equal]par]}}];
            ];
          i++;
          ];
      ];

GenerateInOut:=Block[{i1,i2,i3,i4},
      
      Print["-----------------------------------"];
      Print["Write Input-Output Routines"];
      Print["-----------------------------------"];
      
      
      sphenoInOut=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,
            "InputOutput_"<>ModelName<>".f90"]];
      
      WriteString[sphenoInOut,"Module InputOutput_"<>ModelName<>" \n \n"];
      WriteString[sphenoInOut,"Use Control \n"];
      WriteString[sphenoInOut,"!Use Experiment \n"];
      WriteString[sphenoInOut,"Use Model_Data_"<>ModelName<>" \n"];
      WriteString[sphenoInOut,"Use LoopFunctions \n"];
      WriteString[sphenoInOut,"Use SugraRuns_"<>ModelName<>" \n \n"];
      
      WriteString[sphenoInOut,"Character(len=15)::HighScaleModel\n"];
      WriteString[sphenoInOut,"Logical,Save::LesHouches_Format\n"];
      WriteString[sphenoInOut,
        "Character(len=8),Save,Private::version=\"v3beta36\"\n"];
      WriteString[sphenoInOut,"Integer,Private::i_cpv=0\n"];
      WriteString[sphenoInOut,"Integer,Save,Private::in_kont(2)\n"];
      WriteString[sphenoInOut,"Logical,Save::Add_Rparity= .False. \n"];
      WriteString[sphenoInOut,"Logical,Save::Write_HiggsBounds= .False. \n"];
      WriteString[sphenoInOut,"Character(len=40),Private::sp_info\n\n"];
      WriteString[sphenoInOut,"Logical,Private::l_RP_Pythia= .False. \n"];
      WriteString[sphenoInOut,"Logical :: SwitchToSCKM= .True. \n"];
      WriteString[sphenoInOut,
        "Logical,Save,Private::Use_Flavour_States= .False. \n"];
      WriteString[sphenoInOut,"Real(dp),Save,Private::BrMin=1.e-4_dp \n"];
      WriteString[sphenoInOut,"Real(dp),Save,Private::SigMin=1.e-4_dp \n"];
      
      WriteString[sphenoInOut,
        "Character(len=60)::inputFileName,outputFileName \n"];
      
      
      WriteString[sphenoInOut,"Contains \n \n"];
      
      GenerateMixedLHBlock;
      
      GenerateLesHouchesIn;
      GenerateLesHouchesOut;
      
      WriteWHIZARDout;
      
      (*
        If[SPhenoHiggsBoundsIncluded===True,
            WriteHiggsBounds;
            ];
        *)
      
      AppendSourceCode["ReadRoutines.f90",sphenoInOut];
      WriteReadInFunctions;
      AppendSourceCode["SwitchToSCKM.f90",sphenoInOut];
      
      WriteString[sphenoInOut,
        "End Module InputOutput_"<>ModelName<>" \n \n"];
      
      Close[sphenoInOut];
      ];


GenerateLesHouchesIn:=Block[{},
      
      Print["Write LesHouchesIn"];
      
       WriteString[sphenoInOut,
        "Subroutine LesHouches_Input(kont, HighScaleModel, Ecms, Pm, Pp, l_ISR, Fgmsb) \n \n"]\
; 
      
      WriteString[sphenoInOut,"Implicit None \n"];
      WriteString[sphenoInOut,"Integer, Intent(out) :: kont\n"]; 
       WriteString[sphenoInOut,
        "Real(dp), Intent(out) :: Fgmsb, Ecms(:), Pm(:), Pp(:)\n"]; 
      WriteString[sphenoInOut,
        "Character(len=15), Intent(out) :: HighScaleModel\n"]; 
      WriteString[sphenoInOut,"Logical, Intent(out) :: l_ISR(:)\n"]; 
      
      WriteString[sphenoInOut,"Character(len=80) :: read_line\n"];
      WriteString[sphenoInOut,
        "Integer :: i_mod=-1, i_sm=-1, i_par=-1, set_mod_par(25)=-1 &\n"];
      WriteString[sphenoInOut,
        "& , i1, p_max, p_act, i_sp, i_model=-1, i_particles=-1\n"];
      WriteString[sphenoInOut,
        "Real(dp) :: wert, Abs_Mu2, cosb2, cos2b, sinb2, RG0(3,3) &\n"];
      WriteString[sphenoInOut,
        " & , mat_D(3,3), R2(2,2), s12,s13,s23,c12,c13,c23\n"];
      WriteString[sphenoInOut,
        "Logical :: check, calc_ferm, check_alpha(2)\n"];
      WriteString[sphenoInOut,"Complex(dp) :: lam_vS\n"];
      WriteString[sphenoInOut,"Logical, Save :: l_open = .True. \n \n"];
      	
      WriteString[sphenoInOut,"Iname = Iname + 1\n"];
      WriteString[sphenoInOut,
        "NameOfUnit(Iname) = \"LesHouches_Input\" \n\n"];
      	
      WriteString[sphenoInOut,
        "check_alpha = .False. ! used to check consistency of alpha(mZ) calculation\n"]\
;
      WriteString[sphenoInOut,"in_kont = 0\n\n"];
      
      WriteString[sphenoInOut,"Call InitializeStandardModel \n"];
      WriteString[sphenoInOut,"Call InitializeLoopFunctions \n \n"];
      
      WriteString[sphenoInOut,"i_mod = -1\n"];
      WriteString[sphenoInOut,"i_sm = -1\n"];
      WriteString[sphenoInOut,"i_par = -1\n"];
      WriteString[sphenoInOut,"set_mod_par = -1 \n\n"];
      
      WriteString[sphenoInOut,"ErrorLevel = -1\n"];
      WriteString[sphenoInOut,"GenerationMixing=.False.\n"];
      WriteString[sphenoInOut,"If (l_open) Then\n"];
      WriteString[sphenoInOut,
        "   Open(ErrCan,file=\"Messages.out\",status=\"unknown\")\n"];
      WriteString[sphenoInOut,
        "   Open(11,file=\"SPheno.out\",status=\"unknown\")\n"];
      WriteString[sphenoInOut,"   l_open = .False.\n"];
      WriteString[sphenoInOut,"End If \n\n"];
      
      
      WriteString[sphenoInOut,"Call Set_All_Parameters_0()\n\n"];
      WriteString[sphenoInOut,"lam_vs = 0._dp\n"];
      WriteString[sphenoInOut,"sp_info = \" \"\n"];
      
      WriteString[sphenoInOut,"HighScaleModel=\"SARAH_Generated_Model\" \n"];
      
      WriteString[sphenoInOut,"TwoLoopRGE = .True.\n"];
      WriteString[sphenoInOut,"Fgmsb = 1.e12_dp\n"];
      WriteString[sphenoInOut,"m32 = 1.e20_dp \n \n"];
      
      WriteString[sphenoInOut,"kont = 0\n"];
      WriteString[sphenoInOut,
        "Open(99,file=inputFileName,status=\"old\",err=200)\n \n"];
      
      
      WriteString[sphenoInOut,"Do \n"];
      WriteString[sphenoInOut,
        "  Read(99,\"(a80)\",End=200,err=200) read_line \n"];
      
      WriteString[sphenoInOut,"  If (read_line(1:1).Eq.\"#\") Cycle \n"];
      WriteString[sphenoInOut,"  If (read_line.Eq.\" \") Cycle \n"];
      
      WriteString[sphenoInOut,"  Call PutUpperCase(read_line) \n"];
      WriteString[sphenoInOut,"  If (read_line(1:5).Eq.\"BLOCK\") Then  \n"];
      WriteString[sphenoInOut,
        "    If (read_line(7:12).Eq.\"MODSEL\") Then  \n"];
      WriteString[sphenoInOut,"      kont = 0  \n"];
      WriteString[sphenoInOut,
        "     Call Read_MODSEL(99,i_particles,i_model,i_cpv,kont)  \n"];
      WriteString[sphenoInOut," If (i_cpv.Eq.0) Then \n"];
      WriteString[sphenoInOut," s12=lam_wolf \n"];
      WriteString[sphenoInOut," s23=s12**2*A_wolf \n"];
      WriteString[sphenoInOut,
        " s13=s23*lam_wolf*Sqrt(eta_wolf**2+rho_wolf**2) \n"];
      WriteString[sphenoInOut," c12=Sqrt(1._dp-s12*s12) \n"];
      WriteString[sphenoInOut," c23=Sqrt(1._dp-s23*s23) \n"];
      WriteString[sphenoInOut," c13=Sqrt(1._dp-s13*s13) \n"];
      
      WriteString[sphenoInOut," CKM(1,1)=c12*c13 \n"];
      WriteString[sphenoInOut," CKM(1,2)=s12*c13 \n"];
      WriteString[sphenoInOut," CKM(1,3)=s13 \n"];
      WriteString[sphenoInOut," CKM(2,1)=-s12*c23-c12*s23*s13 \n"];
      WriteString[sphenoInOut," CKM(2,2)=c12*c23-s12*s23*s13 \n"];
      WriteString[sphenoInOut," CKM(2,3)=s23*c13 \n"];
      WriteString[sphenoInOut," CKM(3,1)=s12*s23-c12*c23*s13 \n"];
      WriteString[sphenoInOut," CKM(3,2)=-c12*s23-s12*c23*s13 \n"];
      WriteString[sphenoInOut," CKM(3,3)=c23*c13 \n"];
      WriteString[sphenoInOut," End If \n"];
      WriteString[sphenoInOut,
        "    Else If (read_line(7:14).Eq.\"SMINPUTS\") Then  \n"];
      WriteString[sphenoInOut,"     Call Read_SMinput(99)  \n"];
      WriteString[sphenoInOut,
        "    Else If (read_line(7:12).Eq.\"VCKMIN\") Then  \n"];
      WriteString[sphenoInOut,"     Call Read_CKM(99,i_cpv)  \n"];
      WriteString[sphenoInOut,
        "    Else If (read_line(7:17).Eq.\"SPHENOINPUT\") Then  \n"];
      WriteString[sphenoInOut,"     Call Read_SPhenoInput(99)  \n"];
      WriteString[sphenoInOut,
        "    Else If (read_line(7:12).Eq.\"MINPAR\") Then  \n"];
      WriteString[sphenoInOut,
        "     Call Read_MINPAR(99,0,i_model,set_mod_par,kont)  \n"];
      WriteString[sphenoInOut,
        "    Else If (read_line(7:14).Eq.\"IMMINPAR\") Then  \n"];
      WriteString[sphenoInOut,"       If (i_cpv.Lt.2) Then \n"];
      WriteString[sphenoInOut,"       Call Warn_CPV(i_cpv,\"IMMINPAR\") \n"];
      WriteString[sphenoInOut,"       End If \n"];
      WriteString[sphenoInOut,
        "    Call Read_MINPAR(99,1,i_model,set_mod_par,kont)  \n"];
      WriteString[sphenoInOut,
        "    Else If (read_line(7:12).Eq.\"EXTPAR\") Then  \n"];
      WriteString[sphenoInOut,
        "     Call Read_EXTPAR(99,0,i_model,set_mod_par,kont)  \n"];
      WriteString[sphenoInOut,
        "    Else If (read_line(7:14).Eq.\"IMEXTPAR\") Then  \n"];
      WriteString[sphenoInOut,"       If (i_cpv.Lt.2) Then \n"];
      WriteString[sphenoInOut,"       Call Warn_CPV(i_cpv,\"IMEXTPAR\") \n"];
      WriteString[sphenoInOut,"       End If \n"];
      WriteString[sphenoInOut,
        "    Call Read_EXTPAR(99,1,i_model,set_mod_par,kont)  \n"];
      
      
      WriteReadInRoutines[ListAllInputParameters /.{ {1}\[Rule]{} } ];
      
      If[Head[RegimeNr]===Integer,
        temp = {};
        For[i=1,i\[LessEqual]Length[listParametersOtherRegimes],
          
          temp = Join[
              temp,{{listParametersOtherRegimes[[i]],
                  getDimSPheno[listParametersOtherRegimes[[i]]],
                  listParametersOtherRegimes[[i]],
                  TrueQ[listParametersOtherRegimes[[i]]===
                      conj[listParametersOtherRegimes[[i]]]]}}];
          i++;];
        WriteReadInRoutines[temp /.{ {1}\[Rule]{} }];
        ];
      
      
      
      WriteString[sphenoInOut,"End if \n"];
      
      WriteString[sphenoInOut,"End If \n"];
      
      WriteString[sphenoInOut,"End Do \n"];
      
      
      WriteString[sphenoInOut,"200 Close(99) \n"];
      
      
      WriteString[sphenoInOut,"gmZ = gamZ * mZ\n"];
      WriteString[sphenoInOut,"gmZ2 = gmZ**2\n"];
      WriteString[sphenoInOut,
        "mW2 = mZ2 * (0.5_dp + Sqrt(0.25_dp-Alpha_Mz*pi / (sqrt2*G_F*mZ2))) / 0.985_dp\n"]\
;
      WriteString[sphenoInOut,"mW = Sqrt(mW2) \n"];
      WriteString[sphenoInOut,"gamW = 2.06_dp \n"];
      WriteString[sphenoInOut,"gamW2 = gamW**2\n"];
      WriteString[sphenoInOut,"gmW = gamW * mW\n"];
      WriteString[sphenoInOut,"gmW2 = gmW**2\n"];
      WriteString[sphenoInOut,"Alpha_mZ = Alpha_MSbar(mZ, mW)\n"];
      WriteString[sphenoInOut,
        "If (calc_ferm) Call CalculateRunningMasses(mf_l,mf_d,mf_u&\n"];
      WriteString[sphenoInOut,"&,Q_light_quarks,alpha_mZ,alphas_mZ,mZ&\n"];
      WriteString[sphenoInOut,"&,mf_l_mZ,mf_d_mZ,mf_u_mZ,kont)\n\n\n"];
      
      
      
      
      
      WriteString[sphenoInOut,"Iname=Iname-1\n"];
      WriteString[sphenoInOut,"Contains\n"];
      
      GenerateReadMINPAR;
      GenerateReadEXTPAR;
      
      AppendSourceCode["ReadMODSEL.f90",sphenoInOut]; 
      AppendSourceCode["ReadSMINPUT.f90",sphenoInOut];
      AppendSourceCode["ReadCKM.f90",sphenoInOut];
      AppendSourceCode["ReadSPINFO.f90",sphenoInOut];
      AppendSourceCode["ReadSPheno.f90",sphenoInOut];
      
      WriteString[sphenoInOut,"End Subroutine LesHouches_Input \n \n \n \n"];
      
      ];



GenerateReadMINPAR:=
    GenerateReadRoutine["MINPAR",
      Table[{i,MINPAR[[i]]},{i,1,Length[MINPAR]}]];
GenerateReadEXTPAR:=GenerateReadRoutine["EXTPAR",EXTPAR];


GenerateReadRoutine[name_,list_]:=Block[{i},
      
      WriteString[sphenoInOut,
        "Subroutine Read_"<>name<>"(io,i_c,i_model,set_mod_par,kont) \n"];
      WriteString[sphenoInOut,"Implicit None \n"];
      WriteString[sphenoInOut,"Integer,Intent(in)::io,i_c,i_model \n"];
      WriteString[sphenoInOut,
        "Integer,Intent(inout)::kont,set_mod_par(:) \n"];
      
      WriteString[sphenoInOut,"Integer::i_par \n"];
      WriteString[sphenoInOut,"Real(dp)::wert \n"];
      WriteString[sphenoInOut,"Character(len=80)::read_line \n"];
      
      
      WriteString[sphenoInOut,"Do \n"];
      WriteString[sphenoInOut,"Read(io,*,End=200) read_line \n"];
      WriteString[sphenoInOut,
        "If (read_line(1:1).Eq.\"#\") Cycle! this loop \n"];
      WriteString[sphenoInOut,
        "Backspace(io)! resetting to the beginning of the line \n"];
      WriteString[sphenoInOut,
        "If ((read_line(1:1).Eq.\"B\").Or.(read_line(1:1).Eq.\"b\")) Exit! this loop \n"]\
;
      
      WriteString[sphenoInOut,"Read(io,*) i_par,wert!,read_line \n"];
      
      If[Head[list]===List,
        
        WriteString[sphenoInOut,
          "If (i_par.Eq."<>ToString[list[[1,1]]]<>") Then \n"];
        For[i=1,i\[LessEqual]Length[list],
          If[FreeQ[realVar,list[[i,2]]],
            
            WriteString[sphenoInOut,
              "If (i_c.Eq.0) "<>ToString[list[[i,2]]]<>"= Cmplx(wert,Aimag("<>
                ToString[list[[i,2]]]<>"),dp) \n"];
            
            WriteString[sphenoInOut,
              "If (i_c.Eq.1) "<>ToString[list[[i,2]]]<>"= Cmplx(Real("<>
                ToString[list[[i,2]]]<>",dp),wert,dp) \n"];,
            WriteString[sphenoInOut,ToString[list[[i,2]]]<>"= wert \n"];
            ];
          If[FreeQ[highScaleIn,list[[i,2]]]\[Equal]False,
            
            WriteString[sphenoInOut,
                "InputValuefor"<>StringDrop[SPhenoForm[list[[i,2]]],-2] <> 
                  "= .True. \n"];
            ];
          If[i\[NotEqual] Length[list],
            
            WriteString[sphenoInOut,
                "Else If (i_par.Eq."<>ToString[list[[i+1,1]]]<>") Then \n"];
            ];
          i++;
          ];
        
        
        WriteString[sphenoInOut,"Else\n"];
        WriteString[sphenoInOut,
          "Write(ErrCan,*) \"Error in routine \"//NameOfUnit(Iname)\n"];
        WriteString[sphenoInOut,
          "If (i_c.Eq.0) Write(ErrCan,*) \"Unknown entry for Block "<>name<>
            " \",i_par\n"];
        WriteString[sphenoInOut,
          "If (i_c.Eq.1) Write(ErrCan,*) \"Unknown entry for Block IM"<>name<>
            " \",i_par\n"];
        
        WriteString[sphenoInOut,"Call AddError(304)\n"];
        WriteString[sphenoInOut,
          "If (ErrorLevel.Eq.2) Call TerminateProgram\n"];
        WriteString[sphenoInOut,"End If\n"];
        ];
      WriteString[sphenoInOut,"End Do! i_par\n"];
      
      
      WriteString[sphenoInOut,"200 Return\n"];
      
      WriteString[sphenoInOut,"End Subroutine Read_"<>name<>" \n \n \n"];
      ];



GenerateLesHouchesOut:=Block[{i,i1,i2,i3,i4},
      
      Print["Write LesHouchesOut"];
      
      MakeSubroutineTitle["LesHouches_Out",
        ListOfLowEnergyNames,{"io_L","io","kont","HighScaleModel","M_GUT"},{"GenerationMixing",
          "f_name"},sphenoInOut];
      
      
      WriteString[sphenoInOut,"Implicit None \n"];
      WriteString[sphenoInOut,"Integer, Intent(in) :: io_L, io, kont\n"];
      MakeVariableList[ListOfLowEnergyNames,",Intent(in)",sphenoInOut];
      WriteString[sphenoInOut,"Real(dp), Intent(in) :: M_GUT\n"];
      WriteString[sphenoInOut,
        "Character(len=15),Intent(in)::HighScaleModel \n \n"];
      WriteString[sphenoInOut,"Character(len=8)::Datum \n"];
      WriteString[sphenoInOut,"Character(len=10)::Zeit \n"];
      WriteString[sphenoInOut,"Logical,Intent(in)::GenerationMixing \n"];
      WriteString[sphenoInOut,"Logical,Save::l_open= .True. \n"];
      WriteString[sphenoInOut,"Integer,Parameter::n_max=500 \n"];
      WriteString[sphenoInOut,"Integer :: i1, i2 \n"];
      WriteString[sphenoInOut,
        "Character(len=30),Dimension(n_max)::Fnames,Lnames \n"];
      WriteString[sphenoInOut,
        "Character(len=*),Intent(in),Optional::f_name\n"];
      WriteString[sphenoInOut,"Real(dp) :: Q, MassLSP(2) \n"];
      WriteString[sphenoInOut,
        "Complex(dp) :: CKM_Q(3,3), "<>ToString[DownSquarkMM]<>"_ckm("<>
          ToString[getDimSPheno[DownSquarkMM][[1]]]<>","<>
          ToString[getDimSPheno[DownSquarkMM][[1]]]<>"),"<>
          ToString[UpSquarkMM]<>"_ckm("<>
          ToString[getDimSPheno[UpSquarkMM][[1]]]<>","<>
          ToString[getDimSPheno[UpSquarkMM][[1]]]<>")  \n"];
      WriteString[sphenoInOut,
        "Complex(dp) ::"<>SPhenoForm[SoftSquark]<>"_ckm("<>
          ToString[getDimSPheno[SoftSquark][[1]]]<>","<>
          ToString[getDimSPheno[SoftSquark][[1]]]<>") \n"];
      WriteString[sphenoInOut,
        "Complex(dp) ::"<>SPhenoForm[SoftUp]<>"_ckm("<>
          ToString[getDimSPheno[SoftUp][[1]]]<>","<>
          ToString[getDimSPheno[SoftUp][[1]]]<>") \n"];
      WriteString[sphenoInOut,
        "Complex(dp) ::"<>SPhenoForm[SoftDown]<>"_ckm("<>
          ToString[getDimSPheno[SoftDown][[1]]]<>","<>
          ToString[getDimSPheno[SoftDown][[1]]]<>") \n"];
      WriteString[sphenoInOut,
        "Complex(dp) ::"<>SPhenoForm[TrilinearUp]<>"_ckm("<>
          ToString[getDimSPheno[TrilinearUp][[1]]]<>","<>
          ToString[getDimSPheno[TrilinearUp][[1]]]<>") \n"];
      WriteString[sphenoInOut,
        "Complex(dp) ::"<>SPhenoForm[TrilinearDown]<>"_ckm("<>
          ToString[getDimSPheno[TrilinearDown][[1]]]<>","<>
          ToString[getDimSPheno[TrilinearDown][[1]]]<>") \n"];
      
      
      
      WriteString[sphenoInOut,
        "Integer :: CurrentPDG2(2), CurrentPDG3(3), PDGlsp(2) \n"];
      WriteString[sphenoInOut,
        "Integer::ierr,i_errors(1100),gt1,gt2,gt3,icount\n"];
      MakeVariableList[Transpose[PDGList][[3]],"",sphenoInOut];
      For[i=1,i\[LessEqual]Length[PDGList],
        If[getGenSPheno[PDGList[[i,1]]]>1,
          
          WriteString[sphenoInOut,
              "Character(len=30),Dimension("<>ToString[
                  Length[PDGList[[i,2]]]]<>"):: NameParticle"<>
                ToString[PDGList[[i,1]]]<>"\n"];,
          
          WriteString[sphenoInOut,
              "Character(len=30) :: NameParticle"<>ToString[PDGList[[i,1]]]<>
                "\n"];
          ];
        i++;
        ];
      
      
      WriteString[sphenoInOut,"Q=Sqrt(GetRenormalizationScale())\n"];
      
      WriteString[sphenoInOut,"Call Date_and_time(datum,zeit)\n"];
      WriteString[sphenoInOut,"If (l_open) Then\n"];
      WriteString[sphenoInOut,"If (Present(f_name)) Then\n"];
      WriteString[sphenoInOut,
        "Open(io_L,file=Trim(f_name),status=\"unknown\")\n"];
      WriteString[sphenoInOut,"Else\n"];
      WriteString[sphenoInOut,
        "Open(io_L,file=outputFileName,status=\"unknown\")\n"];
      WriteString[sphenoInOut,"End If\n"];
      WriteString[sphenoInOut,"l_open= .False.\n"];
      WriteString[sphenoInOut,"End If\n"];
      
      
      WriteString[sphenoInOut,
        "Write(io_L,100) \"# SUSY Les Houches Accord 2.beta - "<>Modelname<>
          " spectrum + Decays\"\n"];
      WriteString[sphenoInOut,"Write(io_L,100) \"# SPheno \"//version \n"];
      WriteString[sphenoInOut,
        "Write(io_L,100) \"# Model dependend source code generated by SARAH 3.0-beta\" \n"]\
;
      WriteString[sphenoInOut,"Write(io_L,100) \"# SPheno: \"\n"];
      WriteString[sphenoInOut,"Write(io_L,100)&\n"];
      WriteString[sphenoInOut,
        "& \"# W. Porod, Comput. Phys. Commun. 153 (2003) 275-315, hep-ph/0301101\"\n"]\
;
      WriteString[sphenoInOut,
        "Write(io_L,100) \"# in case of problems send email to porod@physik.uni-wuerzburg.de\"\n"]\
;
      WriteString[sphenoInOut,"Write(io_L,100) \"# SARAH: \"\n"];
      WriteString[sphenoInOut,"Write(io_L,100)&\n"];
      WriteString[sphenoInOut,
        "& \"# F. Staub, Comput. Phys. Commun. 181 (2010) 1077-1086, arxiv:0806.0538\"\n"]\
;
      WriteString[sphenoInOut,
        "Write(io_L,100) \"# Created: \"//Datum(7:8)//\".\"//Datum(5:6)//\".\"//Datum(1:4)&\n"]\
;
      WriteString[sphenoInOut,"&//\",  \"//Zeit(1:2)//\":\"//Zeit(3:4)\n"];
      WriteString[sphenoInOut,
        "Write(io_L,100) \"Block SPINFO         # Program information\"\n"];
      WriteString[sphenoInOut,
        "Write(io_L,100) \"     1   SPheno      # spectrum calculator\"\n"];
      WriteString[sphenoInOut,
        "Write(io_L,100) \"     2   \"//version//\"    # version number\"\n"];\

      WriteString[sphenoInOut,"Call GetError(i_errors)\n"];
      WriteString[sphenoInOut,
        "If ((i_errors(1)+i_errors(3)+i_errors(5)+i_errors(7)+i_errors(8)& \n"]\
;
      WriteString[sphenoInOut,
        "&+i_errors(10)+i_errors(12)+Sum(i_errors(14:19))).Gt.0)&\n"];
      WriteString[sphenoInOut,"& Write(io_L,100)&\n"];
      WriteString[sphenoInOut,
        "& \"     3               # potential numerical problem, check file Messages.out\"\n"]\
;
      
      WriteString[sphenoInOut,
        "Write(io_L,100) \"Block MINPAR  # Input parameters\"\n"];
      For[i=1,i\[LessEqual]Length[MINPAR],
        WriteString[sphenoInOut,
          "Write(io_L,101) "<>ToString[i]<>", Real("<>SPhenoForm[MINPAR[[i]]]<>
            ",dp) ,\"# "<>SPhenoForm[MINPAR[[i]]]<>"\"\n"];
        i++;];
      
      WriteString[sphenoInOut,
        "Write(io_L,106) \"Block gauge Q=\",m_GUT,\"# (GUT scale)\" \n"];
      
      If[Head[RegimeNr]=!=Integer,
        For[i=1,i\[LessEqual]AnzahlGauge,
            
            WriteString[sphenoInOut,
              "Write(io_L,104) "<>ToString[i]<>","<>ToString[Gauge[[i,4]]]<>"GUT, \"# "<>
                ToString[Gauge[[i,4]]]<>"(Q)^DRbar\" \n"];
            i++;];,
        
        For[i=1,i\[LessEqual]Length[GaugeCouplingsAllRegimes[[1]]],
            
            WriteString[sphenoInOut,
              "Write(io_L,104) "<>ToString[i]<>","<>
                SPhenoForm[GaugeCouplingsAllRegimes[[1,i]]]<>"GUT, \"# "<>
                ToString[GaugeCouplingsAllRegimes[[1,i]]]<>"(Q)^DRbar\" \n"];
            i++;];
        ];
      
      WriteString[sphenoInOut,
        "Write(io_L,100) \"Block SMINPUTS  # SM parameters\"\n"];
      WriteString[sphenoInOut,
        "Write(io_L,102) 1,1._dp/alpha_MSbar(mZ,mW),\"# alpha_em^-1(MZ)^MSbar\"\n"]\
; 
      WriteString[sphenoInOut,"Write(io_L,102) 2,G_F,\"# G_mu [GeV^-2]\"\n"];
      WriteString[sphenoInOut,
        "Write(io_L,102) 3,alphaS_MZ,\"# alpha_s(MZ)^MSbar\"\n"];
      WriteString[sphenoInOut,"Write(io_L,102) 4,mZ,\"# m_Z(pole)\"\n"];
      WriteString[sphenoInOut,
        "Write(io_L,102) 5,mf_d(3),\"# m_b(m_b), MSbar\"\n"];
      WriteString[sphenoInOut,"Write(io_L,102) 6,mf_u(3),\"# m_t(pole)\"\n"];
      WriteString[sphenoInOut,
        "Write(io_L,102) 7,mf_l(3),\"# m_tau(pole)\"\n"];
      
      WriteString[sphenoInOut,
        "If (GenerationMixing.And.SwitchToSCKM) Then\n"];
      WriteString[sphenoInOut,
        "Write(io_L,100) \"Block VCKMIN  # CKM matrix, Wolfenstein parameterization\"\n"]\
;
      WriteString[sphenoInOut,"Write(io_L,102) 1,lam_wolf,\"# lambda\"\n"];
      WriteString[sphenoInOut,"Write(io_L,102) 2,A_wolf,\"# A\"\n"];
      WriteString[sphenoInOut,"Write(io_L,102) 3,rho_wolf,\"# rho bar\"\n"];
      WriteString[sphenoInOut,"Write(io_L,102) 4,eta_wolf,\"# eta bar\"\n"];
      WriteString[sphenoInOut,
        ToString[UpSquarkMM]<>"_ckm = "<>ToString[UpSquarkMM]<>" \n"];
      WriteString[sphenoInOut,
        ToString[DownSquarkMM]<>"_ckm = "<>ToString[DownSquarkMM]<>" \n"];
      WriteString[sphenoInOut,
        "Call Switch_to_superCKM("<>SPhenoForm[DownYukawa]<>","<>
          SPhenoForm[UpYukawa]<>","<>SPhenoForm[TrilinearDown]<>","<>
          SPhenoForm[TrilinearUp]<>","<>SPhenoForm[SoftDown]<>","<>
          SPhenoForm[SoftSquark]<>","<>SPhenoForm[SoftUp]<>"&\n"];
      WriteString[sphenoInOut,
        "&,"<>SPhenoForm[TrilinearDown]<>"_ckm,"<>SPhenoForm[TrilinearUp]<>"_ckm,"<>
          SPhenoForm[SoftDown]<>"_ckm,"<>SPhenoForm[SoftSquark]<>"_ckm,"<>
          SPhenoForm[SoftUp]<>"_ckm, .False.&\n"];
      WriteString[sphenoInOut,
        "&,"<>ToString[DownSquarkMM]<>"_ckm,"<>ToString[UpSquarkMM]<>"_ckm,"<>
          ToString[DownSquarkMM]<>","<>ToString[UpSquarkMM]<>",CKM_Q)\n"];
      
      WriteString[sphenoInOut, 
        SPhenoForm[TrilinearDown]<>"=" <> SPhenoForm[TrilinearDown]<>
          "_ckm \n"];
      WriteString[sphenoInOut, 
        SPhenoForm[TrilinearUp]<>"=" <> SPhenoForm[TrilinearUp]<>"_ckm \n"];
      WriteString[sphenoInOut, 
        SPhenoForm[SoftDown]<>"=" <> SPhenoForm[SoftDown]<>"_ckm \n"];
      WriteString[sphenoInOut, 
        SPhenoForm[SoftUp]<>"=" <> SPhenoForm[SoftUp]<>"_ckm \n"];
      WriteString[sphenoInOut, 
        SPhenoForm[SoftSquark]<>"=" <> SPhenoForm[SoftSquark]<>"_ckm \n"];
      WriteString[sphenoInOut, 
        SPhenoForm[UpSquarkMM]<>"=" <> SPhenoForm[UpSquarkMM]<>"_ckm \n"];
      WriteString[sphenoInOut, 
        SPhenoForm[DownSquarkMM]<>"=" <> SPhenoForm[DownSquarkMM]<>
          "_ckm \n"];
      
      WriteString[sphenoInOut,
        "Write(io_L,106) \"Block VCKM Q=\",Q,\"# Re(CKM) at the SUSY scale\" \n"]\
;
      WriteString[sphenoInOut,"Do i1=1,3\n"];
      WriteString[sphenoInOut,"Do i2=1,3\n"];
      WriteString[sphenoInOut,
        "Write(io_L,107) i1,i2,Real(CKM_Q(i1,i2),dp),\"# Re(V_\"//Bu(i1)//Bu(i2)//\")\"\n"]\
;
      WriteString[sphenoInOut,"End Do\n"];
      WriteString[sphenoInOut,"End Do\n"];
      WriteString[sphenoInOut,
        "If (Maxval(Abs(Aimag(CKM_Q))).Gt.0._dp) Then\n"];
      WriteString[sphenoInOut,
        "Write(io_L,106) \"Block IMVCKM Q=\",Q,\"# Im(CKM) at the SUSY scale\" \n"]\
;
      WriteString[sphenoInOut,"Do i1=1,3\n"];
      WriteString[sphenoInOut,"Do i2=1,3\n"];
      WriteString[sphenoInOut,
        "Write(io_L,107) i1,i2,Aimag(CKM_Q(i1,i2)),\"# Im(V_\"//Bu(i1)//Bu(i2)//\")\"\n"]\
;
      WriteString[sphenoInOut,"End Do\n"];
      WriteString[sphenoInOut,"End Do\n"];
      WriteString[sphenoInOut,"End If\n"];
      
      WriteString[sphenoInOut,"End If \n"];
      
      For[i=1,i\[LessEqual]Length[CombindedBlock],
        WriteString[sphenoInOut,
          "Write(io_L,106) \"Block "<> ToString[CombindedBlock[[i,1]]] <>
            " Q=\",Q,\"# (SUSY scale)\" \n"];
        For[j=2,j\[LessEqual]Length[CombindedBlock[[i]]],
          
          If[FreeQ[ThresholdCouplings,CombindedBlock[[i,j,1]]] && 
              FreeQ[listParametersOtherRegimes,CombindedBlock[[i,j,1]]],
            
            WriteString[sphenoInOut,
                "Write(io_L,104) "<>ToString[CombindedBlock[[i,j,2]]]<>",Real("<>
                  SPhenoForm[ CombindedBlock[[i,j,1]] /. subNumAdd]<>",dp), \"# "<>
                  SPhenoForm[CombindedBlock[[i,j,1]]]<>"\" \n"];
            ];
          j++;];
        i++;];
      
      For[i2=1,i2\[LessEqual]Length[ThresholdInvolvedCouplings],
        For[i=1,i\[LessEqual]Length[CombindedBlock],
          
          If[Intersection[Transpose[ThresholdInvolvedCouplings[[i2]]][[1]],
                Transpose[Delete[CombindedBlock[[i]],1]][[1]]]=!={},
            
            WriteString[sphenoInOut,
              "Write(io_L,106) \"Block "<> ToString[CombindedBlock[[i,1]]] <>" Q=\","<>
                SPhenoForm[Thresholds[[i2,1]]]<>",\"# ("<>ToString[i2] <>
                ". Threshold Scale)\" \n"];
            For[j=2,j\[LessEqual]Length[CombindedBlock[[i]]],
              
              If[FreeQ[ThresholdInvolvedCouplings[[i2]],
                    CombindedBlock[[i,j,1]]]\[Equal]False,
                
                WriteString[sphenoInOut,
                    "Write(io_L,104) "<>ToString[CombindedBlock[[i,j,2]]]<>",Real("<>
                      SPhenoForm[ CombindedBlock[[i,j,1]]]<>"_SAVE("<>
                      ToString[i2]<>"),dp), \"# "<>
                      SPhenoForm[CombindedBlock[[i,j,1]]]<>"\" \n"];
                ];
              j++;];
            ];
          i++;];
        i2++;];
      
      For[i=1,i\[LessEqual]Length[ListAllInputParameters],
        If[
          Length[ListAllInputParameters[[i,2]]]>0 && 
            FreeQ[ThresholdCouplings,ListAllInputParameters[[i,1]]] && 
            FreeQ[listParametersOtherRegimes,ListAllInputParameters[[i,1]]],
          
          WriteOutputBlock[ListAllInputParameters[[i,1]],
              ListAllInputParameters[[i,2]],0,"SUSY Scale"];
          ];
        i++;];
      
      For[i1=1,i1\[LessEqual]Length[Thresholds],
        For[i=1,i\[LessEqual]Length[ListAllInputParameters],
          
          If[Length[ListAllInputParameters[[i,2]]]>0 && 
              FreeQ[ThresholdInvolvedCouplings[[i1]],
                  ListAllInputParameters[[i,1]]]\[Equal]False,
            
            WriteOutputBlock[ListAllInputParameters[[i,1]],
                ListAllInputParameters[[i,2]],i1,
                ToString[i1]<>". Threshold Scale"];
            ];
          i++;];
        i1++;];
      
      If[Head[RegimeNr]===Integer,
        For[i=1,i<RegimeNr,
          combinded={};
          For[j=1,j\[LessEqual]Length[DimensionsOtherRegimes[[i]]],
            
            If[FreeQ[listParametersOtherRegimes,
                    DimensionsOtherRegimes[[i,j,1]]]\[Equal]False &&  
                FreeQ[ListVEVsAllRegimes,
                    DimensionsOtherRegimes[[i,j,1]]]\[Equal]True,
              
              If[Length[DimensionsOtherRegimes[[i,j,2]]]>0 && 
                    DimensionsOtherRegimes[[i,j,2]] =!={1},
                  
                  WriteOutputBlock[DimensionsOtherRegimes[[i,j,1]],
                      DimensionsOtherRegimes[[i,j,2]],100+i,
                      ToString[i]<>". Threshold Scale"];,
                  combinded = 
                      Join[combinded,{DimensionsOtherRegimes[[i,j]]}];
                  ];
              ];
            j++;];
          If[combinded=!={},
            
            WriteString[sphenoInOut,
              "Write(io_L,106) \"Block HighScaleParameters"<>ToString[i]<>" Q = \","<>
                SPhenoForm[ThresholdScales[[i]]] <>",\" # \"\n"];
            For[j=1,j\[LessEqual]Length[combinded],
              
              WriteString[sphenoInOut,
                "Write(io_L,104) "<>ToString[j]<>",Real("<>
                  SPhenoForm[combinded[[j,1]]]<>",dp), \"# "<>
                  ToString[combinded[[j,1]]]  <>" \"  \n"];
              j++;];
            ];
          i++;];
        ParameterDefinitions=ParameterDefinitionsSave;
        ];
      
      If[Length[AdditionalVariablesSPheno]>0,
        WriteString[sphenoInOut,
          "Write(io_L,106) \"Block AdditionalParameters # \" \n"];
        For[j=1,j\[LessEqual]Length[AdditionalVariablesSPheno],
          
          WriteString[sphenoInOut,
            "Write(io_L,104) "<>ToString[j]<>","<>
              SPhenoForm[AdditionalVariablesSPheno[[j]]]<>", \"# "<>
              ToString[AdditionalVariablesSPheno[[j]]]  <>" \"  \n"];
          j++;];
        ];
      
      
      WriteString[sphenoInOut,"MassLSP = 100000._dp \n"];
      
      WriteString[sphenoInOut,
        "Write(io_L,100) \"Block MASS  # Mass spectrum\"\n"];
      WriteString[sphenoInOut,
        "Write(io_L,100) \"#   PDG code      mass          particle\" \n"];
      
      For[i=1,i\[LessEqual]Length[PDGList],
        For[i1=1,i1\[LessEqual]Length[PDGList[[i,2]]],
          
          If[PDGList[[i,2,i1]]=!=0 && 
              FreeQ[massless,PDGList[[i,1]]]\[Equal]True,
            If[Length[PDGList[[i,2]]]>1,
                
                WriteString[sphenoInOut,
                  " Write(io_L,102) "<>ToString[Abs[PDGList[[i,2,i1]]]]<>","<>
                    SPhenoMass[PDGList[[i,1]],i1]<>",\"# "<> 
                    ToString[PDGList[[i,1]]]<>"_"<>ToString[i1] <>"\" \n"];
                If[RParityList[[i,2]]===-1,
                  
                  WriteString[sphenoInOut, 
                    "If (MassLSP(1).gt.Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> 
                      ")) Then \n"];
                  WriteString[sphenoInOut ,"PDGLSP(2) = PDGLSP(1) \n"];
                  
                  WriteString[sphenoInOut ,
                    "PDGLSP(1) = "<>ToString[PDGList[[i,2,i1]]] <>" \n"];
                  WriteString[sphenoInOut ,"MassLSP(2) = MassLSP(1) \n"];
                  
                  WriteString[sphenoInOut ,
                    "MassLSP(1) = Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> 
                      ")\n"];
                  WriteString[sphenoInOut ,"Else \n"];
                  
                  WriteString[sphenoInOut, 
                    "If (MassLSP(2).gt."<>SPhenoMass[PDGList[[i,1]],i1]<> 
                      ") Then \n"];
                  
                  WriteString[sphenoInOut ,
                    "PDGLSP(2) = "<>ToString[PDGList[[i,2,i1]]] <>" \n"];
                  
                  WriteString[sphenoInOut ,
                    "MassLSP(2) = Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> 
                      ")\n"];
                  WriteString[sphenoInOut, "End if \n"];
                  WriteString[sphenoInOut, "End if \n"];
                  ];,
                
                
                WriteString[sphenoInOut,
                  " Write(io_L,102) "<>ToString[PDGList[[i,2,i1]]]<>","<>
                    SPhenoMass[PDGList[[i,1]],i1]<>",\"# "<> 
                    ToString[PDGList[[i,1]]] <>"\" \n"]; 
                If[RParityList[[i,2]]===-1,
                  
                  WriteString[sphenoInOut, 
                    "If (MassLSP(1).gt.Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> 
                      ")) Then \n"];
                  WriteString[sphenoInOut ,"PDGLSP(2) = PDGLSP(1) \n"];
                  
                  WriteString[sphenoInOut ,
                    "PDGLSP(1) = "<>ToString[PDGList[[i,2,i1]]] <>" \n"];
                  WriteString[sphenoInOut ,"MassLSP(2) = MassLSP(1) \n"];
                  
                  WriteString[sphenoInOut ,
                    "MassLSP(1) = Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> 
                      ")\n"];
                  WriteString[sphenoInOut ,"Else \n"];
                  
                  WriteString[sphenoInOut, 
                    "If (MassLSP(2).gt."<>SPhenoMass[PDGList[[i,1]],i1]<> 
                      ") Then \n"];
                  
                  WriteString[sphenoInOut ,
                    "PDGLSP(2) = "<>ToString[PDGList[[i,2,i1]]] <>" \n"];
                  WriteString[sphenoInOut ,
                    "MassLSP(2) = Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> 
                      ")\n"];
                  WriteString[sphenoInOut, "End if \n"];
                  WriteString[sphenoInOut, "End if \n"];
                  ];
                
                
                ];
            ]; 
          i1++;];
        i++;];
      
      WriteString[sphenoInOut,"\n \n"];
      
      WriteString[sphenoInOut,
        "Write(io_L,100) \"Block LSP  # LSP and NLSP\"\n"];
      WriteString[sphenoInOut,
        " Write(io_L,118) 1, PDGLSP(1), \"# LSP \" \n"]; 
      WriteString[sphenoInOut,
        " Write(io_L,118) 2, PDGLSP(2),\"# NLSP \" \n"]; 
      
      For[i=1,i\[LessEqual]Length[ListMixingMat],
        WriteOutputBlock[ListMixingMat[[i,1]],
          getDimParameters[ListMixingMat[[i,1]]],0,""];
        i++;];
      
      For[i=1,i\[LessEqual]Length[PDGList],
        For[j=1,j\[LessEqual]getGenSPheno[PDGList[[i,1]]],
          
          WriteString[sphenoInOut,
            SPhenoPDG[PDGList[[i,1]],j]<>"="<>ToString[PDGList[[i,2,j]]]<>
              "\n"];
          If[getGenSPheno[PDGList[[i,1]]] > 1,
            
            WriteString[sphenoInOut,
                SPhenoNameArray[PDGList[[i,1]],j]<>"=\""<>
                  ToString[PDGList[[i,1]]]<>"_" <>ToString[j] <>"\"\n"];,
            
            WriteString[sphenoInOut,
                SPhenoNameArray[PDGList[[i,1]],j]<>"=\""<>
                  ToString[PDGList[[i,1]]] <>"\"\n"];
            ];
          j++;];
        i++;];
      
      For[i=1,i\[LessEqual]Length[savedDecayInfos],
        WriteString[sphenoInOut, "\n \n !-------------------------------\n"];
        WriteString[sphenoInOut, 
          "!" <>ToString[savedDecayInfos[[i,1]]]<>"\n"];
        WriteString[sphenoInOut, "!-------------------------------\n \n"];
        particle=savedDecayInfos[[i,1]];
        For[j=1,j\[LessEqual]getGenSPheno[particle],
          
          WriteString[sphenoInOut,
            "If("<>SPhenoWidth[particle,j] <>".gt.1.E-10_dp) Then \n"]; 
          
          WriteString[sphenoInOut,
            "Write(io_L,200) "<>ToString[getPDG[particle,j]]<>","<>
              SPhenoWidth[particle,j]<>","<>"Trim(\""<>
              ToString[getBlank[particle ]]<>"_"<>ToString[j]<>"\") \n"];
          
          WriteString[sphenoInOut,
            "Write(io_L,100) \"#    BR                NDA      ID1      ID2\" \n"]\
;
          WriteString[sphenoInOut, "icount = 1 \n"];
          For[k=1,k\[LessEqual]Length[savedDecayInfos[[i,4]]],
            
            pt1=savedDecayInfos[[i,4,k,1]];
            pt2=savedDecayInfos[[i,4,k,2]];
            t1=getType[pt1];
            t2=getType[pt2];
            		   Which[
              t1=== F && t2=== F,p1=pt1;p2=pt2;,
              t1=== S && t2=== S,p1=pt1;p2=pt2;,
              t1=== F && t2=== S,p1=pt1;p2=pt2;,
              t1=== S && t2=== F,p1=pt2;p2=pt1;,
              t1=== F && t2=== V,p1=pt1;p2=pt2;,
              t1=== V && t2=== F,p1=pt2;p2=pt1;,
              t1=== V && t2=== S,p1=pt2;p2=pt1;,
              t1=== S && t2=== V,p1=pt1;p2=pt2;,
              t1=== V && t2=== V,p1=pt2;p2=pt1;
              ];
            
            If[getGenSPheno[p1]>1,
              
              WriteString[sphenoInOut,
                  "Do gt1= "<>ToString[getGenSPhenoStart[p1]] <> ", "<>
                    ToString[getGenSPheno[p1]] <> "\n"];
              ];
            If[getGenSPheno[p2]>1,
              
              WriteString[sphenoInOut,
                  "  Do gt2="<>ToString[getGenSPhenoStart[p2]] <> ", "<>
                    ToString[getGenSPheno[p2]] <> "\n"];
              ];
            
            
            WriteString[sphenoInOut,
              "If ("<>SPhenoBR[particle,j,icount]<>".Gt.BrMin) Then \n"];
            
            If[p1 ===VectorW && p2 === VectorW,
              StringPT1="\"^* \"";
              StringPT1s="\" \"";
              
              WriteString[sphenoInOut,
                "CurrentPDG2(1) = -" <>SPhenoPDG[p1,gt1] <>" \n"];
              StringPT2="\"_virt \"";
              StringPT2s="\"^*_virt \"";
              
              WriteString[sphenoInOut,
                "CurrentPDG2(2) = " <>SPhenoPDG[p2,gt2] <>" \n"];
              
              
              
              WriteString[sphenoInOut,
                "Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>
                  "/2._dp,2,CurrentPDG2, & \n "];
              
              WriteString[sphenoInOut,
                "& Trim("<>SPhenoNameArray[particle,j]<>")//\" -> \"//Trim("<>
                  SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>
                  SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>
                  "//\")\"\n"];
              
              WriteString[sphenoInOut,
                "Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>
                  "/2._dp,2,-CurrentPDG2, & \n "];
              
              WriteString[sphenoInOut,
                "& Trim("<>SPhenoNameArray[particle,j]<>")//\" -> \"//Trim("<>
                  SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1s<>"//Trim("<>
                  SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2s<>
                  "//\")\"\n"];,
              
              If[Head[p1]=== bar || Head[p1]=== conj,
                StringPT1="\"^* \"";
                StringPT1s="\" \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG2(1) = -" <>SPhenoPDG[p1,gt1] <>" \n"];,
                StringPT1="\" \"";
                StringPT1s="\"^* \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG2(1) = " <>SPhenoPDG[p1,gt1] <>" \n"];
                ];
              
              If[Head[p2]=== bar || Head[p2]=== conj,
                StringPT2="\"^* \"";
                StringPT2s="\" \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG2(2) = -" <>SPhenoPDG[p2,gt2] <>" \n"];,
                StringPT2="\" \"";
                StringPT2s="\"^* \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG2(2) = " <>SPhenoPDG[p2,gt2] <>" \n"];
                ];
              
              
              
              
              If[AntiField[particle]===
                    particle && (AntiField[p1]=!=p1 || AntiField[p2]=!=p2) && 
                  AntiField[p1]=!=p2,
                
                WriteString[sphenoInOut,
                  "Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>
                    "/2._dp,2,CurrentPDG2, & \n "];
                WriteString[sphenoInOut,
                  "& Trim("<>SPhenoNameArray[particle,j]<>")//\" -> \"//Trim("<>
                    SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>
                    SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>
                    "//\")\"\n"];
                
                WriteString[sphenoInOut,
                  "Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>
                    "/2._dp,2,-CurrentPDG2, & \n "];
                
                WriteString[sphenoInOut,
                  "& Trim("<>SPhenoNameArray[particle,j]<>")//\" -> \"//Trim("<>
                    SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1s<>"//Trim("<>
                    SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2s<>
                    "//\")\"\n"];,
                
                WriteString[sphenoInOut,
                  "Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>
                    ",2,CurrentPDG2, & \n "];
                
                WriteString[sphenoInOut,
                  "& Trim("<>SPhenoNameArray[particle,j]<>")//\" -> \"//Trim("<>
                    SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>
                    SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>
                    "//\")\"\n"];
                ];
              ];
            
            WriteString[sphenoInOut,"End if \n"];
            
            WriteString[sphenoInOut, "icount = icount +1 \n"];
            
            
            If[getGenSPheno[p1]>1,WriteString[sphenoInOut,"  End Do \n"];];
            If[getGenSPheno[p2]>1, WriteString[sphenoInOut,"End Do \n \n"];];
            
            k++;];
          
          
          
          If[FreeQ[Transpose[ListDecayParticles3B][[1]],
                particle]\[Equal]False,
            pos=Position[BR2and3,particle][[1,1]];
            
            length3B = 
              "("<>ToString[j]<>","<>ToString[Extract[BR2and3,pos][[2]]+1] <>":"<>
                ToString[Extract[BR2and3,pos][[3]]] <>")";
            
            
            WriteString[sphenoInOut, 
              "If (Maxval("<>ToString[SPhenoBR[particle]]<>length3B<>
                ").Gt.BRmin) Then \n"];
            
            WriteString[sphenoInOut, 
              "Write(io_L,100) \"#    BR                NDA      ID1      ID2       ID3\" \n"]\
;
            WriteString[sphenoInOut, "End If \n"];
            
            
            pos = Position[Transpose[savedDecayInfos3Body][[1]],particle][[1,
                  1]];
            
            For[k=1,k\[LessEqual]Length[savedDecayInfos3Body[[pos,6]]],
              finalparticles=List @@savedDecayInfos3Body[[pos,6,k,1]];
              p1=finalparticles[[1]];
              p2=finalparticles[[2]];
              p3=finalparticles[[3]];
              
              If[getGenSPheno[p1]>1,
                
                WriteString[sphenoInOut,
                    "Do gt1= "<>ToString[getGenSPhenoStart[p1]] <> ", "<>
                      ToString[getGenSPheno[p1]] <> "\n"];
                ];
              If[getGenSPheno[p2]>1,
                
                WriteString[sphenoInOut,
                    "  Do gt2="<>ToString[getGenSPhenoStart[p2]] <> ", "<>
                      ToString[getGenSPheno[p2]] <> "\n"];
                ];
              If[getGenSPheno[p3]>1,
                
                WriteString[sphenoInOut,
                    "  Do gt3="<>ToString[getGenSPhenoStart[p3]] <> ", "<>
                      ToString[getGenSPheno[p3]] <> "\n"];
                ];
              
              
              
              
              WriteString[sphenoInOut,
                "If ("<>SPhenoBR[particle,j,icount]<>".Gt.BrMin) Then \n"];
              If[Head[p1]=== bar || Head[p1]=== conj,
                StringPT1="\"^* \"";
                StringPT1s="\" \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG3(1) = -" <>SPhenoPDG[p1,gt1] <>" \n"];,
                StringPT1="\" \"";
                StringPT1s="\"^* \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG3(1) = " <>SPhenoPDG[p1,gt1] <>" \n"];
                ];
              
              If[Head[p2]=== bar || Head[p2]=== conj,
                StringPT2="\"^* \"";
                StringPT2s="\" \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG3(2) = -" <>SPhenoPDG[p2,gt2] <>" \n"];,
                StringPT2="\" \"";
                StringPT2s="\"^* \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG3(2) = " <>SPhenoPDG[p2,gt2] <>" \n"];
                ];
              
              If[Head[p3]=== bar || Head[p3]=== conj,
                StringPT3="\"^* \"";
                StringPT3s="\" \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG3(3) = -" <>SPhenoPDG[p3,gt3] <>" \n"];,
                StringPT3="\" \"";
                StringPT3s="\"^* \"";
                
                WriteString[sphenoInOut,
                  "CurrentPDG3(3) = " <>SPhenoPDG[p3,gt3] <>" \n"];
                ];
              		
              
              If[AntiField[particle]===particle && 
                  C[p1,p2,p3]=!=AntiField/@C[p1,p2,p3],
                
                WriteString[sphenoInOut,
                  "Write(io_L,202) "<>SPhenoBR[particle,j,icount]<>
                    "/2._dp,3,CurrentPDG3, & \n "];
                
                WriteString[sphenoInOut,
                  "& Trim("<>SPhenoNameArray[particle,j]<>")//\" -> \"//Trim("<>
                    SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>
                    SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>"//Trim("<>
                    SPhenoNameArray[getBlank[p3],gt3]<>")//"<>StringPT3<>
                    "//\")\"\n"];
                
                WriteString[sphenoInOut,
                  "Write(io_L,202) "<>SPhenoBR[particle,j,icount]<>
                    "/2._dp,3,-CurrentPDG3, & \n "];
                
                WriteString[sphenoInOut,
                  "& Trim("<>SPhenoNameArray[particle,j]<>")//\" -> \"//Trim("<>
                    SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1s<>"//Trim("<>
                    SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2s<>"//Trim("<>
                    SPhenoNameArray[getBlank[p3],gt3]<>")//"<>StringPT3s<>
                    "//\")\"\n"];,
                
                
                WriteString[sphenoInOut,
                  "Write(io_L,202) "<>SPhenoBR[particle,j,icount]<>
                    ",3,CurrentPDG3, & \n "];
                
                WriteString[sphenoInOut,
                  "& Trim("<>SPhenoNameArray[particle,j]<>")//\" -> \"//Trim("<>
                    SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>
                    SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>"//Trim("<>
                    SPhenoNameArray[getBlank[p3],gt3]<>")//"<>StringPT3<>
                    "//\")\"\n"];
                ];
              
              
              WriteString[sphenoInOut,"End if \n"];
              
              WriteString[sphenoInOut, "icount = icount +1 \n"];
              If[getGenSPheno[p1]>1,WriteString[sphenoInOut,"  End Do \n"];];
              
              If[getGenSPheno[p2]>1, 
                WriteString[sphenoInOut,"End Do \n \n"];];
              
              If[getGenSPheno[p3]>1, 
                WriteString[sphenoInOut,"End Do \n \n"];];
              
              k++;];
            ];
          WriteString[sphenoInOut,"End if \n"];
          j++;]; 
        i++;];
      
      WriteString[sphenoInOut, "\n \n"];
      WriteString[sphenoInOut,
        "Write(io_L,100) \"Block SPhenoLowEnergy # low energy observables \" \n"]\
;
      
      For[i=1,i\[LessEqual]Length[ListOfLowEnergyNames],
        If[FreeQ[realVar,ListOfLowEnergyNames[[i]]],
          
          WriteString[sphenoInOut,
              "Write(io_L,101), "<>ToString[i]<>",Abs("<>
                ToString[ListOfLowEnergyNames[[i]]] <>"),  \"# "<>
                ToString[ListOfLowEnergyNames[[i]]] <>"\" \n"];,
          
          WriteString[sphenoInOut,
              "Write(io_L,101), "<>ToString[i]<>","<>
                ToString[ListOfLowEnergyNames[[i]]] <>",  \"# "<>
                ToString[ListOfLowEnergyNames[[i]]] <>"\" \n"];
          ];
        i++;];
      
      
      WriteString[sphenoInOut, "\n \n"];
      
      WriteString[sphenoInOut, "If(Write_WHIZARD) Call WriteWHIZARD \n \n"];
      
      (*
        If[SPhenoHiggsBoundsIncluded===True,
            
            WriteString[sphenoInOut, 
              "If(Write_HiggsBounds) Call WriteHiggsBounds"];
            WriteString[sphenoInOut, "\n \n"];
            ];
        *)
      
      WriteString[sphenoInOut,"99 Format(1x,i5,3x,a) \n"];
      WriteString[sphenoInOut,"100 Format(a) \n"];
      WriteString[sphenoInOut,"101 Format(2x,i3,2x,1P,e16.8,2x,a) \n"];
      WriteString[sphenoInOut,"102 Format(1x,i9,3x,1P,e16.8,2x,a) \n"];
      WriteString[sphenoInOut,"103 Format(a13,1P,e16.8,2x,a) \n"];
      WriteString[sphenoInOut,"104 Format(i4,2x,1P,e16.8,2x,a) \n"];
      WriteString[sphenoInOut,"105 Format(1x,2i3,3x,1P,e16.8,3x,a) \n"];
      WriteString[sphenoInOut,"106 Format(a,1P,e16.8,2x,a) \n"];
      WriteString[sphenoInOut,"107 Format(2i3,3x,1P,e16.8,3x,a) \n"];
      WriteString[sphenoInOut,"127 Format(3i3,3x,1P,e16.8,3x,a) \n"];
      WriteString[sphenoInOut,"117 Format(i3,i8,3x,1P,e16.8,3x,a) \n"];
      WriteString[sphenoInOut,"118 Format(i3,i8,3x,1P,a) \n"];
      WriteString[sphenoInOut,"108 Format(9x,1P,E16.8,0P,3x,a) \n"];
      WriteString[sphenoInOut,"109 Format(1x,3i3,3x,1P,e16.8,3x,a) \n"];
      WriteString[sphenoInOut,"110 Format(3x,2i3,3x,\"# \",a) \n"];
      WriteString[sphenoInOut,
        "200 Format(\"DECAY\",1x,I9,3x,1P,E16.8,0P,3x,\"# \",a) \n"];
      WriteString[sphenoInOut,
        "201 Format(3x,1P,e16.8,0p,3x,I2,3x,2(i9,1x),2x,\"# BR(\",a) \n"];
      WriteString[sphenoInOut,
        "202 Format(3x,1P,e16.8,0p,3x,I2,3x,3(i9,1x),2x,\"# BR(\",a) \n"];
      WriteString[sphenoInOut,
        "4711 Format(3x,1P,e16.8,0p,3x,I2,3x,2(i9,1x),2x,\" # \",A)\n"];
      WriteString[sphenoInOut,
        "4712 Format(\"XS 11 -11 \",F7.1,\" \",F5.2,\" \",F5.2,\" \",A)\n\n"];\

      WriteString[sphenoInOut,"5410 Format(a25,1p,e16.7) \n"];
      WriteString[sphenoInOut,
        "5411 Format(a25,1p,\"(\",e16.7,\",\",e16.7,\")\") \n"];
      
      WriteString[sphenoInOut,"End Subroutine LesHouches_Out \n \n \n"];
      
      ];




MakePDGList[Eigenstates_]:=Block[{i,def,field},
      PDGList={};
      RParityList = {};
      def=ParticleDefinitions[Eigenstates];
      For[i=1,i\[LessEqual]Length[def],
        readPDG=PDG /. def[[i,2]];
        readRP=RParity /. def[[i,2]];
        If[Length[readPDG]=!=getGenSPheno[def[[i,1]]],
          currentPDG=Table[0,{getGenSPheno[def[[i,1]]]}];,
          currentPDG = readPDG;
          ];
        PDGList=
          Join[PDGList,{{def[[i,1]],currentPDG,SPhenoPDG[def[[i,1]]]}}];
        RParityList=Join[RParityList,{{def[[i,1]],readRP}}];
        SPhenoParameters=
          Join[SPhenoParameters,{{SPhenoPDG[
                  def[[i,1]]],{generation},{getGenSPheno[def[[i,1]]]}}}];
        i++;];
      
      
      field=
        Flatten[{Transpose[PART[F]][[1]],Transpose[PART[S]][[1]],
            Transpose[PART[V]][[1]]}];
      
      noPDG=Select[field,(FreeQ[PDGList,#])&];
      
      For[i=1,i\[LessEqual]Length[noPDG],
        Message[SPheno::noPDG,noPDG[[i]]];
        i++;];
      
      ];

AddParametersFromOtherRegimes := Block[{i,j,k, saveName, inName},
      listParametersOtherRegimes={};
      listParametersOtherRegimesSave={};
      listParametersOtherRegimesGUT={};
      listsaveMasses = Table[{},{RegimeNr-1}];
      For[i=1,i<RegimeNr,
        For[j=1,j\[LessEqual]Length[DimensionsOtherRegimes[[i]]],
          If[FreeQ[SPhenoParameters,DimensionsOtherRegimes[[i,j,1]]],
            
            saveName = 
              ToExpression[
                SPhenoForm[DimensionsOtherRegimes[[i,j,1]]]<>"SAVE"];
            
            inName = 
              ToExpression[
                SPhenoForm[DimensionsOtherRegimes[[i,j,1]]]<>"IN"];
            
            GutName = 
              ToExpression[
                SPhenoForm[DimensionsOtherRegimes[[i,j,1]]]<>"GUT"];
            Switch[Length[DimensionsOtherRegimes[[i,j,2]]],
              0, 
              SPhenoParameters=
                Join[SPhenoParameters,{{DimensionsOtherRegimes[[i,j,
                          1]],{},{}}}];
              SPhenoParameters=Join[SPhenoParameters,{{saveName,{},{}}}];
              SPhenoParameters=Join[SPhenoParameters,{{inName,{},{}}}];
              SPhenoParameters=Join[SPhenoParameters,{{GutName,{},{}}}];,
              1, 
              SPhenoParameters=
                Join[SPhenoParameters,{{DimensionsOtherRegimes[[i,j,
                          1]],{generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{saveName,{generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{inName,{generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{GutName,{generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];,
              2, 
              SPhenoParameters=
                Join[SPhenoParameters,{{DimensionsOtherRegimes[[i,j,
                          1]],{generation,generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{saveName,{generation,generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{inName,{generation,generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{GutName,{generation,generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];,
              3, 
              SPhenoParameters=
                Join[SPhenoParameters,{{DimensionsOtherRegimes[[i,j,
                          1]],{generation,generation,generation},
                      DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{saveName,{generation,generation,
                        generation},DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{inName,{generation,generation,
                        generation},DimensionsOtherRegimes[[i,j,2]]}}];
              
              SPhenoParameters=
                Join[SPhenoParameters,{{GutName,{generation,generation,
                        generation},DimensionsOtherRegimes[[i,j,2]]}}];
              ];
            
            listParametersOtherRegimes=
              Join[listParametersOtherRegimes,{DimensionsOtherRegimes[[i,j,
                      1]]}];
            
            listParametersOtherRegimesSave=
              Join[listParametersOtherRegimesSave,{saveName}];
            If[i\[Equal]1,
              
              listParametersOtherRegimesGUT=
                  Join[listParametersOtherRegimesGUT,{GutName}];
              ];
            highScaleIn=Join[highScaleIn,{inName}];
            If[FreeQ[realVar,DimensionsOtherRegimes[[i,j,1]]]\[Equal]False,
              realVar = Join[realVar,{inName,saveName,GutName}];
              ];
            ];
          j++;];
        i++;];
      
      For[i=1,i<RegimeNr,
        For[j=1,j\[LessEqual]Length[GenerationsOfHeavyFieldsAllRegimes[[i]]],
          
          saveName =
            ToExpression[
              ToString[
                  SPhenoMass[GenerationsOfHeavyFieldsAllRegimes[[i,j,1]]]]<>
                "SAVE"];
          
          inName =ToExpression[
              ToString[
                  SPhenoMass[GenerationsOfHeavyFieldsAllRegimes[[i,j,1]]]]<>
                "IN"];
          
          SPhenoParameters=
            Join[SPhenoParameters,{{saveName,{generation},{\
GenerationsOfHeavyFieldsAllRegimes[[i,j,3]]}}}];
          realVar=Join[realVar,{saveName}];
          listsaveMasses[[i]]  = Join[listsaveMasses[[i]],{saveName}];
          
          saveName =
            ToExpression[
              ToString[
                  SPhenoMassSq[GenerationsOfHeavyFieldsAllRegimes[[i,j,1]]]]<>
                "SAVE"];
          
          SPhenoParameters=
            Join[SPhenoParameters,{{saveName,{generation},{\
GenerationsOfHeavyFieldsAllRegimes[[i,j,3]]}}}];
          realVar=Join[realVar,{saveName}];
          listsaveMasses [[i]] = Join[listsaveMasses[[i]] ,{saveName}];
          j++;];
        i++;];
      
      
      ];



WriteOutputBlock[name_,dimensions_,thresholdscale_,scalename_]:=
    Block[{i,i1,i2,i3,nameString},
      pos = Position[Transpose[ParameterDefinitions][[1]],name];
      If[pos=!={},
        BlockName=
          LesHouches /. Extract[ParameterDefinitions,pos[[1,1]]][[2]];
        If[BlockName===LesHouches || BlockName===None,
          BlockName =SPhenoForm[name];
          ];,
        BlockName =SPhenoForm[name];
        ];
      
      If[thresholdscale ===0,
        Q = "Q";
        nameString=SPhenoForm[name]<>"(";,
        If[thresholdscale<100,
            Q = SPhenoForm[Thresholds[[thresholdscale,1]]];
            
            nameString=
              SPhenoForm[name]<>"_save"<>"("<>ToString[thresholdscale]<>",";,
            Q = SPhenoForm[ThresholdScales[[thresholdscale-100]]];
            nameString=SPhenoForm[name]<>"(";
            ];
        ];
      
      If[conj[name]===name,
        WriteString[sphenoInOut,
          "Write(io_L,106) \"Block "<> ToString[BlockName] <>" Q=\","<>Q<>",\"# ("<>
            scalename<>")\" \n"];
        WriteBlockEntries[nameString, dimensions,"",""];,
        WriteString[sphenoInOut,
          "Write(io_L,106) \"Block "<> ToString[BlockName] <>" Q=\","<>Q<>",\"# ("<>
            scalename<>")\" \n"];
        WriteBlockEntries[nameString, dimensions,"Real(",",dp)"];
        
        WriteString[sphenoInOut,
          "If (Abs(MaxVal(AImag("<>SPhenoForm[name]<>
            "))).gt.0._dp) Then \n"];
        WriteString[sphenoInOut,
          "Write(io_L,106) \"Block IM"<> ToString[BlockName] <>" Q=\","<>Q<>",\"# ("<>
            scalename<>")\" \n"];
        WriteBlockEntries[nameString, dimensions,"Aimag(",")"];
        WriteString[sphenoInOut,"End If \n\n"];
        ];
      
      ];



WriteBlockEntries[name_, dimensions_,begin_,end_]:=Block[{i,i1,i2,i3},
      Switch[Length[dimensions],
          1,
          	For[i1=1,i1\[LessEqual]dimensions[[1]],
              	
              WriteString[sphenoInOut,
                "Write(io_L,104) "<>ToString[i1]<>","<>begin<>name<>
                  ToString[i1]<>")"<>end<>", \"# "<>begin<>name<>ToString[i1]<>
                  ") "<>end<>"\" \n"];
              	i1++;];,
          2,
          	For[i1=1,i1\[LessEqual]dimensions[[1]],
              	For[i2=1,i2<=dimensions[[2]],
                	
                WriteString[sphenoInOut,
                  "Write(io_L,107)"<>ToString[i1]<>","<>ToString[i2]<>","<> 
                    begin<>name<>ToString[i1]<>","<>ToString[i2]<>")"<>end<>", \"# "<>
                    begin<>name<>ToString[i1]<>","<>ToString[i2]<>")"<>end<>
                    "\" \n"];
                	i2++;];
              	i1++;];,
          3,
          	For[i1=1,i1<=dimensions[[1]],
              	For[i2=1,i2<=dimensions[[2]],
                	For[i3=1,i3<=dimensions[[3]],
                  	
                  WriteString[sphenoInOut,
                    "Write(io_L,127) "<>ToString[i1]<>","<>ToString[i2]<>","<>
                      ToString[i3]<>","<>begin<>name<>ToString[i1]<>","<>
                      ToString[i2]<>","<>ToString[i3]<>")"<>end<>", \"# "<>
                      begin<>name<>ToString[i1]<>","<>ToString[i2]<>","<>
                      ToString[i3]<>")"<>end<>"\" \n"];
                  	i3++;];
                	i2++;];
              	i1++;];
          ];
      
      ];


WriteReadInRoutines[list_]:=Block[{i},
      
      For[i=1,i\[LessEqual]Length[list],
        If[FreeQ[CombindedBlock,list[[i,1]]],
          Switch[Length[list[[i,2]]],
            0,
            	If[list[[i,4]]\[Equal]True,
                	
                func="ReadScalarR(99,"<>SPhenoForm[list[[i,1]]]<>"IN, \""<>
                      SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";,
                	
                func="ReadScalarC(99,"<>SPhenoForm[list[[i,1]]]<>"IN,0, \""<>
                    SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
                	
                func2="ReadScalarC(99,"<>SPhenoForm[list[[i,1]]]<>"IN,1, \""<>
                    SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
                	];,
            1,
            	If[list[[i,4]]\[Equal]True,
                	
                func="ReadVectorR(99,"<>ToString[list[[i,2,1]]]<>","<>
                      SPhenoForm[list[[i,1]]]<>"IN, \""<>
                      SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";,
                	
                func="ReadVectorC(99,"<>ToString[list[[i,2,1]]]<>","<>
                    SPhenoForm[list[[i,1]]]<>"IN,0, \""<>
                    SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
                	
                func2="ReadVectorC(99,"<>ToString[list[[i,2,1]]]<>","<>
                    SPhenoForm[list[[i,1]]]<>"IN,1, \""<>
                    SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
                	];,
            
            2,
            	If[list[[i,4]]\[Equal]True,
                	
                func="ReadMatrixR(99,"<>ToString[list[[i,2,1]]]<>","<>
                      ToString[list[[i,2,2]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN, \""<>
                      SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";,
                	
                func="ReadMatrixC(99,"<>ToString[list[[i,2,1]]]<>","<>
                    ToString[list[[i,2,2]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN,0, \""<>
                    SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
                	
                func2="ReadMatrixC(99,"<>ToString[list[[i,2,1]]]<>","<>
                    ToString[list[[i,2,1]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN,1, \""<>
                    SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
                	];,
            
            3,
            	If[list[[i,4]]\[Equal]True,
                	
                func="ReadTensorR(99,"<>ToString[list[[i,2,1]]]<>","<>
                      ToString[list[[i,2,2]]]<>","<>ToString[list[[i,2,3]]]<>","<>
                      SPhenoForm[list[[i,1]]]<>"IN, \""<>
                      SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";,
                	
                func="ReadTensorC(99,"<>ToString[list[[i,2,1]]]<>","<>
                    ToString[list[[i,2,2]]]<>","<>ToString[list[[i,2,3]]]<>","<>
                    SPhenoForm[list[[i,1]]]<>"IN,0, \""<>
                    SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
                	
                func2="ReadTensorC(99,"<>ToString[list[[i,2,1]]]<>","<>
                    ToString[list[[i,2,2]]]<>","<>ToString[list[[i,2,3]]]<>","<>
                    SPhenoForm[list[[i,1]]]<>"IN,1, \""<>
                    SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
                	];
            ];
          
          
          
          WriteString[sphenoInOut,
            "   Else If (read_line(7:"<>ToString[
                8+StringLength[LHBlockName[list[[i,3]]]]]<>").Eq.\""<>
              ToUpperCase[LHBlockName[list[[i,3]]]]<>"IN\") Then \n"];
          
          WriteString[sphenoInOut,
            "InputValuefor"<>SPhenoForm[list[[i,1]]] <> "= .True. \n"];
          WriteString[sphenoInOut,"    Call "<>func<>"\n \n"];
          
          If[list[[i,4]]\[Equal]False,
            
            WriteString[sphenoInOut,
              "   Else If (read_line(7:"<>ToString[
                  8+StringLength[SPhenoForm[list[[i,3]]]]]<>").Eq.\"IM"<>
                ToUpperCase[SPhenoForm[list[[i,3]]]]<>"IN\") Then \n"];
            WriteString[sphenoInOut,"     If (i_cpv.Lt.2) Then  \n"];
            WriteString[sphenoInOut,
              "       Call Warn_CPV(i_cpv,\"IM"<>SPhenoForm[list[[i,3]]]<>
                "\") \n"];
            WriteString[sphenoInOut,"       Cycle \n"];
            WriteString[sphenoInOut,"     End If \n"];
            WriteString[sphenoInOut,"    Call "<>func2<>"\n \n"];
            ];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[CombindedBlock],
        WriteString[sphenoInOut,
          "   Else If (read_line(7:"<>ToString[
              8+StringLength[SPhenoForm[CombindedBlock[[i,1]]]]]<>").Eq.\""<>
            ToUpperCase[SPhenoForm[CombindedBlock[[i,1]]]]<>"IN\") Then \n"];
        WriteString[sphenoInOut,
          "    Call Read_"<>SPhenoForm[CombindedBlock[[i,1]]]<>
            "IN(99,0,i_model,set_mod_par,kont) \n \n"];
        i++;];
      
      ];

GenerateMixedLHBlock:=Block[{i,temp,ParticlePhasesTEMP},
      CombindedBlock={};
      MixedBlockNr=1;
      
      ListAllInputParametersTEMP = ListAllInputParameters;
      
      For[i=1,i\[LessEqual]Length[listVEVs],
        ListAllInputParametersTEMP = 
          Join[ListAllInputParametersTEMP,{{listVEVs[[i]],(getDimSPheno[
                      listVEVs[[i]]] /. {1}\[Rule]{}),listVEVs[[i]],True}}];
        i++;];
      
      ParticlePhasesTEMP = 
        Intersection[
          Table[ParticlePhases[[i,2]],{i,1,Length[ParticlePhases]}]];
      
      For[i=1,i\[LessEqual]Length[ParticlePhasesTEMP],
        ListAllInputParametersTEMP = 
          Join[ListAllInputParametersTEMP,{{ParticlePhasesTEMP[[i]],(\
getDimSPheno[ParticlePhasesTEMP[[i]]] /. {1}\[Rule]{}),
                ParticlePhasesTEMP[[i]],False}}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[ListAllInputParametersTEMP],
        If[Length[ListAllInputParametersTEMP[[i,2]]]\[Equal]0,
          
          pos = Position[Transpose[ParameterDefinitions][[1]],
              ListAllInputParametersTEMP[[i,1]]];
          If[pos=!={},
            
            BlockName=
              ToExpression[LHBlockName[ListAllInputParametersTEMP[[i,1]]]];
            If[BlockName===LesHouches || BlockName ===None,
              pos2=Position[CombindedBlock,MixedBlock];
              If[pos2=!={},
                
                CombindedBlock[[pos2[[1,1]]]] = 
                    Join[CombindedBlock[[pos2[[1,
                              1]]]],{{ListAllInputParametersTEMP[[i,1]],
                          MixedBlockNr}}];,
                
                CombindedBlock = 
                    Join[CombindedBlock,{{MixedBlock,{\
ListAllInputParametersTEMP[[i,1]],MixedBlockNr}}}];
                ];
              MixedBlockNr++;,
              BlockNameNr = LHPos[ListAllInputParametersTEMP[[i,1]]];
              pos2=Position[CombindedBlock,BlockName];
              If[pos2=!={},
                
                CombindedBlock[[pos2[[1,1]]]] = 
                    Join[CombindedBlock[[pos2[[1,
                              1]]]],{{ListAllInputParametersTEMP[[i,1]],
                          BlockNameNr}}];,
                
                CombindedBlock = 
                    Join[
                      CombindedBlock,{{BlockName,{ListAllInputParametersTEMP[[\
i,1]],BlockNameNr}}}];
                ];
              ];,
            pos2=Position[CombindedBlock,MixedBlock];
            If[pos2=!={},
              
              CombindedBlock[[pos2[[1,1]]]] = 
                  Join[CombindedBlock[[pos2[[1,
                            1]]]],{{ListAllInputParametersTEMP[[i,1]],
                        MixedBlockNr}}];,
              
              CombindedBlock = 
                  Join[CombindedBlock,{{MixedBlock,{\
ListAllInputParametersTEMP[[i,1]],MixedBlockNr}}}];
              ];
            MixedBlockNr++;
            ];
          ];
        i++;];
      
      CBsave = temp ;
      subNumAdd = {};
      
      (*
        For[i=1,i\[LessEqual]Length[ParameterDefinitions],
            
            If[FreeQ[NewMassParameters,
                    ParameterDefinitions[[i,1]]]\[Equal]False ||
                FreeQ[listVEVs,ParameterDefinitions[[i,1]]],
              
              If[FreeQ[ListAllInputParameters,ParameterDefinitions[[i,1]]] && 
                    Length[getDimSPheno[ParameterDefinitions[[i,1]]]]<2,
                  BlockName = LesHouches /. ParameterDefinitions[[i,2]];
                  If[Head[BlockName]===List,
                    BlockNameNr = Cases[BlockName,x_?NumberQ][[1]];
                    BlockName = DeleteCases[BlockName,x_?NumberQ][[1]];,
                    BlockNameNr=1;
                    ];
                  If[BlockName=!=LesHouches && BlockName=!=None, 
                    pos2=Position[CombindedBlock,BlockName];
                    If[pos2=!={},
                      
                      CombindedBlock[[pos2[[1,1]]]] = 
                          Join[CombindedBlock[[pos2[[1,
                                    1]]]],{{ParameterDefinitions[[i,1]],
                                BlockNameNr}}];,
                      
                      CombindedBlock = 
                          Join[CombindedBlock,{{BlockName,{\
ParameterDefinitions[[i,1]],BlockNameNr}}}];
                      ];
                    
                    If[FreeQ[ListAllInputParameters,
                          ParameterDefinitions[[i,1]]] && 
                        FreeQ[listVEVs,ParameterDefinitions[[i,1]]] ,
                      
                      subNumAdd = 
                          Join[subNumAdd,{ParameterDefinitions[[i,
                                    
                                    1]]\[Rule] (DependenceNum \
/.ParameterDefinitions[[i,2]] /. {DependenceNum->
                                        ParameterDefinitions[[i,1]] , 
                                      None->ParameterDefinitions[[i,
                                        1]] }) }];
                      ];
                    ];
                  ];
              ];
            i++;];
        *)
      
      
      For[i=1,i\[LessEqual]Length[subDependencesSPheno],
        If[
          FreeQ[parameters,subDependencesSPheno[[i,1]]]\[Equal]False && 
            FreeQ[ListAllInputParameters,subDependencesSPheno[[i,1]]] && 
            FreeQ[listVEVs,subDependencesSPheno[[i,1]]],
          BlockName = ToExpression[LHBlockName[subDependencesSPheno[[i,1]]]];
          BlockNameNr = LHPos[subDependencesSPheno[[i,1]]];
          
          If[BlockName=!=LesHouches && BlockName=!=None, 
            pos2=Position[CombindedBlock,BlockName];
            If[pos2=!={},
              
              CombindedBlock[[pos2[[1,1]]]] = 
                  Join[CombindedBlock[[pos2[[1,
                            1]]]],{{subDependencesSPheno[[i,1]],
                        BlockNameNr}}];,
              
              CombindedBlock = 
                  Join[CombindedBlock,{{BlockName,{subDependencesSPheno[[i,
                              1]],BlockNameNr}}}];
              ];
            subNumAdd = Join[subNumAdd,{subDependencesSPheno[[i]]}];
            ];
          ];
        i++;];
      
       temp={};
      
      For[i=1,i\[LessEqual]Length[CombindedBlock],
        If[Length[CombindedBlock[[i]]]\[Equal]2,
          temp = Join[temp,{CombindedBlock[[i]]}];,
          
          temp = Join[
                temp, { {CombindedBlock[[i,1]],(Sort[
                        Drop[CombindedBlock[[i]],1],(#1[[2]]<#2[[2]])&])}}];
          ];
        i++;];
      ];

WriteReadInFunctions:=Block[{i,j,temp,temp2},
      For[i=1,i\[LessEqual]Length[CombindedBlock],
          temp={};
          temp2=Drop[CombindedBlock[[i]],1];
          For[j=1,j\[LessEqual]Length[temp2],
            
            If[FreeQ[listVEVs,temp2[[j,1]]]\[Equal]False || 
                FreeQ[ListAllInputParameters,temp2[[j,1]]]\[Equal]False,
              
              temp=Join[
                    temp,{{temp2[[j,2]],
                        ToExpression[SPhenoForm[temp2[[j,1]]]<>"IN"]}}];
              ];
            j++;];
          If[temp==={},temp=CONSTANT;];
          GenerateReadRoutine[SPhenoForm[CombindedBlock[[i,1]]]<>"IN",temp];
          i++;];
      ];

WriteWHIZARDout:=Block[{i,j,k},
      
      ListMassMixingMat=
        Table[{ListTree[[i,1]],ListTree[[i,2]]},{i,1,
              Length[ListTree]}] //. {x___,{a_,{b_,c_}},
              y___}\[Rule]{x,{a,b},{a,c},y};
      
      WriteString[sphenoInOut,"Subroutine WriteWHIZARD \n"];
      WriteString[sphenoInOut,
        "   Open(123,file=\"WHIZARD.par\",status=\"unknown\")\n"];
      
      For[i=1,i\[LessEqual]Length[ListAllInputParametersTEMP],
        If[MemberQ[SA`ParNeed,ListAllInputParametersTEMP[[i,1]]],
          
          If[FreeQ[ThresholdCouplings,ListAllInputParametersTEMP[[i,1]]] && 
                FreeQ[listParametersOtherRegimes,
                  ListAllInputParametersTEMP[[i,1]]],
              If[Length[ListAllInputParametersTEMP[[i,2]]]>0 ,
                  If[FreeQ[realVar,ListAllInputParametersTEMP[[i,1]]],
                      
                      WriteBlockEntriesWHIZARD[
                        ListAllInputParametersTEMP[[i,1]],
                        ListAllInputParametersTEMP[[i,2]],"_r","Real(",
                        ",dp)"];
                      
                      WriteBlockEntriesWHIZARD[
                        ListAllInputParametersTEMP[[i,1]],
                        ListAllInputParametersTEMP[[i,2]],"_i","AImag(",
                        ")"];,
                      
                      WriteBlockEntriesWHIZARD[
                          ListAllInputParametersTEMP[[i,1]],
                          ListAllInputParametersTEMP[[i,2]],"","",""];
                      ];,
                  If[FreeQ[realVar,ListAllInputParametersTEMP[[i,1]]],
                      
                      WriteString[sphenoInOut,
                        "Write(123,*) \""<>SPhenoForm[
                            ListAllInputParametersTEMP[[i,1]]] <>"_r = \",Real("<>
                          SPhenoForm[ListAllInputParametersTEMP[[i,1]]]<>
                          ",dp) \n"];
                      
                      WriteString[sphenoInOut,
                        "Write(123,*) \""<>SPhenoForm[
                            ListAllInputParametersTEMP[[i,1]]] <>"_i = \",AImag("<>
                          SPhenoForm[ListAllInputParametersTEMP[[i,1]]]<>
                          ") \n"];,
                      
                      WriteString[sphenoInOut,
                          "Write(123,*) \""<>SPhenoForm[
                              ListAllInputParametersTEMP[[i,1]]] <>"= \","<>
                            SPhenoForm[ListAllInputParametersTEMP[[i,1]]]<>
                            "\n"];
                      ];
                  ];
              ];
          ];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[subNumAdd],
        If[MemberQ[SA`ParNeed,subNumAdd[[i,1]]],
          If[FreeQ[realVar,subNumAdd[[i,1]]],
              
              WriteString[sphenoInOut,
                "Write(123,*) \""<>SPhenoForm[subNumAdd[[i,1]]] <>"_r = \",Real("<>
                  SPhenoForm[subNumAdd[[i,2]]]<>",dp) \n"];
              
              WriteString[sphenoInOut,
                "Write(123,*) \""<>SPhenoForm[subNumAdd[[i,1]]] <>"_i = \",AImag("<>
                  SPhenoForm[subNumAdd[[i,2]]]<>") \n"];,
              
              WriteString[sphenoInOut,
                  "Write(123,*) \""<>SPhenoForm[subNumAdd[[i,1]]] <>"= \","<>
                    SPhenoForm[subNumAdd[[i,2]]]<>"\n"];
              ];
          ];
        i++;];
      
      For[i=1,i\[LessEqual]Length[PDGList],
        For[j=1,j\[LessEqual]Length[PDGList[[i,2]]],
          If[PDGList[[i,2,j]]=!=0 &&FreeQ[massless,PDGList[[i,1]]],
            
            WriteString[sphenoInOut,
                "Write(123,*) \""<>ToString[getMassW[PDGList[[i,1]],j,1]] <>"= \", Abs("<>
                  SPhenoMass[PDGList[[i,1]],j] <>") \n"];
            ];
          j++;];
        i++;];
      
      For[i=1,i\[LessEqual]Length[ListMassMixingMat],
        If[FreeQ[SA`ParNeed,ListMassMixingMat[[i,2]]]\[Equal]False,
          If[FreeQ[realVar,ListMassMixingMat[[i,2]]],
              
              For[j=1,j\[LessEqual]getDimSPheno[
                        ToExpression[ListMassMixingMat[[i,1]]]][[1]],
                  WriteString[sphenoInOut,
                    "If ("<>ListMassMixingMat[[i,1]]<>"("<>ToString[j]<>
                      ").Gt.0_dp) Then \n"];
                  
                  For[k=1,
                    k\[LessEqual]getDimSPheno[
                          ToExpression[ListMassMixingMat[[i,1]]]][[1]],
                    
                    WriteString[sphenoInOut,
                      "Write(123,*) \""<>SPhenoForm[
                          ListMassMixingMat[[i,2]]] <>ToString[j]<>
                        ToString[k]<>"_r = \", Real("<>
                        SPhenoForm[ListMassMixingMat[[i,2]][j,k]]<>",dp)\n"];
                    
                    WriteString[sphenoInOut,
                      "Write(123,*) \""<>SPhenoForm[
                          ListMassMixingMat[[i,2]]] <>ToString[j]<>
                        ToString[k]<>"_i = \", AImag("<>
                        SPhenoForm[ListMassMixingMat[[i,2]][j,k]]<>")\n"];
                    k++;];
                  WriteString[sphenoInOut,"Else \n"];
                  
                  For[k=1,
                    k\[LessEqual]getDimSPheno[
                          ToExpression[ListMassMixingMat[[i,1]]]][[1]],
                    
                    WriteString[sphenoInOut,
                      "Write(123,*) \""<>SPhenoForm[
                          ListMassMixingMat[[i,2]]] <>ToString[j]<>
                        ToString[k]<>"_i = \", Real("<>
                        SPhenoForm[ListMassMixingMat[[i,2]][j,k]]<>",dp)\n"];
                    
                    WriteString[sphenoInOut,
                      "Write(123,*) \""<>SPhenoForm[
                          ListMassMixingMat[[i,2]]] <>ToString[j]<>
                        ToString[k]<>"_r = \", -AImag("<>
                        SPhenoForm[ListMassMixingMat[[i,2]][j,k]]<>")\n"];
                    k++;];
                  WriteString[sphenoInOut,"End if \n"];
                  j++;];,
              
              WriteBlockEntriesWHIZARD[ListMixingMat[[i,1]],
                  getDimParameters[ListMixingMat[[i,1]]],"","",""];
              ];
          ];
        i++;];
      
      WriteString[sphenoInOut,"    Close(123) \n"];
      WriteString[sphenoInOut,"End Subroutine WriteWHIZARD \n"];
      ];


WriteBlockEntriesWHIZARD[name_, dimensions_,nameSuff_,pre_,post_]:=
    Block[{i,i1,i2,i3},
      
      
      Switch[Length[dimensions],
          1,
          	For[i1=1,i1\[LessEqual]dimensions[[1]],
              	
              WriteString[sphenoInOut,
                "Write(123,*) \""<>SPhenoForm[name] <>ToString[i1]<>nameSuff<>
                  "= \","<>pre<>SPhenoForm[name[i1]]<>post<>"\n"];
              	i1++;];,
          2,
          	For[i1=1,i1\[LessEqual]dimensions[[1]],
              	For[i2=1,i2<=dimensions[[2]],
                	
                WriteString[sphenoInOut,
                  "Write(123,*) \""<>SPhenoForm[name] <>ToString[i1]<>
                    ToString[i2]<>nameSuff<>"= \","<>pre<>
                    SPhenoForm[name[i1,i2]]<>post<>"\n"];
                	i2++;];
              	i1++;];,
          3,
          	For[i1=1,i1<=dimensions[[1]],
              	For[i2=1,i2<=dimensions[[2]],
                	For[i3=1,i3<=dimensions[[3]],
                  	
                  WriteString[sphenoInOut,
                    "Write(123,*) \""<>SPhenoForm[name] <>ToString[i1]<>
                      ToString[i2]<>ToString[i3]<>nameSuff<>"= \","<>pre<>
                      SPhenoForm[name[i1,i2,i3]]<>post<>"\n"];
                  	i3++;];
                	i2++;];
              	i1++;];
          ];
      
      
      ];