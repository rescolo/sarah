(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

MakeModelData:=Block[{i,i2},
      If[Head[RegimeNr]===Integer,
        AddParametersFromOtherRegimes;
        ];
      
      Print["-----------------------------------"];
      Print["Write ModelData"];
      Print["-----------------------------------"];
      
      
      ModelData=
        OpenWrite[
          ToFileName[$sarahCurrentSPhenoDir,
            "Model_Data_"<>ModelName<>".f90"]];
      
      WriteString[ModelData,"Module Model_Data_"<>ModelName<>" \n \n"];
      WriteString[ModelData, "Use Control \n"];
      
      MakeVariableList[Transpose[LowScaleList][[1]],"",ModelData];
      If[Length[HighScaleList]>1,
        MakeVariableList[Transpose[HighScaleList][[1]],"",ModelData]; 
        ];
      MakeVariableList[LowScaleNames,"",ModelData];
      MakeVariableList[HighScaleNames,"",ModelData];
      MakeVariableList[lowScaleIn,"",ModelData];
      MakeVariableList[lowScaleMZ,"",ModelData];
      MakeVariableList[lowScaleGUT,"",ModelData];
      MakeVariableList[highScaleIn,"",ModelData];
      MakeVariableList[highScaleMZ,"",ModelData];
      MakeVariableList[highScaleGUT,"",ModelData];
      MakeVariableList[NewMassParameters,"",ModelData];
      MakeVariableList[listVEVs,"",ModelData];
      MakeVariableList[listVEVsIN,"",ModelData];
      MakeVariableList[SPhenoWidthBR,"",ModelData];
      MakeVariableList[NeededRatiosLoopCouplingsSave,"",ModelData];
      MakeVariableList[NeededRatiosLoopCouplingsSavePseudo,"",ModelData];
      
      If[U1MixingParameters=!={},
        MakeVariableList[U1MixingParameters,"",ModelData];
        ];
      
      
      
      If[Head[RegimeNr]===Integer,
        MakeVariableList[listParametersOtherRegimes,"",ModelData];
        MakeVariableList[listParametersOtherRegimesSave,"",ModelData];
        MakeVariableList[Flatten[listsaveMasses],"",ModelData];
        MakeVariableList[listParametersOtherRegimesGUT,"",ModelData];
        ];
      
      For[i=1,i\[LessEqual]Length[AdditionalVariablesSPheno],
        WriteString[ModelData,
          "Real(dp) :: " <> ToString[AdditionalVariablesSPheno[[i]]]<>"\n"];
        i++;
        ];
      
      For[i=1,i\[LessEqual]Length[MINPAR],
        If[FreeQ[realVar,MINPAR[[i]]],
          
          WriteString[ModelData,
              "Complex(dp) :: " <> ToString[MINPAR[[i]]]<>"\n"];,
          
          WriteString[ModelData,
              "Real(dp) :: " <> ToString[MINPAR[[i]]]<>"\n"];
          ];
        i++;
        ];
      
      For[i=1,i\[LessEqual]Length[EXTPAR],
        If[FreeQ[parameters,EXTPAR[[i,2]]],
          If[FreeQ[realVar,EXTPAR[[i,2]]],
              
              WriteString[ModelData,
                  "Complex(dp) :: " <> ToString[EXTPAR[[i,2]]]<>"\n"];,
              
              WriteString[ModelData,
                  "Real(dp) :: " <> ToString[EXTPAR[[i,2]]]<>"\n"];
              ];
           ];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[listVEVs],
        WriteString[ModelData,
          "Real(dp) :: " <> ToString[listVEVs[[i]]]<>"MZ \n"];
        i++;
        ];
      
      
      For[i=1,i\[LessEqual]Length[ThresholdParticles],
        If[getGenSF[ThresholdParticles[[i]]]>1,
          
          WriteString[ModelData,
              "Real(dp) :: MassOf" <> SPhenoForm[ThresholdParticles[[i]]]<>"("<>
                ToString[getGenSF[ThresholdParticles[[i]]]]<>") \n"];,
          
          WriteString[ModelData,
              "Real(dp) :: MassOf" <> SPhenoForm[ThresholdParticles[[i]]]<>
                " \n"];
          ];
        i++];
      
      
      For[i=1,i\[LessEqual]Length[ThresholdCouplings],
        If[FreeQ[realVar,ThresholdCouplings[[i]]]\[Equal]True,
          
          WriteString[ModelData,
              "Complex(dp) :: "<>SPhenoForm[ThresholdCouplings[[i]]]<>"_save"<>
                StringReplace[
                  SPhenoForm[
                    Join[{Length[Thresholds]},
                      getDimSPheno[ThresholdCouplings[[i]]]]],{"List"->""}] <>
                "\n"];,
          
          WriteString[ModelData,
              "Real(dp) :: "<>SPhenoForm[ThresholdCouplings[[i]]]<>"_save"<>
                StringReplace[
                  SPhenoForm[
                    Join[{Length[Thresholds]},
                      getDimSPheno[ThresholdCouplings[[i]]]]],{"List"->""}] <>
                "\n"];
          ];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[UnfixedCharges],
        WriteString[ModelData,
          "Real(dp) :: "<>SPhenoForm[UnfixedCharges[[i]]]<> "\n"];
        i++;];
      
      
      WriteString[ModelData,"! For HiggsBounds \n"];
      WriteString[ModelData,
        "Real(dp) :: BR_Hcs, BR_Hcb, BR_Htaunu, BR_tWb, BR_tHb \n"];
      WriteString[ModelData, 
        "Real(dp) :: BRHHH("<>ToString[getGenSPheno[HiggsBoson]] <>","<>
          ToString[getGenSPheno[HiggsBoson]] <>"), BRHAA("<>
          ToString[getGenSPheno[HiggsBoson]] <>","<>
          ToString[getGenSPheno[PseudoScalar]] <>") \n "];
      WriteString[ModelData, 
        "Real(dp) :: BRAHH("<>ToString[getGenSPheno[PseudoScalar]] <>","<>
          ToString[getGenSPheno[HiggsBoson]] <>"), BRAAA("<>
          ToString[getGenSPheno[PseudoScalar]] <>","<>
          ToString[getGenSPheno[PseudoScalar]] <>") \n "];
      WriteString[ModelData, 
        "Real(dp) :: BRinvH("<>ToString[getGenSPheno[HiggsBoson]]<>"), BRinvA("<>
          ToString[getGenSPheno[PseudoScalar]]<>") \n"];
      
      For[i=1,i\[LessEqual]Length[SMParticles],
        Switch[getType[SMParticles[[i]]],
          F,
          	
          WriteString[ModelData,
            "Real(dp) :: "<>SPhenoRatioPseudoHBP[SMParticles[[i]],
                getGenSPheno[PseudoScalar],getGenSPheno[SMParticles[[i]]]]<>
              ","];
          	
          WriteString[ModelData,
            SPhenoRatioPseudoHBS[SMParticles[[i]],getGenSPheno[PseudoScalar],
                getGenSPheno[SMParticles[[i]]]]<>","];
          	
          WriteString[ModelData,
            SPhenoRatioHBS[SMParticles[[i]],getGenSPheno[PseudoScalar],
                getGenSPheno[SMParticles[[i]]]]<>","];
          	
          WriteString[ModelData,
            SPhenoRatioHBP[SMParticles[[i]],getGenSPheno[PseudoScalar],
                getGenSPheno[SMParticles[[i]]]]<>"\n"];,
          V,
          	
          WriteString[ModelData,
            "Real(dp) :: "<>SPhenoRatioPseudoHB[SMParticles[[i]],
                getGenSPheno[PseudoScalar],getGenSPheno[SMParticles[[i]]]]<>
              ","];
          	
          WriteString[ModelData,
            SPhenoRatioHB[SMParticles[[i]],getGenSPheno[HiggsBoson],
                getGenSPheno[SMParticles[[i]]]]<>"\n"];
          
          ];
        i++;];
      
      WriteString[ModelData, 
        "Complex(dp) :: CPL_A_HH_Z("<>ToString[getGenSPheno[HiggsBoson]] <>","<>
          ToString[getGenSPheno[PseudoScalar]] <>") \n \n \n"];
      
      
      
      
      WriteString[ModelData,"Real(dp) :: fgmsb,m32,tanbetaMZ \n"];
      
      WriteString[ModelData,
        "Complex(dp),Dimension(3,3)::Y_l,Y_d,Y_u,Y_l_mZ,Y_d_mZ,Y_u_mZ&\n"];
      WriteString[ModelData,"&,Y_l_0,Y_d_0,Y_u_0\n"];
      WriteString[ModelData,
        "Real(dp),Dimension(3)::gauge,gauge_mZ,gauge_0 \n"];
      WriteString[ModelData,"Real(dp)::tanb,vevSM(2),tanb_mZ \n"];
      
      WriteString[ModelData,"Contains \n \n"];
      
      WriteString[ModelData, "Subroutine Set_All_Parameters_0() \n"];
      WriteString[ModelData, "Implicit None \n"];
      
      
      WriteString[ModelData,"Y_l= 0._dp \n"];
      WriteString[ModelData,"Y_d= 0._dp \n"];
      WriteString[ModelData,"Y_u= 0._dp \n"];
      WriteString[ModelData,"Y_l_mZ= 0._dp \n"];
      WriteString[ModelData,"Y_d_mZ= 0._dp \n"];
      WriteString[ModelData,"Y_u_mZ= 0._dp \n"];
      WriteString[ModelData,"Y_l_0= 0._dp \n"];
      WriteString[ModelData,"Y_d_0= 0._dp \n"];
      WriteString[ModelData,"Y_u_0= 0._dp \n"];
      WriteString[ModelData,"gauge= 0._dp \n"];
      WriteString[ModelData,"gauge_mZ= 0._dp \n"];
      WriteString[ModelData,"gauge_0 = 0._dp \n"];
      WriteString[ModelData,"tanb= 0._dp \n"];
      WriteString[ModelData,"vevSM= 0._dp \n"];
      WriteString[ModelData,"tanb_mZ = 0._dp \n"];
      
      For[i=1,i\[LessEqual]Length[lowScaleIn],
        WriteString[ModelData,ToString[lowScaleIn[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[lowScaleMZ],
        WriteString[ModelData,SPhenoForm[lowScaleNames[[i]]]<>" = 0._dp \n"];
        WriteString[ModelData,SPhenoForm[lowScaleMZ[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[highScaleIn],
        WriteString[ModelData,ToString[highScaleIn[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listVEVsIN],
        WriteString[ModelData,ToString[listVEVsIN[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[highScaleMZ],
        WriteString[ModelData,
          SPhenoForm[highScaleNames[[i]]]<>" = 0._dp \n"];
        WriteString[ModelData,SPhenoForm[highScaleMZ[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[NewMassParameters],
        WriteString[ModelData,
          SPhenoForm[NewMassParameters[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listVEVs],
        WriteString[ModelData,SPhenoForm[listVEVs[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[SPhenoWidthBR],
        WriteString[ModelData,SPhenoForm[SPhenoWidthBR[[i]]]<>" = 0._dp \n"];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[listsaveMasses],
        For[i2=1,i2\[LessEqual]Length[listsaveMasses[[i]]],
          
          WriteString[ModelData,
            SPhenoForm[listsaveMasses[[i,i2]]]<>" =  -1._dp  \n"];
          i2++;];
        i++;];
      
      For[i=1,i\[LessEqual]Length[NeededRatiosLoopCouplingsSave],
        WriteString[ModelData,
          SPhenoForm[NeededRatiosLoopCouplingsSave[[i]]]<>" =  0._dp  \n"];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[NeededRatiosLoopCouplingsSavePseudo],
        WriteString[ModelData,
          SPhenoForm[NeededRatiosLoopCouplingsSavePseudo[[i]]]<>
            " =  0._dp  \n"];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[listParametersOtherRegimes],
        WriteString[ModelData,
          SPhenoForm[listParametersOtherRegimes[[i]]]<>" = 0._dp \n"];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[listParametersOtherRegimesSave],
        WriteString[ModelData,
          SPhenoForm[listParametersOtherRegimesSave[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[listParametersOtherRegimesGUT],
        WriteString[ModelData,
          SPhenoForm[listParametersOtherRegimesGUT[[i]]]<>" = 0._dp \n"];
        i++;];
      
      For[i=1,i\[LessEqual]Length[ThresholdParticles],
        WriteString[ModelData,
          "MassOf" <> SPhenoForm[ThresholdParticles[[i]]]<>"= 1E+18_dp \n"];
        i++]; 
      
      For[i=1,i\[LessEqual]Length[ThresholdCouplings],
        WriteString[ModelData,
          SPhenoForm[ThresholdCouplings[[i]]]<>"_save = 0._dp \n"];
        i++;];
      
      
      
      WriteString[ModelData,"End Subroutine Set_All_Parameters_0 \n \n"];
      
      (* AppendSourceCode["SwitchToSCKM.f90",ModelData]; *)
      
      WriteString[ModelData,"End Module Model_Data_"<>ModelName<>""];
      
      Close[ModelData];
      
      ];