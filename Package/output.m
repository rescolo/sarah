(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

CreateTeXNameList[Eigenstates_]:=Block[{i,j,k},
      
      particleList=WeylFermionAndIndermediate;
      
      For[i=1,i\[LessEqual]Length[NameOfStates],
        If[Head[ParticleDefinitions[NameOfStates[[i]]]]===List,
          
          particleList = 
              Join[particleList,ParticleDefinitions[NameOfStates[[i]]]];
          ];
        i++;];
      
      TeXParticles = {};
      TeXParameters = {};
      
      For[i=1,i\[LessEqual]Length[particleList],
        If[((LaTeX /. particleList[[i,2]])=!=
                LaTeX) && ( (LaTeX /. particleList[[i,2]])=!=None),
          
          If[FreeQ[Transpose[Fields][[3]],particleList[[i,1]]] && 
                FreeQ[Table[Gauge[[j,1]],{j,1,Length[Gauge]}],
                  particleList[[i,1]]],
              If[Length[(LaTeX /. particleList[[i,2]])]=!=2,
                  
                  TeXParticles= 
                    Join[TeXParticles,{{particleList[[i,1]], 
                          LaTeX /. particleList[[i,2]]}}];
                  
                  TeXLength[particleList[[i,1]]]=
                    3+StringCount[LaTeX /. particleList[[i,2]],"_"]+
                      StringCount[LaTeX /. particleList[[i,2]],"^"];
                  
                  TeXParticles= 
                    Join[TeXParticles,{{ToExpression[
                            "U"<>ToString[particleList[[i,1]]]],
                          HattedField[LaTeX /. particleList[[i,2]]]}}];
                  
                  TeXLength[ToExpression["U"<>ToString[particleList[[i,1]]]]]=
                    1+StringCount[HattedField[LaTeX /. particleList[[i,2]]],
                        "_"]+StringCount[
                        HattedField[LaTeX /. particleList[[i,2]]],"^"];
                  
                  If[getType[particleList[[i,1]]]===F && 
                      FreeQ[Table[diracSub[[i,1]],{i,1,Length[diracSub]}],
                          particleList[[i,1]]]===False,
                    If[FreeQ[MajoranaPart,particleList[[i,1]]],
                        
                        TeXParticles= 
                          Join[TeXParticles,{{bar[particleList[[i,1]]],
                                BaredField[LaTeX /. particleList[[i,2]]]}}];
                        
                        TeXParticles= 
                          Join[TeXParticles,{{bar[
                                  ToExpression[
                                    "U"<>ToString[particleList[[i,1]]]]], 
                                HattedField[
                                  BaredField[
                                    LaTeX /. particleList[[i,2]]]]}}];
                        ];,
                    If[FreeQ[realVar,particleList[[i,1]]],
                        TeXParticles= 
                          Join[TeXParticles,{{conj[particleList[[i,1]]],
                                ConjField[LaTeX /. particleList[[i,2]]]}}];
                        
                        TeXParticles= 
                          Join[TeXParticles,{{conj[
                                  ToExpression[
                                    "U"<>ToString[particleList[[i,1]]]]],
                                HattedField[
                                  ConjField[
                                    LaTeX /. particleList[[i,2]]]]}}];
                        ];
                    ];,
                  
                  TeXParticles= 
                    Join[TeXParticles,{{particleList[[i,
                              1]], (LaTeX /. particleList[[i,2]])[[1]]}}];
                  
                  TeXLength[particleList[[i,1]]]=
                    3+StringCount[(LaTeX /. particleList[[i,2]])[[1]],"_"]+
                      StringCount[(LaTeX /. particleList[[i,2]])[[1]],"^"];
                  
                  TeXParticles= 
                    Join[TeXParticles,{{ToExpression[
                            "U"<>ToString[particleList[[i,1]]]],
                          HattedField[(LaTeX /. 
                                  particleList[[i,2]])[[1]]]}}];
                  
                  TeXLength[ToExpression["U"<>ToString[particleList[[i,1]]]]]=
                    1+StringCount[
                        HattedField[(LaTeX /. particleList[[i,2]])[[1]]],"_"]+
                      StringCount[
                        HattedField[(LaTeX /. particleList[[i,2]])[[1]]],
                        "^"];
                  
                  
                  If[getType[particleList[[i,1]]]===F && 
                      FreeQ[Table[diracSub[[i,1]],{i,1,Length[diracSub]}],
                          particleList[[i,1]]]===False,
                    If[FreeQ[MajoranaPart,particleList[[i,1]]],
                        
                        TeXParticles= 
                          Join[TeXParticles,{{bar[
                                  particleList[[i,1]]],(LaTeX /. 
                                      particleList[[i,2]])[[2]]}}];
                        
                        TeXParticles= 
                          Join[TeXParticles,{{bar[
                                  ToExpression[
                                    "U"<>ToString[particleList[[i,1]]]]], 
                                HattedField[(LaTeX /. 
                                        particleList[[i,2]])[[2]]]}}];
                        ];,
                    If[FreeQ[realVar,particleList[[i,1]]],
                        
                        TeXParticles= 
                          Join[TeXParticles,{{conj[
                                  particleList[[i,1]]],(LaTeX /. 
                                      particleList[[i,2]])[[2]]}}];
                        
                        TeXParticles= 
                          Join[TeXParticles,{{conj[
                                  ToExpression[
                                    "U"<>ToString[particleList[[i,1]]]]],
                                HattedField[(LaTeX /. 
                                        particleList[[i,2]])[[2]]]}}];
                        ];
                    ];
                  ];,
              
              TeXParticles= 
                  Join[TeXParticles,{{SF[particleList[[i,1]]], 
                        LaTeX /. particleList[[i,2]]}}];
              ];
          ];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[ParameterDefinitions],
        If[( (LaTeX /. ParameterDefinitions[[i,2]])=!=
                LaTeX) && (( LaTeX /. ParameterDefinitions[[i,2]])=!=None),
          
          TeXParameters= 
            Join[TeXParameters,{{ParameterDefinitions[[i,1]], 
                  LaTeX /. ParameterDefinitions[[i,2]]}}];
          If[FreeQ[ParameterDefinitions[[i,1]], A_[b_Integer]],
            
            TeXLength[ParameterDefinitions[[i,1]]]=
                3+StringCount[ LaTeX /. ParameterDefinitions[[i,2]],"_"]+
                  StringCount[ LaTeX /. ParameterDefinitions[[i,2]],"^"];,
            
            TeXLength[ParameterDefinitions[[i,1]]]=
                5+StringCount[ LaTeX /. ParameterDefinitions[[i,2]],"_"]+
                  StringCount[ LaTeX /. ParameterDefinitions[[i,2]],"^"];
            ];
          ];
        i++;];
      
      ];

BaredField[field_]:=
    StringReplace[
      StringReplace["\\bar{"<>field<>"}",
        RegularExpression[
            "\\\\bar{(.[^\\]]*)\\^(.[^\\]]*)}"]\[RuleDelayed]"\\bar{$1}^$2"],
      RegularExpression[
          "\\\\bar{(.[^\\]]*)\\_(.[^\\]]*)}"]\[RuleDelayed]"\\bar{$1}_$2"];
ConjField[field_]:=
    StringReplace[
      field<>"^*",{RegularExpression[
            "(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\^(.[^\\]]*)"]\[RuleDelayed]"$1^{$2,$3}",
        RegularExpression[
            "(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$4}_$3"}];
HattedField[field_]:=
    StringReplace[
      StringReplace["\\check{"<>field<>"}",
        RegularExpression[
            "\\\\check{(.[^\\]]*)\\^(.[^\\]]*)}"]\[RuleDelayed]"\\check{$1}^$2"]\
,RegularExpression[
          "\\\\check{(.[^\\]]*)\\_(.[^\\]]*)}"]\[RuleDelayed]"\\check{$1}_$2"]\
;

CreateTeXForm:=Block[{i},
       TeXLineBreak=3; 
      
      Unprotect[TeXForm];
      Unprotect[Power];
      
      TeXForm[x_Times]:=Block[{i,temp},
          temp="";
          For[i=1,i\[LessEqual]Length[x],
            If[Head[x[[i]]]===Plus,
              temp =temp<>"("<>ToString[TeXForm[x[[i]]]] <>")";,
              temp =temp<>ToString[TeXForm[x[[i]]]]<>" ";
              ];
            i++;];
          Return[temp];
          ]; 
      
      maxNumberSymbols =22;
      
      TeXForm[x_Plus]:=Block[{i,j,tempString,final, rest,term},
          If[getLaTeXlength[x]\[LessEqual]MAXTEXLENGTH,
            tempString=TeXForm/@x;,
            tempString="";term=0;
            For[i=1,i\[LessEqual]Length[x],
              If[getLaTeXlength[(term+x[[i]])]>MAXTEXLENGTH&& term =!=0,
                tempString=tempString <> "\\nonumber \\\\ \n &";
                tempString = tempString <>"+"<>ToString[TeXForm[x[[i]]]];
                term=x[[i]];,
                term +=x[[i]];
                tempString = tempString <>"+"<>ToString[TeXForm[x[[i]]]];
                ];
              i++;];
            ];
          Return[tempString];
          ];
      
      TeXTimes[x_]:=Block[{i,j,tempString,final, rest,term,currentLength},
          If[getLaTeXlength[x]\[LessEqual]MAXTEXLENGTH,
            tempString=TeXForm/@x;,
            tempString="";term=0;
            currentLength=0;
            For[i=1,i\[LessEqual]Length[x],
              If[Head[x[[i]]]===Plus,
                tempString = tempString <>"(";
                For[j=1,j\[LessEqual]Length[x[[i]]],
                  If[(currentLength+getLaTeXlength[x[[i,j]]])<MAXTEXLENGTH,
                    currentLength +=getLaTeXlength[x[[i,j]]];
                    
                    tempString = 
                      tempString <>"+"<>ToString[TeXForm[x[[i,j]]]];,
                    currentLength = getLaTeXlength[x[[i,j]]];
                    
                    tempString = 
                      tempString <>"\\\\ & +"<>ToString[TeXForm[x[[i,j]]]];
                    ];
                  j++;];
                tempString = tempString <>")";,
                If[(currentLength+getLaTeXlength[x[[i]]])<MAXTEXLENGTH,
                    currentLength +=getLaTeXlength[x[[i]]];
                    tempString = tempString <>ToString[TeXForm[x[[i]]]];,
                    currentLength = getLaTeXlength[x[[i]]];
                    
                    tempString = 
                      tempString <>"\\\\ & "<>ToString[TeXForm[x[[i,j]]]];
                    ];
                ];
              i++;];
            ];
          Return[tempString];
          ];
      
      
      
      TeXForm[x_List]:=TeXForm/@x;
      
      Format[bar[x_],TeXForm]:=
        Format["\\bar{"<>ToString[TeXForm[x]]<>"}",OutputForm];
      Format[Adj[x_],TeXForm]:=
        Format[AddExp[ToString[TeXForm[x]],"\\dagger",""],OutputForm];
      Format[Tp[x_],TeXForm]:=
        Format[AddExp[ToString[TeXForm[x]],"T",""],OutputForm];
      Format[x_Power,TeXForm]:=
        If[Head[x[[1]]]===Plus ||  Head[x[[1]]]===MatMul || 
              Head[x[[1]]] ===trace,
            
            Format["("<>ToString[TeXForm[x[[1]]]]<>")^{"<>ToString[x[[2]]]<>"}",
              OutputForm],
            
            Format[AddExp[ToString[TeXForm[x[[1]]]],ToString[x[[2]]],""],
              OutputForm]
            ] /;Head[x[[2]]]===Integer; 
      Format[x_Power,TeXForm]:=
        Format["{"<>ToString[TeXForm[x[[1]]]]<>"}^{"<>
              ToString[TeXForm[x[[2]]]]<>"}",
            OutputForm] /;(Head[x[[1]]]===Cos || Head[x[[1]]]===Sin || 
              Head[x[[1]]]===Csc || Head[x[[1]]]===Tan || Head[x[[1]]]===Sec || 
              Head[x[[1]]]===Cot  );
      Format[ThetaW,TeXForm]:=Format["\\Theta_W",OutputForm];
      
      Unprotect[Integer,Re];
      Format[-1,TeXForm]:=Format["-",OutputForm];
      Protect[Integer];
      Protect[Power];
      
      Format[Cp[a_,b_,c_][PL],TeXForm]:=
        Format["{\\Gamma^L_{"<>ToString[TeXForm[a]]<>","<>
            ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",
          OutputForm];
      Format[Cp[a_,b_,c_][PR],TeXForm]:=
        Format["{\\Gamma^R_{"<>ToString[TeXForm[a]]<>","<>
            ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",
          OutputForm];
      Format[Cp[a_,b_,c_],TeXForm]:=
        Format["{\\Gamma_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>
            ","<>ToString[TeXForm[c]]<>"}}",OutputForm];
      Format[Cp[a_,b_,c_,d_],TeXForm]:=
        Format["{\\Gamma_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>
            ","<>ToString[TeXForm[c]]<>","<>ToString[TeXForm[d]]<>"}}",
          OutputForm];
      
      Format[conj[Cp[a_,b_,c_][PL]],TeXForm]:=
        Format["{\\Gamma^{L*}_{"<>ToString[TeXForm[a]]<>","<>
            ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",
          OutputForm];
      Format[conj[Cp[a_,b_,c_][PR]],TeXForm]:=
        Format["{\\Gamma^{R*}_{"<>ToString[TeXForm[a]]<>","<>
            ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",
          OutputForm];
      Format[conj[Cp[a_,b_,c_]],TeXForm]:=
        Format["{\\Gamma^*_{"<>ToString[TeXForm[a]]<>","<>
            ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",
          OutputForm];
      Format[conj[Cp[a_,b_,c_,d_]],TeXForm]:=
        Format["{\\Gamma^*_{"<>ToString[TeXForm[a]]<>","<>
            ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>","<>
            ToString[TeXForm[d]]<>"}}",OutputForm];
      
      Format[B0[a_,b_,c_],TeXForm]:=
        Format["{B_0("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>
            ToString[TeXForm[c]]<>")}",OutputForm];
      Format[B1[a_,b_,c_],TeXForm]:=
        Format["{B_1("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>
            ToString[TeXForm[c]]<>")}",OutputForm];
      Format[B22[a_,b_,c_],TeXForm]:=
        Format["{B_{22}("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>
            ToString[TeXForm[c]]<>")}",OutputForm];
      Format[F0[a_,b_,c_],TeXForm]:=
        Format["{F_0("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>
            ToString[TeXForm[c]]<>")}",OutputForm];
      Format[G0[a_,b_,c_],TeXForm]:=
        Format["{G_0("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>
            ToString[TeXForm[c]]<>")}",OutputForm];
      Format[H0[a_,b_,c_],TeXForm]:=
        Format[
          "{H_0("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>
            ToString[TeXForm[c]]<>")}",OutputForm];
      Format[A0[a_],TeXForm]:=
        Format["{A_0("<>ToString[TeXForm[a]]<>")}",OutputForm];
      Format[Re[a_],TeXForm]:=
        Format["{\\Re("<>ToString[TeXForm[a]]<>")}",OutputForm];
      
      
      
      Format[gI1,TeXForm]:=Format["a",OutputForm];
      Format[gI2,TeXForm]:=Format["b",OutputForm];
      Format[gO1,TeXForm]:=Format["i",OutputForm];
      Format[gO2,TeXForm]:=Format["j",OutputForm];
      Format[RXi[a_],TeXForm]:=
        Format["\\xi_{"<>ToString[TeXForm[a]]<>"}",OutputForm];
      
      
      
      For[i=1,i\[LessEqual]9,
        Format[ToExpression["ct"<>ToString[i]],TeXForm]=
          Format["{\\alpha_"<>ToString[i]<>"}",OutputForm];
        Format[ToExpression["in"<>ToString[i]],TeXForm]=
          Format["{n_"<>ToString[i]<>"}",OutputForm];
        Format[ToExpression["i"<>ToString[i]],TeXForm]=
          Format["{i_"<>ToString[i]<>"}",OutputForm];
        Format[ToExpression["j"<>ToString[i]],TeXForm]=
          Format["{j_"<>ToString[i]<>"}",OutputForm];
        Format[ToExpression["gm"<>ToString[i]],TeXForm]=
          Format["{o_"<>ToString[i]<>"}",OutputForm];
        Format[ToExpression["gn"<>ToString[i]],TeXForm]=
          Format["{p_"<>ToString[i]<>"}",OutputForm];
        Format[ToExpression["cm"<>ToString[i]],TeXForm]=
          Format["{\\alpha_"<>ToString[i]<>"}",OutputForm];
        Format[ToExpression["cn"<>ToString[i]],TeXForm]=
          Format["{\\beta_"<>ToString[i]<>"}",OutputForm];
        i++;];
      
      Format[gt1,TeXForm]=Format["i",OutputForm];
      Format[gt2,TeXForm]=Format["j",OutputForm];
      Format[gt3,TeXForm]=Format["k",OutputForm];
      Format[gt4,TeXForm]=Format["l",OutputForm];
      Format[gt5,TeXForm]=Format["m",OutputForm];
      Format[gt6,TeXForm]=Format["n",OutputForm];
      
      Format[j1,TeXForm]=Format["a",OutputForm];
      Format[j2,TeXForm]=Format["b",OutputForm];
      Format[j3,TeXForm]=Format["c",OutputForm];
      Format[j4,TeXForm]=Format["d",OutputForm];
      Format[j5,TeXForm]=Format["e",OutputForm];
      Format[j6,TeXForm]=Format["f",OutputForm];
      
      Format[ct1,TeXForm]=Format["\\alpha",OutputForm];
      Format[ct2,TeXForm]=Format["\\beta",OutputForm];
      Format[ct3,TeXForm]=Format["\\gamma",OutputForm];
      Format[ct4,TeXForm]=Format["\\delta",OutputForm];
      Format[ct5,TeXForm]=Format["\\epsilon",OutputForm];
      
      
      
       For[i=1,i\[LessEqual]Length[parameters],
        Format[parameters[[i,1]],TeXForm]=
          Format[TeXNameP[parameters[[i,1]]],OutputForm];
        If[StringFreeQ[TeXNameP[parameters[[i,1]]],"_"],
          
          temp=ReplaceAll[
                Hold[SetDelayed[Format[parameters[[i,1]][a__],TeXForm],
                    Format[AddExp[TeXNameP[parameters[[nr,1]]],"",
                        StringReplace[ToString[TeXForm/@{a}],","->""]],
                      OutputForm]]], nr\[Rule]i];,
          
          
          temp=ReplaceAll[
                Hold[SetDelayed[Format[parameters[[i,1]][a__],TeXForm],
                    Format[AddExp[TeXNameP[parameters[[nr,1]]],"",
                        StringReplace[ToString[TeXForm/@{a}],","->""]],
                      OutputForm]]], nr\[Rule]i];
          ];
        ReleaseHold[temp]; 
        
        
        
        If[FreeQ[realVar,parameters[[i,1]]],
          If[StringFreeQ[TeXNameP[parameters[[i,1]]],"_"],
            
            temp=ReplaceAll[
                  Hold[SetDelayed[
                      Format[conj[parameters[[i,1]][a__]],TeXForm],
                      Format[StringReplace[
                            TeXNameP[parameters[[nr,1]]]<>
                              "^*",{RegularExpression[
                                  "(.[^\\_\\^]*)\\^(.[^\\_]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$3}",RegularExpression[
                                  "(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$4}_$3"}]<>"_"<>
                          StringReplace[ToString[TeXForm/@{a}],","->""],
                        OutputForm]]], nr\[Rule]i]; ,
             
            temp=ReplaceAll[
                  Hold[SetDelayed[
                      Format[conj[parameters[[i,1]][a__]],TeXForm],
                      Format[StringReplace[
                          StringReplace[
                              TeXNameP[parameters[[nr,1]]]<>
                                "^*",{RegularExpression[
                                    
                                    "(.[^\\_\\^]*)\\^(.[^\\_]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$3}",RegularExpression[
                                    "(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$4}_$3"}]<>"_"<>
                            StringReplace[ToString[TeXForm/@{a}],
                              ","->""],{RegularExpression[
                                "(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\_(.[^\\]]*)"]\
\[RuleDelayed]"$1_{$2,$3}",RegularExpression[
                                "(.[^\\_]*)\\_(.[^\\_]*)\\^(.[^\\_]*)\\_(.[^\\]]*)"]\
\[RuleDelayed]"$1^$3_{$2,$4}"}],OutputForm]]], nr\[Rule]i];
            ]; 
          ReleaseHold[temp];
          If[StringFreeQ[TeXNameP[parameters[[i,1]]],"_"],
            
            temp=ReplaceAll[
                  Hold[SetDelayed[Format[conj[parameters[[i,1]]],TeXForm],
                      Format[StringReplace[
                          TeXNameP[parameters[[nr,1]]]<>
                            "^*",{RegularExpression[
                                "(.[^\\_\\^]*)\\^(.[^\\_]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$3}",RegularExpression[
                                "(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$4}_$3"}],OutputForm]]], nr\[Rule]i]; ,
             
            temp=ReplaceAll[
                  Hold[SetDelayed[Format[conj[parameters[[i,1]]],TeXForm],
                      Format[StringReplace[
                          StringReplace[
                            TeXNameP[parameters[[nr,1]]]<>
                              "^*",{RegularExpression[
                                  "(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$3}",RegularExpression[
                                  "(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]\
\[RuleDelayed]"$1^{$2,$4}_$3"}],{RegularExpression[
                                "(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\_(.[^\\]]*)"]\
\[RuleDelayed]"$1_{$2,$3}",RegularExpression[
                                "(.[^\\_]*)\\_(.[^\\_]*)\\^(.[^\\_]*)\\_(.[^\\]]*)"]\
\[RuleDelayed]"$1^$3_{$2,$4}"}],OutputForm]]], nr\[Rule]i];
            ];
          ReleaseHold[temp];
          ];
        i++;]; 
      
       For[i=1,i\[LessEqual]Length[TeXParameters],
        Format[TeXParameters[[i,1]],TeXForm]=
          Format[TeXParameters[[i,2]],OutputForm];
        i++;];
      
      
      For[i=1,i\[LessEqual]Length[TeXParticles],
        If[getIndizesOld[getBlank[TeXParticles[[i,1]]]]=!={},
          Format[TeXParticles[[i,1]],TeXForm]=
            Format[TeXParticles[[i,2]],OutputForm];
          If[StringFreeQ[TeXParticles[[i,2]],"_"],
            
            temp=ReplaceAll[
                  Hold[SetDelayed[Format[TeXParticles[[i,1]][{a__}],TeXForm],
                      Format[TeXParticles[[nr,2]]<>"_{"<>
                          StringReplace[ToString[TeXForm/@{a}],","->""] <>"}",
                        OutputForm]]], nr\[Rule]i];,
            
            temp=ReplaceAll[
                  Hold[SetDelayed[Format[TeXParticles[[i,1]][{a__}],TeXForm],
                      Format[StringReplace[
                          TeXParticles[[nr,2]]<>"_"<>
                            StringReplace[ToString[TeXForm/@{a}] ,
                              ","->""],{RegularExpression[
                                "(.[^\\_]*)\\_(.[^\\_\\^]*)\\_(.[^\\]]*)"]\
\[RuleDelayed]"$1_{$2,$3}",RegularExpression[
                                "(.[^\\_]*)\\_(.[^\\]]*)\\^(.[^\\]^\\_]*)\\_(.[^\\]]*)"]\
\[RuleDelayed]"$1^$3_{$2,$4}"}],OutputForm]]], nr\[Rule]i];
            ];,
          
          temp=ReplaceAll[
                Hold[SetDelayed[Format[TeXParticles[[i,1]],TeXForm],
                    Format[TeXParticles[[nr,2]],OutputForm]]], nr\[Rule]i];
          ];
        ReleaseHold[temp];
        
        i++;];
      
      StringReplaceFinal = {};
      StringReplaceFinal = Join[StringReplaceFinal,{"(+"->"\\Big("}];
      StringReplaceFinal = Join[StringReplaceFinal,{"( +"->"\\Big("}];
      StringReplaceFinal = Join[StringReplaceFinal,{"("->"\\Big("}];
      StringReplaceFinal = Join[StringReplaceFinal,{")"->"\\Big)"}];
      StringReplaceFinal = Join[StringReplaceFinal,{"I"->"i"}];
      StringReplaceFinal = Join[StringReplaceFinal,{"+ -"->"-"}];
      StringReplaceFinal = Join[StringReplaceFinal,{"+-"->"-"}];
      
      
      Format[lt1,TeXForm]:=Format["\\rho",OutputForm];
      Format[lt2,TeXForm]:=Format["\\sigma",OutputForm];
      Format[lt3,TeXForm]:=Format["\\mu",OutputForm];
      Format[lt4,TeXForm]:=Format["\\nu",OutputForm];
      
      Format[PL,TeXForm]:=Format["\\frac{1-\\gamma_5}{2}",OutputForm];
      Format[PR,TeXForm]:=Format["\\frac{1+\\gamma_5}{2}",OutputForm];
      Format[gamma[a_],TeXForm]:=
        Format["\\gamma_{"<>ToString[TeXForm[a]]<>"}",OutputForm];
      Format[abs[a_],TeXForm]:=
        Format["|"<>ToString[TeXForm[a]]<>"|^2",OutputForm];
      Format[Delta[a_,b_],TeXForm]:=
        Format["\\delta_{"<>ToString[TeXForm[a]]<>" "<>ToString[TeXForm[b]]<>"}",
          OutputForm];
      Format[Der[a_],TeXForm]:=
        Format["\\partial_{\\mu}"<>TeXOutput[a],OutputForm];
      Format[epsTensor[a__],TeXForm]:=
        Format["\\epsilon^{"<>StringReplace[ToString[TeXForm/@{a}] ,","->""]<>
            "}",OutputForm];
      Format[ThetaStep[a_,b_],TeXForm]:=
        Format["\\Theta_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>"}",
          OutputForm];
      Format[Kronecker[a_,b_],TeXForm]:=
        Format["\\delta_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>"}",
          OutputForm];
      Format[g[a_,b_],TeXForm]:=
        Format["g_{"<>ToString[TeXForm[a]]<>" "<>ToString[TeXForm[b]]<>"}",
          OutputForm];
      
      Format[fSU2[a_,b_,c_],TeXForm]:=
        Format["\\epsilon_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>
            ","<>ToString[TeXForm[c]]<>"}",OutputForm];
      Format[fSU3[a_,b_,c_],TeXForm]:=
        Format["f_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>
            ToString[TeXForm[c]]<>"}",OutputForm];
      Format[Lam[a_,b_,c_],TeXForm]:=
        Format["\\lambda^{"<>ToString[TeXForm[a]]<>"}_{"<>
            ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}",OutputForm];
      Format[Sig[a_,b_,c_],TeXForm]:=
        Format["\\sigma^{"<>ToString[TeXForm[a]]<>"}_{"<>ToString[TeXForm[b]]<>
            ","<>ToString[TeXForm[c]]<>"}",OutputForm];
      Format[LambdaProd[a_,b_][c_,d_],TeXForm]:=
        Format["(\\lambda^{"<>ToString[TeXForm[a]]<>"} \\lambda^{"<>
            ToString[TeXForm[b]]<>"})_{"<>ToString[TeXForm[c]]<>","<>
            ToString[TeXForm[d]]<>"}",OutputForm];
      Format[SigmaProd[a_,b_][c_,d_],TeXForm]:=
        Format["(\\sigma^{"<>ToString[TeXForm[a]]<>"} \\sigma^{"<>
            ToString[TeXForm[b]]<>"})_{"<>ToString[TeXForm[c]]<>","<>
            ToString[TeXForm[d]]<>"}",OutputForm];
      
      
      Format[LorentzProduct[a_,b_],TeXForm]:=
        Format[ToString[TeXForm[a]]<>"\\cdot"<>ToString[TeXForm[b]],
          OutputForm];
      Format[sum[a_,b_,c_,d_+e_],TeXForm]:=
        Format["\\sum_{"<>ToString[TeXForm[a]]<>"="<>ToString[TeXForm[b]]<>"}^{"<>
            ToString[TeXForm[c]]<>"} \\Big["<>ToString[TeXForm[d]] <>"\\nonumber \\\\ & +"<>
            ToString[TeXForm[e]] <>"\\Big]",OutputForm];
      Format[sum[a_,b_,c_,d_],TeXForm]:=
        Format["\\sum_{"<>ToString[TeXForm[a]]<>"="<>ToString[TeXForm[b]]<>"}^{"<>
            ToString[TeXForm[c]]<>"}"<>ToString[TeXForm[d]],OutputForm];
      
      
      Format[Mass2[a_],TeXForm]:=
        Format["m^2_{"<>ToString[TeXForm[a]]<>"}",OutputForm];
      Format[Mass[a_],TeXForm]:=
        Format["m_{"<>ToString[TeXForm[a]]<>"}",OutputForm];
      Format[Mom[a_,b_],TeXForm]:=
        Format["p^{"<>ToString[TeXForm[a]]<>"}_{"<>ToString[TeXForm[b]]<>"}",
          OutputForm];
      Format[trace[x__],TeXForm]:=
        Format["\\mbox{Tr}("<>StringReplace[ToString[TeXForm/@{x}],","->" "]<>
            ")",OutputForm];
      Format[NumberGenerations[x__],TeXForm]:=
        Format["N_{"<>ToString[TeXForm[x]]<>"}",OutputForm];
      
      Format[MatMul[x__][a_,b_],TeXForm]:=
        Format["("<>StringReplace[ToString[TeXForm/@{x}],","->" "]<>")_{"<>
            ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>"}",OutputForm];
      Format[MatMul[x__][a_],TeXForm]:=
        Format["("<>StringReplace[ToString[TeXForm/@{x}],","->" "]<>")_{"<>
            ToString[TeXForm[a]]<>"}",OutputForm];
      Format[MatMul[x__],TeXForm]:=
        Format[StringReplace[ToString[TeXForm/@{x}],","->" "],OutputForm];
      Format[Tr1[x__],TeXForm]:=
        Format["\\sigma_{1,"<>ToString[x]<>"}",OutputForm];
      Format[Tr2[x__],TeXForm]:=
        Format["\\sigma_{2,"<>ToString[x]<>"}",OutputForm];
      Format[Tr3[x__],TeXForm]:=
        Format["\\sigma_{3,"<>ToString[x]<>"}",OutputForm];
      Format[UnitM,TeXForm]:=Format["{\\bf 1}",OutputForm];
      
       Unprotect[Cos, Sin, Tan, Csc,Sec,Cot];
      Format[Sin[x_],TeXForm]:=
        Format["\\sin"<>ToString[TeXForm[x]]<>" ",OutputForm];
      Format[Tan[x_],TeXForm]:=
        Format["\\tan"<>ToString[TeXForm[x]]<>" ",OutputForm];
      Format[Cos[x_],TeXForm]:=
        Format["\\cos"<>ToString[TeXForm[x]]<>" ",OutputForm];
      Format[Csc[x_],TeXForm]:=
        Format["\\csc"<>ToString[TeXForm[x]]<>" ",OutputForm];
      Format[Sec[x_],TeXForm]:=
        Format["\\sec"<>ToString[TeXForm[x]]<>" ",OutputForm];
      Format[Cot[x_],TeXForm]:=
        Format["\\cot"<>ToString[TeXForm[x]]<>" ",OutputForm];
      Protect[Cos,Sin,Tan, Csc,Sec,Cot,Re];
      
      
      Format[\[Alpha],TeXForm]:=Format["\\alpha",OutputForm];
      Format[\[Beta],TeXForm]:=Format["\\beta",OutputForm];
      Format[\[Gamma],TeXForm]:=Format["\\gamma",OutputForm];
      Format[\[Delta],TeXForm]:=Format["\\delta",OutputForm];
      Format[\[Phi],TeXForm]:=Format["\\phi",OutputForm];
      Format[\[Mu],TeXForm]:=Format["\\mu",OutputForm];
      Format[\[Epsilon],TeXForm]:=Format["\\epsilon",OutputForm];
      Format[\[Kappa],TeXForm]:=Format["\\kappa",OutputForm];
      Format[\[Lambda],TeXForm]:=Format["\\lambda",OutputForm];
      Format[\[Sigma],TeXForm]:=Format["\\sigma",OutputForm];
      Format[\[Rho],TeXForm]:=Format["\\rho",OutputForm];
      Format[\[Nu],TeXForm]:=Format["\\nu",OutputForm];
      Format[\[Eta],TeXForm]:=Format["\\eta",OutputForm];
      Format[\[Zeta],TeXForm]:=Format["\\zeta",OutputForm];
      Format[\[Tau],TeXForm]:=Format["\\tau",OutputForm];
      Format[\[Omega],TeXForm]:=Format["\\omega",OutputForm];
      Format[\[Xi],TeXForm]:=Format["\\xi",OutputForm];
      Format[\[Psi],TeXForm]:=Format["\\psi",OutputForm];
      Format[\[Theta],TeXForm]:=Format["\\theta",OutputForm];
      	
      
      
      ];



subGreek = {\[Mu] \[Rule] mue, \[Alpha] \[Rule] alpha, \[Beta] \[Rule] 
        beta, \[Gamma] \[Rule] gamma, \[Delta] \[Rule] 
        delta, \[Epsilon] \[Rule] epsilon, \[Phi] \[Rule]
        phi, \[Kappa] \[Rule] kappa, \[Lambda] \[Rule]lambda, \[Xi]\[Rule]
        xi, \[Tau]\[Rule]tau, \[Sigma]\[Rule]sigma,\[Rho]\[Rule]
        rho, \[Eta]\[Rule]
        eta,\[Zeta]\[Rule]zeta, \[Omega]\[Rule]omega,\[Theta]\[Rule]theta}; 


CreateCForm[CPV_]:=Block[{i,temp},
      Print["Create C Form"];
      Unprotect[CForm, Power, Cos, Sin, Tan,Csc,Sec,Cot,ArcCos,ArcSin,
        ArcTan];
      For[i=1,i\[LessEqual]Length[subGreek],
        temp= 
          ReplaceAll[
            Hold[SetDelayed[Format[subGreek[[i,1]],CForm],
                Format[ToString[subGreek[[nr,2]]],
                  OutputForm]]], {nr\[Rule]i}];
        ReleaseHold[temp];
        i++;
        ];
      
      Format[Cos[x_],CForm]:=
        Format["cos("<>ToString[CForm[x]]<>")",OutputForm];
      Format[Sin[x_],CForm]:=
        Format["sin("<>ToString[CForm[x]]<>")",OutputForm];
      Format[Tan[x_],CForm]:=
        Format["tan("<>ToString[CForm[x]]<>")",OutputForm];
      
      Format[ArcCos[x_],CForm]:=
        Format["acos("<>ToString[CForm[x]]<>")",OutputForm];
      Format[ArcSin[x_],CForm]:=
        Format["asin("<>ToString[CForm[x]]<>")",OutputForm];
      Format[ArcTan[x_],CForm]:=
        Format["atan("<>ToString[CForm[x]]<>")",OutputForm];
      
      Format[Sqrt[x_],CForm]:=
        Format["sqrt("<>ToString[CForm[x]]<>")",OutputForm];
      
      Format[Csc[x_],CForm]:=
        Format["1/sin("<>ToString[CForm[x]]<>")",OutputForm];
      Format[Sec[x_],CForm]:=
        Format["1/cos("<>ToString[CForm[x]]<>")",OutputForm];
      Format[Cot[x_],CForm]:=
        Format["1/tan("<>ToString[CForm[x]]<>")",OutputForm];
      Format[x_Power,CForm]:=
        Format[ToString[CForm[x[[1]]]]<>"^"<>ToString[CForm[x[[2]]]],
            OutputForm]/;(Head[x[[2]]]===Integer && Head[x[[1]]]=!= Plus &&  
              Head[x[[1]]]=!=Times );
      Format[x_Power,CForm]:=
        Format["("<>ToString[CForm[x[[1]]]]<>")^"<>ToString[CForm[x[[2]]]],
            OutputForm]/;(Head[x[[2]]]===
                Integer && (Head[x[[1]]]===Plus || Head[x[[1]]]===Times));
      
      Format[x_Mass,CForm]:=Format[CalcHepMass[x[[1]],1],OutputForm];
      
      
      Format[Sqrt[2],CForm]:=Format["sqrt2",OutputForm];
      
      For[i=1,i\[LessEqual]Length[parameters],
        If[(FreeQ[parDepNeeded,parameters[[i,1]]]\[Equal]False ||
              FreeQ[parDep,parameters[[i,1]]]\[Equal]False || 
              FreeQ[parNum,parameters[[i,1]]]\[Equal]False  || 
              FreeQ[VertexList3,parameters[[i,1]]]\[Equal]False || 
              FreeQ[VertexList4,parameters[[i,1]]] \[Equal]False ), 
          If[Length[parameters[[i,2]]]>0,
              
              temp=ReplaceAll[
                  Hold[SetDelayed[Format[parameters[[i,1]][a__],CForm],
                      Format[CHName[parameters[[nr,1]],maxLength]<>
                          StringReplace[
                            ToString[CForm/@{a}],{" "->"",","->"","{"->"",
                              "}"->""}],OutputForm]]], {nr\[Rule]i,
                    maxLength\[Rule](6-
                          Length[(parameters[[i,2]] /. {1}\[Rule]{})])}];
              ReleaseHold[temp];
              If[CPV\[Equal]True && FreeQ[realVar,parameters[[i,1]]],
                
                temp=ReplaceAll[
                    Hold[SetDelayed[
                        Format[
                          ToExpression["Im"<>ToString[parameters[[i,1]]]][
                            a__],CForm],
                        Format[
                          "I"<>CHName[parameters[[nr,1]],maxLength]<>
                            StringReplace[
                              ToString[CForm/@{a}],{" "->"",","->"","{"->"",
                                "}"->""}],OutputForm]]], {nr\[Rule]i,
                      maxLength\[Rule](5-Length[parameters[[i,2]]])}];
                ReleaseHold[temp];
                
                temp=ReplaceAll[
                    Hold[SetDelayed[
                        Format[
                          ToExpression["Re"<>ToString[parameters[[i,1]]]][
                            a__],CForm],
                        Format[
                          "R"<>CHName[parameters[[nr,1]],maxLength]<>
                            StringReplace[
                              ToString[CForm/@{a}],{" "->"",","->"","{"->"",
                                "}"->""}],OutputForm]]], {nr\[Rule]i,
                      maxLength\[Rule](5-Length[parameters[[i,2]]])}];
                ReleaseHold[temp];
                ];,
              
              temp=ReplaceAll[
                  Hold[SetDelayed[Format[parameters[[i,1]],CForm],
                      Format[CHName[parameters[[nr,1]],maxLength],
                        OutputForm]]], {nr\[Rule]i,
                    maxLength\[Rule](6-
                          Length[(parameters[[i,2]] /. {1}\[Rule]{})])}];
              ReleaseHold[temp];
              If[CPV\[Equal]True && FreeQ[realVar,parameters[[i,1]]],
                
                temp=ReplaceAll[
                    Hold[SetDelayed[
                        Format[
                          ToExpression["Im"<>ToString[parameters[[i,1]]]],
                          CForm],
                        Format["I"<>CHName[parameters[[nr,1]],maxLength],
                          OutputForm]]], {nr\[Rule]i,
                      maxLength\[Rule](5-Length[parameters[[i,2]]])}];
                ReleaseHold[temp];
                
                temp=ReplaceAll[
                    Hold[SetDelayed[
                        Format[
                          ToExpression["Re"<>ToString[parameters[[i,1]]]],
                          CForm],
                        Format["R"<>CHName[parameters[[nr,1]],maxLength],
                          OutputForm]]], {nr\[Rule]i,
                      maxLength\[Rule](5-Length[parameters[[i,2]]])}];
                ReleaseHold[temp];
                ];
              ];
          ];
        i++;];
      
      Protect[CForm,Power,Cos, Sin, Tan,Csc,Sec,Cot,ArcCos,ArcSin,ArcTan];
      ];

StringReCH[CPV_]:=Block[{i},
      
      StringReplaceConj={};
      StringReplaceConj=
        Join[StringReplaceConj,{RegularExpression[
                "conj\\[(.[^\\]]*)\\]"]\[RuleDelayed]"$1c"}];
      
      StringReplacementsCH={};
      StringReplacementsCH=
        Join[StringReplacementsCH,{"Sqrt[2]"\[Rule]"sqrt2"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"\[Alpha]"\[Rule]"alpha"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"\[Beta]"\[Rule]"beta"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"\[Psi]"\[Rule]"gamma"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"\[Delta]"\[Rule]"delta"}];
      StringReplacementsCH=Join[StringReplacementsCH,{"\[Mu]"\[Rule]"mu"}];
      StringReplacementsCH=Join[StringReplacementsCH,{"\[Vee]"\[Rule]"nu"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"\[Kappa]"\[Rule]"kappa"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"\[Lambda]"\[Rule]"lambda"}];
      StringReplacementsCH=Join[StringReplacementsCH,{"\[Rho]"\[Rule]"rho"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"\[Sigma]"\[Rule]"sigma"}];
      StringReplacementsCH=Join[StringReplacementsCH,{"\[Phi]"\[Rule]"phi"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{RegularExpression[
                "Cos\\[(.[^\\]]*)\\]"]\[RuleDelayed]"cos($1)"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{RegularExpression[
                "Sin\\[(.[^\\]]*)\\]"]\[RuleDelayed]"sin($1)"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{RegularExpression[
                "Tan\\[(.[^\\]]*)\\]"]\[RuleDelayed]"tan($1)"}];
      
      StringReplacementsCH=
        Join[StringReplacementsCH,{"sin(alpha)"\[Rule]"sa"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"sin(beta)"\[Rule]"sb"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"sin(gamma)"\[Rule]"sg"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"sin(delta)"\[Rule]"sd"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"sin(epsilon)"\[Rule]"se"}];
      StringReplacementsCH=Join[StringReplacementsCH,{"sin(xi)"\[Rule]"sx"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"sin(phi)"\[Rule]"sf"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"cos(alpha)"\[Rule]"ca"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"cos(beta)"\[Rule]"cb"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"cos(gamma)"\[Rule]"cg"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"cos(delta)"\[Rule]"cd"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"cos(epsilon)"\[Rule]"ce"}];
      StringReplacementsCH=Join[StringReplacementsCH,{"cos(xi)"\[Rule]"cx"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"cos(phi)"\[Rule]"cf"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"tan(alpha)"\[Rule]"ta"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"tan(beta)"\[Rule]"tb"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"tan(gamma)"\[Rule]"tg"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"tan(delta)"\[Rule]"td"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"tan(epsilon)"\[Rule]"te"}];
      StringReplacementsCH=Join[StringReplacementsCH,{"tan(xi)"\[Rule]"tx"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"tan(phi)"\[Rule]"tf"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"cos(ThetaW)"\[Rule]"CW"}];
      StringReplacementsCH=
        Join[StringReplacementsCH,{"sin(ThetaW)"\[Rule]"SW"}];
      
      
       For[i=1,i\[LessEqual]Length[parameters],
        If[(FreeQ[parDepNeeded,parameters[[i,1]]]\[Equal]False ||
              FreeQ[parDep,parameters[[i,1]]]\[Equal]False || 
              FreeQ[parNum,parameters[[i,1]]]\[Equal]False  || 
              FreeQ[VertexList3,parameters[[i,1]]]\[Equal]False || 
              FreeQ[VertexList4,parameters[[i,1]]] \[Equal]False ), 
          ind = parameters[[i,2]];
          (* If[MemberQ[realVar,parameters[[i,1]]]\[Equal]True, *)
          
          Switch[Length[ind],
            0, 
            StringReplacementsCH = 
                Join[StringReplacementsCH,{ToString[
                        InputForm[parameters[[i,1]]]]\[Rule]CHName[
                        parameters[[i,1]],6]}];,
            1, 
            StringReplacementsCH = 
                Join[StringReplacementsCH,{RegularExpression[
                        StringReplace[
                            ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]",
                              "["->"\\["}]<>"\\[(.[^\\]]*)\\]"]\[Rule] 
                      CHName[parameters[[i,1]],5]<>"$1"}];,
            2, 
            StringReplacementsCH = 
                Join[StringReplacementsCH,{RegularExpression[
                        StringReplace[
                            ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]",
                              "["->"\\["}]<>
                          "\\[(.[^\\]]*),(.[^\\]]*)\\]"]\[Rule]CHName[
                          parameters[[i,1]],4]<>"$1$2"}];,
            3, 
            StringReplacementsCH = 
                Join[StringReplacementsCH,{RegularExpression[
                        StringReplace[
                            ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]",
                              "["->"\\["}]<>
                          "\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]\[Rule] 
                      CHName[parameters[[i,1]],3]<>"$1$2$3"}];,
            4, 
            StringReplacementsCH = 
                Join[StringReplacementsCH,{RegularExpression[
                        StringReplace[
                            ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]",
                              "["->"\\["}]<>
                          
                          "\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]\
\[Rule] CHName[parameters[[i,1]],2]<>"$1$2$3$4"}];
            ]; 
          If[FreeQ[realVar,parameters[[i,1]]] && CPV\[Equal]True,
            Switch[Length[ind],
                0, 
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{"Re"<>
                          ToString[InputForm[parameters[[i,1]]]]\[Rule]
                        "R"<>CHName[parameters[[i,1]],5]}];
                
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{"Im"<>
                          ToString[InputForm[parameters[[i,1]]]]\[Rule]
                        "I"<>CHName[parameters[[i,1]],5]}];,
                1, 
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{RegularExpression[
                          StringReplace[
                              "Re"<>ToString[InputForm[parameters[[i,1]]]],{"]"->
                                  "\\]","["->"\\["}]<>
                            "\\[(.[^\\]]*)\\]"]\[Rule]
                        "R"<> CHName[parameters[[i,1]],4]<>"$1"}];
                
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{RegularExpression[
                          StringReplace[
                              "Im"<>ToString[InputForm[parameters[[i,1]]]],{"]"->
                                  "\\]","["->"\\["}]<>
                            "\\[(.[^\\]]*)\\]"]\[Rule]
                        "I"<> CHName[parameters[[i,1]],4]<>"$1"}];,
                2, 
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{RegularExpression[
                          StringReplace[
                              "Re"<>ToString[InputForm[parameters[[i,1]]]],{"]"->
                                  "\\]","["->"\\["}]<>
                            "\\[(.[^\\]]*),(.[^\\]]*)\\]"]\[Rule]"R"<> 
                          CHName[parameters[[i,1]],3]<>"$1$2"}];
                
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{RegularExpression[
                          StringReplace[
                              "Im"<>ToString[InputForm[parameters[[i,1]]]],{"]"->
                                  "\\]","["->"\\["}]<>
                            "\\[(.[^\\]]*),(.[^\\]]*)\\]"]\[Rule]"I"<> 
                          CHName[parameters[[i,1]],3]<>"$1$2"}];,
                3, 
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{RegularExpression[
                          StringReplace[
                              "Re"<>ToString[InputForm[parameters[[i,1]]]],{"]"->
                                  "\\]","["->"\\["}]<>
                            "\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]\[Rule]"R"<> 
                          CHName[parameters[[i,1]],2]<>"$1$2$3"}];
                
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{RegularExpression[
                          StringReplace[
                              "Im"<>ToString[InputForm[parameters[[i,1]]]],{"]"->
                                  "\\]","["->"\\["}]<>
                            "\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]\[Rule]
                        "I"<> CHName[parameters[[i,1]],2]<>"$1$2$3"}];,
                4, 
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{RegularExpression[
                          StringReplace[
                              "Re"<>ToString[InputForm[parameters[[i,1]]]],{"]"->
                                  "\\]","["->"\\["}]<>
                            "\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]\
\[Rule] "R"<>CHName[parameters[[i,1]],1]<>"$1$2$3$4"}];
                
                StringReplacementsCH = 
                  Join[StringReplacementsCH,{RegularExpression[
                          StringReplace[
                              "Im"<>ToString[InputForm[parameters[[i,1]]]],{"]"->
                                  "\\]","["->"\\["}]<>
                            "\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]\
\[Rule] "I"<>CHName[parameters[[i,1]],1]<>"$1$2$3$4"}]; 
                ];
            ];
          ];
        i++;];
      ];

MakeSPhenoFortran:=Block[{i,j,pos},
      
      For[i=1,i\[LessEqual]Length[parameters],
        If[FreeQ[RenameParameters,parameters[[i,1]]],
          
          temp=ReplaceAll[
              Hold[SetDelayed[Format[parameters[[i,1]],FortranForm],
                    Format[CHName[parameters[[nr,1]],99],OutputForm]]/;
                  SARAHFortran\[Equal]True], {nr\[Rule]i,
                maxLength\[Rule](6-Length[parameters[[i,2]]])}];
          ReleaseHold[temp];,
          pos=Position[RenameParameters,parameters[[i,1]]][[1,1]];
          
          temp=ReplaceAll[
              Hold[SetDelayed[Format[parameters[[i,1]],FortranForm],
                    Format[Extract[RenameParameters,POS][[2]],OutputForm]]/;
                  SARAHFortran\[Equal]True], {nr\[Rule]i,POS\[Rule]pos,
                maxLength\[Rule](6-Length[parameters[[i,2]]])}];
          ReleaseHold[temp];
          
          ];
        i++;];
      
      Format[x_Adj, FortranForm]:=
        Format["adj"<>ToString[FortranForm[x[[1]]]],OutputForm]/;
          SARAHFortran\[Equal]True;
      
      For[i=1,i\[LessEqual]Length[threeIndexParameter],
        For[j=1,j\[LessEqual]5,
          
          Format[threeIndexParameter[[i]][j], FortranForm]=
            Format[SPhenoForm[threeIndexParameter[[i]]]<>ToString[j],
              OutputForm] ;
          j++;];
        i++;];
      
      
      ];

AdditionalFortranForm:=Block[{i,pos},
      
      For[i=1,i\[LessEqual]Length[ListOfAdditionalParameters],
          
          temp=ReplaceAll[
              Hold[SetDelayed[
                  Format[ListOfAdditionalParameters[[i,1]],FortranForm],
                  Format[ListOfAdditionalParameters[[nr,2]],
                    OutputForm]]], {nr\[Rule]i}];
          ReleaseHold[temp];
          i++;];
      
      
      ];

(* CreateWOForm:=Block[{i,j,k,j1,j2,j3},
        ReplacementsWO = {};
        
        For[i=1,i\[LessEqual]Length[parameters],
          Switch[Length[parameters[[i,2]]],
            0,
            	
            ReplacementsWO=
                Join[ReplacementsWO,{parameters[[i,1]]\[Rule]
                      ToExpression[
                        StringReplace[
                          ToString[parameters[[i,1]]/.subGreek],{"["->"",
                            "]"->""}]]}];,
            1,
            	
            ReplacementsWO=
                Join[ReplacementsWO,
                  Table[parameters[[i,1]][j1]\[Rule]
                      ToExpression[
                        StringReplace[
                            ToString[parameters[[i,1]]/.subGreek],{"["->"",
                              "]"->""}]<>ToString[j1]],{j1,1,
                      parameters[[i,3,1]]}]];,
            
            2,
            	
            ReplacementsWO=
                Join[ReplacementsWO,
                  Table[parameters[[i,1]][j1,j2]\[Rule]
                      ToExpression[
                        StringReplace[
                            ToString[parameters[[i,1]]/.subGreek],{"["->"",
                              "]"->""}]<>ToString[j1]<>ToString[j2]],{j1,1,
                      parameters[[i,3,1]]},{j2,1,parameters[[i,3,2]]}]];,
            3,
            	
            ReplacementsWO=
                Join[ReplacementsWO,
                  Table[parameters[[i,1]][j1,j2,j3]\[Rule]
                      ToExpression[
                        StringReplace[
                            ToString[parameters[[i,1]]/.subGreek],{"["->"",
                              "]"->""}]<>ToString[j1]<>ToString[j2]<>
                          ToString[j3]],{j1,1,parameters[[i,3,1]]},{j2,1,
                      parameters[[i,3,2]]},{j3,1,parameters[[i,3,3]]}]];
            ];
          i++;];
        
        ReplacementsWO = Flatten[ReplacementsWO];
        
        ]; *)

CreateWOForm:=Block[{i,j,k,j1,j2,j3},
      ReplacementsWO = {};
      
      For[i=1,i\[LessEqual]Length[parameters],
        Switch[Length[parameters[[i,2]]],
          0,
          	
          ReplacementsWO=
              Join[ReplacementsWO,{parameters[[i,1]]\[Rule]
                    ToExpression[CHName[parameters[[i,1]]]]}];,
          1,
          	
          ReplacementsWO=
              Join[ReplacementsWO,
                Table[parameters[[i,1]][j1]\[Rule]
                    ToExpression[CHName[parameters[[i,1]]]<>ToString[j1]],{j1,
                    1,parameters[[i,3,1]]}]];,
          
          2,
          	
          ReplacementsWO=
              Join[ReplacementsWO,
                Table[parameters[[i,1]][j1,j2]\[Rule]
                    ToExpression[
                      CHName[parameters[[i,1]]]<>ToString[j1]<>
                        ToString[j2]],{j1,1,parameters[[i,3,1]]},{j2,1,
                    parameters[[i,3,2]]}]];,
          3,
          	
          ReplacementsWO=
            Join[ReplacementsWO,
              Table[parameters[[i,1]][j1,j2,j3]\[Rule]
                  ToExpression[
                    CHName[parameters[[i,1]]]<>ToString[j1]<>ToString[j2]<>
                      ToString[j3]],{j1,1,parameters[[i,3,1]]},{j2,1,
                  parameters[[i,3,2]]},{j3,1,parameters[[i,3,3]]}]];
          	If[FreeQ[parameters[[i,2]],flavor]\[Equal]False,
            	
            ReplacementsWO=
                Join[ReplacementsWO,
                  Table[parameters[[i,1]][j1][j2,j3]\[Rule]
                      ToExpression[
                        CHName[parameters[[i,1]]]<>ToString[j1]<>ToString[j2]<>
                          ToString[j3]],{j1,1,parameters[[i,3,1]]},{j2,1,
                      parameters[[i,3,2]]},{j3,1,parameters[[i,3,3]]}]];
            	];
          ];
        i++;];
      
      ReplacementsWO = Flatten[ReplacementsWO];
      
      ];






CHName[part_]:=Block[{pos,temp},
      temp=getEntryParameter[part,OutputName];
      If[Head[part]===Mass,
        Return[CalcHepMass[part,1]];
        ];
      If[temp===None,
        temp=ToString[part];
        temp=StringReplace[temp,{"["->"","]"->""}];,
        temp=ToString[temp];
        ];
      Return[temp];
      ];

CHName[part_,maxL_]:=Block[{pos,temp},
      If[Head[part]===Mass,
        temp=CalcHepMass[part[[1]],1];,
        temp=getEntryParameter[part,OutputName];
        If[temp===None,
          temp=ToString[part];
          temp=StringReplace[temp,{"["->"","]"->""}];,
          temp=ToString[temp];
          ];
        ];
      If[StringLength[temp]>maxL,
        Message[CHName::VariableTooLong,part,maxL];
        temp=StringTake[temp,maxL];
        ];
      Return[temp];
      ];

ExportModelInformation:=Block[{i,particles, para},
      Print["Writing Information about Particles"];
      
      (* $sarahCurrentOutputMainDir=
            ToFileName[{$sarahOutputDir,Modelname}]; *)
      
      particles=
        OpenWrite[ToFileName[$sarahCurrentOutputMainDir,"ParticlesList.m"]];
      para=
        OpenWrite[ToFileName[$sarahCurrentOutputMainDir,"ParametersList.m"]];
      
      
      
      states = {GaugeES};
      
      For[i=1,i\[LessEqual]Length[Rotation],
        states=Join[states,{Rotation[[i,1]]}];
        i++;
        ];
      
      For[j=1,j\[LessEqual]Length[states],
        Set[Particles[Current], 
          ToExpression["Particles"<>ToString[states[[j]]  ] ] ];
        Set[defInput,
          ToExpression["ParticleDefinitions"<>ToString[states[[j]]]]];
        
        defInput = defInput /.diracSub;
        
        partS={}; partV={}; partF={}; partG={}; partA={}; partList={};
        diracTemp = dirac;
        
        For[i=1,i\[LessEqual]Length[Particles[Current]],
          If[FreeQ[defInput,Particles[Current][[i,1]]]\[Equal]False,
            pos=Position[defInput,Particles[Current][[i,1]]][[1,1]];
            moreInfo = Extract[defInput,pos][[2]];,
            moreInfo = {};
            ];
          
           
          partList = 
            Join[partList,{{Particles[Current][[i,1]],
                  Flatten[{Generations\[Rule] Particles[Current][[i,3]], 
                      Type \[Rule]Particles[Current][[i,4]],  
                      Indizes \[Rule] Particles[Current][[i,5]],
                      Selfconjugate\[Rule] 
                        TrueQ[Particles[Current][[i,1]]\[Equal] 
                            conj[Particles[Current][[i,1]]]],moreInfo}]}}];
          i++;];
        
        
         If[Length[partList]>0,
          
          WriteString[particles, 
            "Particle Definitions in "<>ToString[states[[j]]]<> ": \n"];
          
          For[i=1,i\[LessEqual]Length[partList],
            
            WriteString[particles, 
              "{"<>ToString[InputForm[partList[[i,1]]]] <> ",         {"];
            For[k=1,k\[LessEqual]Length[partList[[i,2]]],
              WriteString[particles,  
                "                " <>ToString[InputForm[partList[[i,2,k]]]]];
              If[k\[Equal]Length[partList[[i,2]]],
                WriteString[particles,"} \n \n"];,
                WriteString[particles,", \n"];
                ];
              k++;];
            i++;];
          ];
        
        j++;];
      
      Print["Writing Information about Parameters"];
      
      
      defInput = ParameterDefinitions;
      paraList = {};
      
      
      
      
      For[i=1,i\[LessEqual]Length[parameters],
        
        If[FreeQ[defInput,parameters[[i,1]]]\[Equal]False,
          pos=Position[defInput,parameters[[i,1]]][[1,1]];
          moreInfo = Extract[defInput,pos][[2]];,
          moreInfo = {};
          ];
        
         paraList = 
          Join[paraList,{{parameters[[i,1]],
                Flatten[{Dimensions\[Rule] parameters[[i,3]], 
                    Real \[Rule]MemberQ[realVar,parameters[[i,1]]],
                    moreInfo}]}}];
        i++;];
      
      
      WriteString[para, "Defined Parameters : \n"];
      
      For[i=1,i\[LessEqual]Length[paraList],
        WriteString[para, 
          "{" <> ToString[InputForm[paraList[[i,1]]]] <> ",   { \n"];
        For[j=1,j\[LessEqual]Length[paraList[[i,2]]],
          
          WriteString[para,
            "                                   "<>ToString[
                InputForm[paraList[[i,2,j]]]]]; 
          If[j\[Equal]Length[paraList[[i,2]]],
            WriteString[para,"} \n \n"];,
            WriteString[para,", \n"];
            ];
          j++;];
        i++;];
      
      
      
      
      
      Close[particles];
      Close[para];
      
      Print["Done. Output is in ",$sarahCurrentOutputMainDir ];
      
      ];

AddExp[string_,exp_,down_]:=
    Block[{basis="",super="", sub="",temp,temp2,res,next},
      temp=string;
      next = StringTake[temp,1];
      
      While[next=!="_" &&  next=!="^"  && temp=!="",
        basis= basis <>StringTake[temp,1];
        temp=StringDrop[temp,1];
        If[temp=!="",
          next = StringTake[temp,1];,
          next"";
          ];
        ];
      
      If[temp=!="",
        temp2 = StringTake[temp,1];
        temp = StringDrop[temp,1];
        res = ExtractSubSuper[temp];
        temp=res[[1]];
        Switch[temp2,
          "_", sub = res[[2]];,
          "^", super=res[[2]];
          ];
        ];
      
      If[temp=!="",
        temp2 = StringTake[temp,1];
        temp = StringDrop[temp,1];
        If[temp=!="",
          res = ExtractSubSuper[temp];,
          res={"",""};
          ];
        temp=res[[1]];
        Switch[temp2,
          "_", sub = res[[2]];,
          "^", super=res[[2]];
          ];
        ];
      
      res = basis;
      
      If[down =!="" || sub =!= "",
        res = 
            StringReplace[
              res <>"_{"<>sub <>","<>down <>"}",{"{,"->"{",",}"->"}"}];
        ];
      
      If[exp =!="" || super =!= "",
        res = 
            StringReplace[ 
              res <>"^{"<>super <>","<>exp <>"}",{"{,"->"{",",}"->"}"}];
        ];
      
      Return[res];
      
      ];

ExtractSubSuper[string_]:=Block[{temp,open,temp3,next},
      temp=string;
      
      If[StringTake[temp,1]==="{",
        open=1;
        temp3="";
        temp=StringDrop[temp,1];
        While[StringTake[temp,1]=!="}" || open =!= 1,
          If[StringTake[temp,1]==="}",open--;];
          If[StringTake[temp,1]==="{",open++;];
          temp3 = temp3<>StringTake[temp,1];
          temp = StringDrop[temp,1];
          ];
        temp = StringDrop[temp,1];,
        temp3="";
        next = StringTake[temp,1];
        While[temp=!="" && next=!="^" &&  next=!="_",
          temp3 = temp3<>StringTake[temp,1];
          temp = StringDrop[temp,1];
          If[temp=!="",
            next=StringTake[temp,1];,
            next="";
            ];
          ];
        ];
      
      Return[{temp,temp3}];
      
      ];

getLaTeXlength[exp_Times]:=Plus@@getLR/@Plus@@exp;
getLaTeXlength[exp_Plus]:=Plus@@getLR/@exp;
getLaTeXlength[exp_List]:=Plus@@getLR[Plus@@exp];
getLaTeXlength[exp_Power]:=Plus@@getLR/@Plus@@exp;
getLaTeXlength[exp_]:=Plus@@getLR[exp];


getLR[x_Plus]:=getLR/@x;
getLR[x_Power]:=1+getLR/@Plus@@x;
getLR[x_Times]:=1+getLR/@Plus@@x;
getLR[x_Rational]:=2;
getLR[x_List]:=1+getLR[Plus@@x];
getLR[x_conj]:=1+getLR[x[[1]]];
getLR[x_Mom]:=3+getLR[x[[1]]];
getLR[x_Der]:=3+getLR[x[[1]]];
getLR[x_RXi]:=1+getLR[x[[1]]];
getLR[x_Cp]:=2+getLR/@Plus@@x;

getLR[x_B1]:=2+getLR/@Plus@@x;
getLR[x_B0]:=2+getLR/@Plus@@x;
getLR[x_B22]:=10+getLR/@Plus@@x;
getLR[x_F0]:=2+getLR/@Plus@@x;
getLR[x_G0]:=2+getLR/@Plus@@x;
getLR[x_H0]:=2+getLR/@Plus@@x;
getLR[x_A0]:=10+getLR[x[[1]]];
getLR[x_Sin]:=7+getLR[x[[1]]];
getLR[x_Cos]:=7+getLR[x[[1]]];
getLR[x_Tan]:=7+getLR[x[[1]]];
getLR[x_Cot]:=7+getLR[x[[1]]];
getLR[x_Sec]:=7+getLR[x[[1]]];
getLR[x_Csc]:=7+getLR[x[[1]]];
getLR[x_sum]:=4+getLR[x[[4]]];
getLR[x_MatMul]:=3+getLR[Plus@@x];
getLR[x_trace]:=4+getLR[Plus@@x];
getLR[x_Tp]:=2+getLR[x[[1]]];
getLR[x_Adj]:=3+getLR[x[[1]]];

getLR[x_Delta]:=3+getLR/@Plus@@x;
getLR[x_Kronecker]:=1+getLR/@Plus@@x;
getLR[x_Mass]:=1+getLR[x[[1]]];
getLR[x_Mass2]:=2+getLR[x[[1]]];
getLR[x_abs]:=5+getLR[x[[1]]];

getLR[x_]:=Block[{},
      If[Head[Head[x]]\[Equal]MatMul, Return[8+getLR[Plus@@x[[1]]]]];
      If[Head[x]\[Equal]Integer, 
        If[x\[GreaterEqual] 0,Return[1+Floor[Log[10.,Abs[x]]]], 
          Return[2+Floor[Log[10.,Abs[x]]]]]];
      If[Head[x]\[Equal]Complex, 
        If[x/\[ImaginaryI]\[GreaterEqual] 0,Return[1], Return[2]]];
      If[Head[TeXLength[x]]===Integer,Return[TeXLength[x]]];
      If[Head[TeXLength[Head[x]]]===Integer,
        Return[TeXLength[Head[x]] + Plus@@getLR[Plus@@x]]];
      If[FreeQ[x,PL]\[Equal]False || FreeQ[x,PR]\[Equal]False, 
        Return[getLR[x[[0]]]]];
      If[AtomQ[x],
        Return[1.];,
        Return[1.5 + getLR[Plus@@x] ];
        ];
      ];



