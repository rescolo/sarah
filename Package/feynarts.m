(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

(* Begin["`FeynArtsModel`"] *)

(*------------------------------------*)
(* Write FeynArts Model-File *)
(*------------------------------------*)



MakeFeynArts:=Block[{},
      Print["------------------------------"];
      Print[" Creating FeynArts Model File "];
      Print["------------------------------"];
      
      subGenInd={};
      If[FreeQ[NameOfStates,InitalizedVertexCalculaton]\[Equal]True,
        Message[ModelFile::NoVertices];,
        ClearAttributes[C,Orderless];
        subFA={ThetaStep[a__]\[Rule]1};
        If[FileExistsQ[$sarahCurrentFeynArtsDir]=!=True,
          CreateDirectory[$sarahCurrentFeynArtsDir];
          ];
        
        InitFA[InitalizedVertexCalculaton];
        
        InitTrig;
        
        CreateClassesFA[False];
        FeynArtsVertices;
        WriteModelFA;
        
        Print[""];
        Print["Done. Output is in ", $sarahCurrentFeynArtsDir];
        SetAttributes[C,Orderless];
        ];
      ];


MakeNameTrig[x_,start_]:=Block[{},
      Return[
          ToExpression[
            start<>StringReplace[
                ToString[x[[1]] /. subGreek],{"-"\[Rule]"m","+"\[Rule]"p",
                  " "->""," "->"",")"->"","("->""}]]];
      ];

InitTrig:=Block[{i},
      sinL=Intersection[Cases[VertexListNonCC,x_Sin,99]];
      cosL=Intersection[Cases[VertexListNonCC,x_Cos,99]];
      tanL=Intersection[Cases[VertexListNonCC,x_Tan,99]];
      secL=Intersection[Cases[VertexListNonCC,x_Sec,99]];
      cscL=Intersection[Cases[VertexListNonCC,x_Csc,99]];
      cotL=Intersection[Cases[VertexListNonCC,x_Cot,99]];
      
      TrigRepFA={};
      
      For[i=1,i\[LessEqual]Length[sinL],
        TrigRepFA = 
          Join[TrigRepFA,{{sinL[[i]],MakeNameTrig[sinL[[i]],"S"]}}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[cosL],
        TrigRepFA = 
          Join[TrigRepFA,{{cosL[[i]],MakeNameTrig[cosL[[i]],"C"]}}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[tanL],
        TrigRepFA = 
          Join[TrigRepFA,{{tanL[[i]],MakeNameTrig[tanL[[i]],"T"]}}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[secL],
        TrigRepFA = 
          Join[TrigRepFA,{{secL[[i]],1/MakeNameTrig[secL[[i]],"C"]}}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[cscL],
        TrigRepFA = 
          Join[TrigRepFA,{{cscL[[i]],1/MakeNameTrig[cscL[[i]],"S"]}}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[cotL],
        TrigRepFA = 
          Join[TrigRepFA,{{cotL[[i]],1/MakeNameTrig[cotL[[i]],"T"]}}];
        i++;];
      
      
      subFA = 
        Join[subFA,
          Table[TrigRepFA[[i,1]]\[Rule]TrigRepFA[[i,2]],{i,1,
              Length[TrigRepFA]}]];
      
      ];

InitFA[ES_]:=Block[{i,temp},
      
      If[InitalizedVertexCalculaton=!=ES,
        InitVertexCalculation[ES,False];
        ];
      
      Print["Initialize Output"];
      
      FAindices={};
      For[i=1,i\[LessEqual]Length[Gauge],
        If[Gauge[[i,2,1]]>2 && Gauge[[i,3]]=!= left,
          
          FAindices=
              Join[FAindices,{{Gauge[[i,3]],Gauge[[i,2,1]], False,
                    greekIndex}}];
          ];
        i++;];
      
      FAindices = FAindices /. color\[Rule]Colour;
      
      Set[massList,Masses[ES]]; 
      
      MassRules={};
      LabelRules={};
      ListofAllMasses ={};
      
      subStringFA={};
      subStringFA=Join[subStringFA,{"\\tilde{"\[Rule]""}];
      subStringFA=
        Join[subStringFA,{RegularExpression["_(.[^}]*)"]\[Rule] ""}];
      subStringFA=
        Join[subStringFA,{RegularExpression["\\^(.[^}]*)"]\[Rule] ""}];
      subStringFA=Join[subStringFA,{"}"\[Rule]""}];
      
      stringIndexExtract={};
      stringIndexExtract=Join[stringIndexExtract,{"\\tilde{"->""}];
      stringIndexExtract=
        Join[stringIndexExtract,{RegularExpression["\\^(.[^}]*)"]\[Rule] 
              ""}];
      stringIndexExtract=
        Join[stringIndexExtract,{RegularExpression["(.*)_"]\[Rule] ""}];
      
      stringExpExtract={};
      stringExpExtract=Join[stringExpExtract,{"\\tilde{"->""}];
      stringExpExtract=
        Join[stringExpExtract,{RegularExpression["_(.[^}]*)"]\[Rule] ""}];
      stringExpExtract=
        Join[stringExpExtract,{RegularExpression["(.*)\\^"]\[Rule] ""}];
      
      temp=Cases[parameters,x_T,5];
      For[i=1,i\[LessEqual]Length[temp],
        subFA = 
          Join[subFA,{temp[[i]] \[Rule]  
                ToExpression["T"<>ToString[temp[[i,1]] /. subGreek]]}];
        i++;];
      
      temp=Cases[parameters,x_B,5];
      For[i=1,i\[LessEqual]Length[temp],
        subFA = 
          Join[subFA,{temp[[i]] \[Rule]  
                ToExpression["B"<>ToString[temp[[i,1]] /. subGreek]]}];
        i++;];
      
      temp=Cases[parameters,x_L,5];
      For[i=1,i\[LessEqual]Length[temp],
        subFA = 
          Join[subFA,{temp[[i]] \[Rule]  
                ToExpression["L"<>ToString[temp[[i,1]] /. subGreek]]}];
        i++;];
      
      temp=temp=Select[parameters,(FreeQ[#,flavor]\[Equal]False)&];
      For[i=1,i\[LessEqual]Length[temp],
        subFA = Join[subFA,{temp[[i,1]][a__][b__]\[Rule]temp[[i,1]][a,b]}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[parameters],
        If[FreeQ[parameters[[i]],{generation,flavor,flavor}]\[Equal]False,
          
          subFA = Join[
                subFA,{parameters[[i,1]][a_][b_,c_]\[Rule]parameters[[i,1]][a,
                      b,c]}];
          ];
        i++;];
      
      ];

FAIndizes[x_,add_]:=Block[{ind},
      ind=DeleteCases[getIndizes[x],lorentz,2];
      
      If[FreeQ[ind,generation]\[Equal]False || 
          FreeQ[ind,flavor]\[Equal]False,
        ind = 
          ind //. {generation\[Rule] ToExpression["I"<>ToString[x]<>"Gen"],
                flavor\[Rule] ToExpression["Flavor"<>ToString[x]], 
                color\[Rule]Colour} /. {ToExpression[
                  "I"<>ToString[Gluino]<>"Gen"]\[Rule] Gluon, 
              ToExpression["I"<>ToString[VG]<>"Gen"]\[Rule] Gluon,
              ToExpression["I"<>ToString[getGhost[VectorG]]<>"Gen"]\[Rule] 
                Gluon };
        If[add\[Equal]True,
          
          If[(getType[x]===V) || (getType[x]===G) || 
                FreeQ[Gauginos,getBlank[x]]\[Equal]False,
              
              FAindices=
                  Join[FAindices,{{ToExpression["I"<>ToString[x]<>"Gen"],
                        getGen[x],False, alphaIndex}}];,
              If[getGen[x]>1,
                
                FAindices=
                  Join[FAindices,{{ToExpression["I"<>ToString[x]<>"Gen"],
                        getGen[x],True, alphaIndex}}];
                
                subGenInd =
                  Join[subGenInd ,{ToExpression["I"<>ToString[x]<>"Gen"]->
                        ToExpression["I"<>ToString[getGen[x]]<>"Gen"]}];
                ];
              If[getFla[x]>1,
                
                FAindices=
                  Join[FAindices,{{ToExpression["Flavor"<>ToString[x]],
                        getFla[x],True, alphaIndex}}];
                
                subGenInd =
                  Join[subGenInd ,{ToExpression["Flavor"<>ToString[x]]->
                        ToExpression["Flavor"<>ToString[getFla[x]]]}];
                ];
              ];
          ];
        ];
      Return[Map[Index,ind /. color\[Rule]Colour /. subGenInd]];
      ];

FALabel[x_]:=Block[{i,tex,basis,ind,res},
      tex=TeXName[x];
      basis=StringReplace[tex,subStringFA];
      If[basis===tex,
        If[Length[getIndizes[x]]\[Equal]0,
            Return[ToExpression["\""<>basis<>"\""]];,
            ind=FAIndizes[x,False] /. subGenInd;
            If[Length[ind]>2,ind=Take[ind,{1,2}];];
            res ="ComposedChar[\""<>basis<>"\"";
            For[i=1,i\[LessEqual]Length[ind],
              res = res <>","<>ToString[ind[[i]]];
              i++;];
            Return[StringReplace[res<>"]",{"{"->"","}"->"","\\"->"\\\\"}]];
            ];,
        ind=FAIndizes[x,False];
        If[Length[ind]>2,ind=Take[ind,{1,2}];];
        res ="ComposedChar[\""<>basis<>"\"";
        For[i=1,i\[LessEqual]Length[ind],
          res = res <>","<>ToString[ind[[i]]];
          i++;];
        
        If[StringFreeQ[tex,"^"]\[Equal]False,
          exp=StringReplace[tex,stringExpExtract];
          If[exp=="", exp="Null";];
          res=res<>",\""<>exp <>"\"";
          ];
        
        If[StringFreeQ[tex,"_"]\[Equal]False,
          index=StringReplace[tex,stringIndexExtract];
          If[index=="", index="Null";];
          res=res<>",\""<>index <>"\"";
          ];
        
        If[StringFreeQ[tex,"tilde"]\[Equal]False,
          res=res<>",\"\\tilde\"";
          ];
        Return[StringReplace[res<>"]",{"{"->"","}"->"","\\"->"\\\\"}]];
        ];
      ];

FAMass[x_]:=Block[{},
      Clear[gen];
      If[Length[
            DeleteCases[DeleteCases[getIndizes[x],generation,2],lorentz,2]]>
          0,
        Switch[
            Length[DeleteCases[DeleteCases[getIndizes[x],generation,2],
                lorentz,2]],
            1,
            
            MassRules = 
                Join[MassRules,{{ToExpression["Mass"<>ToString[x]][gen_,y_],
                      ToExpression["Mass"<>ToString[x]][gen]}}];,
            2,
            
            MassRules = 
                Join[MassRules,{{ToExpression["Mass"<>ToString[x]][gen_,y_,
                        z_],ToExpression["Mass"<>ToString[x]][gen]}}];,
            3,
            
            MassRules = 
                Join[MassRules,{{ToExpression["Mass"<>ToString[x]][gen_,y_,z_,
                        w_],ToExpression["Mass"<>ToString[x]][gen]}}];
            ];
        ];
      
      ListofAllMasses =
        Join[ListofAllMasses,{ToExpression["Mass"<>ToString[x]]}];
      Return[ToExpression["Mass"<>ToString[x]]];
      ];

FAArrow[x_]:=Block[{},
      If[getType[x]===F,
          If[MemberQ[MajoranaPart,x],Return[None];,Return[Forward];];,
          If[MemberQ[realVar,x],Return[None];,Return[Forward];];
          ];
      ];

FANumber[x_]:=Block[{pos,tempNr, FAnr},
      pos = Position[partDefinition,x];
      
      If[pos==={} ,
        Message[FeynArts::NoNumber,x];
        FAnr = Automatic;,
        FAnr= FeynArtsNr /.Extract[partDefinition,pos[[1,1]]][[2]];
        ];
      
      If[(FAnr===FeynArtsNr) || (FAnr ===Automatic),
        If[FAnr===FeynArtsNr,Message[FeynArts::NoNumber,x];];
        FAnr = AutoFAnr;
        While[FreeQ[forbiddenFAnr,FAnr]\[Equal]False,
          FAnr++;];
        AutoFAnr=FAnr+1;
        ];
      
      Set[FeynArtsNr[x],FAnr];
      
      Return[FAnr];
      ];

CreateClassesFA[FeynRules_]:=Block[{i,k,j,temp},
      
      
      dummyPDG = 5000;
      Print["Create Class Output"];
      
      M$ClassesDescription={};
      
      (* subFA=
            Join[subFA,{conj[part_]\[Rule]-part, 
                bar[part_]\[Rule]-part}]; *)
      
      subFAFields = {conj[part_]\[Rule]-part, bar[part_]\[Rule]-part};
      
      outputfile = 
        OpenWrite[
          ToFileName[$sarahCurrentFeynArtsDir,"ParticleNamesFeynArts.dat"]];
      
      WriteString[outputfile,
        "Names of Particles in SARAH and FeynArts for Model-file"<>modelName <>
          ".mod"];
      
      WriteString[outputfile,"\n \n"];
      WriteString[outputfile,"Scalars: \n \n"];
      
      indexS=1;
      
      AutoFAnr = 1;
      forbiddenFAnr={};
      For[i=1,i\[LessEqual]Length[partDefinition],
        If[getType[partDefinition[[i,1]]]===S,
          
          forbiddenFAnr=
              Join[forbiddenFAnr,{FeynArtsNr /. partDefinition[[i,2]]}];
          ];
        i++;];
      
      If[Length[forbiddenFAnr]=!=Length[Intersection[forbiddenFAnr]],
        Message[FeynArts::NumberDefinedTwiceS,
            Intersection[Select[forbiddenFAnr,(Count[forbiddenFAnr,#]>1)&]]];
        ];
      
      For[i=1,i\[LessEqual]Length[PART[S]],
        faNr=FANumber[PART[S][[i,1]]];
        If[FeynRules\[Equal]False,
          M$ClassesDescription=Join[M$ClassesDescription,
                {S[faNr]\[Equal] { 
                      SelfConjugate \[Rule] 
                        TrueQ[conj[PART[S][[i,1]]]===PART[S][[i,1]]],
                                      
                      Indices \[Rule] FAIndizes[PART[S][[i,1]],True],
                                       Mass \[Rule] FAMass[PART[S][[i,1]]],
                                       
                      PropagatorLabel\[Rule] FALabel[PART[S][[i,1]]],
                                       PropagatorType\[Rule] ScalarDash,
                                       
                      PropagatorArrow \[Rule]FAArrow[PART[S][[i,1]]]
                      }}];,
          
          temp=
            {S[faNr]\[Equal] {
                  		Classname \[Rule]  PART[S][[i,1]],
                  		
                  ClassMember \[Rule] 
                    Table[getOutputName[PART[S][[i,1]],k],{k,1,
                        PART[S][[i,2]]}],
                  		
                  SelfConjugate \[Rule] 
                    TrueQ[conj[PART[S][[i,1]]]===PART[S][[i,1]]],
                  		Indices \[Rule] FAIndizes[PART[S][[i,1]],True],
                  		
                  FlavorIndex \[Rule] 
                    ToExpression["I"<>ToString[PART[S][[i,1]]<>"Gen"]],
                                     
                  Mass \[Rule] 
                    Table[getMass[PART[S][[i,1]],k],{k,1,PART[S][[i,2]]}],
                  		
                  Width \[Rule] 
                    Table[getWidth[PART[S][[i,1]],k],{k,1,PART[S][[i,2]]}],
                  		
                  ParticleName \[Rule] 
                    Table[ToString[PART[S][[i,1]]]<>ToString[k],{k,1,
                        PART[S][[i,2]]}],
                  		
                  AntiParticleName \[Rule] 
                    Table["c"<>ToString[PART[S][[i,1]]]<>ToString[k],{k,1,
                        PART[S][[i,2]]}],
                  		
                  PDG \[Rule] 
                      getPDGList[PART[S][[i,1]]] /. {0\[Rule] dummyPDG++},
                  		
                  PropagatorLabel\[Rule]  
                    Flatten[{ToString[PART[S][[i,1]]],
                        Table[ToString[PART[S][[i,1]]]<>ToString[k],{k,1,
                            PART[S][[i,2]]}]}],
                  		PropagatorType\[Rule] ScalarDash,
                  		PropagatorArrow \[Rule]FAArrow[PART[S][[i,1]]]
                  }};
          
          
          If[ TrueQ[conj[PART[S][[i,1]]]===PART[S][[i,1]]],
            temp=DeleteCases[temp,AntiParticleName\[Rule]a_,5];,
            
            subPartFR= 
              Join[subPartFR,{conj[PART[S][[i,1]]]\[Rule] 
                    ToExpression["c"<>ToString[PART[S][[i,1]]]]}];
            
            If[getGenOne[PART[S][[i,1]]]>1,
              For[j=1,j\[LessEqual]getGenOne[PART[S][[i,1]]],
                  
                  subPartWH = 
                    Join[subPartWH,{conj[PART[S][[i,1]][{j,a___}]]\[Rule]
                          ToExpression[
                            "c"<>ToString[PART[S][[i,1]]]<>ToString[j]] }];
                  j++;];,
              
              subPartWH = 
                  Join[subPartWH,{conj[PART[S][[i,1]][{a___}]]\[Rule]
                        ToExpression["c"<>ToString[PART[S][[i,1]]]] }];
              ];
            
            ];
           M$ClassesDescription=Join[M$ClassesDescription,temp];
          
          
          If[getGenOne[PART[S][[i,1]]]>1,
            For[j=1,j\[LessEqual]getGenOne[PART[S][[i,1]]],
                
                subPartWH = 
                  Join[subPartWH,{PART[S][[i,1]][{j,a___}]\[Rule]ToExpression[
                          ToString[PART[S][[i,1]]]<>ToString[j]] }];
                j++;];,
            
            subPartWH = 
                Join[subPartWH,{PART[S][[i,1]][{a___}]\[Rule]ToExpression[
                        ToString[PART[S][[i,1]]]] }];
            ];
          
          
          ];
        
        
        WriteString[outputfile,
          ToString[PART[S][[i,1]]]<>": S[" <>ToString[faNr]<>"] \n"];
        
        If[Length[getIndizes[PART[S][[i,1]]]]>0,
          
          subFA=Join[
                subFA,{PART[S][[i,1]][
                      Flatten[
                        Table[{ToExpression["a"<>ToString[j]<>"_"]},{j,1,
                            Length[getIndizes[PART[S][[i,1]]]]}]]]\[Rule]S[
                      faNr,Flatten[
                        Table[{ToExpression["a"<>ToString[j]]},{j,1,
                            Length[getIndizes[PART[S][[i,1]]]]}]]]}];,
          subFA=Join[subFA,{PART[S][[i,1]]\[Rule]S[faNr]}];
          ];
        indexS++;
        i++;
        ];
      
      WriteString[outputfile,"\n \n"];
      WriteString[outputfile,"Fermions: \n \n"];
      
      
      indexF=1;
      
      forbiddenFAnr = {};
      AutoFAnr = 1;
      For[i=1,i\[LessEqual]Length[partDefinition],
        If[getType[partDefinition[[i,1]]]===F,
          
          forbiddenFAnr=
              Join[forbiddenFAnr,{FeynArtsNr /. partDefinition[[i,2]]}];
          ];
        i++;];
      
      If[Length[forbiddenFAnr]=!=Length[Intersection[forbiddenFAnr]],
        Message[FeynArts::NumberDefinedTwiceF,
            Intersection[Select[forbiddenFAnr,(Count[forbiddenFAnr,#]>1)&]]];
        ];
      
      For[i=1,i\[LessEqual]Length[PART[F]],
        faNr=FANumber[PART[F][[i,1]]];
        If[FeynRules\[Equal]False,
          M$ClassesDescription=Join[M$ClassesDescription,
                {F[faNr]\[Equal] { 
                      		
                      SelfConjugate \[Rule] 
                        MemberQ[MajoranaPart,PART[F][[i,1]]],
                                      
                      Indices \[Rule] FAIndizes[PART[F][[i,1]],True],
                                       Mass \[Rule] FAMass[PART[F][[i,1]]],
                                       
                      PropagatorLabel\[Rule] FALabel[PART[F][[i,1]]],
                                       PropagatorType\[Rule] Straight,
                                       
                      PropagatorArrow \[Rule] FAArrow[PART[F][[i,1]]]
                      }}];,
          If[FreeQ[Gauginos,PART[F][[i,1]]]\[Equal]False,
            temp=
                {F[faNr]\[Equal] { 
                      		Classname \[Rule]  PART[F][[i,1]],
                      		SelfConjugate \[Rule]True,
                      		Indices \[Rule] FAIndizes[PART[F][[i,1]],True],
                      		
                      Mass \[Rule] 
                        ToExpression["M"<>ToString[PART[F][[i,1]]]],
                      		
                      Width \[Rule] 
                        ToExpression["W"<>ToString[PART[F][[i,1]]]],
                      		ParticleName \[Rule] ToString[PART[F][[i,1]]],
                      		
                      PDG \[Rule] 
                          getPDGList[PART[F][[i,1]]] /. {0\[Rule] 
                            dummyPDG++},
                      		PropagatorLabel\[Rule]ToString[PART[F][[i,1]]],
                      		PropagatorType\[Rule] Straight,
                      		PropagatorArrow \[Rule]FAArrow[PART[F][[i,1]]]
                      }};,
            
            temp=
                {F[faNr]\[Equal] { 
                      		Classname \[Rule]  PART[F][[i,1]],
                      		
                      ClassMember \[Rule] 
                        Table[ToExpression[
                            ToString[PART[F][[i,1]]]<>ToString[k]],{k,1,
                            PART[F][[i,2]]}],
                      		
                      SelfConjugate \[Rule] 
                        MemberQ[MajoranaPart,PART[F][[i,1]]],
                      		Indices \[Rule] FAIndizes[PART[F][[i,1]],True],
                      		
                      FlavorIndex \[Rule] 
                        ToExpression["I"<>ToString[PART[F][[i,1]]]<>"Gen"],
                                         
                      Mass \[Rule] 
                        Table[ToExpression[
                            "M"<>ToString[PART[F][[i,1]]]<>ToString[k]],{k,1,
                            PART[F][[i,2]]}],
                      		
                      Width \[Rule] 
                        Table[ToExpression[
                            "W"<>ToString[PART[F][[i,1]]]<>ToString[k]],{k,1,
                            PART[F][[i,2]]}],
                      		
                      ParticleName \[Rule] 
                        Table[ToString[PART[F][[i,1]]]<>ToString[k],{k,1,
                            PART[F][[i,2]]}],
                      		
                      AntiParticleName \[Rule] 
                        Table["b"<>ToString[PART[F][[i,1]]]<>ToString[k],{k,1,
                            PART[F][[i,2]]}],
                      		PDG \[Rule] getPDGList[PART[F][[i,1]]],
                      		
                      PropagatorLabel\[Rule] 
                        Flatten[{ToString[PART[F][[i,1]]],
                            Table[ToString[PART[F][[i,1]]]<>ToString[k],{k,1,
                                PART[F][[i,2]]}]}],
                      		PropagatorType\[Rule] Straight,
                      		PropagatorArrow \[Rule]FAArrow[PART[F][[i,1]]]
                      }};
            ];
          
          For[j=1,j\[LessEqual]getGenOne[PART[F][[i,1]]],
            
            subPartWH = 
              Join[subPartWH,{PART[F][[i,1]][{j,a___}]\[Rule]ToExpression[
                      ToString[PART[F][[i,1]]]<>ToString[j]] }];
            j++;];
          
          
          If[ MemberQ[MajoranaPart,PART[F][[i,1]]],
            temp=DeleteCases[temp,AntiParticleName\[Rule]a_,5];,
            subPartFR= 
              Join[subPartFR,{bar[PART[F][[i,1]]]\[Rule] 
                    ToExpression[ToString[PART[F][[i,1]]]<>"bar"]}];
            
            If[getGenOne[PART[F][[i,1]]]>1,
              For[j=1,j\[LessEqual]getGenOne[PART[F][[i,1]]],
                  
                  subPartWH = 
                    Join[subPartWH,{bar[PART[F][[i,1]][{j,a___}]]\[Rule]
                          ToExpression[
                            ToString[PART[F][[i,1]]]<>ToString[j]<>"bar"] }];
                  j++;];,
              
              subPartWH = 
                  Join[subPartWH,{bar[PART[F][[i,1]][{a___}]]\[Rule]
                        ToExpression[ToString[PART[F][[i,1]]]] }];
              ];
            
            ];
           M$ClassesDescription=Join[M$ClassesDescription,temp];
          
          If[getGenOne[PART[F][[i,1]]]>1,
            For[j=1,j\[LessEqual]getGenOne[PART[F][[i,1]]],
                
                subPartWH = 
                  Join[subPartWH,{PART[F][[i,1]][{j,a___}]\[Rule]
                        ToExpression[
                          ToString[PART[F][[i,1]]]<>ToString[j]] }];
                j++;];,
            
            subPartWH = 
                Join[subPartWH,{PART[F][[i,1]][{a___}]\[Rule]
                      ToExpression[ToString[PART[F][[i,1]]]] }];
            ];
          
          
          ];
        
        
        
        
        WriteString[outputfile,
          ToString[PART[F][[i,1]]]<>": F[" <>ToString[faNr]<>"] \n"];
        
        If[Length[getIndizes[PART[F][[i,1]]]]>0,
          
          subFA=Join[
                subFA,{PART[F][[i,1]][
                      Flatten[
                        Table[{ToExpression["a"<>ToString[j]<>"_"]},{j,1,
                            Length[getIndizes[PART[F][[i,1]]]]}]]]\[Rule]F[
                      faNr,Flatten[
                        Table[{ToExpression["a"<>ToString[j]]},{j,1,
                            Length[getIndizes[PART[F][[i,1]]]]}]]]}];,
          subFA=Join[subFA,{PART[F][[i,1]]\[Rule]F[faNr]}];
          ];
        indexF++;
        i++;
        ];
      
      WriteString[outputfile,"\n \n"];
      WriteString[outputfile,"Vector Bosons: \n \n"];
      
      indexV=1;
      
      forbiddenFAnr = {};
      AutoFAnr = 1;
      For[i=1,i\[LessEqual]Length[partDefinition],
        If[getType[partDefinition[[i,1]]]===V,
          forbiddenFAnr=
              Join[forbiddenFAnr,{FeynArtsNr /. partDefinition[[i,2]]}];
          ];
        i++;];
      
      If[Length[forbiddenFAnr]=!=Length[Intersection[forbiddenFAnr]],
        Message[FeynArts::NumberDefinedTwiceV,
            Intersection[Select[forbiddenFAnr,(Count[forbiddenFAnr,#]>1)&]]];
        ];
      
      
      For[i=1,i\[LessEqual]Length[PART[V]],
        faNr=FANumber[PART[V][[i,1]]];
        
        If[Simplify[Mass[PART[V][[i,1]]] /. massList /. subDependences]===0,
          massCurrent=0;
          widthCurrent=0;,
          massCurrent = FAMass[PART[V][[i,1]]];
          widthCurrent = ToExpression["W"<>ToString[PART[V][[i,1]]]];
          ];
        
        subFA=Join[subFA,{Mass[PART[V][[i,1]]]\[Rule] massCurrent}];
        
        If[FeynRules\[Equal]False,
          M$ClassesDescription=Join[M$ClassesDescription,
                {V[faNr]\[Equal] { 
                      SelfConjugate \[Rule] 
                        TrueQ[conj[PART[V][[i,1]]]===PART[V][[i,1]]],
                                      
                      Indices \[Rule] FAIndizes[PART[V][[i,1]],True],
                                       Mass \[Rule] massCurrent,
                                       
                      PropagatorLabel\[Rule] FALabel[PART[V][[i,1]]],
                                       PropagatorType\[Rule] Sine,
                                       
                      PropagatorArrow \[Rule]FAArrow[PART[V][[i,1]]]
                      }}];,
          temp=
            {V[faNr]\[Equal] { 
                  		Classname \[Rule]  PART[V][[i,1]],
                  		
                  SelfConjugate \[Rule] 
                    TrueQ[conj[PART[V][[i,1]]]===PART[V][[i,1]]],
                  	         Indices \[Rule] FAIndizes[PART[V][[i,1]],True],
                        	    Mass \[Rule]massCurrent,
                  		Width \[Rule] widthCurrent,
                  		ParticleName \[Rule]ToString[PART[V][[i,1]]],
                  		AntiParticleName \[Rule]"c"<>ToString[PART[V][[i,1]]],
                  		
                  PDG \[Rule] 
                      getPDGList[PART[V][[i,1]]]/. {0\[Rule] dummyPDG++},
                  		PropagatorLabel\[Rule] FALabel[PART[V][[i,1]]],
                  	         PropagatorType\[Rule] Sine,
                                    
                  PropagatorArrow \[Rule]FAArrow[PART[V][[i,1]]]
                  }};
          
          
          
          If[ TrueQ[conj[PART[V][[i,1]]]===PART[V][[i,1]]],
            temp=DeleteCases[temp,AntiParticleName\[Rule]a_,5];,
            
            subPartFR= 
              Join[subPartFR,{conj[PART[V][[i,1]]]\[Rule] 
                    ToExpression["c"<>ToString[PART[V][[i,1]]]]}];
            
            If[getGenOne[PART[V][[i,1]]]>1,
              For[j=1,j\[LessEqual]getGenOne[PART[V][[i,1]]],
                  
                  subPartWH = 
                    Join[subPartWH,{conj[PART[V][[i,1]][{j,a___}]]\[Rule]
                          ToExpression[
                            "c"<>ToString[PART[V][[i,1]]]<>ToString[j]] }];
                  j++;];,
              
              subPartWH = 
                  Join[subPartWH,{conj[PART[V][[i,1]][{a___}]]\[Rule]
                        ToExpression["c"<>ToString[PART[V][[i,1]]]] }];
              ];
            
            ];
          
          If[getGenOne[PART[V][[i,1]]]>1,
            For[j=1,j\[LessEqual]getGenOne[PART[V][[i,1]]],
                
                subPartWH = 
                  Join[subPartWH,{PART[V][[i,1]][{j,a___}]\[Rule]
                        ToExpression[
                          ToString[PART[V][[i,1]]]<>ToString[j]] }];
                j++;];,
            
            subPartWH = 
                Join[subPartWH,{PART[V][[i,1]][{a___}]\[Rule]
                      PART[V][[i,1]]}];
            ];
          
           M$ClassesDescription=Join[M$ClassesDescription,temp];
          
          ];
        
        
        
        
        
        WriteString[outputfile,
          ToString[PART[V][[i,1]]]<>": V[" <>ToString[faNr]<>"] \n"];
        
        If[Length[getIndizes[PART[V][[i,1]]]]>1,
          
          subFA=Join[
                subFA,{PART[V][[i,1]][
                      Flatten[
                        Table[{ToExpression["a"<>ToString[j]<>"_"]},{j,1,
                            Length[getIndizes[PART[V][[i,1]]]]}]]]\[Rule]V[
                      faNr,Flatten[
                        Table[{ToExpression["a"<>ToString[j]]},{j,1,
                            Length[getIndizes[PART[V][[i,1]]]]-1}]]]}];,
          subFA=Join[subFA,{PART[V][[i,1]][{lor_}]\[Rule]V[faNr]}];
          ];
        indexV++;
        i++;
        ];
      
      WriteString[outputfile,"\n \n"];
      WriteString[outputfile,"Ghosts: \n \n"];
      
      
      
      indexU=1;
      
      forbiddenFAnr = {};
      AutoFAnr = 1;
      For[i=1,i\[LessEqual]Length[partDefinition],
        If[getType[partDefinition[[i,1]]]===G,
          
          forbiddenFAnr=
              Join[forbiddenFAnr,{FeynArtsNr /. partDefinition[[i,2]]}];
          ];
        i++;];
      
      If[Length[forbiddenFAnr]=!=Length[Intersection[forbiddenFAnr]],
        Message[FeynArts::NumberDefinedTwiceG,
            Intersection[Select[forbiddenFAnr,(Count[forbiddenFAnr,#]>1)&]]];
        ];
      
      For[i=1,i\[LessEqual]Length[PART[G]],
        If[
          Simplify[
              Mass[getVectorBoson[PART[G][[i,1]]]] /. massList /. 
                subDependences]===0,
          massCurrent=0;
          widthCurrent=0;,
          
          massCurrent = 
            ToExpression["Mass"<>ToString[getVectorBoson[PART[G][[i,1]]]]];
          
          widthCurrent = 
            ToExpression["W"<>ToString[getVectorBoson[PART[G][[i,1]]]]];
          ];
        
        
        faNr=FANumber[PART[G][[i,1]]];
        
        If[FeynRules\[Equal]False,
          M$ClassesDescription=Join[M$ClassesDescription,
                {U[faNr]\[Equal] { SelfConjugate \[Rule] False,
                                      
                      Indices \[Rule] FAIndizes[PART[G][[i,1]],True],
                                       Mass \[Rule] massCurrent,
                                       
                      PropagatorLabel\[Rule] FALabel[PART[G][[i,1]]],
                                       PropagatorType\[Rule] GhostDash,
                                       PropagatorArrow \[Rule] Forward
                      }}];,
          (*
            	
            M$ClassesDescription=Join[M$ClassesDescription,
                  {U[faNr]\[Equal] { 
                        		Classname \[Rule]  PART[G][[i,1]],
                        		SelfConjugate \[Rule] False,
                        		Indices \[Rule] FAIndizes[PART[G][[i,1]],True],
                                           Mass \[Rule] massCurrent,
                                           Width \[Rule] widthCurrent,
                        		ParticleName \[Rule]ToString[PART[G][[i,1]]],
                        		
                        AntiParticleName \[Rule]
                          "b"<>ToString[PART[G][[i,1]]],
                        		PDG \[Rule]0 /. {0\[Rule] dummyPDG++},
                                           
                        PropagatorLabel\[Rule] FALabel[PART[G][[i,1]]] ,
                                           PropagatorType\[Rule] GhostDash,
                                           PropagatorArrow \[Rule] Forward
                        }}]; *)
          
          
          subPartFR= 
              Join[subPartFR,{bar[PART[G][[i,1]]]\[Rule] 
                    ToExpression[ToString[PART[G][[i,1]]]<>"bar"]}];
          ];
        
        WriteString[outputfile,
          ToString[PART[G][[i,1]]]<>": U[" <>ToString[faNr]<>"] \n"];
        
        If[Length[getIndizes[PART[G][[i,1]]]]>0,
          
          subFA=Join[
                subFA,{PART[G][[i,1]][
                      Flatten[
                        Table[{ToExpression["a"<>ToString[j]<>"_"]},{j,1,
                            Length[getIndizes[PART[G][[i,1]]]]}]]]\[Rule]
                    U[faNr,Flatten[
                        Table[{ToExpression["a"<>ToString[j]]},{j,1,
                            Length[getIndizes[PART[G][[i,1]]]]}]]]}];,
          subFA=Join[subFA,{PART[G][[i,1]]\[Rule]U[faNr]}];
          ];
        indexU++;
        i++;
        ];
      
      Close[outputfile];
      
       M$ClassesDescription=M$ClassesDescription/. subGenInd;
      
      ];


FeynArtsVertices:=Block[{i,j},
      
      Print["Create Coupling Output"];
      
      M$CouplingMatrices={};
      
      VList1=
        Join[SA`VertexList[SSS],SA`VertexList[SSV], SA`VertexList[SVV],
            SA`VertexList[SSSS], SA`VertexList[VVV]] //. subFA;
      
      VList2 = Join[SA`VertexList[FFS],SA`VertexList[FFV]] //. subFA;
      
      
      
      (* SA`VertexList[VVVV] *)
      
      For[i=1,i\[LessEqual]Length[SA`VertexList[VVVV]],
        M$CouplingMatrices=
          Join[M$CouplingMatrices,{C[
                  SA`VertexList[VVVV][[i,1]]//.subFA //. 
                    subFAFields]\[Equal]{{SA`VertexList[VVVV][[i,2,
                          1]] //.subFA},{SA`VertexList[VVVV][[i,3,
                          1]]//.subFA},{SA`VertexList[VVVV][[i,4,
                          1]]//.subFA}}}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[SA`VertexList[SSVV]],
        M$CouplingMatrices=
          Join[M$CouplingMatrices,{C[{SA`VertexList[SSVV][[i,1,1]],
                        SA`VertexList[SSVV][[i,1,3]],
                        SA`VertexList[SSVV][[i,1,2]],
                        SA`VertexList[SSVV][[i,1,4]]}//.subFA //. 
                    subFAFields]\[Equal]{{SA`VertexList[SSVV][[i,2,
                          1]]//.subFA}}}];
        i++;];
      
      For[i=1,i\[LessEqual]Length[VList2],
        M$CouplingMatrices=
          Join[M$CouplingMatrices,{C[
                  VList2[[i,1]]//.subFA //. 
                    subFAFields]\[Equal]{{VList2[[i,2,1]]},{VList2[[i,3,
                        1]]}}}];
        i++;];
      
      
      For[j=1,j\[LessEqual]Length[VList1],
        M$CouplingMatrices=
          Join[M$CouplingMatrices,{C[
                  VList1[[j,1]]//.subFA //. 
                    subFAFields]\[Equal]{{VList1[[j,2,1]]}}}];
        j++;];
      
      For[j=1,j\[LessEqual]Length[SA`VertexList[GGS]],
        M$CouplingMatrices=
          Join[M$CouplingMatrices,{C[{SA`VertexList[GGS][[j,1,3]],
                        SA`VertexList[GGS][[j,1,1]],
                        SA`VertexList[GGS][[j,1,2]]}//.subFA //. 
                    subFAFields]\[Equal]{{(SA`VertexList[GGS][[j,2,1]] //. 
                        subFA)}}}];
        j++;];
      
      For[i=1,i\[LessEqual]Length[SA`VertexList[GGV]],
        M$CouplingMatrices=
          Join[M$CouplingMatrices,{C[
                  SA`VertexList[GGV][[i,1]]//.subFA //. 
                    subFAFields]\[Equal]{{SA`VertexList[GGV][[i,2,
                          1]] //.subFA},{0}}}];
        i++;];
      
      
      M$CouplingMatrices=
        M$CouplingMatrices //. 
                      C[{a_,b_,c_}]\[Rule]C[a,b,c] /.C[{a_,b_,c_,d_}]\[Rule]
                      C[a,b,c,d] /.Delta[a_,b_]\[Rule]IndexDelta[a,b] /.conj[
                    a_]\[Rule] Conjugate[a] /.RXi[a_] \[Rule]GaugeXi[a] //. 
            subGreek /. subGreek;
      
      
      (* While[FreeQ[M$CouplingMatrices,sum]\[Equal]False,
            
            M$CouplingMatrices=
                M$CouplingMatrices /.sum[a_,b_,c_,d_]\[Rule]IndexSum[
                      d,{a,c}];
            ]; *)
      
      
      While[FreeQ[M$CouplingMatrices,sum]\[Equal]False,
        M$CouplingMatrices=
            ReleaseHold[
              M$CouplingMatrices /.sum[a_,b_,c_,d_]\[Rule]Hold[
                    Sum[d,{a,c}]]];
        ];
      
      
      ];


WriteModelFA:= Block[{},
      
      Print["Write Model-File"];
      
      outputfile = 
        OpenWrite[
          ToFileName[$sarahCurrentFeynArtsDir,
            ToString[Modelname]<>modelName<>".mod"]];
      
      abbrfile = 
        OpenWrite[
          ToFileName[$sarahCurrentFeynArtsDir,
            "Substitutions-"<>ToString[Modelname]<>modelName<>".m"]];
      
      (* ---- Write Index Ranges ---- *)
      
      FAindices = 
        Intersection[
          FAindices/. {generation\[Rule] 
                        ToExpression["I"<>ToString[x]<>"Gen"], 
                      color\[Rule]Colour} /. 
                  ToExpression["I"<>ToString[Gluino]<>"Gen"]\[Rule] Gluon /. 
                ToExpression["I"<>ToString[VG]<>"Gen"]\[Rule] Gluon  /. 
              ToExpression["I"<>ToString[getGhost[VectorG]]<>"Gen"]\[Rule] 
                Gluon //. subGenInd  ];
      
      For[i=1,i\[LessEqual] Length[FAindices],
        WriteString[outputfile,
          "IndexRange[  Index["<>ToString[FAindices[[i,1]]] <>"]  ] ="];
        If[FAindices[[i,3]]\[Equal]True,
           
          WriteString[outputfile,
              "Range["<>ToString[FAindices[[i,2]]]<>"]; \n"];,
          
          WriteString[outputfile,
              "NoUnfold[Range["<>ToString[FAindices[[i,2]]]<>"]]; \n"];
          ];
        
        If[FAindices[[i,4]]===greekIndex,
          
          WriteString[outputfile,
              "IndexStyle[  Index["<>ToString[FAindices[[i,1]]] <>
                ", i_Integer ] ] := Greek[i];  \n"];,
          
          WriteString[outputfile,
              "IndexStyle[  Index["<>ToString[FAindices[[i,1]]] <>
                ", i_Integer ] ] := Alph[ 8+i];  \n"];
          ];
        
        i++;];
      WriteString[outputfile, "\n \n"];
      
      (* ---------- Write Trigonometric ------------ *)
      
      WriteString[outputfile,
        "(* Definitions for trigonometric functions  \n"];
      For[i=1,i\[LessEqual]Length[TrigRepFA],
        WriteString[outputfile,
          ToString[InputForm[TrigRepFA[[i,1]]]]<>": "<> 
            ToString[InputForm[TrigRepFA[[i,2]]]] <>"\n"];
        i++;];
      WriteString[outputfile,"*) \n \n"];
      
      For[i=1,i\[LessEqual]Length[TrigRepFA],
        If[Head[TrigRepFA[[i,2]]]===Power,
          
          WriteString[outputfile,
              "Conjugate["<>ToString[InputForm[TrigRepFA[[i,2,1]]]]<>"] ^= "<> 
                ToString[InputForm[TrigRepFA[[i,2,1]]]] <>"\n"];,
          
          WriteString[outputfile,
              "Conjugate["<>ToString[InputForm[TrigRepFA[[i,2]]]]<>"] ^= "<> 
                ToString[InputForm[TrigRepFA[[i,2]]]] <>"\n"];
          ];
        i++;];
      
      WriteString[outputfile," \n \n"];
      
      
      (* ---------- Write Definitions ------------ *)
      
      WriteString[outputfile,"Lam[a_,b_,c_]:=2*SUNT[a,b,c]; \n"];
      WriteString[outputfile,"fSU3[a_,b_,c_]:=SUNF[a,b,c]; \n"];
      WriteString[outputfile,
        "LambdaProd[a_,b_][c_,d_]:=4*SUNT[a,b,c,d]; \n \n \n"];
      
      
      
      
      (* ----- Write Class Descriptions ---- *)
      
      WriteString[outputfile,"M$ClassesDescription= {\n"];
      For[i=1,i\[LessEqual] Length[M$ClassesDescription],
        WriteString[outputfile, 
          ToString[InputForm[M$ClassesDescription[[i,1]]]]<>" == {"];
        For[j=1,j\[LessEqual]6,
          If[j\[Equal]4,
            
            WriteString[outputfile, 
                  ToString[InputForm[M$ClassesDescription[[i,2,j,1]]]] <>
                    "->" <> M$ClassesDescription[[i,2,j,2]]];
              ;,
            
            WriteString[outputfile, 
                ToString[InputForm[M$ClassesDescription[[i,2,j]]]]];
            ];
          
          If[j\[Equal]6,WriteString[outputfile,"}"];,
            WriteString[outputfile,",\n"];];
          j++;];
        If[i\[NotEqual] Length[M$ClassesDescription],
          WriteString[outputfile,",\n"];];
        WriteString[outputfile,"\n \n"];
        i++;];
      WriteString[outputfile,"}\n"];
      WriteString[outputfile, "\n \n"];
      
      
      (* ---- Write Masses ---- *)
      
      For[i=1,i\[LessEqual]Length[MassRules],
        WriteString[outputfile, 
          ToString[InputForm[MassRules[[i,1]]]]<>" = "];
        WriteString[outputfile, ToString[InputForm[MassRules[[i,2]]]]<>"\n"];
        i++;
        ];
      WriteString[outputfile,"\n\n"];
      
      For[i=1,i\[LessEqual]Length[PART[S]],
        If[FreeQ[GoldstoneBosons[InitalizedVertexCalculaton],PART[S][[i,1]]],
          
          WriteString[outputfile,
              "GaugeXi[S["<>ToString[FeynArtsNr[PART[S][[i,1]]]]<>
                ",___]] = 1 \n"];,
          
          WriteString[outputfile,
            "GaugeXi[S["<>ToString[FeynArtsNr[PART[S][[i,1]]]]<>
              ",{a_Integer}]] = 1 /; a > 1 \n"];
          
          WriteString[outputfile,
            "GaugeXi[S["<>ToString[FeynArtsNr[PART[S][[i,1]]]]<>",1]] = GaugeXi["<>
              ToString[
                Select[GoldstoneBosons[
                      InitalizedVertexCalculaton],(FreeQ[#,
                            PART[S][[i,1]]]\[Equal]False)&][[1,1]]] <>
              "] /; a > 1 \n"];
          ];
        i++;];
      WriteString[outputfile,"\n\n"];
      
      For[i=1,i\[LessEqual]Length[PART[V]],
        WriteString[outputfile,
          "GaugeXi[V["<>ToString[FeynArtsNr[PART[V][[i,1]]]]<>",___]] = GaugeXi["<>
            ToString[GaugeFixingFactor[PART[V][[i,1]]]]<>"]\n"];
        i++;];
      
      WriteString[outputfile,"\n\n"];
      
      
      (* ---- Write Couplings ---- *)
      
      WriteString[outputfile,"M$CouplingMatrices= {\n"];
      For[i=1,i<Length[M$CouplingMatrices],
        WriteString[outputfile, 
          ToString[InputForm[M$CouplingMatrices[[i]]]]<>",\n "];
        i++;];
      WriteString[outputfile, 
        ToString[InputForm[Last[M$CouplingMatrices]]]<>"\n "];
      WriteString[outputfile,"}\n"];
      WriteString[outputfile, "\n \n"];
      
      
      
      (* --------- FormCalc Abbreviations ------------ *)
      
      
      WriteString[abbrfile,
        "(* Special Abbreviations for FormCalc *) \n \n \n"];
      
      parametersFA = parameters /. subGreek;
      
      For[i=1,i\[LessEqual]Length[parametersFA],
        If[Head[parametersFA[[i,1]]]=!=A,
          If[MemberQ[realVar,parametersFA[[i,1]]]\[Equal]False,
            If[Length[parametersFA[[i,2]]]>0,
                
                WriteString[abbrfile,
                  "Conjugate["<>ToString[parametersFA[[i,1]]]<>"[a___]] ^= " <> 
                    ToString[parametersFA[[i,1]]]<>"C[a]; \n"];
                
                WriteString[abbrfile,
                  "Conjugate["<>ToString[parametersFA[[i,1]]]<>
                    "C[a___]] ^= " <> ToString[parametersFA[[i,1]]]<>
                    "[a]; \n"];,
                
                WriteString[abbrfile,
                  "Conjugate["<>ToString[parametersFA[[i,1]]]<>"] ^= " <> 
                    ToString[parametersFA[[i,1]]]<>"C; \n"];
                
                WriteString[abbrfile,
                  "Conjugate["<>ToString[parametersFA[[i,1]]]<>"C] ^= " <> 
                    ToString[parametersFA[[i,1]]]<>"; \n"];
                ];,
            If[Length[parametersFA[[i,2]]]>0,
                
                WriteString[outputfile,
                    "Conjugate["<>ToString[parametersFA[[i,1]]]<>
                      "[a___]] ^= " <> ToString[parametersFA[[i,1]]]<>
                      "[a]; \n"];,
                
                WriteString[outputfile,
                    "Conjugate["<>ToString[parametersFA[[i,1]]]<>"] ^= " <> 
                      ToString[parametersFA[[i,1]]]<>"; \n"];
                ];
            ];
          If[Length[parametersFA[[i,2]]]>0,
            
            WriteString[abbrfile,
                "Sq["<>ToString[parametersFA[[i,1]]]<>"[a___]] ^=" <> 
                  ToString[parametersFA[[i,1]]]<>"2[a]; \n"];,
            
            WriteString[abbrfile,
                "Sq["<>ToString[parametersFA[[i,1]]]<>"] ^=" <> 
                  ToString[parametersFA[[i,1]]]<>"2; \n"];
            ];,
          
          If[Length[parametersFA[[i,2]]]>0,
              
              WriteString[abbrfile,
                ToString[parametersFA[[i,1]]]<>" ^= A"<> 
                  ToString[parametersFA[[i,1,1]]]<> "; \n"]; 
              WriteString[abbrfile,
                "Conjugate[A"<>ToString[parametersFA[[i,1,1]]]<>
                  "[a___]] ^= A" <> ToString[parametersFA[[i,1,1]]]<>
                  "C[a]; \n"];
              
              WriteString[abbrfile,
                "Conjugate[A"<>ToString[parametersFA[[i,1,1]]]<>
                  "C[a___]] ^= " <> ToString[parametersFA[[i,1,1]]]<>
                  "[a]; \n"];
              
              WriteString[abbrfile,
                "Sq[A"<>ToString[parametersFA[[i,1,1]]]<>"[a___]] ^= A" <> 
                  ToString[parametersFA[[i,1,1]]]<>"2[a]; \n"];,
              
              WriteString[abbrfile,
                  "Sq["<>ToString[parametersFA[[i,1]]]<>"[a___]] ^=" <> 
                    ToString[parametersFA[[i,1]]]<>"2[a]; \n"];,
              
              WriteString[abbrfile,
                ToString[parametersFA[[i,1]]]<>"] ^= A"<> 
                  ToString[parametersFA[[i,1,1]]]<> "; \n"]; 
              
              WriteString[abbrfile,
                "Conjugate[A"<>ToString[parametersFA[[i,1,1]]]<>"] ^= A" <> 
                  ToString[parametersFA[[i,1,1]]]<>"C; \n"];
              
              WriteString[abbrfile,
                "Conjugate[A"<>ToString[parametersFA[[i,1,1]]]<>"C] ^= " <> 
                  ToString[parametersFA[[i,1,1]]]<>"; \n"];
              
              WriteString[abbrfile,
                "Sq[A"<>ToString[parametersFA[[i,1,1]]]<>"] ^= A" <> 
                  ToString[parametersFA[[i,1,1]]]<>"2; \n"];
              ];
          ];
        i++;
        ];
      
      For[i=1,i\[LessEqual]Length[ListofAllMasses],
        WriteString[abbrfile,
          "Sq["<>ToString[ListofAllMasses[[i]]]<>"[a___]] ^=" <>
            ToString[ListofAllMasses[[i]]]<>"2[a]; \n"];
        i++;];
      
      WriteString[abbrfile,"Cos[ThetaW] ^= CW; \n"];
      WriteString[abbrfile,"Sin[ThetaW] ^= SW; \n"];
      
      
      WriteString[abbrfile,
        "A[x_]:=ToExpression[\"A\"<>ToString[InputForm[x]]]; \n \n \n "];
      
      WriteString[abbrfile,"(* Dependences *) \n \n"];
      WriteString[abbrfile,"Dependences = \n "];
      WriteString[abbrfile, 
        ToString[InputForm[subAlways /.subGreek]] <>"\n \n"];
      
      WriteString[abbrfile,"DependencesOptional = \n "];
      WriteString[abbrfile, 
        ToString[InputForm[subDependences  /.subGreek]] <>"\n \n"];
      
      WriteString[abbrfile,"DependencesNum = \n "];
      WriteString[abbrfile, 
        ToString[InputForm[subNumDependences /.subGreek]] <>"\n \n \n"];
      
      
      WriteString[abbrfile,"(* Masses *) \n \n"];
      WriteString[abbrfile,"MassesSARAH = { \n "];
      For[i=1,i\[LessEqual]Length[massList],
        WriteString[abbrfile,
          "Mass"<>ToString[massList[[i,1,1]]]<>"[generation_] ->" <>
            ToString[InputForm[massList[[i,2]] /. subGreek]]];
        If[i\[Equal]Length[massList],
          WriteString[abbrfile, "\n"];,
          WriteString[abbrfile, ", \n"];
          ];
        i++;];
      WriteString[abbrfile,"}; \n \n \n"];
      
      WriteString[abbrfile,"(* NumericalValues *) \n \n"];
      WriteString[abbrfile,"NumericalValues = \n "];
      WriteString[abbrfile, 
        ToString[InputForm[subNum  /.subGreek]] <>"\n \n \n"];
      
      
      Close[outputfile];
      Close[abbrfile];
      
      
      ];





(* End[] *)